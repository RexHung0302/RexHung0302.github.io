<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>[Hero Of UnderGround 地下城] — 6F SECONDS CHALLENGE 倒數遊戲</title>
    <url>/2019/03/13/20190313/</url>
    <content><![CDATA[<h2 id="成果-程式碼"><a href="#成果-程式碼" class="headerlink" title="成果 &amp; 程式碼"></a>成果 &amp; 程式碼</h2><blockquote>
<p>Demo：<a href="http://rexhung.me/JS-and-Fighter/JS-and-Fighter-6F/index.html">點我</a><br/><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-6F">點我</a></p>
</blockquote>
<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>混了一個禮拜(誤，這次要勇闖6F，記得剛看到這層的時候也是抱著一樣的想法，完蛋了。感覺需要用到大量JS，但時常發現，會弄到的東西，就差不多那一些了(或許是我還太菜？！</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*LW8w2CbsdB4LvSkG_Bl-QQ.png" alt="6F的大魔王- 60秒算數遊戲"></p>
<span id="more"></span>

<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p>由於JS地下城每個BOSS的弱點都不一樣，每一層都要由弱點去進行攻略，本次BOSS的弱點有二 項。</p>
<ul>
<li><p>【特定技術】<strong>遊戲規則</strong><br>  -&gt; 0<del>20 秒為 1位數計算 (5–3)，21</del>40 秒為 2 位數計算 (30*19)，41<del>60 秒為 3 位數計算 (332+312)，加減乘除規則請用隨機產生，不可寫死題目，60 秒內可無限次數答題。<br>  -&gt; 0</del>40 秒答對加一分，41~60 秒答對加五分，答錯扣一分，最多僅能扣到零分</p>
</li>
<li><p>【特定技術】不可設計跳轉頁面，都得在同一頁內部切換頁面完成。</p>
</li>
</ul>
<h3 id="額外條件"><a href="#額外條件" class="headerlink" title="額外條件"></a>額外條件</h3><ol>
<li><p>你攻略此 BOSS 的攻略過程心得</p>
</li>
<li><p>如果你是駭客，是否能透過 console 執行 JS ，逆向工程讓自己在遊戲上獲得 999 分以上</p>
</li>
<li><p>承 2，如何寫出具備資訊安全的 JS 程式？可思考純 JS 解法，或結合後端設計</p>
</li>
<li><p>延伸擴充功能，例如線上排行榜、雙人遊戲</p>
</li>
</ol>
<hr>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2842/1*J72GjK1XH1yErswXhSrEDQ.png" alt="這邊使用display:none方式"></p>
<h2 id="畫面製作"><a href="#畫面製作" class="headerlink" title="畫面製作"></a>畫面製作</h2><p>一開始看見BOSS的弱點<strong>不可設計跳轉頁面</strong>就決定要使用 <strong>display:none</strong> 來做視覺上的頁面切換了，我把它分為三部分。</p>
<ol>
<li>Step1 → before-play</li>
<li>Step2 → play</li>
<li>Step3 → end-game</li>
</ol>
<p><em>這邊還學到了 <strong>marquee</strong> 跑馬燈的方法，每次切新的版面就會花大把時間在美觀上呀…（參數設定請參考<a href="http://www.wibibi.com/info.php?tid=68">這邊</a></em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;marquee 這裡放參數設定&gt;這裡放要跑的文字&lt;/marquee&gt;</span><br></pre></td></tr></table></figure>

<h3 id="後更"><a href="#後更" class="headerlink" title="後更"></a>後更</h3><p>跑馬燈部分有部分瀏覽器不支持及安全性問題，不建議使用，如果需要建議自己使用 JS 寫一個跑馬燈。這邊特別感謝 <a href="https://medium.com/@tweety30119">曾琬庭</a> 大大的留言，她自己寫了一個跑馬燈，<a href="https://codepen.io/OneTeam/pen/LaZLGR">點我</a>查看。</p>
<h3 id="關於開始及setTimeout"><a href="#關於開始及setTimeout" class="headerlink" title="關於開始及setTimeout"></a>關於開始及setTimeout</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">keydown</span>(<span class="keyword">function</span>(<span class="params">e</span>) &#123;   <span class="comment">// body可替換成你要的目標</span></span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">keyCode</span> == <span class="number">32</span>) &#123;          <span class="comment">// 空白鍵的keyCode為32</span></span><br><span class="line">    $(<span class="string">&#x27;.step1-box&#x27;</span>).<span class="title function_">hide</span>();</span><br><span class="line">    $(<span class="string">&#x27;.before-star-box&#x27;</span>).<span class="title function_">show</span>();</span><br><span class="line">    <span class="title function_">beforeStarCount</span>();            <span class="comment">// 進入倒數畫面</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);                               <span class="comment">// e為event</span></span><br><span class="line">$(<span class="string">&#x27;.step1-box&#x27;</span>).<span class="title function_">hide</span>();</span><br><span class="line">$(<span class="string">&#x27;.before-star-box&#x27;</span>).<span class="title function_">show</span>();</span><br><span class="line"><span class="title function_">beforeStarCount</span>();                <span class="comment">// 進入倒數畫面</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);                               <span class="comment">// e為event</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>這邊想到了上次在3F的計算機有人使用了鍵盤監聽的功能，便拿一開始的開始鍵做嘗試啦，關於 <strong>KeyCode</strong> 請<a href="https://dotblogs.com.tw/corner/2009/07/19/9583">點我</a>查看</p>
</blockquote>
<p>因為怕玩家沒有準備還有畫面太單調，我在開始前加入了倒數的畫面，並且使用了 <strong>SetTimeout()</strong> 以及音樂播放。</p>
<p><img src="/images/others/loading.gif" data-original="https://miro.medium.com/max/242/1*ypQxL5d_5KXw4jHkPjB26w.png" alt="倒數畫面"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">beforeStarCount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $(‘.<span class="property">before</span>-star-text’).<span class="title function_">html</span>(starTime);</span><br><span class="line">    $(‘.<span class="property">before</span>-star-box’).<span class="title function_">addClass</span>(‘animated zoomIn’);</span><br><span class="line">  &#125;, <span class="number">500</span>) <span class="comment">// 這邊可以加上自己的CSS或動畫</span></span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  $(<span class="string">&#x27;.before-star-box&#x27;</span>).<span class="title function_">hide</span>(); <span class="comment">// 隱藏倒數畫面</span></span><br><span class="line">  $(<span class="string">&#x27;.step2-box&#x27;</span>).<span class="title function_">show</span>();       <span class="comment">// 顯示遊戲畫面</span></span><br><span class="line">  <span class="title class_">BgMusic</span>[<span class="number">0</span>].<span class="title function_">play</span>();            <span class="comment">// 播放音樂</span></span><br><span class="line">  <span class="title class_">StarGame</span>();                   <span class="comment">// 開始遊戲</span></span><br><span class="line">  <span class="title function_">print_number</span>()                <span class="comment">// 產生第一組隨機數字</span></span><br><span class="line">&#125;, <span class="number">3500</span>)</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="關於setTimeout-及setInterval"><a href="#關於setTimeout-及setInterval" class="headerlink" title="關於setTimeout()及setInterval()"></a>關於setTimeout()及setInterval()</h3><p>很多人認為一個是執行一次，而另一個就是自動重複執行只有這樣的差別，其實更深入的還有其他差別，但是兩種都有結束方式。</p>
<p><strong>setTimeout()</strong> → 執行一次<br/><br><strong>setInterval()</strong> → 循環執行<br/><br><strong>clearTimeout()</strong> → 結束<br/><br><strong>clearInterval()</strong> → 結束<br/></p>
<blockquote>
<p><strong>setTimeout</strong> 所設定的程式碼，會因為目前任務佇列所執行的程式碼而可能發生延誤執行的狀況，<strong>setInterval</strong> 是一開始就標定了執行時間點，當所註冊的函式(<strong>func</strong>)超過執行的時間點，結束時則會馬上觸發(<strong>func</strong>)。</p>
</blockquote>
<p>兩種其實都有延遲，但是 **setTimeout **延遲了少許，在實驗中結束與開始的兼具至少是我們所設定的時間，相關文章請<a href="https://blog.camel2243.com/2016/08/06/javascript-%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3-settimeout-%E8%88%87-setinterval-%E7%9A%84%E4%B8%8D%E5%90%8C%E4%B9%8B%E8%99%95/">點我</a>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> interval = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  count_time--; <span class="comment">// 開始倒數</span></span><br><span class="line">  <span class="keyword">if</span> (count_time &gt; <span class="number">9</span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;.count-time&#x27;</span>).<span class="title function_">html</span>(<span class="string">&#x27;00 :&#x27;</span> + <span class="string">&#x27; &#x27;</span> + count_time);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $(<span class="string">&#x27;.count-time&#x27;</span>).<span class="title function_">html</span>(<span class="string">&#x27;00 :&#x27;</span> + <span class="string">&#x27; 0&#x27;</span> + count_time);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">if</span> (count_time &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">  $(<span class="string">&#x27;.count-time&#x27;</span>).<span class="title function_">html</span>(<span class="string">&#x27;00 : 00&#x27;</span>);</span><br><span class="line">  <span class="title class_">BgMusic</span>[<span class="number">0</span>].<span class="title function_">pause</span>();</span><br><span class="line">  timeout[<span class="number">0</span>].<span class="title function_">play</span>();</span><br><span class="line">  <span class="built_in">clearInterval</span>(interval); <span class="comment">// 清除自動倒數的函式</span></span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<p>遊戲開始後的倒數這邊採用 **setInterval **因為我們要讓他重複執行，進而去抓取時間另外設定其他我們要做的事情。</p>
<hr>
<h3 id="善用Math-round-及Math-random"><a href="#善用Math-round-及Math-random" class="headerlink" title="善用Math.round()及Math.random()"></a>善用Math.round()及Math.random()</h3><p>關於兩者的詳細用法可以<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round">點我</a>參考</p>
<p><strong>Math.round()</strong> → 傳回四捨五入的整數<br/><br><strong>Math.random()</strong> → 傳回介於0~1間的亂數</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 產生隨機數字</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">number</span>(<span class="params">min, max</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min) + min);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>簡單來說就是取你所設定的數字範圍(min~max)，最後加上min是為了不讓他小於一，乘上 <strong>Math.random()</strong> 後在四捨五入，最終取得我們要的區間。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">print_number</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> question_number_1 = <span class="number">1</span>; <span class="comment">// 給要取得的區間一個變數</span></span><br><span class="line">  <span class="keyword">let</span> question_number_2 = <span class="number">1</span>; <span class="comment">// 給要取得的區間一個變數</span></span><br><span class="line">  <span class="comment">// 判斷秒數並抓取隨機不等於零的亂數</span></span><br><span class="line">  <span class="keyword">if</span> (count_time &gt;= <span class="number">40</span>) &#123;</span><br><span class="line">    <span class="comment">// 取個位數</span></span><br><span class="line">    num1 = <span class="number">1</span>;</span><br><span class="line">    num2 = <span class="number">9</span>;</span><br><span class="line">    num3 = <span class="number">1</span>;</span><br><span class="line">    num4 = <span class="number">9</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (count_time &gt;= <span class="number">20</span>) &#123;</span><br><span class="line">    <span class="comment">// 取雙數</span></span><br><span class="line">    num1 = <span class="number">1</span>;</span><br><span class="line">    num2 = <span class="number">99</span>;</span><br><span class="line">    num3 = <span class="number">1</span>;</span><br><span class="line">    num4 = <span class="number">99</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (count_time &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 取三位數</span></span><br><span class="line">    num1 = <span class="number">1</span>;</span><br><span class="line">    num2 = <span class="number">999</span>;</span><br><span class="line">    num3 = <span class="number">1</span>;</span><br><span class="line">    um4 = <span class="number">999</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  question_number_1 = <span class="title function_">number</span>(num1, num2)</span><br><span class="line">  question_number_2 = <span class="title function_">number</span>(num3, num4)</span><br><span class="line">  .</span><br><span class="line">  .</span><br><span class="line">  .</span><br><span class="line">  <span class="comment">// 換上隨機取得的數字及符號</span></span><br><span class="line">  $(<span class="string">&#x27;.question-number-1&#x27;</span>).<span class="title function_">html</span>(question_number_1);</span><br><span class="line">  $(<span class="string">&#x27;.question-number-2&#x27;</span>).<span class="title function_">html</span>(question_number_2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這邊可以狠狠地打擊BOSS的第一個弱點，我的想法是40<del>60s應該是最簡單的一位數(4+4)，20</del>40s是中階二位數(10x20)，最後0~20s是最難的三位數部分(200÷100)，跟題目有點相反，但我想這樣比較符合玩家的流程！？</p>
<p>裡面還能加上自己的判斷，例如 <strong>question_number_1 &lt; question_number_2</strong> 又是減的運算符號的話，就重抓一次，如果<strong>question_number_1 % question_number_2 !&#x3D; 0</strong> 的話就是不整除，一樣再重抓一次。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">gotsign</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> plus = <span class="string">&#x27;+&#x27;</span>;</span><br><span class="line">  <span class="keyword">let</span> minus = <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">  <span class="keyword">let</span> multiplied = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">  <span class="keyword">let</span> divide = <span class="string">&#x27;÷&#x27;</span>;</span><br><span class="line">  <span class="comment">// 隨機抓取四個運算符號</span></span><br><span class="line">  <span class="keyword">let</span> sign = [<span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;÷&#x27;</span>];</span><br><span class="line">  <span class="keyword">let</span> signnumber = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()  <span class="number">4</span>)</span><br><span class="line">  .</span><br><span class="line">  .</span><br><span class="line">  .</span><br><span class="line">  <span class="keyword">return</span> sign[signnumber];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另外運算符號的部分我們一樣用 <strong>Math.random()</strong> 並且採用陣列方式，不得不說陣列真的很好用啊，初學JS幾個月的我應該要更努力專研，有效大幅精簡我的程式碼。</p>
<p>另外我們可以再給運算符號一個變數，例如 **’+’ &#x3D; 1，’－’ &#x3D; 2…等，**讓我們去判斷抓取的是哪一個符號，最後能在最一開始的 <strong>print_number() function</strong> 裡去判斷這個運算符號是不是抓取第二次了。</p>
<h3 id="平均抽取的機率"><a href="#平均抽取的機率" class="headerlink" title="平均抽取的機率"></a>平均抽取的機率</h3><p>因為我們重抓一次的關係，除號和減號可能大幅降低被選中的機率，也可以說是被濾掉了，這邊我們可以再給他另一個變數。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">print_number</span>(<span class="params"></span>) &#123;</span><br><span class="line">  .</span><br><span class="line">  .</span><br><span class="line">  .</span><br><span class="line">  <span class="keyword">if</span> (again == <span class="literal">false</span>) &#123; <span class="comment">// 判斷是不是因為答案為負數或是除不盡而重來的變數</span></span><br><span class="line">    sign = <span class="title function_">gotsign</span>()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    sign = again_sign; <span class="comment">// 這邊裝重來的運算符號</span></span><br><span class="line">    sign_code = again_code; <span class="comment">// 這邊裝重來的運算符號自己取的代號</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 判斷是否前一個數字小於後面以至於相減為負數</span></span><br><span class="line">  <span class="keyword">if</span> (question_number_1 &lt; question_number_2) &#123;</span><br><span class="line">    again = <span class="literal">true</span>;     <span class="comment">// 讓式子去判斷因為我們的條件而重來</span></span><br><span class="line">    again_sign = <span class="string">&#x27;-&#x27;</span>; <span class="comment">// 這邊裝重來的運算符號</span></span><br><span class="line">    again_code = <span class="number">2</span>;   <span class="comment">// 這邊裝重來的運算符號自己取的代號</span></span><br><span class="line">    <span class="title function_">print_number</span>()</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 判斷是否前一個數字小於後面以至於除不盡及相除不等於零</span></span><br><span class="line">  <span class="keyword">if</span> (question_number_1 &lt; question_number_2 || question_number_1 % question_number_2 != <span class="number">0</span>) &#123;</span><br><span class="line">    again = <span class="literal">true</span>;</span><br><span class="line">    again_sign = <span class="string">&#x27;÷&#x27;</span>; <span class="comment">// 這邊裝重來的運算符號</span></span><br><span class="line">    again_code = <span class="number">4</span>;   <span class="comment">// 這邊裝重來的運算符號自己取的代號</span></span><br><span class="line">    <span class="title function_">print_number</span>()</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  .</span><br><span class="line">  .</span><br><span class="line">  .</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="監聽事件"><a href="#監聽事件" class="headerlink" title="監聽事件"></a>監聽事件</h3><p>送出答案的部分和我們設定開始的按鈕一模一樣，關於 <strong>KeyCode</strong> 請再次<a href="https://dotblogs.com.tw/corner/2009/07/19/9583">點我</a>查看。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*Ig8nZ5xIJVhP7t9DuIn8ow.png" alt="關於分數那點事"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">keydown</span>(<span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="comment">// 這邊加上第二個enter_keydown防止在其他頁面按下Enter</span></span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">keyCode</span> == <span class="number">13</span> &amp;&amp; enter_keydown) &#123; </span><br><span class="line">    <span class="comment">// 判斷分數的位數</span></span><br><span class="line">    <span class="keyword">if</span> ($(<span class="string">&#x27;.answer-input&#x27;</span>).<span class="title function_">val</span>() == answer) &#123;</span><br><span class="line">      <span class="comment">// 判斷時間後答對加分</span></span><br><span class="line">      <span class="keyword">if</span> (count_time &gt;= <span class="number">20</span>) &#123;</span><br><span class="line">      score++; <span class="comment">//答對加一分</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (count_time &gt; <span class="number">0</span> &amp;&amp; count_time &lt; <span class="number">20</span>) &#123;</span><br><span class="line">      <span class="comment">// 小於20秒答對加五分</span></span><br><span class="line">      score += <span class="number">5</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    <span class="comment">// 答錯的部分</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (count_time &gt;= <span class="number">0</span> &amp;&amp; score &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      score--;</span><br><span class="line">        <span class="keyword">if</span> (score &gt; <span class="number">0</span> &amp;&amp; score &lt; <span class="number">10</span>) &#123;</span><br><span class="line">          $(<span class="string">&#x27;.score-box&#x27;</span>).<span class="title function_">html</span>(<span class="string">&#x27;00&#x27;</span> + score);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">9</span> &amp;&amp; score &lt; <span class="number">100</span>) &#123;</span><br><span class="line">          $(<span class="string">&#x27;.score-box&#x27;</span>).<span class="title function_">html</span>(<span class="string">&#x27;0&#x27;</span> + score);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          $(<span class="string">&#x27;.score-box&#x27;</span>).<span class="title function_">html</span>(<span class="string">&#x27;000&#x27;</span>);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*olzluuj70vBJSD9GD4Y2GA.png" alt="999大神(其實自己偷改的"></p>
<p>最後因為結束的頁面 <strong>Class</strong> 跟我分數欄的 Class命名一樣，所以不需要特別去做設定，這邊深刻體會到命名的重要性。<br>而按下重玩的案件就把所有的變數回到原樣就好了，一切就會重來，而有考慮到要弄個線上排行榜出來，不過我想那個需要動到資料庫(或許我太菜？！)，想想等以後比較熟悉了再回過頭來，我想那時候在看這時候自己寫的文章還有Code都會暈倒吧哈。</p>
<hr>
<h3 id="關於資訊安全"><a href="#關於資訊安全" class="headerlink" title="關於資訊安全"></a>關於資訊安全</h3><p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*CbwiYmh2MNeSVXvIBANCTA.png" alt="資訊安全"></p>
<blockquote>
<p><em>我們都聽說過 XSS（Cross Site Script，跨站點腳本編制，也稱為跨站腳本攻擊），指的是攻擊者向合法的 Web 頁面中插入惡意腳本代碼（通常是 HTML 代碼和 JavaScript 代碼）然後提交請求給服務器，隨即服務器響應頁面即被植入了攻擊者的惡意腳本代碼，攻擊者可以利用這些惡意腳本代碼進行會話劫持等攻擊…詳<a href="https://www.jb51.net/article/71381.htm">全文</a></em></p>
</blockquote>
<p>關於資訊安全的部分，菜雞如我其實一竅不通，不過我們秉持著不懂就爬文的精神，慢慢去增廣見聞。<strong>JavaScript</strong> 其實會被攻擊也會被劫持，攻擊者不免都是要取得更多權限或取得個資等等，而我們能做的即是預防勝過治療，例如自動化檢測 <strong>JavaScript</strong> 安全漏洞，或是 <strong>JavaScript</strong> 代碼加密，甚至使用 <strong>Dojo、JQuery</strong> 等等已經壓縮代碼的第三方 <strong>JavaScript</strong> 代碼庫。<br>關於更多JS安全請<a href="https://www.cnblogs.com/yelongsan/p/6291956.html">點我</a>前往，對於資訊安全幼幼班的我會再努力吸取新知更新並補上的。</p>
<hr>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*X_DO7XO1fUE3YJ6Lz2W-lQ.png" alt="作品出爐啦"></p>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>這次算是免強通關吧，在通關前一樣想著大概又要掛在這層了的想法，不過勇者就是要想盡一切方法通關呀！我想這次讓我成長更多的除了更熟悉 <strong>JavaScript</strong> 之外，文章也慢慢精簡到重要部分，希望能在近期達到精簡扼要的地步，其實這篇文章打第二次了，暈倒，這邊沒有幫我儲存到…看來我對這個網站還是苦手啊。</p>
<p>另外每次不懂每次爬文就是一次成長，看了看其他人在看自己還是有好大一截需要努力，除了繼續努力之外還是要列出檢討的地方，然後朝下一關繼續加油，完畢。</p>
<ul>
<li><p>JS</p>
</li>
<li><p>邏輯</p>
</li>
<li><p>文筆</p>
</li>
<li><p><del><em>體重</em></del></p>
</li>
</ul>
<hr>
<h2 id="我的其他範例"><a href="#我的其他範例" class="headerlink" title="我的其他範例"></a>我的其他範例</h2><ul>
<li><p><strong>Hero Of UnderGround — 1F Multiplicatio 九九乘法表</strong></p>
<blockquote>
<p>Demo：<a href="http://rexhung.me/JS-and-Fighter/JS-and-Fighter-1F/index.html">點我</a><br/><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-1F">點我</a></p>
</blockquote>
</li>
<li><p><strong>Hero Of UnderGround — 2F Clock 時鐘</strong></p>
<blockquote>
<p>Demo：<a href="http://rexhung.me/JS-and-Fighter/JS-and-Fighter-2F/clock.html">點我</a><br/><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-2F">點我</a></p>
</blockquote>
</li>
<li><p><strong>Hero Of UnderGround — 3F Calculator 計算機</strong></p>
<blockquote>
<p>Demo：<a href="http://rexhung.me/JS-and-Fighter/JS-and-Fighter-3F/index.html">點我</a><br/><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-3F">點我</a></p>
</blockquote>
</li>
<li><p><strong>Hero Of UnderGround — 4F World Clock 各國時區</strong></p>
<blockquote>
<p>Demo：<a href="http://rexhung.me/JS-and-Fighter/JS-and-Fighter-4F/index.html">點我</a><br/><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-4F">點我</a><br/><br>Blog：<a href="https://medium.com/@zehung860486/hero-of-underground-%E5%9C%B0%E4%B8%8B%E5%9F%8E-4f-world-clock-%E5%90%84%E5%9C%8B%E6%99%82%E5%8D%80-2356786f3dfa">點我</a></p>
</blockquote>
</li>
<li><p><strong>Hero Of UnderGround — 5F AQI 全台空氣指標儀表板</strong></p>
<blockquote>
<p>Demo：<a href="http://rexhung.me/JS-and-Fighter/JS-and-Fighter-5F/index.html">*點我</a><em><br/><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-5F">*點我</a><br/><br>Blog：<a href="https://medium.com/@zehung860486/hero-of-underground-%E5%9C%B0%E4%B8%8B%E5%9F%8E-5f-aqi-%E5%85%A8%E5%8F%B0%E7%A9%BA%E6%B0%A3%E6%8C%87%E6%A8%99%E5%84%80%E8%A1%A8%E6%9D%BF-c060fbe58454">點我</a></em></p>
</blockquote>
</li>
</ul>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><a href="https://mtwmt.github.io/blog/api_cors_error/">Mandy大神的Bolg</a> — JS地下城：6F-60秒算數遊戲</li>
<li><a href="http://www.w3school.com.cn/">W3school 教學網站</a></li>
<li><a href="https://blog.camel2243.com/">camel ‘s blog</a> — 深入了解 setTimeout() 與 setInterval() 的不同之處</li>
<li><a href="http://www.victsao.com/blog/81-javascript/273-javascript-math-random">維克的煩惱</a> — Math.random及Math.round的用法</li>
<li><a href="https://www.cnblogs.com/yelongsan/p/6291956.html">蒂其之死 </a>— 關於JS安全</li>
<li><a href="https://www.ifreesite.com/gbk-big5-gb2312-utf8.htm">繁簡轉換</a></li>
<li><a href="https://www.gamer.com.tw/index2.php?ad=N"><em>巴哈姆特 舒壓用</em></a></li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>前端</category>
        <category>HeroOfUnground[地下城]</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
        <tag>HexSchool</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hero Of UnderGround 地下城] — 4F World Clock 各國時區</title>
    <url>/2019/03/05/20190305/</url>
    <content><![CDATA[<h2 id="成果-程式碼"><a href="#成果-程式碼" class="headerlink" title="成果 &amp; 程式碼"></a>成果 &amp; 程式碼</h2><blockquote>
<p>Demo：<a href="http://rexhung.me/JS-and-Fighter/JS-and-Fighter-4F/index.html">點我</a><br><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-4F">點我</a></p>
</blockquote>
<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>三個月前開始了從零開始的學Code之路，碰了一陣子的JS，大概上個月撞見了Udemy然後買了幾個課程，加上一直都有再關注六角學院，偶然間發現了『新手JS地下城』，剛好最近在練習JS，心想這不正是上天的旨意嗎？！</p>
<p>最初以為第一層大概都過不了了吧，結果就晃啊晃，騙吃騙喝到了4F。</p>
<p><img src="/images/others/loading.gif" data-original="https://miro.medium.com/proxy/1*AGCVXD1qKHDvsr_p7KFWyA.png" alt="廢話太多了(誤"></p>
<span id="more"></span>

<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p><img src="/images/others/loading.gif" data-original="https://miro.medium.com/proxy/1*x_3tUpA6H33gJlh7_fXAhQ.png" alt="Clock Img"></p>
<p>由於JS地下城每個BOSS的弱點都不一樣，每一層都要由弱點去進行攻略，本次BOSS的弱點有三項。</p>
<ul>
<li><p>【特定技術】僅能使用原生 JS 開始，不能使用套件</p>
</li>
<li><p>【特定技術】特別注意必須用 JS 處理各國時區</p>
</li>
<li><p>【書寫能力】請寫一篇 BLOG 來介紹你的挑戰過程，並介紹 JavaScript 如何提供 GMT、UTC 時區語法，以及何謂 TimeStamp。</p>
</li>
</ul>
<p><em>某些小地方偷偷用了Jquery (逃</em></p>
<hr>
<h3 id="使用-toLocaleString-Method"><a href="#使用-toLocaleString-Method" class="headerlink" title="使用 toLocaleString() Method"></a>使用 <a href="http://www.w3school.com.cn/jsref/jsref_toLocaleString_array.asp">toLocaleString() Method</a></h3><blockquote>
<p><em>由於剛接觸JS不久，好多東西都是第一次接觸，看了很多範例，爬了無數的文後決定使用 toLocaleString。</em></p>
</blockquote>
<ul>
<li>設定一個變數來接，然後再帶入各地區的值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">GotTime</span> = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleString</span>(location, </span><br><span class="line">&#123; <span class="attr">timeZone</span>: location2&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>設定地區的變數帶入location及location2</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SetTime</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable constant_">TW</span> = <span class="title class_">MyClock</span>(<span class="string">&#x27;zh-TW&#x27;</span>, <span class="string">&#x27;Asia/Taipei&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> <span class="variable constant_">BK</span> = <span class="title class_">MyClock</span>(<span class="string">&#x27;zh-TW&#x27;</span>, <span class="string">&#x27;Asia/Bangkok&#x27;</span>);</span><br><span class="line">  ...等等</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>基本上會出現這樣的結果 → 2019&#x2F;2&#x2F;27 下午2:56:36</p>
<p>為了統一我把第一個變數都設定為 zh-TW 所以前面都是下午</p>
<ul>
<li>修改時間為24小時制 &amp; 取得需要的部分</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyClock</span>(<span class="params">location, location2</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="title class_">GotTime</span> = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleString</span>(location, </span><br><span class="line">  &#123; <span class="attr">timeZone</span>: location2, <span class="attr">hour12</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">GotTime</span>.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在第二個變數後加上 <strong>hour12: false</strong> 改為24小時制，另外我先把他們先變成陣列，之後方便再重新排列。</p>
<hr>
<h3 id="善用-split-Method-slice-Method"><a href="#善用-split-Method-slice-Method" class="headerlink" title="善用 split() Method &amp; slice Method"></a>善用 <a href="http://www.w3school.com.cn/jsref/jsref_split.asp">split() Method</a> &amp; <a href="http://www.w3school.com.cn/jsref/jsref_slice_array.asp">slice Method</a></h3><ul>
<li>重新排列時間 &amp; 月份</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SetDate</span>(<span class="params">location</span>) &#123;</span><br><span class="line">  <span class="comment">// 設定月份英文</span></span><br><span class="line">  <span class="keyword">let</span> months = [<span class="string">&#x27;JAN&#x27;</span>, <span class="string">&#x27;FEB&#x27;</span>, <span class="string">&#x27;MAR&#x27;</span>, <span class="string">&#x27;APR&#x27;</span>, <span class="string">&#x27;MAY&#x27;</span>, <span class="string">&#x27;JUN&#x27;</span>, <span class="string">&#x27;JUL&#x27;</span>, <span class="string">&#x27;AUG&#x27;</span>, <span class="string">&#x27;SEP&#x27;</span>, <span class="string">&#x27;OCT&#x27;</span>, <span class="string">&#x27;NOV&#x27;</span>, <span class="string">&#x27;DEC&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 設定日期並重新排列順序及修改成英文月份</span></span><br><span class="line">  <span class="keyword">let</span> date = location.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> date2 = date[<span class="number">2</span>] + <span class="string">&#x27; &#x27;</span> + months[date[<span class="number">1</span>] - <span class="number">1</span>] + <span class="string">&#x27; &#x27;</span> + date[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">return</span> date2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這邊先設定月份的變數，然後使用 split(’&#x2F;’) 把時間變成 2019227 ，然後再重新排列時間，另外 <strong>（months[date[1] — 1] ）</strong>，因為陣列是從0開始的，不扣會跑到下個月去。</p>
<p>p.s：這邊的 location 跟一開始的 location 及 location2 並沒有關係！</p>
<p>時間重新排列後會出現結果 → <strong>27 FEB 2019</strong></p>
<ul>
<li>設定變數帶入 location</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SetTime</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable constant_">BK_D</span> = <span class="title class_">SetDate</span>(<span class="variable constant_">BK</span>[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">let</span> <span class="variable constant_">TW_D</span> = <span class="title class_">SetDate</span>(<span class="variable constant_">TW</span>[<span class="number">0</span>]);</span><br><span class="line">  ...等等</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>這個 function 和上面那個是同一個，這樣才能抓到我們BK跟TW變數的值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;.NEW-YORK-Time&#x27;</span>).<span class="title function_">html</span>(<span class="variable constant_">TW</span>[<span class="number">1</span>].<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">5</span>));</span><br><span class="line">  </span><br><span class="line">$(<span class="string">&#x27;.TW-date&#x27;</span>).<span class="title function_">html</span>(<span class="variable constant_">TW_D</span>);</span><br></pre></td></tr></table></figure>

<p>最後再用html替換掉原本預設的字就行了，這邊也需要用到 slice(star,end) 抓取我們重新排列後需要的時間。</p>
<p><img src="/images/others/loading.gif" data-original="https://miro.medium.com/proxy/1*hwiv2QRKv21TpJAjJIenhA.png" alt="Finish Img"></p>
<hr>
<h3 id="何謂-GMT、UTC-時區-？-引用泛科知識"><a href="#何謂-GMT、UTC-時區-？-引用泛科知識" class="headerlink" title="何謂 GMT、UTC 時區 ？ 引用泛科知識"></a>何謂 GMT、UTC 時區 ？ <a href="https://pansci.asia/archives/84978">引用泛科知識</a></h3><ul>
<li><p><strong>GMT 格林威治平時 （Greenwich Mean Time）</strong></p>
<blockquote>
<p><em>這是一個大家都熟悉且習慣了的名字，至1884年確立，1924年開始向全世界播報時間。</em><br><em>觀察者隨時監控太陽在天空的位置，把每天最高的仰角記錄下來，這個時間點稱作「過中天」。一般理解為兩次的「過中天」相隔等於24小時，也就是一天，但是一年之中會有「比較長的一天」與「比較短的一天」。</em><br><em>所以觀測者必須要至少連續觀測一年，然後求取 365 個長度不一的「天」，再把他們全部平均後，得到固定的一天長度，之後再細分成時、分、秒等單位。這個就是GMT。</em></p>
</blockquote>
</li>
<li><p><strong>UTC 世界時（Universal Time Coordinated）</strong></p>
<blockquote>
<p><em>利用宇宙中穩定一致的無線電波源週期性的訊號，搭配電波源抵達地球時觀測的角度，直接計算地球的自轉與公轉速率，再以此計算一年、一天、時分秒的平均長度。</em><br><em>但是地球的自轉正在緩慢減速，所以GMT的一秒會越來越久，UTC總會有一天超過它，所以管理UTC的機構IERS(International Earth Rotation and Reference Systems Service)選擇加入閏秒。</em></p>
</blockquote>
</li>
<li><p><strong>結論</strong></p>
</li>
</ul>
<p>兩個都是「長時間尺度下的平均太陽日」，但是遵循國際標準，台灣的時區會寫成「UTC+8」。正常下我們不會去在意到一秒的差距，用UTC就對了！</p>
<h3 id="WTX-Timestamp-UNIX-Timestamp、POSIX-Timestamp-？"><a href="#WTX-Timestamp-UNIX-Timestamp、POSIX-Timestamp-？" class="headerlink" title="WTX Timestamp ( UNIX Timestamp、POSIX Timestamp ) ？"></a>WTX Timestamp ( UNIX Timestamp、POSIX Timestamp ) ？</h3><blockquote>
<p><em>被定義在 <strong>1970年1月1日（00:00:00 GMT）</strong> 的時間，其實就是UNIX生產的年代，那時候的工程師們把那天定義為起始點。</em><br><em>產出來的數字會以秒數表現，1551253485 例如這樣，這是從1970年1月1日到這天的秒數。</em></p>
</blockquote>
<ul>
<li><strong>那我要怎麼轉換？</strong></li>
</ul>
<p><a href="https://unixtime.51240.com/">點我進入神奇的地方</a></p>
<p><a href="https://shazi.info/unix-timestamp-%E6%99%82%E9%96%93%E6%A0%BC%E5%BC%8F%E8%BD%89%E6%8F%9B-%E7%AD%86%E8%A8%98/">各種語言轉換方式</a></p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>這次練習到了不只是如何抓取時間，還學到了怎麼用Function去簡化我的程式碼，達到簡潔的效果，另外自覺陣列跟Function還有邏輯的部分是自己需要加強的。</p>
<p>最後我想最需要加強的是文筆啦啦啦，第一次寫Blog，覺得這邏輯比JS邏輯還難，總想著要簡明扼要打出重點，結果就屁話一堆la。</p>
<p>最後簡單列出需要檢討的地方，然後朝下一關邁進，完畢。</p>
<ul>
<li><p>JS</p>
</li>
<li><p>邏輯</p>
</li>
<li><p><del><em>體重</em></del></p>
</li>
</ul>
<hr>
<h2 id="我的其他範例"><a href="#我的其他範例" class="headerlink" title="我的其他範例"></a>我的其他範例</h2><ul>
<li><p><strong>Hero Of UnderGround — 1F Multiplicatio 九九乘法表</strong></p>
<blockquote>
<p>Demo：<a href="http://rexhung.me/JS-and-Fighter/JS-and-Fighter-1F/index.html">點我</a><br><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-1F">點我</a></p>
</blockquote>
</li>
<li><p><strong>Hero Of UnderGround — 2F Clock 時鐘</strong></p>
<blockquote>
<p>Demo：<a href="http://rexhung.me/JS-and-Fighter/JS-and-Fighter-2F/clock.html">點我</a><br><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-2F">點我</a></p>
</blockquote>
</li>
<li><p><strong>Hero Of UnderGround — 3F Calculator 計算機</strong></p>
<blockquote>
<p>Demo：<a href="http://href="http//rexhung.me/JS-and-Fighter/JS-and-Fighter-3F/index.html">點我</a><br><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-3F">點我</a></p>
</blockquote>
</li>
</ul>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><a href="https://noob.tw/js-timezone/">Noob’s Space 4F前端之碑主的Blog</a></li>
<li><a href="http://www.w3school.com.cn/">W3school 教學網站</a></li>
<li><a href="https://pansci.asia/archives/84978">泛科知識</a></li>
<li><a href="https://unixtime.51240.com/">便民查詢網 時間轉換</a></li>
<li><a href="https://shazi.info/unix-timestamp-%E6%99%82%E9%96%93%E6%A0%BC%E5%BC%8F%E8%BD%89%E6%8F%9B-%E7%AD%86%E8%A8%98/">MR.沙先生Blog 時間格式轉換方法</a></li>
<li><a href="https://imgur.com/">imgur 圖片上傳網站</a></li>
<li><a href="https://www.gamer.com.tw/index2.php?ad=N"><em>巴哈姆特 舒壓用</em></a></li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>前端</category>
        <category>HeroOfUnground[地下城]</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
        <tag>HexSchool</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hero Of UnderGround 地下城] — 5F AQI 全台空氣指標儀表板</title>
    <url>/2019/03/06/20190306/</url>
    <content><![CDATA[<h2 id="成果-程式碼"><a href="#成果-程式碼" class="headerlink" title="成果 &amp; 程式碼"></a>成果 &amp; 程式碼</h2><blockquote>
<p>Demo：<a href="https://rexhung0302.github.io/JS-and-Fighter/JS-and-Fighter-5F/index.html">點我</a><br><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-5F">點我</a></p>
</blockquote>
<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>超級菜鳥這次來挑戰第五層的BOSS了，這次必須串接API取的資料後Show在網頁上，對剛接觸JS不久以及根本沒碰過API的我是一大挑戰啊．．．</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*C_d5oteo5a-qnOn5vQIZ5A.png"></p>
<span id="more"></span>

<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p>由於JS地下城每個BOSS的弱點都不一樣，每一層都要由弱點去進行攻略，本次BOSS的弱點有三項。</p>
<blockquote>
<p>第四點是自己加上的（笑</p>
</blockquote>
<ul>
<li><p>【特定技術】必須使用 AJAX 技術串接資料 API，不可直些寫死資料在變數上。</p>
</li>
<li><p>【特定技術】上方切換城市(高雄、台北)後，下方會切換該城市的各地區。</p>
</li>
<li><p>【解決問題】糟糕，BOSS 使用屏蔽魔法將 API 出處移除了，身為勇者的你必須查出 API 的下落，才能順利擊敗此 BOSS。什麼，你說會有 CORS 問題？嗯… 身為勇者的你，一定可以找各種服務來解決的，畢竟你是「勇者」嘛 （燦笑。</p>
</li>
<li><p>【書寫能力】請寫一篇 BLOG 來介紹你的挑戰過程，你攻略此 BOSS 的攻略過程心得，底層 XMLHttpRequest、Fetch API 的差異，使用 Promise 來優化 XMLHttpRequest JAX，探討 CORS 問題解決方案。</p>
</li>
</ul>
<hr>
<h3 id="尋找API？"><a href="#尋找API？" class="headerlink" title="尋找API？"></a>尋找API？</h3><p>作為第一次尋找API的我很幸運的，收尋了關鍵字就出現了，一切都要感謝谷歌大神（跪</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*_nIRWPoTOMEStGHFQ0WW1A.png"></p>
<p>進入後只需要再收尋欄位輸入關鍵字，或者到下面的各種標籤點擊搜尋就能找到了！</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2802/1*PoQuF-WU9g7kRQ2NJZfFrw.png"></p>
<hr>
<h3 id="關於CORS-XMLHttpRequest-Promise-優化相關"><a href="#關於CORS-XMLHttpRequest-Promise-優化相關" class="headerlink" title="關於CORS &amp; XMLHttpRequest &amp; Promise 優化相關"></a>關於CORS &amp; XMLHttpRequest &amp; Promise 優化相關</h3><blockquote>
<p><em>跨來源資源共用（Cross-Origin Resource Sharing (<a href="https://developer.mozilla.org/en-US/docs/Glossary/CORS">CORS</a>)）是一種使用額外 <a href="https://developer.mozilla.org/en-US/docs/Glossary/HTTP">HTTP</a> 標頭令目前瀏覽網站的<a href="https://developer.mozilla.org/en-US/docs/Glossary/user_agent">使用者代理</a>取得存取其他來源（網域）伺服器特定資源權限的機制。當使用者代理請求一個不是目前文件來源 — — 例如來自於不同網域（domain）、通訊協定（protocol）或通訊埠（port）的資源時，會建立一個<strong>跨來源 HTTP 請求（cross-origin HTTP request）</strong>。</em></p>
</blockquote>
<p>這邊引用<a href="https://developer.mozilla.org/zh-TW/docs/Web/HTTP/CORS">MDN Web docs</a>的文章，簡單來說，因為安全考量，API端如果沒有開啟CORS的話，我們把做好的網頁發布到公開網站上，資料是沒辦法撈到的。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*TRJ7tHbIwPx37fLfwA3kaA.png" alt="CORS跨網域問題"></p>
<p>處理的方法有幾種，一種是透過後端，利用伺服器端程式來繞過此問題，但是必須自己架設一個伺服器，亦或者使用國外免費架設伺服器，但是這邊採取其他方式。</p>
<hr>
<h3 id="前人種樹後人乘涼"><a href="#前人種樹後人乘涼" class="headerlink" title="前人種樹後人乘涼"></a>前人種樹後人乘涼</h3><p>感謝各種前端大神的幫忙，像是<a href="https://medium.com/pvt5r486/javascript-%E5%9C%B0%E4%B8%8B%E5%9F%8E-lv-5-%E5%85%A8%E5%8F%B0%E7%A9%BA%E6%B0%A3%E6%8C%87%E6%A8%99%E5%84%80%E8%A1%A8%E6%9D%BF-b4f163832ff">pvt5r486大大</a>的<a href="https://medium.com/pvt5r486/javascript-%E5%9C%B0%E4%B8%8B%E5%9F%8E-lv-5-%E5%85%A8%E5%8F%B0%E7%A9%BA%E6%B0%A3%E6%8C%87%E6%A8%99%E5%84%80%E8%A1%A8%E6%9D%BF-b4f163832ff">文章</a>內就提到使用別人建立好的服務，例如這個：</p>
<ul>
<li><a href="https://cors-anywhere.herokuapp.com/http://opendata2.epa.gov.tw/AQI.json">https://cors-anywhere.herokuapp.com/</a> + API網址</li>
</ul>
<p>但是這個方法我在使用上發現速度似乎載入的比較慢，有時還有撈不到資料的問題</p>
<p>最後我使用了另一種大神推薦的方法，那就是 <strong>Google App Script！</strong></p>
<h3 id="使用-Google-Apps-Script-做中繼點取得跨網域API資料"><a href="#使用-Google-Apps-Script-做中繼點取得跨網域API資料" class="headerlink" title="使用 Google Apps Script 做中繼點取得跨網域API資料"></a>使用 Google Apps Script 做中繼點取得跨網域API資料</h3><p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*6REbhhMsdIomME9-ERxX1A.png"></p>
<p>首先必須要有一個google帳號，然後進入雲端硬碟，點擊左上角新增，第一次會看不到 Google App Script 這個程式，必須點擊最下面的連結更多應用程式。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*93mwtT1S4qrA7sj-M1Je8A.png" alt="點擊 +連線 新增APP Script"></p>
<p>然後再裡面貼上一段程式碼：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doGet</span>(<span class="params">e</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> param = e.<span class="property">parameter</span>;</span><br><span class="line">  <span class="keyword">var</span> url = param.<span class="property">url</span>;</span><br><span class="line">  <span class="keyword">var</span> response = <span class="title class_">UrlFetchApp</span>.<span class="title function_">fetch</span>(<span class="built_in">decodeURIComponent</span>(url),&#123;</span><br><span class="line">    <span class="attr">headers</span>: &#123; <span class="string">&quot;Content-type&quot;</span> : <span class="string">&quot;application/json&quot;</span> &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">var</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(response.<span class="title function_">getContentText</span>());</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">ContentService</span>.<span class="title function_">createTextOutput</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)).<span class="title function_">setMimeType</span>(<span class="title class_">ContentService</span>.<span class="property">MimeType</span>.<span class="property">JSON</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li>接著點下 <strong>發布 → 部署為網絡應用程式</strong></li>
</ul>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*TFwa54Q4mXTHL0ZfiaO0mQ.png"></p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*YCjPB7cWbf6OSPbxZSZ36Q.png" alt="這邊很重要，記得選 任何人，甚至是匿名使用者 不然一樣有跨網域問題"></p>
<blockquote>
<p>部署方式為：<em>部署的網址?參數名稱&#x3D; API 網址</em></p>
</blockquote>
<p>這邊這樣說我也是理解了大半天，我資質愚鈍呀…</p>
<p>簡單說 <strong>部署的網址?</strong> 不用理它參數名稱就是 <strong>url</strong> ，你只需要在後面輸入 <strong>url&#x3D;API 網址</strong>，之後他會產出一組網址給你 把那組網址跟你的這串 <strong>url&#x3D;API</strong> 網址 結合後就可以使用了。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*eiuK_we3XZw6TuH_eJHKUg.png" alt="就是這串啦～"><em>就是這串啦～</em></p>
<p>留下這串網址之後，以後只要有API的問題，加上他就對啦。</p>
<blockquote>
<p>這邊感謝<a href="https://mtwmt.github.io/blog/api_cors_error/">Mandy大神</a>還有<a href="https://medium.com/pvt5r486/javascript-%E5%9C%B0%E4%B8%8B%E5%9F%8E-lv-5-%E5%85%A8%E5%8F%B0%E7%A9%BA%E6%B0%A3%E6%8C%87%E6%A8%99%E5%84%80%E8%A1%A8%E6%9D%BF-b4f163832ff">prt5r486大神</a>的<a href="https://mtwmt.github.io/blog/api_cors_error/">文章</a></p>
</blockquote>
<hr>
<h3 id="XMLHttpRequest-和-Fetch-API-差異"><a href="#XMLHttpRequest-和-Fetch-API-差異" class="headerlink" title="XMLHttpRequest 和 Fetch API 差異"></a>XMLHttpRequest 和 Fetch API 差異</h3><p>一般Ajax指的就是XMLHttpRequest(XHR)，而Fetch API 是基于 Promise 設計的，後面我們會提到 Promise。</p>
<p><strong>有興趣可以<a href="https://zhuanlan.zhihu.com/p/24594294">點我</a>看文章</strong></p>
<blockquote>
<p><em>XMLHttpRequest 本質上但並不是一個設計優良的 API： + 不符合關注分離（Separation of Concerns）的原則 + 配置和調用方式非常混亂 + 使用事件機制來跟蹤狀態變化 + 基於事件的異步模型沒有現代的 Promise，generator&#x2F;yield，async&#x2F;await 友好 。<br>Fetch API 旨在修正上述缺陷，它提供了與 HTTP 語義相同的 JS 語法，簡單來說，它引入了 fetch() 這個實用的方法來獲取網絡資源。</em></p>
</blockquote>
<h3 id="Promise-優化-XMLHttpRequest-JAX"><a href="#Promise-優化-XMLHttpRequest-JAX" class="headerlink" title="Promise 優化 XMLHttpRequest JAX"></a>Promise 優化 XMLHttpRequest JAX</h3><p>再接觸前端部分之前，有讀過PHP的書，裡面也有用到Ajax，在朋友的建議下，想著第一次串接API不如就直接學習AXIOS，因為他本身也有 Promise 功能了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getapi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">  xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="variable constant_">API</span>, <span class="literal">true</span>); <span class="comment">// API取好名字後在全域變數宣告後帶入網址</span></span><br><span class="line">  xhr.<span class="title function_">send</span>(<span class="literal">null</span>);</span><br><span class="line">  xhr.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">400</span>) &#123;</span><br><span class="line">          <span class="title function_">esolve</span>(xhr.<span class="property">response</span>);**</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(<span class="string">&quot;取得資料失敗: &quot;</span> + xhr.<span class="property">status</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  promise.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(res);</span><br><span class="line">    <span class="title function_">alldata</span>(); <span class="comment">// 成功後讓他進入下一個function**</span></span><br><span class="line">  &#125;);</span><br><span class="line">  promise.<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error); <span class="comment">// api讀取失敗時console.log</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有關Axios可以上官方<a href="https://github.com/axios/axios">GitHub</a>查看<br>因為以前完全沒接觸過Ajax及Axios，在查看了各位大神的文章後，<br>Promise的架構大致如下。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (...) &#123;</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;);</span><br><span class="line">promise.<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>而白話一點就是可以理解成式子的可能為：</p>
<blockquote>
<p>承諾 <strong>被兌現 (fulfilled)</strong><br>→用 resolve() 來兌現<br>承諾 <strong>被打破 (rejected)</strong><br>→用 reject() 來表示失敗<br>承諾 <strong>一直沒有回應 (pending)</strong><br>→一直沒有回傳</p>
</blockquote>
<p>而在這些承諾之後：</p>
<blockquote>
<p>承諾被兌現 就 <strong>繼續做預定好的下一件事</strong><br>使用 .then()<br>承諾被打破 就 <strong>根據這個原因去做對應的動作</strong><br>使用 .catch()，或是 .then 的第二個參數<br>承諾 一直都沒有回應 就 <strong>繼續等下去</strong></p>
</blockquote>
<p><strong>resolve() 運行 → .then 承諾被兌現</strong><br><br><strong>reject() 運行 → .catch 承諾失敗</strong></p>
<p>然而因為我們使用 XMLHttpRequest() 取得結果會是字串，必須使用<strong>JSON.parse() 轉成 JSON 才能使用。</strong></p>
<hr>
<h3 id="善用-filter-Method-點我前往"><a href="#善用-filter-Method-點我前往" class="headerlink" title="善用 filter() Method 點我前往"></a>善用 filter() Method <a href="http://www.w3school.com.cn/jquery/traversing_filter.asp">點我前往</a></h3><p>參考各位<a href="https://medium.com/pvt5r486/javascript-%E5%9C%B0%E4%B8%8B%E5%9F%8E-lv-5-%E5%85%A8%E5%8F%B0%E7%A9%BA%E6%B0%A3%E6%8C%87%E6%A8%99%E5%84%80%E8%A1%A8%E6%9D%BF-b4f163832ff">大神文章</a>後，了解了基本方法如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;lemon&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;watermelon&#x27;</span>, <span class="string">&#x27;grape&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> result = arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item, index, array);</span><br><span class="line">  <span class="keyword">return</span> item;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>item — 當前是 arr 陣列中的哪一個值，如「apple」</p>
</li>
<li><p>index — 這個值在 arr 陣列中的索引，如「apple」的索引為 0</p>
</li>
<li><p>array — 這個陣列的內容</p>
</li>
</ul>
<pre><code class="language-javascript">function* alldata() &#123;
  let* result = data.filter((*item*, *index*, *array*)    =&gt; &#123;
      if ($.inArray(item.County, Country) == -1) &#123;
        Country.push(item.County); //判斷有無重複並放入縣市名稱
      $(&#39;.select-box&#39;).append(&#39;&lt;option&gt;&#39; + item.County + &#39;&lt;/option&gt;&#39;);
      return true;
    &#125; else &#123;
      return false;
    &#125;
  &#125;);
&#125;
</code></pre>
<p>在 <strong>item</strong> 裡我們已經將所有資料分開了，方便我們過濾資料，而這邊我們使用if條件是判斷不讓相同縣市的資料出現第二次以上，因為這邊要把縣市放到上方的 <strong>Select</strong> 內的 <strong>Option</strong> 。</p>
<blockquote>
<p>不得不說真的是常常用到組字串呢</p>
</blockquote>
<p>下方的資料一樣使用 <strong>filter()</strong> 及 組字串方式，把各縣市的資料放上 <strong>div</strong>，造出一個一個的 <strong>div</strong>（誰叫我不會Vue呢TAT</p>
<h3 id="jQuery-data-方法點我"><a href="#jQuery-data-方法點我" class="headerlink" title="jQuery.data() 方法點我"></a>jQuery.data() <a href="http://www.w3school.com.cn/jquery/data_jquery_data.asp">方法點我</a></h3><p>這邊值得一提，因為使用重組字串的方法，所以用到了 <strong>jQuery</strong> 的 <strong>data()</strong> ，而造出來的字，會被HTML自動翻成小寫，資質愚鈍如我花了大把時間再找為何我的onclick事件抓不到呢…</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2416/1*CJpBXui2OmuG-0Gw8GGWhQ.png"></p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>這系列的地下城真的幫助我 <strong>JS</strong> 成長了許多，每每覺得要卡關了，還是能慢慢爬文慢慢吸收，然後破關，我想最主要的還是邏輯部分，簡化自己的程式碼，另外在這次做API之前我根本毫無頭緒，這是很好的練習，也是我的第一次（羞</p>
<p>最後的最後一樣要加強的也是文筆部分，看各位大神都精簡扼要，我都還是露露長。雖然這只是剛開始寫 <strong>Blog</strong> 的第二篇廢文，還是要列出檢討的地方，然後朝下一關繼續加油，完畢。</p>
<ul>
<li><p>JS</p>
</li>
<li><p>邏輯</p>
</li>
<li><p>文筆</p>
</li>
<li><p><del><em>體重</em></del></p>
</li>
</ul>
<h2 id="我的其他範例"><a href="#我的其他範例" class="headerlink" title="我的其他範例"></a>我的其他範例</h2><ul>
<li><p><strong>Hero Of UnderGround — 1F Multiplicatio 九九乘法表</strong></p>
<blockquote>
<p>Demo：<a href="http://rexhung.me/JS-and-Fighter/JS-and-Fighter-1F/index.html">點我</a><br><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-1F">點我</a></p>
</blockquote>
</li>
<li><p><strong>Hero Of UnderGround — 2F Clock 時鐘</strong></p>
<blockquote>
<p>Demo：<a href="http://rexhung.me/JS-and-Fighter/JS-and-Fighter-2F/clock.html">點我</a><br><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-2F">點我</a></p>
</blockquote>
</li>
<li><p><strong>Hero Of UnderGround — 3F Calculator 計算機</strong></p>
<blockquote>
<p>Demo：<a href="http://href="http//rexhung.me/JS-and-Fighter/JS-and-Fighter-3F/index.html">點我</a><br><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-3F">點我</a></p>
</blockquote>
</li>
<li><p><strong>Hero Of UnderGround — 4F World Clock 各國時區</strong></p>
<blockquote>
<p>Demo：<a href="http://rexhung.me/JS-and-Fighter/JS-and-Fighter-4F/index.html">點我</a><br><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-4F">點我</a></p>
</blockquote>
</li>
</ul>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><a href="https://medium.com/pvt5r486/javascript-%E5%9C%B0%E4%B8%8B%E5%9F%8E-lv-5-%E5%85%A8%E5%8F%B0%E7%A9%BA%E6%B0%A3%E6%8C%87%E6%A8%99%E5%84%80%E8%A1%A8%E6%9D%BF-b4f163832ff">pvt5r486大神的Blog</a> — 全台空氣指標攻略心得</li>
<li><a href="https://mtwmt.github.io/blog/api_cors_error/">Mandy大神的Bolg </a>— 利用google apps script做中繼點跨網域遠端取得api資料* * )* <a href="https://ithelp.ithome.com.tw/articles/10197529">henry35208大神的鐵人邦</a> — Promise介紹</li>
<li><a href="https://github.com/axios/axios">axios的GitHub</a> — axios</li>
<li><a href="https://github.com/camsong/blog/issues/2">camsong大神的GitHubg Bolg</a> — 傳統Ajax已死，Fetch永生</li>
<li><a href="http://www.w3school.com.cn/">W3school 教學網站</a></li>
<li><a href="https://opendata.epa.gov.tw/">行政院環保署資料開放平臺</a></li>
<li><a href="https://www.gamer.com.tw/index2.php?ad=N">*巴哈姆特 舒壓用</a>*</li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>前端</category>
        <category>HeroOfUnground[地下城]</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
        <tag>HexSchool</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hero Of UnderGround 地下城] — 8F Tic-Tac-Toe 井字遊戲</title>
    <url>/2019/03/26/20190326/</url>
    <content><![CDATA[<h2 id="成果-程式碼"><a href="#成果-程式碼" class="headerlink" title="成果 &amp; 程式碼"></a>成果 &amp; 程式碼</h2><blockquote>
<p>Demo：<a href="http://rexhung.me/JS-and-Fighter/JS-and-Fighter-8F/dist/index.html#/">點我</a><br/><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-8F">點我</a></p>
</blockquote>
<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>時間一晃又過了一個禮拜，這次晃到8樓一看嚇了一下，好像剩沒幾個人，不管了還是抱持著自己的原則，硬幹就對了。另外這次算滿大的挑戰也收穫滿滿，因為首次嘗試用 <strong>Vue</strong> 挑戰(所以有寫不好的地方請見諒…</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*pG8Su_6Y-Nl9c_s01E4MlQ.png" alt="8F大魔王 — 井字遊戲"></p>
<span id="more"></span>

<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p>由於JS地下城每個BOSS的弱點都不一樣，每一層都要由弱點去進行攻略，本次BOSS的弱點有五項。</p>
<ol>
<li><p>【特定技術】先手為 O，後手為 X，某方獲勝時，上方會紀錄各方的獲勝戰績</p>
</li>
<li><p>【特定技術】每回合結束後，會判定結果頁(平手、Ｏ 獲勝、X 獲勝)</p>
</li>
<li><p>【特定技術】需符合 RWD，能在低螢幕解析度也能遊玩，介面不能超出 x 軸，至少在以下解析度能夠遊玩。</p>
</li>
</ol>
<p>iPhone SE 320px</p>
<p>iPhone 8 375px</p>
<p>iPhone PLUS 414px</p>
<p>4.【特定技術】請使用瀏覽器離線儲存技術，將戰績保留起來，重新打開遊戲也仍可觀看到歷史戰績。技術請任選以下幾種</p>
<p>Cookie</p>
<p>localStorage</p>
<p>5.【書寫能力】請寫 BLOG，描述你在開發「滿足獲勝條件」解題思維來進行加強描述</p>
<p>上面三個 O 符合獲勝條件</p>
<p>斜線三個 X 符合獲勝條件</p>
<blockquote>
<p>以往的額外條件書寫BLOG這次是其中一個 <strong>BOSS</strong> 弱點了(笑</p>
</blockquote>
<hr>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*Gg_XxwzrCJGxoGO6Cefw5Q.png" alt="START加上hover效果之截圖滑鼠消失了"></p>
<h3 id="畫面製作"><a href="#畫面製作" class="headerlink" title="畫面製作"></a>畫面製作</h3><p>第一次嘗試使用 <strong>Vue</strong> 切畫面，就可以直接把 <strong>display:none</strong> 扔了（誤，這邊我用了兩個 <strong>Views</strong>，一個是遊戲開始前畫面，一個是遊戲中加上結束畫面，其實看見其他大神似乎還能把畫面在拉出去個別當 <strong>Componemt</strong> 不過還不熟的 <strong>Vue</strong> 菜雞我就先能走再說跑了。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*_oMCLN0X8yUUnuLi-fysgg.png" alt="切版第一個挑戰點"></p>
<h3 id="CSS-之-before-after-之有更好得做法？"><a href="#CSS-之-before-after-之有更好得做法？" class="headerlink" title="CSS 之 before &amp; after 之有更好得做法？"></a>CSS 之 before &amp; after 之有更好得做法？</h3><p>剛開始看見有框的叉叉後直覺是使用 after 跟 before 來做，在上面使用兩塊黑色的偽元素去蓋住它，但是我發現其他大神有更容易的做法。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*wWP78mXgYYGKH44jlAFRfg.png" alt="第二個頁面立馬碰上"></p>
<p>在第二個頁面又碰到了需要白邊的字，爬了一下文後發現了救星，那就是：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">text</span>-<span class="attribute">stroke</span>: .<span class="number">3rem</span> <span class="number">#fff</span>;</span><br></pre></td></tr></table></figure>

<p>加上去後就不需要再用一個 <strong>before</strong> 或 <strong>after</strong> 去覆蓋他這麼麻煩了。</p>
<hr>
<h3 id="串起你的世界-Vue-router"><a href="#串起你的世界-Vue-router" class="headerlink" title="串起你的世界 Vue-router"></a>串起你的世界 Vue-router</h3><p>想起上一層還在 <strong>display:none</strong> 來 <strong>none</strong> 去，不僅程式碼露露長也容易造成使用者直接 <strong>F12</strong> 查看你隱藏的東西，自從接觸 <strong>Vue-router</strong> 之後考試都考一百分(誤。</p>
<p>關於如何從零到 <strong>Vue-cli UI</strong> 介面可以看我的 Vue<a href="https://medium.com/@zehung860486/vue-notes-vue-cli-1-%E5%88%9D%E6%AC%A1%E8%A6%8B%E9%9D%A2-e2d868ee04aa">系列文章</a> — <strong>Vue-Cli #1 初次見面</strong>(後續加載中)，或是直接把 <strong>Vue-cli</strong> 升級到 3x 版本後直接在終端機上輸入 <strong>vue ui</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*wz2vDEL64uSnWTAUXxnhvw.png" alt="Vue-cli 3x 版本後 UI 介面超方便啊"></p>
<p>點選添加 <strong>Vue-router</strong> 之後你的src資料夾內會多出 <strong>View</strong> 資料夾及 <strong>router.js</strong>，可以把 <strong>View</strong> 資料夾內的檔案 <strong>About.vue Home.vue</strong> 當作 <strong>Componemt</strong> 的概念。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*F9a46v9nfpEpHTjiHqybFA.png" alt="主要在 router 內 import 你需要導的頁面"></p>
<p>然後新增或修改你要的頁面就好了，因為這篇主要不是要介紹 <strong>Vue-cli</strong> 之後會放到 <strong>Vue</strong>系列文章去做介紹。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*Z09J0HEYsd3-MZfGJCxFlA.gif" alt="成功畫面"></p>
<hr>
<h3 id="開始攻略"><a href="#開始攻略" class="headerlink" title="開始攻略"></a>開始攻略</h3><p>對於資料的處理 <strong>Vue</strong> 一直很拿手，直接把需要用到的資料丟進 <strong>data</strong> 內，我們需要的有局數、玩家、九個格子的陣列、判斷贏的陣列、分數、四個畫面的變數。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*BaMIJ9AY1wJj5hTwNotTuQ.png" alt="徹底愛上 Vue"></p>
<p>其實還能再縮減，這完全看寫程式的人邏輯，菜雞如我邏輯超級爛，連出門都會迷路…</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;play-area d-flex flex-wrap&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;play_area&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grids row justify-content-center&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(grid,id) in grids&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;id&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;set(id)&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;text-show&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">font-awesome-icon</span> <span class="attr">v-if</span>=<span class="string">&quot;grid === 1&quot;</span> <span class="attr">:icon</span>=<span class="string">&quot;CrossIcon&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:white;&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;text-show&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">font-awesome-icon</span> <span class="attr">v-if</span>=<span class="string">&quot;grid === -1&quot;</span> <span class="attr">:icon</span>=<span class="string">&quot;CircleIcon&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> // transition的部分下面會介紹</span><br></pre></td></tr></table></figure>

<p>利用  <strong>v-for</strong> 造出九宮格，<strong>v-for&#x3D;”(grid,id) in grids”</strong> 第一個 <strong>grid</strong> 代表用於迭代的元素，第二個 <strong>id</strong> 代表 <strong>索引值(optional)</strong>。後面使用 <strong>v-bind</strong> 加上 <strong>:key&#x3D;”id”</strong>，目的是確保每個元素的唯一性，當元素更新，例如改變順序時，有可識別唯一性的 <strong>key</strong> 來確保重新渲染。</p>
<h3 id="讓你的畫面活起來"><a href="#讓你的畫面活起來" class="headerlink" title="讓你的畫面活起來"></a>讓你的畫面活起來</h3><p><strong>Vue</strong> 可以在新增、更新或移除 <strong>DOM</strong> 時使用 <strong>CSS</strong> 顯示動畫，讓你的畫面更精彩，使用方式也很簡單，先來了解一下 <strong>Vue</strong> 提供的特殊 <strong>Class</strong>名稱。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*vacWwEkimneEezzPsc4dFg.png" alt="流程圖"></p>
<ol>
<li><p><strong>v-enter</strong>：元素一開始的狀態。在元素被新增時觸發，在下一個影格立即移除。</p>
</li>
<li><p><strong>v-enter-active</strong>：元素被新增時的狀態。在元素被新增前加入，然後在整個動畫中使用它，最後在動畫結時被移除。</p>
</li>
<li><p><strong>v-enter-to</strong>：元素新增狀態的結束。在元素被新增後觸發，在 <strong>v-enter-active</strong> 動畫結束後被移除。這是 v2.1.8 新增的狀態，原有的 <strong>v-enter</strong> 被它取代。</p>
</li>
<li><p><strong>v-leave</strong>：元素被刪除前的初始狀態。在刪除時立即觸發，在下一個影格立即移除。</p>
</li>
<li><p><strong>v-leave-active</strong>：元素被刪除時的狀態。在元素被移除前加入，然後在整個動畫中使用它，最後在動畫結束時被移除。</p>
</li>
<li><p><strong>v-leave-to</strong>：元素刪除狀態的結束。在元素被刪除後觸發，在 <strong>v-leave-active</strong> 動畫結束後移除。這是 v2.1.8 新增的狀態，原有的 <strong>v-leave</strong> 被它取代。</p>
</li>
</ol>
<p>最前面的 v 替換成自己命名的 class 名稱，舉個例子，寫好**<transition name=”test”>** 後，到 <strong>css</strong> 去。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.test-enter-active</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">transition</span>: opacity .<span class="number">8s</span>;</span><br><span class="line"></span><br><span class="line">&#125;   // 元素新增前加入動畫並在整個動畫內使用它</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.test-enter</span></span><br><span class="line"><span class="selector-class">.test-leave-to</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*0SdJC9zdBDvzUB1DbZb_GQ.gif" alt="可以搭上 Animation 讓畫面更靈活"></p>
<p>關於 Animation 的導入也會在 Vue 系列文章中提到，之後會再更新。</p>
<hr>
<h3 id="各種methods"><a href="#各種methods" class="headerlink" title="各種methods"></a>各種methods</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">set</span>(<span class="params">id</span>)&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判斷如果格子是否被點過 ＆ 判斷局數是否在九局內</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">grids</span>[id] !== <span class="number">0</span> || <span class="variable language_">this</span>.<span class="property">step</span> &gt; <span class="number">9</span>)<span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 局數增加</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">step</span> ++;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果是除2是於0代表X下手，反之Ｏ下手</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">step</span> % <span class="number">2</span> !== <span class="number">0</span> ? (<span class="variable language_">this</span>.<span class="property">player</span> = <span class="number">1</span>) : (<span class="variable language_">this</span>.<span class="property">player</span> = -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 替換掉grids內的數值</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">grids</span>,id,<span class="variable language_">this</span>.<span class="property">player</span>);</span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>使用 <strong>＠click&#x3D;”set(id)”</strong> 讓每一個格子的 <strong>id</strong> 傳回來，並且判斷這個格子有沒有被按過，以及步數是否在九步內，如果不符合就不進判斷式，如果符合的話就讓步數增加，並且利用三元運算，去判斷這次是誰下手的，我們一開始的 <strong>player</strong> 預設是叉叉先，所以除 <strong>2</strong>於 <strong>0</strong> 的都是叉叉下手，反之圈圈下手。</p>
<p>在我們的 <strong>template</strong> 裡我們使用 <strong>v-if</strong> 去判斷現在是誰下手，然後該出現圈圈還是叉叉，這邊剛開始有使用 <strong>1 &amp; 2</strong> ， 但是發生悲劇，因為後面判斷輸贏是用格子的 <strong>id</strong> 加總去判斷，如果一個圈跟叉就會發生 <strong>1+2&#x3D;3</strong>，但是使用 <strong>1 &amp; -1</strong> 的話加總只有 <strong>-3 -1 1 3</strong> 這四種可能，其中前後兩個就可以拿去判斷贏或輸。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">v-if=&quot;grid === 1&quot;</span><br><span class="line"></span><br><span class="line">or</span><br><span class="line"></span><br><span class="line">v-if=&quot;grid === -1&quot;</span><br></pre></td></tr></table></figure>

<p>最後用 <strong>$set()</strong> 去替換掉 <strong>grids</strong> 內的值，用剛剛判斷的現在是哪一個 <strong>player 去替換</strong></p>
<h3 id="關於三元運算"><a href="#關於三元運算" class="headerlink" title="關於三元運算"></a>關於三元運算</h3><p>三元運算其實很簡單，並且有效減少你的程式碼，也是這次的收穫之一。看看下方例子就知道超簡單啦！</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三元運算</span></span><br><span class="line"></span><br><span class="line">a &gt; b ? <span class="keyword">do</span> something : <span class="keyword">do</span> something2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 翻譯蒟蒻</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( a &gt; b )&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">do</span> something</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line"></span><br><span class="line">  <span class="keyword">do</span> something2 </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="輸或贏？"><a href="#輸或贏？" class="headerlink" title="輸或贏？"></a>輸或贏？</h3><p>剛開始的想法是放在 <strong>computed</strong> 內，因為在學習 <strong>Vue</strong> 時查看了一下文件，這是一個專門做運算的計算屬性，但是 <strong>computed</strong> 是根據相依的資料改變時才做計算，不像 <strong>method</strong> 是不管有無相依都會計算，而且在我打在 <strong>computed</strong> 的期間，只要 <strong>run</strong> 專案，就會有警告出現，而且資料並不會即時更新，獲勝後必須去使用 <strong>Vue devtolls</strong> 才會更新資料，我想應該是渲染問題，這部分會在研究更新。</p>
<p>到這算是踩了一個坑，不過想了一下改了一個作法，既然 <strong>computed</strong> 不用呼叫就會進去跑，那我也可以退而求其次使用 <strong>watch</strong> 監聽我的局數，從第二步開始就去看有沒有贏家。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">watch</span>:&#123;</span><br><span class="line">  <span class="title function_">step</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">step</span> &gt;= <span class="number">2</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">step</span> &lt; <span class="number">9</span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">checkwinner</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>檢查的部分使用迴圈去跑，檢查八條線的贏法，在上面我們已經先把贏法存在陣列裡。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">checkwinner</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// 檢查八種贏法</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span> ; i++)&#123;</span><br><span class="line">    <span class="keyword">const</span> [a, b, c] = <span class="variable language_">this</span>.<span class="property">Lines</span>[i];</span><br><span class="line">    <span class="keyword">const</span> sum = <span class="variable language_">this</span>.<span class="property">grids</span>[a] + <span class="variable language_">this</span>.<span class="property">grids</span>[b] + <span class="variable language_">this</span>.<span class="property">grids</span>[c];</span><br><span class="line">    <span class="keyword">if</span>(sum === <span class="number">3</span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">Xscore</span> ++;                            <span class="comment">// 叉叉贏加分</span></span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;Xwin&quot;</span>, <span class="variable language_">this</span>.<span class="property">Xscore</span>); <span class="comment">// localStorage下方說明</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">play_area</span> = <span class="literal">false</span>;                    <span class="comment">// 隱藏遊戲區</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">Xwin</span> = <span class="literal">true</span>;                          <span class="comment">// 顯示叉叉贏的畫面</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum === -<span class="number">3</span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">Oscore</span> ++;</span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;Owin&quot;</span>, <span class="variable language_">this</span>.<span class="property">Oscore</span>); <span class="comment">// localStorage下方說明</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">play_area</span> = <span class="literal">false</span>;                    <span class="comment">// 隱藏遊戲區</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">Owin</span> = <span class="literal">true</span>;                          <span class="comment">// 顯示圈圈贏的畫面</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="平手怎麼辦？"><a href="#平手怎麼辦？" class="headerlink" title="平手怎麼辦？"></a>平手怎麼辦？</h3><p>因為沒有使用 <strong>computed</strong> 所以沒有 <strong>return</strong> 的值讓你去判斷，但我們可以自己寫一個 <strong>checkdraw()</strong> ，並在 <strong>watch</strong> 判斷內直接寫上，並在 <strong>methods</strong> 內加上式子，顯示平手畫面等等。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">watch</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">step</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">step</span> &gt;= <span class="number">2</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">step</span> &lt; <span class="number">9</span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">checkwinner</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 第九步直接判斷為平手</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">step</span> === <span class="number">9</span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">checkdraw</span>(); <span class="comment">// 直接在watch內新增上判斷</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">  <span class="title function_">checkdraw</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 第九步直接判斷為平手</span></span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;DRAW!!&quot;</span>, <span class="variable language_">this</span>.<span class="property">drawtimes</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">drawtimes</span> ++;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">play_area</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">draw</span> = <span class="literal">true</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="重新開始遊戲"><a href="#重新開始遊戲" class="headerlink" title="重新開始遊戲"></a>重新開始遊戲</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">restart</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">player</span> = <span class="number">1</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">grids</span> = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在按鈕上加上 <strong>@click&#x3D;”restart” 後</strong>，這邊很簡單的只做初始化遊戲。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*0kv3Aa93Qxye_fjfc81rgA.png" alt="RESTART Btn"></p>
<hr>
<h3 id="打造新手遊"><a href="#打造新手遊" class="headerlink" title="打造新手遊"></a>打造新手遊</h3><p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*Xbyn2dQPEb-z1DjQAS3jeg.png" alt="遊戲帶出門"></p>
<p>現在越來越多版需要符合手機大小，這邊使用  <strong>＠Media</strong> 的方式，另外也可以搭上 <strong>Boostrap</strong> 的 <strong>col</strong> 去做排版，可以省的手機版還要調大小呢。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*7dUzdFkz_yBHR660lhuaJw.png" alt="學會善用咪低壓"></p>
<p>因為  <strong>BOSS</strong> 的弱點必須至少在 <strong>iPhone SE iPhone 8 iPhone PLUS</strong> 可以遊玩，這幾個此吋都介於差不多之間，就把他們一起編輯了，當然詳細的手機畫面還是要放到手機看比較清楚，因為網頁的跟手機的畫面高度差一小截呢，菜雞可是踩過幾次坑。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">320px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">576px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.yourClassName</span> or <span class="selector-id">#id</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="名留青史善用-LocalStorage"><a href="#名留青史善用-LocalStorage" class="headerlink" title="名留青史善用 LocalStorage"></a>名留青史善用 LocalStorage</h3><p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*JcAkmJ9kzFrKK0_JCpwZSA.png" alt="LocalStorage"></p>
<p>這是一個 <strong>HTML5</strong> 提供的 <strong>web storage</strong>，擁有 <strong>5MB</strong> 大小，但是無法跨域使用，但是你可以存一些資訊在上面，好比我們的戰績，或是購物網站常用的，短時間內你關掉網頁不用再重新登入。</p>
<p><strong>localStorage</strong> 是以 key-value 儲存資料，所以我們可以給他一個 <strong>item name</strong> 還有一個 <strong>value</strong>，使用方式也很簡單，始用 <strong>setItem</strong> 給他一個 ( <strong>name , value</strong> ) 就存進去啦，之後除非你去手動清除或者程式設計者執行 <strong>clear</strong> ，否則會一直存在，甚至重開機。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;Xwin&quot;</span>, <span class="variable language_">this</span>.<span class="property">Xscore</span>);</span><br></pre></td></tr></table></figure>

<p>在我們每次載入遊戲頁面的時候，使用 <strong>created</strong> 去取得 <strong>localStorage</strong> 的資料，說到 <strong>created</strong> 就會提到 <strong>Vue</strong> 的生命週期，之後也會在 <strong>Vue</strong>系列介紹，這邊先讓我們取出你的戰績吧。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">Xscore</span> = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;Xwin&quot;</span>) ? <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;Xwin&quot;</span>) : <span class="number">0</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">Oscore</span> = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;Owin&quot;</span>) ? <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;Owin&quot;</span>) : <span class="number">0</span>;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="關於-GitHub-的那點小事"><a href="#關於-GitHub-的那點小事" class="headerlink" title="關於 GitHub 的那點小事"></a>關於 GitHub 的那點小事</h3><p>由於以往都是單純 <strong>HTML</strong> 的檔案上傳，這次第一次使用專案方式整包上傳，所以造成網址讀不到，可以收尋 <strong>webpack baseUrl</strong> 爬文看看。<br>現在這情況下可以先到根目錄下創建一個 <strong>vue.config.js</strong> 檔案，並且在內打上：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">baseUrl</span>: <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>之後重新 <strong>Build</strong> 一次專案，然後在網址後面加上 <strong>dist&#x2F;index.html#&#x2F;</strong>，就能跑出來了。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*fmxaNOkkTKjhkY_c7Na31g.png" alt="終於見到作品啦"></p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>這次花了幾天的時間在看 <strong>Vue</strong> 文件，最後抱著跟當初勇闖地下城的心態一樣，先做了再說，許多時候都是這樣跌跌撞撞再成長，對菜雞我這種人來說只是一昧的看文件是看不懂的，加上現在地下城有許多 <strong>Vue</strong> 大神在勇闖，我想這不失為一個學習的好機會。</p>
<p>一直想加強自己的邏輯概念，這次 <strong>Vue</strong> 正好是一個磨練的好時機，雖然越高樓層越來越難，不過抱著就算是成長 <strong>0.1</strong> 也要往上衝的態度，我想幾年後回頭看看自己現在，一定有所收穫，最後除了繼續努力之外還是要列出檢討的地方，然後朝下一關繼續加油，完畢。</p>
<ul>
<li><p>JS</p>
</li>
<li><p>邏輯</p>
</li>
<li><p>文筆</p>
</li>
<li><p><del><em>體重</em></del></p>
</li>
</ul>
<hr>
<h2 id="我的其他範例"><a href="#我的其他範例" class="headerlink" title="我的其他範例"></a><em>我的其他範例</em></h2><ul>
<li><p><em><strong>Hero Of UnderGround — 1F Multiplicatio 九九乘法表</strong></em></p>
<blockquote>
<p><em>Demo：<a href="https://rexhung0302.github.io/JS-and-Fighter-1F/index.html">點我</a><br/><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter-1F">點我</a></em></p>
</blockquote>
</li>
<li><p><em><strong>Hero Of UnderGround — 2F Clock 時鐘</strong></em></p>
<blockquote>
<p><em>Demo：<a href="https://rexhung0302.github.io/JS-and-Fighter-2F/clock.html">點我</a><br/><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter-2F">點我</a></em></p>
</blockquote>
</li>
<li><p><em><strong>Hero Of UnderGround — 3F Calculator 計算機</strong></em></p>
<blockquote>
<p><em>Demo：<a href="https://rexhung0302.github.io/JS-and-Fighter-3F/index.html">點我</a><br/><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter-3F">點我</a></em></p>
</blockquote>
</li>
<li><p><em><strong>Hero Of UnderGround — 4F World Clock 各國時區</strong></em></p>
<blockquote>
<p><em>Demo：<a href="https://rexhung0302.github.io/JS-and-Fighter-4F/index.html">點我</a><br/><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter-4F">點我</a><br/><br>Blog：<a href="https://medium.com/@zehung860486/hero-of-underground-%E5%9C%B0%E4%B8%8B%E5%9F%8E-4f-world-clock-%E5%90%84%E5%9C%8B%E6%99%82%E5%8D%80-2356786f3dfa">點我</a></em></p>
</blockquote>
</li>
<li><p><em><strong>Hero Of UnderGround — 5F AQI 全台空氣指標儀表板</strong></em></p>
<blockquote>
<p><em>Demo：<a href="https://rexhung0302.github.io/JS-and-Fighter-5F/index.html">點我</a><br/><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter-5F">點我</a><br/><br>Blog：<a href="https://medium.com/@zehung860486/hero-of-underground-%E5%9C%B0%E4%B8%8B%E5%9F%8E-5f-aqi-%E5%85%A8%E5%8F%B0%E7%A9%BA%E6%B0%A3%E6%8C%87%E6%A8%99%E5%84%80%E8%A1%A8%E6%9D%BF-c060fbe58454">點我</a></em></p>
</blockquote>
</li>
<li><p><em><strong>Hero Of UnderGround — 6F SECONDS CHALLENGE 倒數遊戲</strong></em></p>
<blockquote>
<p><em>Demo：<a href="https://rexhung0302.github.io/JS-and-Fighter-6F/index.html">點我</a><br/><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter-6F">點我</a><br/><br>Blog：<a href="https://medium.com/@zehung860486/hero-of-underground-%E5%9C%B0%E4%B8%8B%E5%9F%8E-6f-seconds-challenge-%E5%80%92%E6%95%B8%E9%81%8A%E6%88%B2-f71c0b680fdb">點我</a></em></p>
</blockquote>
</li>
<li><p><em><strong>Hero Of UnderGround — 7F Canvas 畫板</strong></em></p>
<blockquote>
<p><em>Demo：<a href="https://rexhung0302.github.io/JS-and-Fighter-7F/">點我</a><br/><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter-7F">點我</a><br/><br>Blog：<a href="https://medium.com/@zehung860486/hero-of-underground-%E5%9C%B0%E4%B8%8B%E5%9F%8E-7f-canvas-%E7%95%AB%E6%9D%BF-fca0a17ae652">點我</a></em></p>
</blockquote>
</li>
</ul>
<h3 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h3><ul>
<li><a href="https://medium.com/@q503433/%E6%96%B0%E6%89%8B-js-%E5%9C%B0%E4%B8%8B%E5%9F%8E-8f-%E4%BA%95%E5%AD%97%E9%81%8A%E6%88%B2-e7dd97f6cb5a">高郁涵大神</a> — 新手 JS 地下城-8f 井字遊戲</li>
<li><a href="http://techaride.blogspot.com/2012/07/javascript-localstorage.html">TECH A RIDE </a>— localStorage 介紹與使用</li>
<li><a href="https://cythilya.github.io/2017/04/15/vue-computed/">Summer。桑莫 </a>— Vue.js:計算屬性 Computed</li>
<li><a href="https://github.com/moojing/hex-underground/tree/master/8f_ooxx/src">moojing </a>— 井字遊戲 GitHub</li>
<li><a href="https://www.gamer.com.tw/index2.php?ad=N"><em>巴哈姆特 舒壓用</em></a></li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>前端</category>
        <category>HeroOfUnground[地下城]</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
        <tag>HexSchool</tag>
      </tags>
  </entry>
  <entry>
    <title>[Vue Note] — Vue-Cli #1 初次見面</title>
    <url>/2019/03/26/20190325/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>再三個月前剛接觸 <strong>Code</strong> 的時候，到現在一直都是用純 <strong>html css JavaScript</strong> 在切，期間不免常常聽到大家嘴裡常說前端框架、前端框架…好奇心驅使下前陣子看了一下，放棄… (因為 <strong>JS</strong> 還太菜<br>雖然現在還是很菜，但是早晚都會碰到的東西，就把它記錄下來當成自己練習的記憶。</p>
<span id="more"></span>

<h3 id="為什麼要學習-Vue"><a href="#為什麼要學習-Vue" class="headerlink" title="為什麼要學習 Vue ?"></a>為什麼要學習 Vue ?</h3><p>其實框架在前端、後端及數據庫都有所謂的框架，而前端常用的框架從 <strong>JQuery、Extjs、Bootstrap…</strong> 等等，一直到 <strong>Vue、React、AngularJS…</strong> 這些框架都封裝了一些功能，讓使用者可以再更少的程式碼下做更多的事情，而且框架如同名字所定義 <strong>Frame(架構)</strong>，它有一定的規範，所以讓你更容易有目標更好上手，不至於像無頭蒼蠅。框架也有輕重之分，像是輕量的 <strong>JQuery</strong>，或是重量的<strong>Extjs</strong>， 差別也很簡單，重量越重功能越多。而 <strong>Vue,js</strong> 就是基於 <strong>JavaScript</strong> 之上產生出來的。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2840/1*PNlbgb05IwSxOhAz0aA2rg.png" alt="撇除原生 JS 的前端框架三巨頭 — 看排名請至 https:&#x2F;&#x2F;blog.csdn.net&#x2F;superdangbo&#x2F;article&#x2F;details&#x2F;78883019"></p>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><blockquote>
<p>在選擇上我優先選擇了 <strong>Vue</strong> 有幾點原因，在此先說明每一個框架都有自己的優缺點，並不是這個特別突出，或是那個特別爛，而去做選擇，應該選擇自己所適合並且你剛好需要的框架才是。</p>
</blockquote>
<ol>
<li><p>在前端框架中普遍人認為較好上手的就是 <strong>Vue</strong></p>
</li>
<li><p><strong>Laravel</strong> 也在 <strong>PHP Framework 5</strong> 之後把 <strong>Vue</strong> 納入其中，所以具有 Vue 知識的開發人員對使用 <strong>Laravel</strong> 開發應用的後端團隊有所補充。</p>
</li>
<li><p><strong>Vue</strong> 的資料雙向綁定，善於資料上的處理。</p>
</li>
<li><p><strong>Vue-cli 3.x</strong> 開始提供了 <strong>UI</strong> ( 對不太會下指令的人真的是一大福音</p>
</li>
</ol>
<p>說了這麼多，小總結一下還是必須挑自己需要並且願意花時間成本在上面的框架去學習，因為每學一個都是一個時間的付出，在資訊爆炸的時代，更新速度又這麼快，<strong>「不管任何東西都沒有所謂最好，只有所謂最適合」</strong>。</p>
<p>然而在使用 <strong>Vue</strong> 之前還是先建議一下必須有基本的 <strong>HTML CSS JavaScript</strong> 知識(雖然自己也沒有敢說很熟…掩面</p>
<p>在開始前先解釋一下什麼是 <strong>Vue-Cli</strong> ，它是作者開發的 <strong>vue</strong> 懶人開發包，裡面包含有 <strong>5</strong> 種結構，從最基礎的 <strong>simple</strong> 到 <strong>browserify</strong> 以及 <strong>webpack</strong> 版本皆可以自由選擇，詳細不多說，可以<a href="https://ithelp.ithome.com.tw/articles/10184919">點我</a>看文章。</p>
<p>廢話說多了，下面立馬進入正題。</p>
<hr>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/3168/1*-592TAQ_pl-xSqe_p6-iUQ.png" alt="*Node Package Manager*"></p>
<h3 id="事前作業"><a href="#事前作業" class="headerlink" title="事前作業"></a>事前作業</h3><ol>
<li><p><strong>Node.js</strong></p>
</li>
<li><p><strong>NPM</strong></p>
</li>
<li><p><strong>Vue</strong> 這次的 <strong>Vue-cli 3x</strong> 版本需要最低 <strong>Node.js 8.9</strong> 版本或更高 (推荐 <strong>8.11.0+</strong>)，在安裝 <strong>Node.js</strong> 時候會一併安裝 <strong>NPM</strong> 這個東西，先簡單解釋一下這是什麼。</p>
<blockquote>
<p>全名為 <strong>Node Package Manager</strong>，是 <strong>Node.js</strong> 的套件（<strong>package</strong>）管理工具。</p>
</blockquote>
</li>
</ol>
<p>因為文章主要是在 <strong>Vue-cli</strong> 部分，所以安裝 <strong>Node.js</strong> 及 <strong>NPM</strong> 的部分會略過，關於 <strong>Node.js</strong> 的安裝可以<a href="https://blog.gtwang.org/web-development/install-node-js-in-windows-mac-os-x-linux/">點我</a>，另一種安裝 <strong>Node.js</strong> 及 <strong>NPM</strong> 的部分可以<a href="https://medium.com/html-test/%E5%BE%9E%E9%9B%B6%E9%96%8B%E5%A7%8B-%E4%BD%BF%E7%94%A8npm%E5%A5%97%E4%BB%B6-317beefdf182">點我</a>。</p>
<hr>
<h3 id="重頭戲來了"><a href="#重頭戲來了" class="headerlink" title="重頭戲來了"></a>重頭戲來了</h3><p>安裝好 <strong>Node.js</strong> 及 <strong>NPM</strong> 後打開你的終端機，輸入其中一個指令開始全域安裝：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install -g @vue/cli</span><br><span class="line"># OR</span><br><span class="line">$ yarn global add @vue/cli</span><br></pre></td></tr></table></figure>

<h3 id="人生曲折"><a href="#人生曲折" class="headerlink" title="人生曲折"></a>人生曲折</h3><p>如果出現錯誤基本上都能谷歌爬文，這邊剛好出現一個錯誤。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;Error: EACCES: permission denied, access&#x27;/usr/local/lib/node_modules&#x27;&quot;</span><br></pre></td></tr></table></figure>

<p>因為剛好踫上這個問題爬了下文，在前方加上 <strong>sudo</strong> 後，輸入使用者密碼就好，因為管理者權限的問題，另外切記不能在資料夾內用編譯器開啟終端機安裝，菜雞就幹了這種蠢事，記得另外開一個終端機來安裝。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*Dej8xJrZzzuKo-WD7kEVew.png" alt="關於error:-13"></p>
<p>安裝結束後可以再輸入下面的指令檢查你的版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vue --version 或 -V</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*QfEYu75aWPygYPkoMSnsHw.png" alt="安裝完成"></p>
<h3 id="菜雞們的福音"><a href="#菜雞們的福音" class="headerlink" title="菜雞們的福音"></a>菜雞們的福音</h3><p>如果對指令不熟的同伴們有福了，在 <strong>Vue-cli 3x</strong> 版本開始後提供了 <strong>UI</strong> 介面，這也是我立馬試著學習的很大一個原因之一啊，不需要再去特別背什麼指令，你能邊操作，邊學習指令。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*pgYHoCOaJ7Zs1NC5q7ZH3A.png" alt="輸入 **Vue ui** 就是這麼簡單"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vue ui</span><br></pre></td></tr></table></figure>

<p><strong>接下來原諒我一系列的圖文教學，我覺得圖片比打字更有效理解(誤</strong></p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*RJvdhc-47nF407XaEWDF3A.png" alt="輸入上面的指令後就會自動帶你到他的網頁去"></p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2484/1*a1DjyerS8pMHHqpwIsa9-w.png" alt="點選創建後在你要的地方創建專案"></p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*JLRf1ZPt30H5hxlbZPLaAg.png" alt="這邊都先選預設"></p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2372/1*E3niaihEq2wx41sSoBV_tw.png" alt="第一次摸索可以選擇預設"></p>
<p>這邊如果你對 <strong>Vue</strong> 有一定熟悉之後，建議可以選擇手動，選擇自己想要的插件功能，比如 **bebel、vuex、vue-router…**等等。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*74ltpWczKH5-WYjCYVAXWQ.png" alt="你即將建出第一個專案囉"></p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*AjIw6GTWN4DAHTya5zl5kw.png" alt="所有功能一目瞭然"></p>
<p>建好了之後我們點選任務，然後選擇第一個 <strong>Serve</strong> 並運行它，就可以把專案跑起來了。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2702/1*XmIQPLer6Zs5pjd_45xTCw.png" alt="好興奮呀"></p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2692/1*pGo9Alb0wbtekkAx1tYbYg.png" alt="所有指令都在這"></p>
<p>點進輸出裡，你就能知道在你按下滑鼠按鍵的時候， <strong>Vue</strong> 都幫你幹了什麼事，說到這兒，大家應該都把第一個專案建起來了吧，點進上面那兩串網址其中一個。</p>
<p>App running at:</p>
<p> — Local: <a href="http://localhost:8083/">http://localhost:8083/</a> </p>
<p> — Network: <a href="http://192.168.1.110:8083/">http://192.168.1.110:8083/</a></p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*60yel0eQJ6UW8HCjDM3fxQ.png" alt="你的第一個專案出爐囉"></p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>其實這算是我第一次 <strong>Build</strong> 出一個專案，最開始在寫 <strong>html</strong> 的時候常常因為同一個 <strong>header</strong> 跟 <strong>layout</strong> 不同的內容卻要弄出好幾個差不多的檔案，就在思考，該怎麼樣才能有效的分離他們，並且減少程式碼。</p>
<p>剛好最近在 <strong><a href="https://www.udemy.com/">Udemy</a></strong> 的 <a href="https://www.facebook.com/hexschool/"><strong>六角學院</strong> </a>— 勇者地下城 挑戰中發現好多人在使用 <strong>Vue</strong>，讓我又開始想嘗試著挑戰看看，才開始碰我的第一個 <strong>Vue</strong> 專案，所以如果內容有什麼錯誤的話，要麻煩各路高手大大包容，並且不吝嗇指教了。</p>
<p>這次寫部落格紀錄，主要是希望養成自己的習慣，並且希望幾年後再回頭看看自己，能一樣保持著寫程式的熱衷還有那份初衷。</p>
<p>關於 <strong>Vue</strong> 的更多學習歷程，會再繼續新增文章上去，希望就算只有 <strong>0.1</strong> 能幫助到那個在疑惑的你，或是迷茫需要解答的自己，這篇文章就值得了，我們下次見。</p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><a href="https://medium.com/html-test/%E5%BE%9E%E9%9B%B6%E9%96%8B%E5%A7%8B-%E4%BD%BF%E7%94%A8npm%E5%A5%97%E4%BB%B6-317beefdf182">sexyoung大大的Medium</a> — 從零開始: 使用NPM套件</li>
<li><a href="https://blog.johnsonlu.org/getting-started-with-vue/">佛祖球球 </a>— Getting Started with Vue</li>
<li><a href="http://chrome-extension//klbibkeccnjlkjkiokjodocebajanakg/suspended.html#ttl=Vue%20%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AFjs%E6%A1%86%E6%9E%B6vue%20-%20Or_so%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD&pos=423&uri=https://www.cnblogs.com/mxs-blog/p/8059213.html">Or_so </a>— 淺談前端js框vue</li>
<li><a href="https://www.brilliantcode.net/907/mac-vue-js-development-environment-setup/">Andy Wang Blog </a>— 學習Vue.js 開發環境建置</li>
<li><a href="https://buzzorange.com/techorange/2017/07/31/all-about-javascript-framework/">TechOrange</a> — 框架大比拼</li>
<li><a href="https://segmentfault.com/a/1190000015366009">segmentfault</a> — 更多的Vue-cli UI圖文教學</li>
<li><a href="https://www.udemy.com/">Udemy </a>— 學習網站</li>
<li><a href="https://www.gamer.com.tw/index2.php?ad=N"><em>巴哈姆特 舒壓用</em></a></li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
        <tag>FrameWork</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hero Of UnderGround 地下城] — 11F LightBox 燈箱效果</title>
    <url>/2019/06/03/20190603/</url>
    <content><![CDATA[<h2 id="成果-程式碼"><a href="#成果-程式碼" class="headerlink" title="成果 &amp; 程式碼"></a>成果 &amp; 程式碼</h2><blockquote>
<p>Demo：<a href="http://rexhung.me/JS-and-Fighter/JS-and-Fighter-11F/html/index.html">點我</a><br/><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-11F">點我</a></p>
</blockquote>
<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>不小心又直接往 <strong>11F</strong> 邁進了，原本說好的 <strong>9F</strong> 要完成看來要一陣子了，卡了不少問題 ( 汗…</p>
<blockquote>
<p>另外這次特地整理了一下 <strong>GitHub</strong>，如果想參考之前樓層的介紹以及 <strong>Source Code</strong> 可以來坐坐喔哈。</p>
</blockquote>
<blockquote>
<p>傳送門：<strong><a href="https://github.com/RexHung0302/JS-and-Fighter">請點我</a></strong></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*5nzGLmRb3Byaq14pVTeDnQ.png" alt="11F大魔王 — 燈箱效果"></p>
<span id="more"></span>

<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p>由於JS地下城每個BOSS的弱點都不一樣，每一層都要由弱點去進行攻略，本次BOSS的弱點有三項。</p>
<ol>
<li><p>【特定技術】不可用 JS 框架，只能單純用原生 JS。</p>
</li>
<li><p>【特定技術】需符合響應式設計，什麼你說設計稿沒提供？嗯，你是勇者嘛，通靈什麻的一定略懂略懂嘍</p>
</li>
<li><p>【特定技術】當螢幕伸縮(resize)時，介面與 JS 功能也需正常</p>
</li>
</ol>
<hr>
<h3 id="畫面製作"><a href="#畫面製作" class="headerlink" title="畫面製作"></a>畫面製作</h3><p>這次的關卡其實也沒有特別難的地方，就是響應式的地方麻煩了一點。還有這關卡主要是考驗切版技巧，在切版的時候必須特別考慮到 <strong>RWD</strong> 的時候怎麼呈現，還有斷點必須自己去抓，是說關卡的 <strong>BOSS</strong> 弱點雖然越來越少了，可是越來越不簡單了。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*rD2NgBBBAswj41rOO0Wvfg.png" alt="不小心就會破版"></p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*BXCAmWQq-OUJaH7Kivlvsg.png" alt="沒辦法用框架有點想念 v-if 了 ( 誤"></p>
<p>在顯示的 <strong>lightBox</strong> 調整上花了一點時間，主要是主要的頁面跟燈箱頁面的高度對不上，主要頁面在響應式的時候會直接把高度撐高，但是燈箱頁面不會跟著拉高，剛開始主要是用 <strong>position:absolute</strong>，後來索性改用 <strong>fixed</strong> 解決。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*brYTDD2-DaYDMzCbnjFC2w.png" alt="解決方法"></p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*nYG_hFzcxSEkYOUzZkeEOw.png" alt="正常了"></p>
<hr>
<h3 id="關於-RWD"><a href="#關於-RWD" class="headerlink" title="關於 RWD"></a>關於 RWD</h3><p>在前陣子剛好上了六角的 <strong>Sass</strong> 課程，這次就剛好自己寫了 <strong>CSS</strong> 的規範練習，不過犯了新手常犯的錯，<strong>過度命名。</strong></p>
<p>原本想照著 <strong>BEM</strong> 的規範去命名資料夾，雖然不是一定要照著規範走，主要還是看自己寫得順為主，但是沒想到其實最好的做法是把常用的工具抽離出來，模組化，或是工具化，其實才是最好的做法，這邊自己還要再精進加油呢。</p>
<blockquote>
<p><em>有興趣參考 CSS 命名的可以看我的這篇文章：<a href="https://medium.com/@zehung860486/css-notes-css%E6%A8%A1%E7%B5%84%E5%8C%96-3bb03e72523e">[CSS Notes] — 談談CSS模組化</a></em></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*aSQ-Qp1Su2zDHFetCI6A_A.png" alt="一個命名失敗就造成架構過於複雜"></p>
<hr>
<h3 id="格線系統是老大"><a href="#格線系統是老大" class="headerlink" title="格線系統是老大"></a>格線系統是老大</h3><p>雖然這次命名還有很大進步空間，但是在之前課程吸取最大的經驗且最好在實戰中拿來實用的就是時時提醒自己切版一定要有自己的格線系統。</p>
<p>有了隔線系統能少寫好幾行的 <strong>Code</strong>，甚至能重組網頁也沒問題，今天我要把 <strong>header</strong> 的內容拿去 <strong>footer</strong> 內，沒問題！今天要把 <strong>Sidebar</strong> 的內容拿去 <strong>article</strong> 內，沒問題！</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*PWh8QK-rtLB3uP0tQtJZEA.gif" alt="這次直接使用 Bootstrap 的格線系統，斷點在自行訂製"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> pad &#123;</span><br><span class="line">    <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">991px</span>) &#123;</span><br><span class="line">      <span class="keyword">@content</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@mixin md-mobile &#123;</span><br><span class="line">    <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">767px</span>) &#123;</span><br><span class="line">      <span class="keyword">@content</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 搭配 mixin 天衣無縫</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="拋棄-JS-框架"><a href="#拋棄-JS-框架" class="headerlink" title="拋棄 JS 框架"></a>拋棄 JS 框架</h3><p>從剛開始的地下層朋友建議用 <strong>JQuery</strong> 實作，剛開始還傻傻地覺得怎麼不從 <strong>Javascript</strong> 開始邊學呢，後來用慣了突然不能用 <strong>JS</strong> 框架還真有點困擾呢，就像是沒有了 <strong>v-bind v-if</strong>，不過勇者的精神就是衝就對了，哈。</p>
<p>這次必較麻煩的點是要判斷目前點的是哪張圖片，剛開始不知道 <strong>li</strong> 能直接去抓排序，還傻傻的以為 <strong>javascript</strong> 也能使用 <strong>div.index()</strong> 這類的語法，最後解決方法還是用最笨的方式給他一個 <strong>Class Name</strong>，然後再用變數去裝，最後 <strong>split</strong> 它。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抓取 Class 的名稱來判斷是第幾個</span></span><br><span class="line"><span class="keyword">var</span> imgClass_Name = e.<span class="property">target</span>.<span class="property">className</span>.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">now_imgIndex = <span class="built_in">parseInt</span>(imgClass_Name[<span class="number">2</span>].<span class="title function_">split</span>(<span class="string">&quot;-&quot;</span>)[<span class="number">2</span>]);</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="切換燈片"><a href="#切換燈片" class="headerlink" title="切換燈片"></a>切換燈片</h3><p>這邊反而比較容易解決，在剛開始就先把幻燈片丟進陣列，再靠上面判斷的數字去 <strong>+1</strong> 或 <strong>-1</strong>，如果碰到 -1 或大於幻燈片圖片的時候再把它改為第 <strong>0</strong> 個，或是 <strong>now_imgIndex.length-1</strong>。</p>
<p>在按鈕的部分也可以直接給他們一個相同的 <strong>Class</strong> 然後再點選的時候靠 <strong>Switch</strong> 事件去判斷現在點的是哪一個，可以減少寫 <strong>Code</strong> 的行數。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*svckH6-f_Kj8iLnFISy5eQ.png"></p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>這次的關卡算是很快的解決，不過要改進的地方還是很多，每每切這種基本功版的時候就能知道自己的基礎打得夠不夠穩，我想還是需要加油的。</p>
<p>最近是接觸前端滿半年的時間了，說長不長說短不短，在自己胡亂完了一些東西後，發現好多東西都息息相關，不過跟練功一樣，急不得，所以有練功機會就要抓著練習。</p>
<p>最後除了繼續努力之外還是要列出檢討的地方，然後朝下一關繼續加油，完畢。</p>
<ul>
<li><p>JS</p>
</li>
<li><p>邏輯</p>
</li>
<li><p>文筆</p>
</li>
<li><p><del><em>體重</em></del></p>
</li>
</ul>
<hr>
<h2 id="我的其他範例"><a href="#我的其他範例" class="headerlink" title="我的其他範例"></a>我的其他範例</h2><ul>
<li><p><strong>Hero Of UnderGround — 1F Multiplicatio 九九乘法表</strong></p>
<blockquote>
<p><em>Demo：<a href="http://rexhung.me/JS-and-Fighter/JS-and-Fighter-1F/index.html">點我</a><br/><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-1F">點我</a></em></p>
</blockquote>
</li>
<li><p><strong>Hero Of UnderGround — 2F Clock 時鐘</strong></p>
<blockquote>
<p><em>Demo：<a href="http://rexhung.me/JS-and-Fighter/JS-and-Fighter-2F/clock.html">點我</a><br/><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-2F">點我</a></em></p>
</blockquote>
</li>
<li><p><strong>Hero Of UnderGround — 3F Calculator 計算機</strong></p>
<blockquote>
<p><em>Demo：<a href="http://rexhung.me/JS-and-Fighter/JS-and-Fighter-3F/index.html">點我</a><br/><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-3F">點我</a></em></p>
</blockquote>
</li>
<li><p><strong>Hero Of UnderGround — 4F World Clock 各國時區</strong></p>
<blockquote>
<p><em>Demo：<a href="http://rexhung.me/JS-and-Fighter/JS-and-Fighter-4F/index.html">點我</a><br/><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-4F">點我</a><br/><br>Blog：<a href="https://medium.com/@zehung860486/hero-of-underground-%E5%9C%B0%E4%B8%8B%E5%9F%8E-4f-world-clock-%E5%90%84%E5%9C%8B%E6%99%82%E5%8D%80-2356786f3dfa">點我</a></em></p>
</blockquote>
</li>
<li><p><strong>Hero Of UnderGround — 5F AQI 全台空氣指標儀表板</strong></p>
<blockquote>
<p><em>Demo：<a href="http://rexhung.me/JS-and-Fighter/JS-and-Fighter-5F/index.html">*點我</a><br/><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-5F">*點我</a><br/><br>Blog：<a href="https://medium.com/@zehung860486/hero-of-underground-%E5%9C%B0%E4%B8%8B%E5%9F%8E-5f-aqi-%E5%85%A8%E5%8F%B0%E7%A9%BA%E6%B0%A3%E6%8C%87%E6%A8%99%E5%84%80%E8%A1%A8%E6%9D%BF-c060fbe58454">點我</a></em></p>
</blockquote>
</li>
<li><p><strong>Hero Of UnderGround — 6F SECONDS CHALLENGE 倒數遊戲</strong></p>
<blockquote>
<p><em>Demo：<a href="http://rexhung.me/JS-and-Fighter/JS-and-Fighter-6F/index.html">點我</a><br/><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-6F">點我</a><br/><br>Blog：<a href="https://medium.com/@zehung860486/hero-of-underground-%E5%9C%B0%E4%B8%8B%E5%9F%8E-6f-seconds-challenge-%E5%80%92%E6%95%B8%E9%81%8A%E6%88%B2-f71c0b680fdb">點我</a></em></p>
</blockquote>
</li>
<li><p><strong>Hero Of UnderGround — 7F Canvas 畫板</strong></p>
<blockquote>
<p><em>Demo：<a href="http://rexhung.me/JS-and-Fighter/JS-and-Fighter-7F/index.html">點我</a><br/><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-7F">點我</a><br/><br>Blog：<a href="https://medium.com/@zehung860486/hero-of-underground-%E5%9C%B0%E4%B8%8B%E5%9F%8E-7f-canvas-%E7%95%AB%E6%9D%BF-fca0a17ae652">點我</a></em></p>
</blockquote>
</li>
<li><p><strong>Hero Of UnderGround — 8F Tic-Tac-Toe 井字遊戲</strong></p>
<blockquote>
<p><em>Demo：<a href="http://rexhung.me/JS-and-Fighter/JS-and-Fighter-8F/dist/index.html">點我</a><br/><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-8F">點我</a><br/><br>Blog：<a href="https://medium.com/@zehung860486/hero-of-underground-%E5%9C%B0%E4%B8%8B%E5%9F%8E-8f-tic-tac-toe-%E4%BA%95%E5%AD%97%E9%81%8A%E6%88%B2-e5b3d95dd2cb">點我</a></em></p>
</blockquote>
</li>
<li><p><strong>Hero Of UnderGround — 10F <a href="https://chrome.google.com/webstore/category/extensions?hl=zh-TW">Chrome extension</a> 幹話生產器</strong></p>
<blockquote>
<p><em>Zip ： <a href="https://drive.google.com/file/d/1FBsq1g7ztFDNLX6OwiKKJCiiQxwuUFHE/view?usp=sharing">點我</a><br/><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-10F">點我</a><br/><br>Blog：<a href="https://medium.com/@zehung860486/hero-of-underground-%E5%9C%B0%E4%B8%8B%E5%9F%8E-10f-chrome-extension-%E5%B9%B9%E8%A9%B1%E7%94%9F%E7%94%A2%E5%99%A8-7c9f36a68bc7">點我</a></em></p>
</blockquote>
</li>
</ul>
<h3 id="Vue系列-—"><a href="#Vue系列-—" class="headerlink" title="Vue系列 —"></a>Vue系列 —</h3><ul>
<li><strong>[Vue Notes] — Vue-Cli #1 初次見面</strong><blockquote>
<p><em>Blog：<a href="https://medium.com/@zehung860486/vue-notes-vue-cli-1-%E5%88%9D%E6%AC%A1%E8%A6%8B%E9%9D%A2-e2d868ee04aa">點我</a></em></p>
</blockquote>
</li>
</ul>
<h3 id="CSS系列-—"><a href="#CSS系列-—" class="headerlink" title="CSS系列 —"></a>CSS系列 —</h3><ul>
<li><strong>[CSS Notes] — 談談CSS模組化</strong><blockquote>
<p><em>Blog：<a href="https://medium.com/@zehung860486/css-notes-css%E6%A8%A1%E7%B5%84%E5%8C%96-3bb03e72523e">點我</a></em></p>
</blockquote>
</li>
</ul>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li>只是想不到名子大大 — <a href="https://medium.com/s3267920/js%E5%9C%B0%E4%B8%8B%E5%9F%8E-11f-lightbox-68f6c744a198">JS地下城 🏰 11F — Lightbox</a></li>
<li>六角學院 — <a href="https://www.udemy.com/sasssecret/">Sass 實戰全攻略 — 成為前 1% 的 CSS 頂尖好手</a></li>
<li><a href="https://www.gamer.com.tw/index2.php?ad=N"><em>巴哈姆特 舒壓用</em></a></li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>前端</category>
        <category>HeroOfUnground[地下城]</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
        <tag>HexSchool</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hero Of UnderGround 地下城] — 7F Canvas 畫板</title>
    <url>/2019/03/19/20190319/</url>
    <content><![CDATA[<h2 id="成果-程式碼"><a href="#成果-程式碼" class="headerlink" title="成果 &amp; 程式碼"></a>成果 &amp; 程式碼</h2><blockquote>
<p>Demo：<a href="http://rexhung.me/JS-and-Fighter/JS-and-Fighter-7F/index.html">點我</a><br><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-7F">點我</a></p>
</blockquote>
<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>自從接觸 JS 後一直不敢觸碰的一塊，還記得前陣子碰到朋友在做抽抽樂轉盤，那時候便是看她用 Canvas 做出來的，狹路相逢(誤)，出來混總是要還的，這次的大魔王就是 Canvas 了！</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*LnEeafX9QlQNCJ6wbNNrWA.png" alt="7F的大魔王- Canvas畫板遊戲"></p>
<span id="more"></span>

<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p>由於JS地下城每個BOSS的弱點都不一樣，每一層都要由弱點去進行攻略，本次BOSS的弱點有二 項。</p>
<ul>
<li>【特定技術】<strong>遊戲規則</strong></li>
</ul>
<p>繪圖區請使用 Canvas 來設計，上方的控制列與下方的畫筆調整可不用</p>
<p>  -&gt; a.SAVE ：點擊後可直接下載轉出的 PNG 圖片</p>
<p>  -&gt; b.CLEAR ALL：清除畫版樣式</p>
<p>  -&gt; c.UNDO、REDO：上一步、下一步</p>
<p>  -&gt; d.點擊箭頭時，功能列介面皆可進行收闔</p>
<ul>
<li>【擴充功能】請再自行增加「兩個功能」，我相信勇者們都是很有梗的~</li>
</ul>
<h3 id="額外條件"><a href="#額外條件" class="headerlink" title="額外條件"></a>額外條件</h3><ol>
<li><p>你攻略此 BOSS 的攻略過程心得</p>
</li>
<li><p>你學習 Canvas 的學習過程</p>
</li>
<li><p>為什麼要用 Canvas，與一般 DOM 繪製有什麼優缺點？</p>
</li>
</ol>
<hr>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2052/1*9vvaxIWXy-irN7VsNjjFAw.png" alt="原諒我字醜，重寫了三小時"></p>
<h3 id="萬事起頭難…-嗎？"><a href="#萬事起頭難…-嗎？" class="headerlink" title="萬事起頭難…..嗎？"></a>萬事起頭難…..嗎？</h3><p>起頭難不難，其實要先感謝 <a href="https://github.com/HuiyuLiz/vue-canvas-drawing-app">Huiyu</a> 大大，因為很多東西都算是菜雞我第一次接觸，所以會先去爬文看看其他大佬們如何起手。這邊參考了一位國外大神的 <a href="https://www.youtube.com/watch?v=8ZGAzJ0drl0">Youtube</a> ，教你如何創造出簡單的畫布。<br>這次切版也用到比較多的動畫，順便訓練一下流暢性，還有順便解決 BOSS 的第一個弱點知一 d 。但搞切版就花了半天去了，原諒我菜TAT，比較特別的部分就是前面多位大大提過的 input color 了，後面的部分會提到。</p>
<blockquote>
<p>讚嘆感嘆便利的網路還有多位大神無私奉獻，現在很多東西其實不難了。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> *<span class="attr">id</span>*=<span class="string">&quot;drawing_board&quot;</span> *<span class="attr">width</span>*=<span class="string">&#x27;800&#x27;</span> *<span class="attr">height</span>*=<span class="string">&#x27;800&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Canvas 可以說是一張畫布，而你想要在上面幹啥都行，別想歪。</p>
<blockquote>
<p>預設的畫布大小是 300px * 150px（寬 * 高）。但你也可以透過 HTML 寬、高屬性（<a href="https://developer.mozilla.org/en-US/docs/Glossary/attribute">attribute</a>）自訂。<a href="https://developer.mozilla.org/zh-TW/docs/Web/API/Canvas_API/Tutorial">*點我</a>前往文章*</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;drawing_board&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>這可以說是只要寫到 <strong>Canvas</strong> 就一定會寫到的，給他的一個變數名稱，然後指定你是要用 <strong>2d</strong> 還是 <strong>3d</strong> 來作畫，這邊我們用到 <strong>2d</strong> 就夠了。之後給他寬高，還有畫筆，畫筆顏色…等等</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">canvas.<span class="property">width</span> = <span class="variable language_">window</span>.<span class="property">innerWidth</span>;</span><br><span class="line">canvas.<span class="property">height</span> = <span class="variable language_">window</span>.<span class="property">innerHeight</span>;</span><br><span class="line"><span class="comment">// 畫筆的顏色粗細等等</span></span><br><span class="line">ctx.<span class="property">strokeStyle</span> = <span class="string">&#x27;black&#x27;</span>;  <span class="comment">// 色筆顏色</span></span><br><span class="line">ctx.<span class="property">lineJoin</span> = <span class="string">&#x27;round&#x27;</span>;     <span class="comment">// 兩條線交會的地方，是圓角</span></span><br><span class="line">ctx.<span class="property">lineCap</span> = <span class="string">&#x27;round&#x27;</span>;      <span class="comment">// 繪製結束的線帽</span></span><br><span class="line">ctx.<span class="property">lineWidth</span> = <span class="number">10</span>;         <span class="comment">// 色筆大小</span></span><br></pre></td></tr></table></figure>

<p>設定完成後我們還需要做到幾件事情，既然我們要做畫板，就必須讓筆掌握在使用者手中，所以我們必須判斷使用者何時下手何時停手畫畫，然後給使用者 一個移動的監聽事件 ， 一個按下滑鼠的監聽事件 ， 一個放開滑鼠的監聽事件 ， 最後一個滑鼠離開的監聽事件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判斷是不是點下滑鼠了</span></span><br><span class="line"><span class="keyword">let</span> isDrawing = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 設定滑鼠座標</span></span><br><span class="line"><span class="keyword">let</span> lastX = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> lastY = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 滑鼠移動的監聽事件</span></span><br><span class="line">canvas.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, draw);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params">e</span>) &#123;</span><br><span class="line"><span class="title function_">console</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*JAiK0vdc-tyWJFLQHZ34OQ.png" alt="滑鼠監聽事件顯示出滑鼠座標"></p>
<hr>
<h3 id="畫下第一筆"><a href="#畫下第一筆" class="headerlink" title="畫下第一筆"></a>畫下第一筆</h3><p>完成了鼠標的座標抓取後，我們就可以來判斷何時該畫畫了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 滑鼠按下後</span></span><br><span class="line">canvas.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousedown&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  isDrawing = <span class="literal">true</span>;   <span class="comment">// 判斷是否正在畫畫</span></span><br><span class="line">  [lastX, lastY] = [e.<span class="property">offsetX</span>, e.<span class="property">offsetY</span>];</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 滑鼠放開後</span></span><br><span class="line">canvas.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseup&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">push</span>();             <span class="comment">// 跑進計算步數的 function 後面會提到</span></span><br><span class="line">  isDrawing = <span class="literal">false</span>;  <span class="comment">// 判斷是否正在畫畫</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 滑鼠離開後</span></span><br><span class="line">canvas.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseout&#x27;</span>, <span class="function">() =&gt;</span> isDrawing = <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 畫畫得 function 可以改為</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!isDrawing) <span class="keyword">return</span>; <span class="comment">// 沒有點擊時不回覆座標</span></span><br><span class="line">  ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">  <span class="comment">// 開始</span></span><br><span class="line">  ctx.<span class="title function_">moveTo</span>(lastX, lastY);</span><br><span class="line">  <span class="comment">// 結束</span></span><br><span class="line">  ctx.<span class="title function_">lineTo</span>(e.<span class="property">offsetX</span>, e.<span class="property">offsetY</span>);</span><br><span class="line">  <span class="comment">// 畫圖</span></span><br><span class="line">  ctx.<span class="title function_">stroke</span>();</span><br><span class="line">  [lastX, lastY] = [e.<span class="property">offsetX</span>, e.<span class="property">offsetY</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="使用-toDataURL-達到-UNDO-REDO"><a href="#使用-toDataURL-達到-UNDO-REDO" class="headerlink" title="使用 toDataURL() 達到 UNDO REDO"></a>使用 toDataURL() 達到 UNDO REDO</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> step = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> userhistory = [];</span><br></pre></td></tr></table></figure>

<p>首先我們必須設定兩個變數，一個用來計算步數，一個用來裝轉成 Base64 編碼的圖片字串，用陣列來放，讓我們靠  <strong>Step</strong> 就能達到上一步，下一步的功能，每畫一筆，我們就跑一次 <strong>Push</strong> 的 <strong>function</strong> 讓 <strong>Step++，並把圖片的字串放進陣列裡，讓讀取的時候能取出並蓋上畫布</strong> ，反之上一步就是 <strong>−−</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">push</span>(<span class="params"></span>) &#123;</span><br><span class="line">  step++;</span><br><span class="line">  <span class="keyword">if</span> (step &lt; userhistory.<span class="property">length</span> - <span class="number">1</span>) &#123;</span><br><span class="line">    userhistory.<span class="property">length</span> = step + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  userhistory.<span class="title function_">push</span>(canvas.<span class="title function_">toDataURL</span>()); <span class="comment">// 當前影像存成 Base64 編碼的字串並放入陣列</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這邊需要特別提到，因為一開始布數從 -1開始，為的是讓他可以符合陣列的特定，從 <strong>0</strong>開始算，這樣讀取時才能讀到資料，但是我們的上一步條件必須 <strong>Step &gt; 0</strong>，所以一開始我們就必須讓 <strong>Step+1</strong> ，不然會變成我一樣，苦惱好幾小時，為什麼第一筆畫都不能 <strong>UNDO</strong> …… 這邊感謝 <strong>7F</strong> 前端之碑主 <a href="https://medium.com/javascriptdeugonchallenge/jsdeugon07-2bda5221474f">陳顯然</a> 大大的解答。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 上一步的function</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">undo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (step &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  step--;</span><br><span class="line">  <span class="keyword">let</span> canvaspic = <span class="keyword">new</span> <span class="title class_">Image</span>(); <span class="comment">//建立新的 Image</span></span><br><span class="line">  canvaspic.<span class="property">src</span> = userhistory[step]; <span class="comment">//載入剛剛存放的影像</span></span><br><span class="line">  canvaspic.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      ctx.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, canvas.<span class="property">width</span>, canvas.<span class="property">height</span>);</span><br><span class="line">      ctx.<span class="title function_">drawImage</span>(canvaspic, <span class="number">0</span>, <span class="number">0</span>) <span class="comment">//匯出影像並從座標 x:0 y:0 開始</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 最後這邊是讓上一步下一步可以在不能使用時顯示灰色及更改鼠標，可以不加</span></span><br><span class="line">  <span class="keyword">if</span> (step &lt; userhistory.<span class="property">length</span> &amp;&amp; step &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;.next-step&#x27;</span>).<span class="title function_">removeClass</span>(<span class="string">&#x27;disable-btn&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上一步的做法跟下一步的做法相反而已，另外剛開始寫完這段的時候怎麼試都無法上一步，一直到最後加了 <strong>ctx.clearRect</strong> 後才有了反應，這邊不知道是不是有大大說的 <strong>Canvas</strong> 不吃 <strong>CSS</strong> 的問題，會再進一步探討並研究的。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;save&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">download</span>=<span class="string">&quot;我的偉大創作&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 儲存畫布的function</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">download</span>(<span class="params">position</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> dataURL = canvas.<span class="title function_">toDataURL</span>(<span class="string">&#x27;image/png&#x27;</span>) <span class="comment">// 把影像轉成指定格式的 URL 字串</span></span><br><span class="line">  position.<span class="property">href</span> = dataURL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另外儲存的部分在 <strong>html</strong> 上使用 <strong>href</strong> 去裝我們的字串，<strong>download</strong> 則是下載後的檔案名稱。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*seP_S6pzv27alP48JXaUfQ.png" alt="存在字串裡的 64base 圖片字串"></p>
<hr>
<h3 id="關於擴充功能"><a href="#關於擴充功能" class="headerlink" title="關於擴充功能"></a>關於擴充功能</h3><p>由於對 <strong>Canvas</strong> 是第一次接觸，所以就把各位大大做的功能拿來練手，畢竟菜雞腳程慢，到 7F 時各位大佬都已經飛天啦…這邊我選的功能是 <strong>橡皮擦、上傳圖片、顏色選擇器…</strong></p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2066/1*jyjX1zeYOz0uZ1JgWdJw5Q.png" alt="八土地下城(誤"></p>
<p>先說說簡單的 橡皮擦 其實就是把畫筆顏色改成背景顏色，然後看起來就像是擦掉了。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*J_9Cj_53nTXCFVoonq2gLA.png" alt="顏色選擇器"></p>
<blockquote>
<p>Input Color 对象是 HTML5 新增的，Input Color 對象代表了使用 type&#x3D;”color”属性的 HTML <input> 元素 。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myColor&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>隨後是我覺得超酷的功能，顏色選擇器，其實也很簡單，只是修改它的外觀比較麻煩。在 <strong>html</strong> 上加上這個之後，你會看見一個長方形的 <strong>input</strong> 但是點下去你就能選顏色了，透過 <strong>change</strong> 事件 <strong>input.value()</strong> 你就能取得使用者選擇的顏色了。然後就讓你的 <strong>ctx.strokeStyle</strong> 畫筆顏色 &#x3D; <strong>input.value()</strong> 吧！</p>
<p>這邊非常感謝 <a href="https://github.com/simpsons01/HexSchoolChallenge/blob/master/Week7/index.html">汶穎大大</a> 。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*7DlBd3T5oNZgKeAtyFGR4Q.png" alt="圖片上傳"></p>
<p>其中比較麻煩的應該就是上傳功能了，不過簡單理解下，就是透過 <strong>html</strong> 的 <strong>input files</strong> 上傳後，一樣透過 <strong>toDataURL()</strong> 把它轉成字串，然後用 <strong>Canvas</strong> 的 <strong>drawImage</strong> 把它畫出來。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control-file photo-up rounded&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;photo_up&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*BO0Js3hAdDHzgzDO2LYYNg.png" alt="必須使用Change事件"></p>
<p>需要注意的就是必須使用 <strong>Change</strong> 事件，不然圖片還沒選到，就會跑進裡面讀你的陣列有沒有圖片，會造成錯誤。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*cosnIXYu9v2IYC11cIBXTQ.png" alt="不要像我一樣傻傻地用Click搞了好幾小時"></p>
<h3 id="Canvas-的學習過程"><a href="#Canvas-的學習過程" class="headerlink" title="Canvas 的學習過程"></a>Canvas 的學習過程</h3><p>這次可以說是踩雷踩了又踩，看別人寫的 <strong>Code</strong> 像是數學老師解題一樣，自己寫出來又是一回事，不過就正式這樣才有成長，從剛開始什麼都不懂，現在至少能畫個圓形和直線出來…噗</p>
<h3 id="為什麼要用-Canvas？"><a href="#為什麼要用-Canvas？" class="headerlink" title="為什麼要用 Canvas？"></a>為什麼要用 Canvas？</h3><p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*bBdw5fqQ9UFfFQhzAXsYPQ.png" alt="Canvas歷史由來- 取至維基百科"></p>
<p><strong>Canvas</strong> 除了能做到畫畫 還能做出非常具有特色的<strong>3D遊戲</strong>，及<strong>動畫</strong>，重點是方便且快速，所以非常多人使用，必且在大神的學習在釋出的寶貴經驗之中， <strong>Canvas</strong> 甚至被做成了非常方便的套件。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*ckBh_yTkJNHyBUKp_OoGOA.png" alt="成果出爐了"></p>
<hr>
<h3 id="03-19更新-—-熟用-fillStyle-及-fillRect-別讓背景離家出走"><a href="#03-19更新-—-熟用-fillStyle-及-fillRect-別讓背景離家出走" class="headerlink" title="03&#x2F;19更新 — 熟用 fillStyle 及 fillRect 別讓背景離家出走"></a>03&#x2F;19更新 — 熟用 fillStyle 及 <strong>fillRect 別讓背景離家出走</strong></h3><p>由於沒注意到下載後背景的顏色，造成一開始背景是透明的，讓我大驚失色。詳細顏色設定請<a href="http://www.w3school.com.cn/tags/canvas_fillstyle.asp">點我</a></p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2330/1*sLfEzkq92_cVdVBt8sSYdA.png" alt="Canvas預設背景是透明的"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">firstpush</span>(<span class="params"></span>) &#123;</span><br><span class="line">  ctx.<span class="property">fillStyle</span> = <span class="string">&#x27;#E8E8E8&#x27;</span>; <span class="comment">// 讓第一次進來跑 function 的時候就加上背景顏色</span></span><br><span class="line">  ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, canvas.<span class="property">width</span>, canvas.<span class="property">height</span>)</span><br><span class="line">  <span class="title function_">push</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 因為 canvas.width = window.innerWidth;</span></span><br></pre></td></tr></table></figure>

<p>還記得一開始說我們的** Step** 預設是 -1 對吧，一開始我們進來必須設定一個 <strong>function</strong> 去讓它加一，我們就可以在裡面加上背景顏色，<strong>fillStyle</strong> 其實就是設定要填滿的顏色，記得要配上 **fillRect **服用，它是 用於填充繪圖的顏色、漸變或模式，預設是黑色，你也可以設定一定的大小範圍去填滿它，例如 <strong>ctx.fillRect(20,20,150,100)</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2330/1*TuSeKiSqY4sHURtRNDHTQg.png" alt="明顯了許多，背景回家了"></p>
<hr>
<h3 id="gradient-讓你的人生有起有落"><a href="#gradient-讓你的人生有起有落" class="headerlink" title="gradient 讓你的人生有起有落"></a><em>gradient 讓你的人生有起有落</em></h3><p>配上 <strong>gradient</strong> 或 <strong>pattern</strong> 服用，可以創造出漸層，也可以使用後者讓你的圖片填充你的畫布。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*un0teQDlE0jAJ3hbDm2yMw.png" alt="取自W3School [點我](https:&#x2F;&#x2F;www.w3schools.com&#x2F;TAgs&#x2F;tryit.asp?filename&#x3D;tryhtml5_canvas_createlineargradient)看文章"><em>取自W3School <a href="https://www.w3schools.com/TAgs/tryit.asp?filename=tryhtml5_canvas_createlineargradient">點我</a>看文章</em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 起手式</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myCanvas&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = c.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 四個參數設定下方會解釋</span></span><br><span class="line"><span class="keyword">var</span> grd = ctx.<span class="title function_">createLinearGradient</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">170</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 起始顏色(這邊為黑色)</span></span><br><span class="line">grd.<span class="title function_">addColorStop</span>(<span class="number">0</span>, <span class="string">&quot;black&quot;</span>);</span><br><span class="line"><span class="comment">// 結束顏色(這邊為白色)</span></span><br><span class="line">grd.<span class="title function_">addColorStop</span>(<span class="number">1</span>, <span class="string">&quot;white&quot;</span>);</span><br><span class="line"><span class="comment">// 填充的顏色改為漸層Gradient方式</span></span><br><span class="line">ctx.<span class="property">fillStyle</span> = grd;</span><br><span class="line"><span class="comment">// 繪畫的座標及範圍大小</span></span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">20</span>, <span class="number">20</span>, <span class="number">150</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>ctx.createLinearGradient(漸變開始點的 x 座標,<br>漸變開始點的 y 座標,漸變結束點的 x 座標,漸變結束的 y 座標)</p>
</blockquote>
<p><strong>詳細說明請<a href="http://www.runoob.com/jsref/met-canvas-createlineargradient.html">點我</a>查看</strong></p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>我想這次的 <strong>7F</strong> 不算破關，是靠著眾多前人智慧以及萬能谷歌大神，讓我學到了寶貴的一課，關於 <strong>Canvas</strong> 還有很多值得我去探討，這是較不容易學會卻是非常好用的東西之一，身為一位勇者，就是必須一直嘗試跌倒在嘗試啊。<br>雖然每一層樓都有主要的目標 <strong>BOSS</strong> 在，但卻會常常在路上學到其他壯大自己的知識，比如這次意外學習到 <strong>ES6</strong> 的 <strong>模板源文本（template strings</strong> ，有興趣可以<a href="https://medium.com/@dd0425/javascript-es6-template-strings-7b8addc97ea6">點我</a>查看，最後除了繼續努力之外還是要列出檢討的地方，然後朝下一關繼續加油，完畢。（這次真的需要好好加油呀…</p>
<ul>
<li><p>JS</p>
</li>
<li><p>邏輯</p>
</li>
<li><p>文筆</p>
</li>
<li><p><del><em>體重</em></del></p>
</li>
</ul>
<hr>
<h2 id="我的其他範例"><a href="#我的其他範例" class="headerlink" title="我的其他範例"></a>我的其他範例</h2><ul>
<li><p><strong>Hero Of UnderGround — 1F Multiplicatio 九九乘法表</strong></p>
<blockquote>
<p>Demo：<a href="http://rexhung.me/JS-and-Fighter/JS-and-Fighter-1F/index.html">點我</a><br/><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-1F">點我</a></p>
</blockquote>
</li>
<li><p><strong>Hero Of UnderGround — 2F Clock 時鐘</strong></p>
<blockquote>
<p>Demo：<a href="http://rexhung.me/JS-and-Fighter/JS-and-Fighter-2F/clock.html">點我</a><br/><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-2F">點我</a></p>
</blockquote>
</li>
<li><p><strong>Hero Of UnderGround — 3F Calculator 計算機</strong></p>
<blockquote>
<p>Demo：<a href="http://rexhung.me/JS-and-Fighter/JS-and-Fighter-3F/index.html">點我</a><br/><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-3F">點我</a></p>
</blockquote>
</li>
<li><p><strong>Hero Of UnderGround — 4F World Clock 各國時區</strong></p>
<blockquote>
<p>Demo：<a href="http://rexhung.me/JS-and-Fighter/JS-and-Fighter-4F/index.html">點我</a><br/><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-4F">點我</a><br/><br>Blog：<a href="https://medium.com/@zehung860486/hero-of-underground-%E5%9C%B0%E4%B8%8B%E5%9F%8E-4f-world-clock-%E5%90%84%E5%9C%8B%E6%99%82%E5%8D%80-2356786f3dfa">點我</a></p>
</blockquote>
</li>
<li><p><strong>Hero Of UnderGround — 5F AQI 全台空氣指標儀表板</strong></p>
<blockquote>
<p>Demo：<a href="http://rexhung.me/JS-and-Fighter/JS-and-Fighter-5F/index.html">*點我</a><em><br/><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-5F">*點我</a><br/><br>Blog：<a href="https://medium.com/@zehung860486/hero-of-underground-%E5%9C%B0%E4%B8%8B%E5%9F%8E-5f-aqi-%E5%85%A8%E5%8F%B0%E7%A9%BA%E6%B0%A3%E6%8C%87%E6%A8%99%E5%84%80%E8%A1%A8%E6%9D%BF-c060fbe58454">點我</a></em></p>
</blockquote>
</li>
<li><p><strong>Hero Of UnderGround — 6F SECONDS CHALLENGE 倒數遊戲</strong></p>
<blockquote>
<p><em>Demo：<a href="http://rexhung.me/JS-and-Fighter/JS-and-Fighter-6F/index.html">點我</a><br/><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-6F">點我</a><br/><br>Blog：<a href="https://medium.com/@zehung860486/hero-of-underground-%E5%9C%B0%E4%B8%8B%E5%9F%8E-6f-seconds-challenge-%E5%80%92%E6%95%B8%E9%81%8A%E6%88%B2-f71c0b680fdb">點我</a></em></p>
</blockquote>
</li>
</ul>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><a href="https://medium.com/javascriptdeugonchallenge/jsdeugon07-2bda5221474f">陳顯然大大的</a> — Canvas畫版</li>
<li><a href="https://github.com/HuiyuLiz/vue-canvas-drawing-app">HuiyuLiz大大的</a> — GitHub</li>
<li><a href="https://medium.com/@dd0425/javascript-es6-template-strings-7b8addc97ea6">Dosmanthus大大</a> — ES6 — Template Strings</li>
<li><a href="http://www.w3school.com.cn/">W3school 教學網站</a></li>
<li><a href="http://www.runoob.com/jsref/dom-obj-color.html">Runoob</a> — input color</li>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/API/Canvas_API/Tutorial/Using_images">MDN</a> — Canvas</li>
<li><a href="https://github.com/simpsons01/HexSchoolChallenge/blob/master/Week7/index.html">汶穎大大 </a>— 圖片上傳</li>
<li><a href="https://www.gamer.com.tw/index2.php?ad=N"><em>巴哈姆特 舒壓用</em></a></li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>前端</category>
        <category>HeroOfUnground[地下城]</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
        <tag>HexSchool</tag>
      </tags>
  </entry>
  <entry>
    <title>[CSS Note] - CSS模組化</title>
    <url>/2019/05/30/20190530/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>記得剛接觸 <strong>CSS</strong> 的時候覺得就是替東西加上屬性，沒有什麼特別的困難，因為都是一頁式的頁面，只要一支 <strong>all.css</strong> 就搞定，所以愛怎麼取名字愛怎麼給屬性就寫，慢慢的頁面多了，<strong>all.css</strong> 慢慢開始千行起跳了 ( 誤…，這時候開始思考 <strong>CSS</strong> 是否也能有自己的架構。</p>
<span id="more"></span>

<h3 id="為什麼要模組化？"><a href="#為什麼要模組化？" class="headerlink" title="為什麼要模組化？"></a>為什麼要模組化？</h3><p>一個有規劃有邏輯的專案，不管是一頁式或是大型專案，都需要有自己個規則還有規範，其中好處之一是自己過了一陣子回來看 <strong>Code</strong> 亦或是其他人接手案子後也能馬上清楚明白整體的架構及方便改寫，另外就是對於網頁的效能上或多或少都能有所幫助，除此之外還能減少你的工程時間。</p>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><blockquote>
<p>因為一直對於 <strong>CSS</strong> 算是一知半解，加上曾經被說過 <strong>CSS</strong> 命名跟管理很糟糕，最近在自己亂玩 <strong>Webpack</strong> 時就胡亂爬文學習 <strong>Sass</strong> 了，用了一陣子剛好碰上六角學院的 <strong>Sass</strong> 課程在特價(<a href="https://www.udemy.com/sasssecret/">點我選購XD</a>)，瞥見課程說明 <strong>懂得設計出一手好 CSS 命名</strong> 二話不說就買了，剛好課程內提到模組化，深深覺得很有幫助，就索性紀錄下來，偶爾在 <strong>CSS</strong> 上碰到難處還能回來看看文章。( 所以有寫錯的地方還請大神們手下留情…</p>
</blockquote>
<p>在這邊將會主要提到三個架構，你可以都不用，也可以只用其中一個，重點還是看你自己怎麼樣覺得方便。</p>
<ol>
<li><p><strong>SMACSS</strong> — 偏向整個專案架構的分類及模組化你的 <strong>CSS</strong></p>
</li>
<li><p><strong>OOCSS</strong> — 使用物件導向方式管理 <strong>CSS</strong> 的 <strong>Style</strong></p>
</li>
<li><p><strong>BEM</strong> — 關於 <strong>Class</strong>的命名方式</p>
</li>
</ol>
<p>不管哪一個類別，其實其中他們都有相似的地方，因為其中某些觀念都是相似的，所以有重疊的地方是正常的，如果你有自己的規範也能試著使用自己的方式，主要還是自己方便且好維護為主，主要<strong>記得四大要點</strong>：</p>
<ol>
<li><p><strong>可預測性( Predictable )</strong></p>
</li>
<li><p><strong>可重複使用性( Reusable )</strong></p>
</li>
<li><p><strong>易維護性( Maintainable )</strong></p>
</li>
<li><p><strong>可擴充性( Scalable )</strong></p>
</li>
</ol>
<hr>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*gDTN1PJcvC0T_9tskgCzuQ.png" alt="SMACSS — 易擴展及模組化"></p>
<h2 id="首先談談-SMACSS"><a href="#首先談談-SMACSS" class="headerlink" title="首先談談 SMACSS"></a><strong>首先談談 SMACSS</strong></h2><blockquote>
<p>全名為( <strong>Scalable and Modular Architecture for CSS</strong> ) ，顧名思義是可模組化且具結構分類有命名規則的方式，其中的精神就是<strong>容易擴展及模組化</strong>。<br>官方網站的介紹是免費的，<a href="http://smacss.com/">傳送門</a>在此 ( 建議詳讀</p>
</blockquote>
<p>基本上的結構分為 <strong>Base、Layout、Module、State、Theme</strong>。</p>
<p>・<strong>Base</strong> — 網頁基本樣式，還有 <strong>CSS Reset</strong>。</p>
<p>・<strong>Layout</strong> — 像是網頁的 <strong>hader、footer、sidebar</strong>，如果是唯一的區塊可以使用 <strong>id</strong> 取名；如果是重複出現一樣使用 <strong>Class</strong></p>
<p>・<strong>Module</strong> — 類似 <strong>component</strong> ，或是常常出現的區塊內容，比如 <strong>.list-li</strong></p>
<p>・<strong>State</strong> — 元件的狀態，例如 <strong>.list-li active</strong> 最後的 <strong>active</strong></p>
<p>・<strong>Theme</strong> — 樣式，例如 <strong>bootstrap</strong> 裡的 <strong>btn-dark</strong></p>
<p>看完結構後，就能知道怎麼命名，命名規則是在前面加上前綴，透過命名我們可以快速找到 <strong>CSS</strong> 是什麼類別，並且在大型專案中可以迅速找到在哪個文件中。例如 <strong>layout</strong> 使用 <strong>l-</strong> 為開頭，<strong>State</strong> 的部分則使用 <strong>is-</strong> 作為前綴，<strong>Module</strong> 則沒有主要的命名規則，因為 <strong>Module</strong> 名字太長， <strong>SMACSS</strong> 建議直接使用 <strong>Module</strong> 的名稱去命名。</p>
<p>講了這麼多架構，你其實只需要明白兩個步驟。</p>
<p>先把你需要常用到的樣式給一個初始值，這邊用 <strong>btn</strong> 舉例。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>:white;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之後其他地方需要用到 <strong>button</strong> 時，可以再給他第二層的客製樣式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.btn-danger</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>:red;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn-lg</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要用到客製化的地方在加上後面的 <strong>.btn-danger class</strong></p>
<p>這樣一來能有效管理你的  <strong>css</strong> 命名之外，也不會造成 <strong>css</strong> 檔案過肥。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*xBk9hrcsltCmW1HP8mkTFg.png" alt="子模組"></p>
<p>但是在 <strong>SMACSS</strong> 上還是有許多模糊的界線在，其實善用子模組，能讓你的 <strong>Class</strong> 清楚且少了重複命名的機率產生。</p>
<blockquote>
<p><strong>更詳細的介紹可以參考此網站：<a href="https://codingluka.com/making-a-button-by-using-sass/">傳送門</a></strong></p>
</blockquote>
<hr>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*WDLVkUOAOXEjNBCOjJI7zQ.png" alt="結構、樣式、容器、內容 — 層層分離"></p>
<h3 id="再來談談-OOCSS"><a href="#再來談談-OOCSS" class="headerlink" title="再來談談 OOCSS"></a>再來談談 OOCSS</h3><blockquote>
<p><em>( <strong>Object Oriented CSS</strong> )有兩項基本的原則，結構與樣式分離，容器與內容分離。<br>OOCSS官方網站：<a href="http://oocss.org/">傳送門</a></em></p>
</blockquote>
<p>其實基本上跟 <strong>SMASS</strong> 很相近，最好的範例就是 <strong><a href="https://bootstrap.hexschool.com/">bootstrap</a></strong> 或是 <strong><a href="https://960.gs/">960 Grid</a></strong>。<strong>OOCSS</strong> 的基本概念在盡量把樣式( <strong>CSS</strong> )從結構( <strong>ul、li、span…</strong> )中抽離出來，在把容器( <strong>body、container…</strong> )跟內容( <strong>list-group、page-box…</strong> )分開。主要要讓你的 <strong>CSS</strong>重複使用性拉高，減少網頁效能上過度渲染造成的速度緩慢後果。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*MqA-4K2N1j_9GyNOIJFz2Q.png" alt="結構與樣式分離"></p>
<h4 id="結構與樣式分離"><a href="#結構與樣式分離" class="headerlink" title="結構與樣式分離"></a>結構與樣式分離</h4><p>假設我們有一個表單，一般我們給予 <strong>span css</strong> 的方法會這樣下。但是有一個問題是，今天如果我們要在另一個區塊的  <strong>span</strong> 導入一樣的 <strong>css</strong>， 勢必要在下一次 <strong>css</strong>，亦或者今天結構變動，我不要  <strong>li</strong>  了，<strong>css</strong> 勢必會吃不到。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &gt; <span class="selector-tag">div</span> &gt; <span class="selector-tag">span</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*ZbilxKPjqKFdZIZdEC9H8Q.png" alt="把樣式抽離出來 盡量不使用到 HTML Tag"></p>
<p>如果我們把這個樣式抽離出來，並且取個名字，盡量不去使用 <strong>HTML Tag</strong> 這樣就是 <strong>結構與樣式分離</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*yGA_64rCbjIuJMGFfMnxqg.png" alt="容器與內容分離"></p>
<h4 id="容器與內容分離"><a href="#容器與內容分離" class="headerlink" title="容器與內容分離"></a>容器與內容分離</h4><p>這個就比較好懂了，也是盡量避免使用 <strong>.left-bar .list-group li span</strong> 去命名，除了會造成網頁在渲染時造成效能問題外，如我網頁結構需要變動，那真的是傷透腦筋。</p>
<p>按造上面的取名方法，假如今天 <strong>right-bar</strong> 需要使用到一樣的 <strong>css</strong> 我只需要幫他們的 <strong>class</strong> 加上對應的 <strong>css</strong> 就好了。</p>
<hr>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2952/1*aBQ0yxa00h44S8jkqtWTrg.png" alt="Block、Element、Modifier"></p>
<h3 id="最後來談談-BEM"><a href="#最後來談談-BEM" class="headerlink" title="最後來談談 BEM"></a>最後來談談 BEM</h3><blockquote>
<p>*這是我覺得最有用也最讓人一目瞭然的方式，你可以不嘗試 <strong>SMACSS</strong> 可以不嘗試 <strong>OOCSS</strong>，但你一定要試看看 <strong>BEM</strong>。<strong>Block( 區塊 )、Element( 元素 )、Modifier( 修飾符 )</strong>。*<br>BEM 理念上強調完全使用 <strong>Class Selector</strong> 並且以功能導向命名。<br>BEM官方網站：<a href="https://en.bem.info/methodology/quick-start/">傳送門</a></p>
</blockquote>
<p><strong>Block</strong> — 通常表示可獨立的元件，也可以存在於其他 <strong>Block</strong> 當中。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*DQaLNfP5RN3SFCaAPUUGCg.png" alt="介紹圖"></p>
<p><strong>Element</strong> — 這是存在於 <strong>Block</strong> 之中的小元件，並且不可單獨分離出來，命名也是功能導向，在自己的前方跟 <strong>Block</strong>銜接的地方用兩個下底線分開，在自己的名稱斷點使用一個分隔號隔開。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">--&gt; Block-name__Element-name // 命名規則</span><br><span class="line"></span><br><span class="line">--&gt; list-from__content       // 範例</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>Element</strong> 可以存在於 <strong>Element</strong>裡面，但是必須依賴在 <strong>Block</strong> 之下。</p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*rnByI1QQdBSN0GdDd6qbzA.png" alt="Element"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;list-from&quot;</span>&gt;</span></span><br><span class="line">  // 必須依附在 list-from 這個 Block 之下</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-from__content&quot;</span>&gt;</span></span><br><span class="line">    // 可以存在 content 這個 Element 之下</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;list-from__input&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*dxoxUxZ_C-OgOj4s7iHbvg.png" alt="Modifier"></p>
<p><strong>Modifier</strong> — 這是表述組建的狀態或行為，命名規則上以單底線_或兩橫線- - 。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;list-from&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-from__content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;list-from__input&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;list-from__span&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;list-from__span--active&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;list-from__span--pink&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>關於 <strong>BEM</strong> 官方有一套 <strong>CSS</strong> 分類方式，每一個 <strong>Block</strong> 都會有自己的資料夾路徑，並且裡面有這個 <strong>Block</strong> 的專屬 <strong>CSS</strong> 及 <strong>JS</strong>。裡面還會有這個 <strong>Block</strong> 下方 <strong>Element</strong> 的資料夾，並且開頭為 __ 。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">list-from/</span><br><span class="line">  list-from.css</span><br><span class="line">  list-from.js</span><br><span class="line">  __content/</span><br><span class="line">      list-from__content.css</span><br><span class="line">      list-from__content.js</span><br><span class="line">  __input/</span><br><span class="line">      list-from__input.css</span><br><span class="line">      list-from__input.js</span><br><span class="line">  __span/</span><br><span class="line">      list-from__span.css</span><br><span class="line">      list-from__span.js</span><br><span class="line">  _theme/</span><br><span class="line">      list-from__span--active.css</span><br><span class="line">      list-from__span--pink.css</span><br></pre></td></tr></table></figure>
<blockquote>
<p>詳細可以拜讀此篇文章：<a href="http://sj82516-blog.logdown.com/posts/1077348/finish-css-intro-oocss-smacss-bem">傳送門</a></p>
</blockquote>
<p>幾個重點整理：</p>
<ol>
<li><p><strong>Block</strong> 對應一個資料夾，命名相同，每個 <strong>Block</strong> 資料夾下面都有獨立的 <strong>JS</strong> 及<strong>CSS</strong> 檔案。</p>
</li>
<li><p><strong>Element</strong> 的資料夾命名採 <strong>雙底線</strong> 開頭，但是檔案命名一樣要加上 <strong>Block</strong> 名稱。</p>
</li>
<li><p><strong>Modifier</strong> 採單底線，並且 <strong>Modifier</strong> 下通常只有 <strong>CSS</strong> 檔案。</p>
</li>
</ol>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2216/1*flD2R09jNtJdJQBOVa3Bow.jpeg" alt="學習小筆記"></p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>在學 <strong>Code</strong> 時矇懞懂懂，一開始也不知道有什麼規範規則，這次拜六角學院課程所賜，索性研究了一下關於 <strong>CSS</strong> 的架構，在之後的練習及專案都會試著導入 <strong>SMACSS OOCSS BEM</strong> 等等的架構，並且試著找尋最適合自己的方式。</p>
<p>還是那句老話『<strong>沒有最好，只有最適合</strong>』，希望在成長的這一路上或多或少能幫助到某些在困惑的人，也照著自己最初寫 <strong>Blog</strong> 的初衷，用 <strong>Blog</strong> 紀錄自己的成長及缺點，再一段時間之後再回來檢討自己，也希望成長後的我，能幫助到剛開始成長的你。</p>
<p>從最剛開始的六角地下城開始，慢慢的練習 <strong>JS</strong> 到 <strong>Vue.js</strong> ，誤打誤撞研究 <strong>Webpack</strong> 之後現在慢慢學習 <strong>Sass</strong>，近期內的目標就是能用所學的這些，做出一個類似電商的網站，期許自己的成長，衝吧！</p>
<blockquote>
<p><em>( 會在努力吸取新知更新 CSS 系列的</em></p>
</blockquote>
<p>最後這邊提供一個自己練習照著 <strong>SMACSS OOCSS BEM</strong> 架構練習的 <strong>Source Code</strong>，因為是自己第一次練習寫，還能希望有大神能不吝嗇指教。</p>
<p><a href="https://github.com/RexHung0302/Hexschool-project">傳送門在此</a></p>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li>Segmentfault — <a href="https://segmentfault.com/a/1190000000389838">CSS设计模式：OOCSS 和 SMACSS</a></li>
<li><a href="https://cythilya.github.io/">Summer。桑莫。夏天</a> — CSS 的模組化方法：OOCSS、SMACSS、BEM、CSS Modules、CSS in JS</li>
<li>W3C — <a href="https://www.w3cplus.com/css/bem-definitions.html">BEM的定义</a></li>
<li>六角學院 —<a href="https://www.udemy.com/sasssecret/">Sass 實戰全攻略 — 成為前 1% 的 CSS 頂尖好手</a></li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>[Tool Note] — 關於爬蟲</title>
    <url>/2019/08/20/20190820/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>講到爬蟲可能大多數人都會想到 <strong>Python</strong>，但今天我們不談 <strong>Python</strong>。前陣子因為朋友在玩爬蟲，利用 <strong>PHP</strong> 寫了幾隻爬蟲爬二手商品資訊，雖然菜雞我接觸前端不久，但常常在想前端是不是也能做到什麼類型的事情。這時候就問了問朋友 <strong>JavaScript</strong> 能不能爬呢？得到的答案是可以的，其實各有優缺點，主要看你寫什麼起來順手。這邊有一篇知乎對爬蟲的比較有興趣可以看看，<a href="https://www.zhihu.com/question/23643061">傳送門</a>。</p>
<span id="more"></span>

<blockquote>
<p>9&#x2F;22後更：關於我的神人朋友 — <a href="https://medium.com/@z8892463/%E6%B2%92%E6%9C%89%E8%A6%81%E5%9C%A8%E9%80%99%E6%95%99%E4%BD%A0%E4%BB%80%E9%BA%BC-8a32f1054430">Chatbot Taichung＃2工作坊 沒有要在這教你什麼</a> ( 其實教了你一大堆 ， 有興趣可以看看他的玩具</p>
</blockquote>
<p><strong>這篇文章主要會寫如何用爬蟲爬外幣資訊並且在條件符合下寄信通知你，另外文章最後附上 GitHub。</strong></p>
<blockquote>
<p><strong>網路爬蟲</strong>（英語：web crawler），也叫網路蜘蛛（spider），是一種用來自動瀏覽<a href="https://zh.wikipedia.org/wiki/%E4%B8%87%E7%BB%B4%E7%BD%91">全球資訊網</a>的<a href="https://zh.wikipedia.org/w/index.php?title=%E7%BD%91%E7%BB%9C%E6%9C%BA%E5%99%A8%E4%BA%BA&action=edit&redlink=1">網路機器人</a>。其目的一般為編纂<a href="https://zh.wikipedia.org/w/index.php?title=%E7%BD%91%E7%BB%9C%E7%B4%A2%E5%BC%95&action=edit&redlink=1">網路索引</a> — 取自<a href="https://zh.wikipedia.org/zh-tw/%E7%B6%B2%E8%B7%AF%E7%88%AC%E8%9F%B2">維基百科</a></p>
</blockquote>
<hr>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*uaFTnckTNveOgf4DnpOj4g.png"></p>
<h3 id="快給我釣竿"><a href="#快給我釣竿" class="headerlink" title="快給我釣竿"></a>快給我釣竿</h3><p>記得之前要學前端框架的時候選擇 <strong>Vue.js</strong> 一來是因為比較好上手，二來因為以後如果要一窺後端世界可以透過 <strong>node.js</strong> 去學習，剛好這次能透過 <strong>node.js</strong> 去爬需要的資訊，就索性學起來啦。</p>
<blockquote>
<p><em>這次也是筆記形式，所寫之文章皆是作為筆記之用，如果有哪邊寫錯了還請各路高手不吝嗇指教。</em></p>
</blockquote>
<h3 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h3><p>這邊我們爬蟲最基本需要用到的 <strong>node.js</strong> 需要至少 <strong>4.x</strong> 版本以上，不過現在官方網站都能下載到最新的，所以還沒安裝到官方網站下載就可以囉，<a href="https://nodejs.org/en/download/">傳送門</a>。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*8a9ra6jgkwacL-JiACSclQ.png" alt="安裝完成"></p>
<p>安裝的時候會一併安裝 <strong>npm</strong>，不曉得這是什麼可以點我看我的文章介紹，<a href="https://medium.com/@zehung860486/tool-notes-%E9%97%9C%E6%96%BCwebpack-3c066dba93a2">[Tool Notes] — 關於Webpack</a>。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*Pane3sMRa-18xniuaBHozQ.png" alt="[關於 node_modules](https:&#x2F;&#x2F;medium.com&#x2F;@zehung860486&#x2F;tool-notes-%E9%97%9C%E6%96%BCwebpack-3c066dba93a2)"></p>
<hr>
<h3 id="除了釣竿還需要魚餌"><a href="#除了釣竿還需要魚餌" class="headerlink" title="除了釣竿還需要魚餌"></a>除了釣竿還需要魚餌</h3><p>打完我們的地基之後就須魚餌啦，就是我們的套件們，你會需要用到以下的套件。</p>
<ol>
<li><p><a href="https://www.npmjs.com/package/request">request</a> 獲取整個網頁的 <strong>HTML</strong></p>
</li>
<li><p><a href="https://www.npmjs.com/package/cheerio">cheerio</a> 後端的 jQuery</p>
</li>
<li><p><a href="https://www.npmjs.com/package/nodemailer">nodemailer</a> 用來寄信</p>
</li>
</ol>
<p>前兩項的介紹如果不了解看看下面這張圖吧。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2048/1*9kl-JA3WwdqYnC65UarJiQ.png" alt="匯率的數字不是真的"></p>
<p>安裝方式也很簡單，打開你的 <strong>終端機(terminal)</strong> 照著下面的指令打吧。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install request</span><br><span class="line">$ npm install cheerio</span><br><span class="line">$ npm install nodemailer</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="怎麼綁上我的魚餌？"><a href="#怎麼綁上我的魚餌？" class="headerlink" title="怎麼綁上我的魚餌？"></a><strong>怎麼綁上我的魚餌？</strong></h3><p>首先建立一支 <strong>index.js</strong> 檔，然後在前面引入我們需要用到的套件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">&quot;request&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">&quot;cheerio&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> nodemailer = <span class="built_in">require</span>(<span class="string">&#x27;nodemailer&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 這個不需要安裝直接引用即可，用來把資料寫入 JSON檔案</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>); </span><br></pre></td></tr></table></figure>

<p>之後基本的起手式大致如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> JPN_Crawler = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="comment">// 爬蟲要爬的網站</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;http://rate.bot.com.tw/Pages/Static/UIP003.zh-TW.htm&quot;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">  &#125;, <span class="keyword">function</span>(<span class="params">error, response, body</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error || !body) &#123;</span><br><span class="line">      <span class="comment">// 如果沒爬到就不做事</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 寫你要做的事情</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之後再 <strong>else</strong> 裡面寫上你要做的事情，寫法就跟一般我們寫 <strong>JavaScript</strong> 一樣。</p>
<hr>
<h3 id="那我怎麼抓-DOM-呢？"><a href="#那我怎麼抓-DOM-呢？" class="headerlink" title="那我怎麼抓 DOM 呢？"></a>那我怎麼抓 DOM 呢？</h3><p>你可能會有這樣的疑問，所以我們裝了 <strong>Cheerio</strong> 這個套件。使用方法也很簡單，相下面那樣去抓到 <strong>body</strong> 後再去你需要的區塊爬你需要的資訊。這邊以台銀的匯率網站作為介紹。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> $ = cheerio.<span class="title function_">load</span>(body); <span class="comment">// 抓到 body</span></span><br><span class="line"><span class="keyword">const</span> tr = $(<span class="string">&quot;tbody tr&quot;</span>);     <span class="comment">// 爬每一行的 tr</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2764/1*VGEc49auJIOgSPbrgvvx3g.png" alt="抓取每一行的 tr"></p>
<p>你可以只爬特定的一行，或是每一行都爬，爬到你需要的條件就記下來。因為之後還想要爬其他幣別，所以我就每一行都爬。</p>
<p>因為後面我們會把結果寫進 JSON 裡，這邊我們需要宣告一個陣列。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = []; <span class="comment">// 建立一個儲存結果的容器*</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2196/1*EG7hPk1rHmPSVp8rEriBig.png" alt="抓取你想要的資訊"></p>
<p>找到你要的內容，然後輸入 <strong>node index.js</strong>，然後就盡情地爬吧。</p>
<hr>
<h3 id="所以我要一直守在電腦前？"><a href="#所以我要一直守在電腦前？" class="headerlink" title="所以我要一直守在電腦前？"></a>所以我要一直守在電腦前？</h3><p>還記得前面我們裝了 <strong>nodemailer</strong> 嗎？這個就是用來寄信提醒你的，使用方式也很簡單，用一組自己的信箱去寄信，但是切記要先到  <strong>Google</strong>  修改安全性，這很重要，不然會報錯呦！</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*tIhy_sY4YCNKuV2heJmLug.png" alt="進入你的 Google 帳戶設定"></p>
<blockquote>
<p><em>進入「<strong>登入和安全性</strong>」，勾選「<strong>允許安全性較低的應用程式</strong>」 設定處於啟用狀態，這一步驟一定要做，不然屆時就會*<em>回報錯誤</em></em>。*</p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*Jed7cw539RHX5l6uYeOQ7Q.png" alt="選擇左側的安全性"></p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*vyhq7hbf5TdTIXmghBxd5w.png" alt="打開這道鎖"></p>
<p>都打開了之後這個套件的起手勢也很簡單，按照下面的方式打在你的 <strong>index.js</strong> 上吧。記得 <strong>user</strong> 和 <strong>pass</strong> 要改成自己的信箱帳號密碼。</p>
<blockquote>
<h4 id="如果有安全疑慮的話建議申辦一組平常沒在用的信箱，只會用來寄信而已。"><a href="#如果有安全疑慮的話建議申辦一組平常沒在用的信箱，只會用來寄信而已。" class="headerlink" title="如果有安全疑慮的話建議申辦一組平常沒在用的信箱，只會用來寄信而已。"></a>如果有安全疑慮的話建議申辦一組平常沒在用的信箱，只會用來寄信而已。</h4></blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化寄信</span></span><br><span class="line"><span class="keyword">var</span> transporter = nodemailer.<span class="title function_">createTransport</span>(&#123;</span><br><span class="line">  <span class="attr">service</span>: <span class="string">&#x27;gmail&#x27;</span>,</span><br><span class="line">  <span class="attr">auth</span>: &#123;</span><br><span class="line">    <span class="attr">user</span>: <span class="string">&#x27;user@oggole.com&#x27;</span>, <span class="comment">// mail Address</span></span><br><span class="line">    <span class="attr">pass</span>: <span class="string">&#x27;password&#x27;</span>         <span class="comment">// 密碼</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>這樣就算初始化完成，那如何寄信也很簡單，你可以設定條件或者不設定都可以，這邊設定如果日幣現金或即期賣出匯率低於 <strong>0.3</strong> ( 當下台銀為 <strong>0.29</strong>)就寄出一封信作為測試。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果匯率小於我們設定的就寄信 ( 變數記得自己設定 )</span></span><br><span class="line"><span class="keyword">if</span> (JPY_cashSellExchange &lt; <span class="number">0.29</span> || JPY_sightSellExchange &lt; <span class="number">0.29</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> mailOptions = &#123;</span><br><span class="line">    <span class="attr">from</span>: <span class="string">&#x27;&quot;你的爬蟲小弟&quot; &lt;user@google.com&gt;&#x27;</span>, <span class="comment">// 寄件者</span></span><br><span class="line">    <span class="attr">to</span>: <span class="string">&#x27;who@gmail.com&#x27;</span>,                    <span class="comment">// 收件者</span></span><br><span class="line">    <span class="attr">subject</span>: <span class="string">&#x27;該買日幣啦&#x27;</span>,                    <span class="comment">// 標題</span></span><br><span class="line">    <span class="attr">html</span>: <span class="string">&#x27;&lt;body&gt;&lt;h4&gt;日幣匯率：&lt;/h4&gt;&lt;span&gt;現在時間 -&gt; &lt;/span&gt;&lt;span&gt;&#x27;</span> + todayDate + <span class="string">&#x27; | &#x27;</span> + time + <span class="string">&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;日幣現金匯率為 -&gt; &lt;/span&gt;&lt;span style=&quot;color:yellow;&quot;&gt;&#x27;</span> + JPY_cashSellExchange + <span class="string">&#x27;&lt;/b&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;日幣現金匯率為 -&gt; &lt;/span&gt;&lt;span style=&quot;color:yellow;&quot;&gt;&#x27;</span> + JPY_cashSellExchange + <span class="string">&#x27;&lt;/b&gt;&lt;/span&gt;&lt;br/&gt;&lt;h5 href=&quot;https://rate.bot.com.tw/xrt?Lang=zh-TW&quot;&gt;以上取自台灣銀行 &lt;span style=&quot;font-size: 20px;&quot;&gt;&#x27;</span> + bankDate + <span class="string">&#x27;&lt;/span&gt; 牌告匯率&lt;/h5&gt;&lt;/body&gt;&#x27;</span> <span class="comment">// 帶有 HTML 格式的內容</span></span><br><span class="line">  &#125;;</span><br><span class="line">  transporter.<span class="title function_">sendMail</span>(mailOptions, <span class="keyword">function</span>(<span class="params">error, info</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Message sent: &#x27;</span> + info.<span class="property">response</span>); <span class="comment">// 寄信成功後印出訊息</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><em><strong>html</strong> 的部分是可以帶有 <strong>HTML</strong> 格式的內容，目前還沒研究怎麼打會比較方便，雖然只是要用來提醒，但是這樣子輸入就是有點麻煩，日後再補上其他方法。</em></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*iGzx4Ciy3hF5Spz3XQTG9w.png" alt="完成啦"></p>
<h3 id="所以還是要守在電腦前輸入指令嗎？"><a href="#所以還是要守在電腦前輸入指令嗎？" class="headerlink" title="所以還是要守在電腦前輸入指令嗎？"></a>所以還是要守在電腦前輸入指令嗎？</h3><p>前面雖然提到了條件符合可以直接寄信，但是我們還是沒讓他做到自動爬蟲的重點，其實你已經完成了大部分了，很簡單接下來只要讓他 <strong>setInterval</strong> 就完成。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 兩十分鐘爬一次</span></span><br><span class="line"><span class="built_in">setInterval</span>( 你的<span class="keyword">function</span>名稱 , <span class="number">12000</span> * <span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<h3 id="切記如果時間設得太短記得增加條件去判斷是否記過信了，不然信箱可是會被塞爆呢-笑！"><a href="#切記如果時間設得太短記得增加條件去判斷是否記過信了，不然信箱可是會被塞爆呢-笑！" class="headerlink" title="切記如果時間設得太短記得增加條件去判斷是否記過信了，不然信箱可是會被塞爆呢 ( 笑！"></a><em>切記如果時間設得太短記得增加條件去判斷是否記過信了，不然信箱可是會被塞爆呢 ( 笑！</em></h3></blockquote>
<hr>
<h3 id="等等說好的-JSON-呢？"><a href="#等等說好的-JSON-呢？" class="headerlink" title="等等說好的 JSON 呢？"></a>等等說好的 JSON 呢？</h3><p>記得前面我們說的 <strong>fs</strong> 嗎？其實只需要使用這個就可以寫入 <strong>JSON</strong>了！</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 這個不需要安裝直接引用即可，用來把資料寫入JSON檔案</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 寫入 result.json 檔案</span></span><br><span class="line">fs.<span class="title function_">writeFileSync</span>(<span class="string">&quot;result.json&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(result));</span><br></pre></td></tr></table></figure>

<p>按照這種方式就會自動創建一個 <strong>JSON</strong> 檔案了，很方便吧！</p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>這次爬蟲小筆記真的只能算超級超級小菜一碟，對於爬蟲世界還有好多要學，但是學程式就是這樣，找到你有興趣的東西研究下去就對了，就跟健身一樣，重點不在於重量，在堅持！</p>
<p>爬蟲還有好多地方要學習，像是怎麼繞過 <strong>18禁</strong> ( 誤，需要登入帳號密碼…等，日後再補齊筆記上來。</p>
<blockquote>
<h3 id="另外關於這次的爬蟲有上傳-GitHub-如果不嫌棄的大大可以下載來玩玩，傳送門。"><a href="#另外關於這次的爬蟲有上傳-GitHub-如果不嫌棄的大大可以下載來玩玩，傳送門。" class="headerlink" title="另外關於這次的爬蟲有上傳 GitHub 如果不嫌棄的大大可以下載來玩玩，傳送門。"></a>另外關於這次的爬蟲有上傳 GitHub 如果不嫌棄的大大可以下載來玩玩，<a href="https://github.com/RexHung0302/Crawler">傳送門</a>。</h3></blockquote>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li>台銀 — <a href="https://rate.bot.com.tw/xrt">牌告匯率</a></li>
<li><a href="https://larrylu.blog/@larry850806?source=post_page-----414e33f45c7d----------------------">Larry Lu</a>大神 —<a href="https://larrylu.blog/nodejs-request-cheerio-weather-414e33f45c7d"> [Node.js] 用 request + cheerio 抓取即時天氣</a></li>
<li>Webduino學習手冊 — <a href="https://tutorials.webduino.io/zh-tw/docs/socket/useful/exchange-nodejs.html">日幣匯率 ( Node-js 爬蟲 )</a></li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>Crawler</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>Other</tag>
        <tag>Crawler</tag>
      </tags>
  </entry>
  <entry>
    <title>[PHP Note] — 關於 php-Redis install on Mac OSX</title>
    <url>/2019/07/14/20190714/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>最近因為工作關係有碰到 <strong>Redis</strong> ，雖然菜雞前端對後端還一竅不通，不過照慣例關於安裝的部分還是要寫一下的！以後也有個根據可以來看看，以防忘記。所以這只是小筆記關於 <strong>PHP-Redis</strong> 的安裝( <strong>For Mac OSX 因為菜雞我大部分使用 Mac</strong>)，如果有誤還請不吝嗇指教。</p>
<span id="more"></span>

<p>雖然不太了解 <strong>Redis</strong> 是什麼，但是還是要餵狗( <strong>google</strong> )一下。<strong>REmote DIctionary Server(Redis)</strong> 是一個 <strong>key-value</strong> 儲存系統。常常聽到需要大量用到資料庫(<strong>快取 Cache 的時候</strong>)的時候就會透過 <strong>Redis</strong> 來減輕資料庫的壓力。</p>
<blockquote>
<p>這邊不過多探討，詳情可以見 <a href="https://blog.techbridge.cc/2016/06/18/redis-introduction/">傳送門</a></p>
</blockquote>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p><strong>安裝方法1：</strong></p>
<ol>
<li><p><a href="#a031">Install wget &amp; pecl.</a></p>
</li>
<li><p><a href="#f526">Install pear.</a></p>
</li>
<li><p><a href="#199a">Install PHPRedis.</a></p>
</li>
<li><p><a href="#b905">About php.ini.</a></p>
</li>
</ol>
<p>✔︎ <strong>安裝方法2( 最後透過此方法安裝完成 )：</strong></p>
<ol>
<li><p><a href="#4117">Install PHP-Redis With MAMP</a></p>
</li>
<li><p><a href="#4c39">關於 Cannot find config.m4 錯誤</a></p>
</li>
</ol>
<hr>
<h2 id="Install-wget-pecl"><a href="#Install-wget-pecl" class="headerlink" title="Install wget &amp; pecl"></a>Install wget &amp; pecl</h2><blockquote>
<p>詳細可參考：<a href="https://stackoverflow.com/questions/33886917/how-to-install-wget-in-macos">How to install wget in macOS? [closed]</a></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2400/1*Il8bOi96ZtUGQTjeUVoG1A.png" alt="Img from https:&#x2F;&#x2F;www.google.com&#x2F;search?biw&#x3D;1868&amp;bih&#x3D;928&amp;tbm&#x3D;isch&amp;sa&#x3D;1&amp;ei&#x3D;sFQoXaSHHcPWhwP346v4Bg&amp;q&#x3D;homebrew&amp;oq&#x3D;homebrew&amp;gs_l&#x3D;img.3..0j0i7i30l2j0i30l7.3393.4872..5048...0.0..0.57.304.6......0....1..gws-wiz-img.......35i39j0i10i24.qZNiJeP4uWY#imgrc&#x3D;jJS8P8NvKE_aiM:"></p>
<p>因為安裝 <strong>PHP-Redis</strong> 必須透過 <strong>pecl</strong>，所以必須先做一些事前作業，</p>
<p>首先如果沒有安裝 <strong><a href="http://brew.sh/">brew</a></strong> 需要先安裝：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure>

<p>接下來透過 <strong>brew</strong> 來安裝 <strong>wget</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew install wget --with-libressl</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*FaA3itv-whYRjL3fNxsTPg.png"></p>
<p>這時候如果你炸開了，出現警告的話試試看：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew install wget</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Now-let’s-install-pear"><a href="#Now-let’s-install-pear" class="headerlink" title="Now let’s install pear"></a>Now let’s install pear</h3><blockquote>
<p>詳細可參考：<a href="https://blog.caesarchi.com/2012/03/17/-e6-95-99-e5-ad-b8-mac--e5-ae-89-e8-a3-9d-pecl--ef-bc-8c-e5-ae-89-e8-a3-9d-php-extension/">[教學] Mac 安裝 pecl ，安裝 php extension.</a></p>
</blockquote>
<p>首先安裝 <strong>pear</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ wget [http://pear.php.net/go-pear.phar](http://pear.php.net/go-pear.phar)</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*pUcHBQ6TwuRwZf80nMki2g.png" alt="**Success**"></p>
<p>接下來輸入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ php -d detect_unicode=0 go-pear.phar</span><br></pre></td></tr></table></figure>
<p>‘<br>接下來會顯示一些資訊，如果都沒有要輸入就一路 <strong>Enter</strong> 到尾吧！</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*LTIsgzkHBNGxVbvCHBiIOg.png"></p>
<p>接下來添加環境變數到你的 <strong>.zshrc</strong> 或 <strong>.config</strong> 或 <strong>.bash_profile</strong>：<br><strong>(通常會在 &#x2F;Users&#x2F;$USER&#x2F; )</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ export PATH=$PATH:/Users/zehung/pear/bin</span><br></pre></td></tr></table></figure>

<blockquote>
<h2 id="注意：添加完成後必須重新啟動-Terminal-或-iTerm！"><a href="#注意：添加完成後必須重新啟動-Terminal-或-iTerm！" class="headerlink" title="注意：添加完成後必須重新啟動 Terminal 或 iTerm！"></a><em>注意：添加完成後必須重新啟動 Terminal 或 iTerm！</em></h2></blockquote>
<p>現在輸入 <strong>pecl help</strong> 你可以看到一些資訊，代表成功了！</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*8UDGLIKug-AZixbFTzLAkQ.png" alt="**pecl can use now**"></p>
<hr>
<h3 id="Install-PHP-Redis"><a href="#Install-PHP-Redis" class="headerlink" title="Install PHP-Redis"></a>Install PHP-Redis</h3><blockquote>
<p>詳細可參考：<a href="https://stackoverflow.com/questions/51908004/install-phpredis-mac-osx">Install phpredis MAC OSX</a>.</p>
</blockquote>
<p>首先 <strong>Git clone phpredis</strong> 然後進入資料夾內安裝：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone [https://www.github.com/phpredis/phpredis.git](https://www.github.com/phpredis/phpredis.git)</span><br><span class="line">$ cd phpredis</span><br><span class="line">$ phpize &amp;&amp; ./configure &amp;&amp; make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*OMW5gMlYEAuO1KrsQTWQvA.png" alt="**Install success**"></p>
<p>接下來添加這面這行到你的 <strong>php.ini</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ extension=redis.so</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2400/1*0nJ43FpUf2wefbxzxb-wZQ.png" alt="Img from [this](https:&#x2F;&#x2F;www.google.com&#x2F;search?tbm&#x3D;isch&amp;source&#x3D;hp&amp;biw&#x3D;1868&amp;bih&#x3D;977&amp;ei&#x3D;U2QoXZEpjuzzBazWg-AM&amp;q&#x3D;php&amp;oq&#x3D;php&amp;gs_l&#x3D;img.3..35i39l2j0l8.1450.2194..2353...0.0..0.76.252.6......0....1..gws-wiz-img.....0.XGJUGuNsjtg#imgrc&#x3D;XTO7ngnkIubMrM:)."></p>
<hr>
<h3 id="關於怎麼找-php-ini"><a href="#關於怎麼找-php-ini" class="headerlink" title="關於怎麼找 php.ini"></a>關於怎麼找 php.ini</h3><p>創建一支 .php 檔案輸入下面程式碼，然後打開它：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>尋找 <strong>Loaded Configuration File</strong> 這行，接下來就可直接打開編輯或是 <strong>vim</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2010/1*gH38dpbk7SweEd_HPDDXSA.png"></p>
<p>接下來重啟你的php，輸入下列指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew services restart (php@7.1.8) **// 最後php@後面放你的版本**</span><br></pre></td></tr></table></figure>

<p>如果又噴錯，發生下面情形：</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*rokJogPdN0efTcRPtsvcZw.png"></p>
<p>試試看輸入下面指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ curl -o /usr/local/bin/brew-services.rb [https://gist.githubusercontent.com/lwe/766293/raw/75a7907004bbff0eb3b072d1d951be2cfe7e5020/brew-services.rb](https://gist.githubusercontent.com/lwe/766293/raw/75a7907004bbff0eb3b072d1d951be2cfe7e5020/brew-services.rb)</span><br><span class="line"></span><br><span class="line">$ chmod +x /usr/local/bin/brew-services.rb</span><br><span class="line"></span><br><span class="line">$ brew services help</span><br></pre></td></tr></table></figure>

<p>接下來重啟你的 <strong>php</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew services restart php@7.2</span><br><span class="line">$ make test </span><br></pre></td></tr></table></figure>

<p>最後可以輸入指令來檢查有無安裝成功：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ php -r &quot;if (new Redis() == true)&#123; echo \&quot;\r\n OK \r\n\&quot;; &#125;&quot;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Install-PHP-Redis-With-MAMP"><a href="#Install-PHP-Redis-With-MAMP" class="headerlink" title="Install PHP-Redis With MAMP"></a>Install PHP-Redis With MAMP</h2><blockquote>
<p>MAMP詳細安裝可參考：<a href="https://progressbar.tw/posts/27">[PHP][Mac] 00. 覺得開發環境設定很麻煩嗎，用MAMP安裝就對了！</a></p>
</blockquote>
<blockquote>
<p>詳細可參考：<a href="https://kknews.cc/other/pgmymrj.html">在MAC版MAMP環境下為PHP7.x安裝redis擴展的過程</a>.</p>
</blockquote>
<blockquote>
<p>或是這篇：<a href="https://segmentfault.com/a/1190000010298874">MAMP下安装PHP Redis扩展及Redis下载使用</a>.( ✔︎ 我是參考這篇安裝完成的)</p>
</blockquote>
<p>事前準備必須先安裝 <strong>Homebrew</strong>，直接輸入下方指令安裝：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure>

<h3 id="讓我們騰雲駕霧吧"><a href="#讓我們騰雲駕霧吧" class="headerlink" title="讓我們騰雲駕霧吧"></a>讓我們騰雲駕霧吧</h3><p>首先必須先對 <strong>PHP</strong> 進行配置，我們先下載 <strong>PHP</strong> 源碼 (依你的版本 盡量是 .tar 格式 網址在下方傳送門)，然後放置你版本的資料夾：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ /Applications/MAMP/bin/php/php(你的版本)／include/php</span><br></pre></td></tr></table></figure>

<p><strong>記得路徑不一定是絕對的，要找到自己的 MAMP 資料夾後再去找你的版本號，<a href="https://www.php.net/downloads.php">源碼下載傳送門</a>，如果找不到可以試著使用下面一行的指令(記得要安裝上方的 wget 哦！)。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -O php-版本號.tar.gz http://us.php.net/get/php-5.5.14.tar.gz/from/this/mirror</span><br></pre></td></tr></table></figure>

<p>然後輸入 <strong>.&#x2F;configure</strong> 安裝，成功會出現下圖：</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*IrRmQfOKL0Zr_b-OwwboDw.png"></p>
<p>如果失敗的話可以參考 <a href="https://stackoverflow.com/questions/24987305/php-configure-error-please-specify-the-install-prefix-of-iconv-with-with-icon">傳送門</a> 並執行下面這兩個：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew install homebrew/core/libiconv</span><br><span class="line"></span><br><span class="line">$ ./configure --with-iconv=$(brew --prefix libiconv)</span><br></pre></td></tr></table></figure>

<p>然後在 <strong>&#x2F;Applications&#x2F;MAMP&#x2F;bin&#x2F;php&#x2F;php( 你的版本 )&#x2F;include&#x2F;php</strong> 這個資料夾下 <strong>Git Clone PHP-Redis( <a href="https://github.com/phpredis/phpredis">傳送門</a> )</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone [https://github.com/phpredis/phpredis.git](https://github.com/phpredis/phpredis.git)</span><br></pre></td></tr></table></figure>

<p>先進入 clone 下來的 PHP-Redis</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd phpredis</span><br></pre></td></tr></table></figure>

<p>接著輸入( <strong>路徑滿重要的 錯誤可能要自己抓一下 踩了好久的坑</strong> )：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ /Applications/MAMP/bin/php/php(你的版本)/bin/phpize</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*goGLDtSmUJdgo2QDGWjkYQ.png" alt="成功畫面"></p>
<p>再接著輸入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./configure --with-php-config=/Applications/MAMP/bin/php/php(你的版本)/bin/php-config</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*VcRar6MdvqJgl78KT92DOg.png"></p>
<p>最後輸入 <strong>make</strong>， 成功會看見下圖：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ make</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*D2Bzvdu_clpLZoRVNULP8g.png"></p>
<h3 id="重要步驟注意！！"><a href="#重要步驟注意！！" class="headerlink" title="重要步驟注意！！"></a>重要步驟注意！！</h3><p>成功後你的資料夾會多一個 <strong>module</strong>，這時候進到裡面複製 redis.so 的執行程式，然後丟掉 <strong>applications&#x2F;MAMP&#x2F;bin&#x2F;php&#x2F;php版本號&#x2F;lib&#x2F;php&#x2F;extensions&#x2F;no-debug-non-zts-一串數字</strong> 下面，路徑自己要看一下。</p>
<p>最後的最後我們只需要把 <strong>extension</strong> 加上你所使用的 <strong>php.ini</strong> 即可，現在你可以 <strong>cd</strong> 進入 <strong>module</strong> 然後 <strong>ls</strong> 看看有沒有 <strong>redis.so</strong> 的檔案，然後打開你的 <strong>MAMP</strong> 再你所使用 <strong>PHP</strong> 版本的 <strong>php.ini</strong>最後加上  <strong>extension</strong> 即可完成。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*O9hXyzxXQsHolXcjykbZ2A.png" alt="選擇你的版本號"></p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*FKchfNBz_iMU5ry25sLAQw.png" alt="添加上你的 redis.so 檔案路徑"></p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*QvHMGwn3I57AOv4Sc_t-cQ.png" alt="系統如果沒有提示你重開必須自己手動重啟"></p>
<h3 id="大功告成啦"><a href="#大功告成啦" class="headerlink" title="大功告成啦"></a>大功告成啦</h3><p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*HSE9M6S51E3_w7fqaZl_bg.png" alt="Finally finished"></p>
<blockquote>
<p><em>如果無法成功，記得把上方剛剛最後要輸入路徑的 <strong>redis.so</strong> 那個地方改為 <strong>extension &#x3D; redis.so;</strong> 即可。</em></p>
</blockquote>
<hr>
<h3 id="關於-Cannot-find-config-m4-錯誤"><a href="#關於-Cannot-find-config-m4-錯誤" class="headerlink" title="關於 Cannot find config.m4 錯誤"></a>關於 Cannot find config.m4 錯誤</h3><p>如果看見這個錯誤(詳情 <a href="https://www.fujieace.com/php/php-extensions/config-m4.html">傳送門</a>)</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*MgytsLeSJETtZrDSQJ2Vog.png"></p>
<p>這是因為你所在的路徑錯誤，或是沒有找到 <strong>config.m4</strong> 這個檔案。首先進入你  <strong>MAMP</strong> 所用的那個 <strong>PHP</strong>的版本資料夾，進入下面的位子。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd /Applications/MAMP/bin/php/php(你的版本)/include/php/ext/zlib</span><br></pre></td></tr></table></figure>

<p>再次執行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ /Applications/MAMP/bin/php/php(你的版本)/bin/phpize</span><br></pre></td></tr></table></figure>

<p>如果再度噴錯代表可能檔案名稱不對，更改檔案名稱即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mv config0.m4 config.m4</span><br></pre></td></tr></table></figure>

<p>然後再次執行一次下列程式碼，接著會看到下一張圖：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ /Applications/MAMP/bin/php/php(你的版本)/include/php/ext/zlib</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*9citlEk_EugjaPVsOYbuDA.png" alt="成功了"></p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>因為本機安裝一直無法成功，後來改用 <strong>MAMP PRO</strong> 終於安裝成功，一直卡住噴錯的人也可以試試，以上僅供參考，寫成小筆記來記錄之後自己比較不會忘記。因為對後端非常之不熟，有任何疑慮都可以餵狗( <strong>google</strong> )，或是留個言，感謝各位大大指教。</p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><a href="https://stackoverflow.com/questions/33886917/how-to-install-wget-in-macos">How to install wget in macOS? [closed]</a></li>
<li><a href="https://blog.caesarchi.com/2012/03/17/-e6-95-99-e5-ad-b8-mac--e5-ae-89-e8-a3-9d-pecl--ef-bc-8c-e5-ae-89-e8-a3-9d-php-extension/">[教學] Mac 安裝 pecl ，安裝 php extension.</a></li>
<li><a href="https://stackoverflow.com/questions/51908004/install-phpredis-mac-osx">Install phpredis MAC OSX</a>.</li>
<li><a href="https://blog.techbridge.cc/2016/06/18/redis-introduction/">資料庫的好夥伴:Redis</a></li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>PHP</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hero Of UnderGround 地下城] — 10F Chrome extension 幹話生產器</title>
    <url>/2019/05/18/20190518/</url>
    <content><![CDATA[<h2 id="zip檔下載-程式碼"><a href="#zip檔下載-程式碼" class="headerlink" title="zip檔下載 &amp; 程式碼"></a>zip檔下載 &amp; 程式碼</h2><blockquote>
<p>Zip ： <a href="https://drive.google.com/file/d/1FBsq1g7ztFDNLX6OwiKKJCiiQxwuUFHE/view?usp=sharing">點我</a><br/><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-10F">點我</a></p>
</blockquote>
<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>距離上次更新已經一段時間了，慚愧。這段時間其實一直卡在九樓，還有工作、偷學Webpack……等等東忙西忙，眼看時光流逝，覺得不能再拖，就直接上十樓打雙數的第一位 <strong>Boss</strong> 了。還好前面都還有勇者擋著，目前計畫這關打完，再回去繼續把九樓完成，請原諒我…（逃</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*iupAX0LSU9ne0n5AZDzcqg.png" alt="10F — 第一位雙數大魔王"></p>
<span id="more"></span>

<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p>由於JS地下城每個BOSS的弱點都不一樣，每一層都要由弱點去進行攻略，本次BOSS的弱點有六項。</p>
<ol>
<li><p>【特定技術】請開發 <a href="https://chrome.google.com/webstore/category/extensions?hl=zh-TW">Chrome extension</a>，不需上架，投稿時請提供安裝檔放在雲端，以供 GM 下載測試。什麼？你說你想上架？嘛.. 人生想要什麼都嘗試，也是可以的啦。</p>
</li>
<li><p>【特定技術】打開 Chrome 新頁(tab)時，會隨機顯示你自己新增的語錄，或者是幹話。</p>
</li>
<li><p>【特定技術】可切換夜間&#x2F;日間模式。</p>
</li>
</ol>
<p>4.【特定技術】新增語錄時，有兩種方式新增，一種是在頁面裡新增，另一種是點選瀏覽器右上角 icon 來新增。</p>
<p>5.【特定技術】背景插圖固定即可，目前的圖片只提供兩張，設計師本來很殘忍地說：「要不要也讓語錄也能新增客製化背景圖片？」，校長想了想，還是決定固定就好，不要太殘忍，當然你想試試看，校長也是不反對啦。</p>
<p>6.【書寫能力】請寫一篇 BLOG 來介紹你的挑戰過程，目前 Chrome 插件的教學文尚嫌太少，曾經鐵人邦有寫過<a href="https://ithelp.ithome.com.tw/users/20079450/ironman/1149">一系列</a>教學文，但仍尚缺整個上架流程的文章，為了豐富網路上的各種攻略資源，這個重責大任就交給地下城的各位勇者們了！（拍肩</p>
<blockquote>
<p><em>好久沒有寫文章覺得都生疏了，不過本來初衷就是寫給自己複習的，應該也沒人會看啦，苦笑。</em></p>
</blockquote>
<hr>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2420/1*BB3srtpNVID3hEdmdi9HkQ.png" alt="Chrome Store"></p>
<h3 id="什麼是-Chrome-Extension-？"><a href="#什麼是-Chrome-Extension-？" class="headerlink" title="什麼是 Chrome Extension ？"></a>什麼是 Chrome Extension ？</h3><blockquote>
<p><em>簡單來說就是屬於一種 <strong>外掛</strong>，可以想成是輔助程式。目前可以分成三大類，應用程式 (<strong>Chrome Apps</strong>)、擴充功能 (<strong>Chrome Extensions</strong>)、主題 (<strong>Chrome Themes</strong>)…等</em></p>
</blockquote>
<p>我想第一次接觸的工程師通常比較關心的是，我該如何做出一個 <strong>Chrome Extension</strong> 呢？首先必須要會基本的 <strong>HTML CSS Javascript</strong> 這三項，除非你想做的是主題，這邊就先不討論這塊。</p>
<h3 id="打底很重要！"><a href="#打底很重要！" class="headerlink" title="打底很重要！"></a>打底很重要！</h3><blockquote>
<p><em>任何東西都有一定的規則在，<strong>Chrome Extension</strong> 也不例外，它本身有自己的架構在。(拜讀了前人大神文章後從 <strong><a href="https://medium.com/chris-chuang?source=logo-1048e5942f7a">Chris Chuang</a></strong> 大神那兒得知 <strong><a href="https://tonytonyjan.net/2012/05/25/get-start-with-chrome-extension/">大兜</a></strong> 大神的文章 有興趣可自行拜讀)</em></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*Ml68whAG7azEzwHMMsOJgA.png" alt="其實簡單的一隻 manifest.json 也能完成"></p>
<p>．<strong>manifest.json</strong>：這是 <strong>Chrome Extension</strong> 的心臟，支撐整個架構的檔案，用來描述檔案內容及資源，好比 <strong>package.json</strong>。<br>．<strong>Background Pages</strong>：這是常駐的在背景的檔案，比如裡面可以寫 <strong>javascript</strong> 用來監聽你的頁面內容，也可以是 <strong>HTML</strong>。<br>．<strong>UI Pages</strong>：用來使用者互動的頁面，或是你可以新增好幾個分頁，比如後面會用到的 <strong>newtab.html</strong></p>
<hr>
<h3 id="我該怎麼著手？"><a href="#我該怎麼著手？" class="headerlink" title="我該怎麼著手？"></a><strong>我該怎麼著手？</strong></h3><p>由於這次也是第一次玩 <strong>Chrome Extension ，就照起手式先從 manifest.json 開始吧</strong></p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*oFZzBPVt9uKzBSIcDpXTMA.png" alt="來一張完整的結構圖 下方提供複製"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;manifest_version&quot;</span>: <span class="number">2</span>,</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;幹話產生器&quot;</span>,</span><br><span class="line"><span class="string">&quot;description&quot;</span>: <span class="string">&quot;[Hero Of UnderGround 地下城] — 10F Chrome extension（幹話生產器）&quot;</span>,</span><br><span class="line"><span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0&quot;</span>,</span><br><span class="line"><span class="string">&quot;author&quot;</span>: <span class="string">&quot;RexHung&quot;</span>,</span><br><span class="line"><span class="string">&quot;icons&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;16&quot;</span>: <span class="string">&quot;assets/icons/icon-16px.png&quot;</span>,</span><br><span class="line">  <span class="string">&quot;64&quot;</span>: <span class="string">&quot;assets/icons/icon-64px.png&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;browser_action&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;default_popup&quot;</span>: <span class="string">&quot;popup.html&quot;</span>,</span><br><span class="line">  <span class="string">&quot;default_icon&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;64&quot;</span>: <span class="string">&quot;assets/icons/icon-64px.png&quot;</span>,</span><br><span class="line">    <span class="string">&quot;128&quot;</span>: <span class="string">&quot;assets/icons/icon-128px.png&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;chrome_url_overrides&quot;</span>: &#123; <span class="string">&quot;newtab&quot;</span>: <span class="string">&quot;./newtab.html&quot;</span> &#125;,</span><br><span class="line"><span class="string">&quot;permissions&quot;</span>: [</span><br><span class="line">  <span class="string">&quot;activeTab&quot;</span>,</span><br><span class="line">  <span class="string">&quot;storage&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="string">&quot;content_security_policy&quot;</span>: <span class="string">&quot;script-src &#x27;self&#x27; &#x27;unsafe-eval&#x27;; object-src &#x27;self&#x27;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先 <strong>manifest_version</strong> 代表 <strong>manifest file</strong> 格式版本的整數，如果使用的是 <strong>Chrome 18</strong> 以上，則應該設定成 2。接下來後面則是<strong>名字</strong>、<strong>描述</strong>、<strong>版號</strong>、<strong>作者</strong>、<strong>圖標</strong>…等等。</p>
<p>版號切記！最多由四個整數組成，並且用逗號(<strong>.</strong>)分開，數字必須介在 0 到 <strong>65535</strong> 之間，而且不可以 <strong>0</strong> 當開頭。</p>
<p>隨後的 <strong>browser actions</strong> 可以在 <strong>chrome</strong> 上方工具條的右側增加一个圖標，並且點下後出現的頁面 <strong>“default_popup”: “popup.html”</strong> 就是這個了。後面的 <strong>default_icon</strong> 即是工具欄出現的 <strong>icon</strong> 及顯示在擴充工具裡的圖案。( 這邊的 <strong>browser actions</strong> 也可以使用 <strong>Page Action</strong> 差別在於前者是任何分頁下都可以點選工具欄上的 <strong>icon</strong> 後者是在特定頁面才能點選)</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*qRdaKOGW-15Jz_3hAIyI_A.png" alt="**browser actions 定義的頁面**"></p>
<p>在下面的 <strong>“chrome_url_overrides”: { “newtab”: “.&#x2F;newtab.html” }</strong> 就是當使用者點選分頁的時候會出現的頁面。</p>
<p><strong>permissions</strong> 則是聲明權限，這個很重要，由於我們這次想做到兩個頁面同步的效果( <strong>下拉的語錄和分頁的語錄算是兩個獨立頁面</strong> )，只靠本地的 <strong>localStorage</strong> 是很麻煩的。幸好 <strong>Google</strong> 提供了 <strong>chrome.storage</strong> 的 <strong>API</strong> ，它提供了 <strong>chrome.storage.sync、chrome.storage.local、chrome.storage.managed…</strong> 三種類型讓你儲存資料，有興趣可以<a href="https://www.cnblogs.com/champagne/p/4826611.html">點我</a>拜讀文章。重點是在 <strong>manifest.json</strong> 內必須聲明。</p>
<p>最後一個是 <strong>内容安全策略標頭</strong>，這邊先不討論這個。</p>
<hr>
<h3 id="HTML-的部分？"><a href="#HTML-的部分？" class="headerlink" title="HTML 的部分？"></a>HTML 的部分？</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> *<span class="attr">src</span>*=<span class="string">&quot;./assets/js/cover.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>記得有多少檔案想共用 <strong>chrome.storage</strong> 就要都引入同一隻 <strong>JS</strong> 喔！</p>
<hr>
<h3 id="我該怎麼使用？"><a href="#我該怎麼使用？" class="headerlink" title="我該怎麼使用？"></a>我該怎麼使用？</h3><p>很簡單，把你的整包檔案拉到 <strong><a href="chrome://extensions/">chrome:&#x2F;&#x2F;extensions&#x2F;</a></strong> 內，他就會自己跑，如果有錯誤，也會提示，剛開始我也在 <strong>icon</strong> 上卡了好一下子呢！</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*_owrd7McCz_kXz6UhT9avw.png" alt="你的第一個外掛出現啦"></p>
<h2 id="Code到用時方恨少！"><a href="#Code到用時方恨少！" class="headerlink" title="Code到用時方恨少！"></a><strong>Code到用時方恨少！</strong></h2><p>剛開始覺得不就一個類似 <strong>Todo-list</strong> 的東西嗎？後來實作後才發現有點兒麻煩，主要是我先切了一個頁面弄好功能後才去考慮到另一個頁面的同步問題，再次檢討自己，以後做事情前要先確認過啊，不然就會重複做好幾次工。</p>
<p>基本上下拉的頁面跟分頁頁面切版不是主要難度，不過在分頁排版上這次算是第一次使用 <strong>transform: translateX(0%)</strong> 去弄成彈跳窗。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2752/1*CBOyqQXR3BQ3YC5UmI41fQ.gif" alt="自從 css 加上 *transition 整個流暢多不會死板板*"></p>
<h3 id="關於大魔王同步"><a href="#關於大魔王同步" class="headerlink" title="關於大魔王同步"></a>關於大魔王同步</h3><blockquote>
<p>還記得這次的挑戰做了兩天，前一天在切版的時候很開心弄一頁，同步也盤算好了，東西都塞到 <strong>localStorage</strong> 內了，結果發現到另外一頁會搞得很麻煩。結果算是又小翻修了一次 <strong>Code</strong>，那時候才發現 <strong>Google</strong> 有提供 <strong>StorageApi。</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">SwitchBtn</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#myonoffswitch&#x27;</span>); <span class="comment">// 滑動鈕</span></span><br><span class="line"></span><br><span class="line">chrome.<span class="property">storage</span>.<span class="property">sync</span>.<span class="title function_">get</span>(<span class="literal">null</span>, <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 一開始會去讀你的 storage 內的資料</span></span><br><span class="line"></span><br><span class="line">  <span class="title class_">SwitchBtn</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 做什麼事情...</span></span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  chrome.<span class="property">storage</span>.<span class="property">onChanged</span>.<span class="title function_">addListener</span>(<span class="function"><span class="params">changes</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 當 chrome.storage 有變動的時候 就做什麼事情</span></span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);;</span><br></pre></td></tr></table></figure>

<p>苦惱了一下的問題其實全部靠著個就能迎刃而解，很簡單的，分成三部分。</p>
<p>第一部分 <strong>chrome.storage</strong> 會去抓你的資料，我們放到最後處理。</p>
<p>第二部分 <strong>addEventListener</strong> 用來判斷使用者點了什麼或是做了什麼你指定的地方然後你要它發生什麼預期內的事情，比方點了開關的 <strong>Button</strong> 後你要讓 <strong>storage</strong> 塞進一個 <strong>key</strong> : <strong>value</strong> 或是讓 <strong>Button</strong> 變色、或是跑其他 <strong>function</strong> 都可以。</p>
<p>第三部分 <strong>addListener</strong> 用來監聽如果 <strong>chrome.storage</strong> 發生改變，就做什麼事情。這邊就要提到最常用的，<strong>chrome.storage.sync.set({ key : value})</strong> 了。</p>
<p>我的做法是在第二部分塞入 <strong>chrome.storage.sync.set({ key : value})</strong> 後，只要陣列有更動，我就把要做的事情放到第三部分，這樣兩邊都會同步一起做事情。</p>
<hr>
<h3 id="舉個例子吧"><a href="#舉個例子吧" class="headerlink" title="舉個例子吧"></a>舉個例子吧</h3><p>就拿 <strong>開關燈</strong> 來做例子，首先先宣告，並且給 <strong>value</strong> 一個值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">SwitchBtn</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#myonoffswitch&#x27;</span>); <span class="comment">// 開關鈕</span></span><br><span class="line"><span class="keyword">let</span> value = <span class="number">1</span>; <span class="comment">// key的value</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*jLhKKdYmMzsEQRbjbp6ojA.png" alt="第二步驟"></p>
<p>然後第二步加入事件，當我點下開關鈕就塞入一個 <strong>Value</strong> 到 <strong>chrome.storage</strong>，隨後判斷那個 <strong>Value</strong> 是多少。我的設定 <strong>1</strong> 是白色，<strong>0</strong> 是黑色，裡面加入判斷，並且更換陣列的值，引發第三步的監聽事件發生。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*rGgEQXPj114cKibDRKfQ2A.png" alt="第三步驟"></p>
<p>第三步驟也很簡單，直接寫上你想要改變的事情，在這裏兩邊的 <strong>HTML</strong> 都吃得到，不過要記得，兩邊都要引入同一隻 <strong>JS</strong> 檔案。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2752/1*mYHW0FIrNjSHAub66ZhEtA.gif" alt="這大概是這關最難的點"></p>
<h3 id="依樣畫葫蘆"><a href="#依樣畫葫蘆" class="headerlink" title="依樣畫葫蘆"></a>依樣畫葫蘆</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (changes.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;key&#x27;</span>)) &#123;&#125;);</span><br></pre></td></tr></table></figure>

<p>後面第三步驟加上這個，把 <strong>key</strong> 改成想監聽的事件，就基本上都完成啦！</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2752/1*lTwKETECadBVj7VdHn0gCQ.gif" alt="大功告成啦"></p>
<hr>
<h3 id="我該怎麼大賣我的作品？"><a href="#我該怎麼大賣我的作品？" class="headerlink" title="我該怎麼大賣我的作品？"></a>我該怎麼大賣我的作品？</h3><p>關於上架的部分，可以參考這篇<a href="https://ephrain.net/chrome-extension-%E5%B0%87%E6%96%B0%E5%AF%AB%E7%9A%84-chrome-extension-%E6%93%B4%E5%85%85%E5%8A%9F%E8%83%BD%E4%B8%8A%E6%9E%B6%E8%87%B3-chrome-web-store/">文章</a>。另外很重要的一點要提醒，要是你是第一次上架 <strong>chrome extension</strong> 的商品，必須收取 <strong>五塊美金</strong> 的費用，沒錯！就是 <strong>五塊美金</strong>，或許是多一道機制，讓大家不會胡亂上傳吧。</p>
<p>如果下次你又突然想上傳 <strong>Android app</strong> 或是 <strong>Chromecast</strong> 的 <strong>app</strong> 都是要在另外付一次的喔。</p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>部落格停擺了一個月了，這段時間一直卡在九樓，加上忙東忙西的，其實是自己小怠惰了🤫。這段時間也從研究 <strong>pug</strong> 摸到了 <strong>Webpack</strong>，有機會再說說，也摸了好一下子 <strong>canvas</strong>，不過我想最主要還是要把 <strong>JS</strong> 練好，眼看樓層越來越高，離的越來越遠，就要告訴自己不能怠惰了，雖然現在還都是超級菜鳥一枚，還是要抱著不怕摔的心情努力勇往向上。期許多年後的自己看到現在能感謝現在的自己。</p>
<p>這次一開始其實沒有想到有這麼多地方可以用 <strong>Vue</strong> 簡單解決，所以就直接開了檔案直接硬幹了，沒想到又錯失一次練習機會，沒關係，我們11樓再見，最後除了繼續努力之外還是要列出檢討的地方，然後朝下一關繼續加油，完畢。(哎不對欸，九樓還沒好啊，誤</p>
<ul>
<li><p>JS</p>
</li>
<li><p>Vue</p>
</li>
<li><p>邏輯</p>
</li>
<li><p>文筆</p>
</li>
<li><p><del><em>體重</em></del></p>
</li>
</ul>
<p>（慘了越來越多…</p>
<hr>
<h2 id="我的其他範例"><a href="#我的其他範例" class="headerlink" title="我的其他範例"></a>我的其他範例</h2><ul>
<li><p><strong>Hero Of UnderGround — 1F Multiplicatio 九九乘法表</strong></p>
<blockquote>
<p>Demo：<a href="http://rexhung.me/JS-and-Fighter/JS-and-Fighter-1F/index.html">點我</a><br/><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-1F">點我</a></p>
</blockquote>
</li>
<li><p><strong>Hero Of UnderGround — 2F Clock 時鐘</strong></p>
<blockquote>
<p>Demo：<a href="http://rexhung.me/JS-and-Fighter/JS-and-Fighter-2F/clock.html">點我</a><br/><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-2F">點我</a></p>
</blockquote>
</li>
<li><p><strong>Hero Of UnderGround — 3F Calculator 計算機</strong></p>
<blockquote>
<p>Demo：<a href="http://rexhung.me/JS-and-Fighter/JS-and-Fighter-3F/index.html">點我</a><br/><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-3F">點我</a></p>
</blockquote>
</li>
<li><p><strong>Hero Of UnderGround — 4F World Clock 各國時區</strong></p>
<blockquote>
<p>Demo：<a href="http://rexhung.me/JS-and-Fighter/JS-and-Fighter-4F/index.html">點我</a><br/><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-4F">點我</a><br/><br>Blog：<a href="https://medium.com/@zehung860486/hero-of-underground-%E5%9C%B0%E4%B8%8B%E5%9F%8E-4f-world-clock-%E5%90%84%E5%9C%8B%E6%99%82%E5%8D%80-2356786f3dfa">點我</a></p>
</blockquote>
</li>
<li><p><strong>Hero Of UnderGround — 5F AQI 全台空氣指標儀表板</strong></p>
<blockquote>
<p>Demo：<a href="http://rexhung.me/JS-and-Fighter/JS-and-Fighter-5F/index.html">*點我</a><em><br/><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-5F">*點我</a><br/><br>Blog：<a href="https://medium.com/@zehung860486/hero-of-underground-%E5%9C%B0%E4%B8%8B%E5%9F%8E-5f-aqi-%E5%85%A8%E5%8F%B0%E7%A9%BA%E6%B0%A3%E6%8C%87%E6%A8%99%E5%84%80%E8%A1%A8%E6%9D%BF-c060fbe58454">點我</a></em></p>
</blockquote>
</li>
<li><p><strong>Hero Of UnderGround — 6F SECONDS CHALLENGE 倒數遊戲</strong></p>
<blockquote>
<p><em>Demo：<a href="http://rexhung.me/JS-and-Fighter/JS-and-Fighter-6F/index.html">點我</a><br/><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-6F">點我</a><br/><br>Blog：<a href="https://medium.com/@zehung860486/hero-of-underground-%E5%9C%B0%E4%B8%8B%E5%9F%8E-6f-seconds-challenge-%E5%80%92%E6%95%B8%E9%81%8A%E6%88%B2-f71c0b680fdb">點我</a></em></p>
</blockquote>
</li>
<li><p><strong>Hero Of UnderGround — 7F Canvas 畫板</strong></p>
<blockquote>
<p><em>Demo：<a href="http://rexhung.me/JS-and-Fighter/JS-and-Fighter-7F/index.html">點我</a><br/><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-7F">點我</a><br/><br>Blog：<a href="https://medium.com/@zehung860486/hero-of-underground-%E5%9C%B0%E4%B8%8B%E5%9F%8E-7f-canvas-%E7%95%AB%E6%9D%BF-fca0a17ae652">點我</a></em></p>
</blockquote>
</li>
<li><p><strong>Hero Of UnderGround — 8F Tic-Tac-Toe 井字遊戲</strong></p>
<blockquote>
<p><em>Demo：<a href="http://rexhung.me/JS-and-Fighter/JS-and-Fighter-8F/dist/index.html">點我</a><br/><br>Code Source：<a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-8F">點我</a><br/><br>Blog：<a href="https://medium.com/@zehung860486/hero-of-underground-%E5%9C%B0%E4%B8%8B%E5%9F%8E-8f-tic-tac-toe-%E4%BA%95%E5%AD%97%E9%81%8A%E6%88%B2-e5b3d95dd2cb">點我</a></em></p>
</blockquote>
</li>
</ul>
<h3 id="Vue系列-—"><a href="#Vue系列-—" class="headerlink" title="Vue系列 —"></a>Vue系列 —</h3><ul>
<li><strong>[Vue Notes] — Vue-Cli #1 初次見面</strong><blockquote>
<p><em>Blog：<a href="https://medium.com/@zehung860486/vue-notes-vue-cli-1-%E5%88%9D%E6%AC%A1%E8%A6%8B%E9%9D%A2-e2d868ee04aa">點我</a></em></p>
</blockquote>
</li>
</ul>
<hr>
<h3 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h3><ul>
<li>Chris Chuang大神 — <a href="https://medium.com/chris-chuang/%E5%88%9D%E6%8E%A2-chrome-extension-19688ab79ae0">初探 Chrome Extension</a></li>
<li>大兜 —<a href="https://tonytonyjan.net/2012/05/25/get-start-with-chrome-extension/"> Chrome Extension</a></li>
<li><a href="https://www.cnblogs.com/champagne/">Chrome扩展开发极客</a> — ChromeApi相關</li>
<li><a href="https://ephrain.net/">EPH 的程式日記</a> —<a href="https://ephrain.net/chrome-extension-%E5%B0%87%E6%96%B0%E5%AF%AB%E7%9A%84-chrome-extension-%E6%93%B4%E5%85%85%E5%8A%9F%E8%83%BD%E4%B8%8A%E6%9E%B6%E8%87%B3-chrome-web-store/"> Chrome extension 上架至 Chrome Web Store</a></li>
<li><a href="https://www.gamer.com.tw/index2.php?ad=N"><em>巴哈姆特 舒壓用</em></a></li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>前端</category>
        <category>HeroOfUnground[地下城]</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
        <tag>HexSchool</tag>
      </tags>
  </entry>
  <entry>
    <title>[Tool Note] — 關於Webpack #1 - 第一次就上手</title>
    <url>/2019/06/18/20190618/</url>
    <content><![CDATA[<p><img src="/images/others/loading.gif" data-original="/images/20190618/webpack_logo.gif" alt="關於Webpack"></p>
<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>記得前陣子接手別人的版面需要更改，那時候發現有個資料夾裡面有很多 <strong>.jade</strong> 檔，納悶了一下去爬文發現也是類似 <strong>CSS</strong> 的預處理器，像是 <strong>SASS&#x2F;SCSS、Less、Stylus…等等</strong>，那時候算是第一次接觸，發現能像 <strong>SASS</strong> 一樣可以發揮懶人精神，除了不用寫結尾的 <strong>element</strong> 之外還能使用類似 <strong>template</strong> 的功能等等，最大的好處就是我同樣的地方要用不用重寫好幾次。</p>
<blockquote>
<p><strong>Jade 因為版權問題現已更名為 Pug</strong></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*XUK4XE1-j9ju7qWVzcIsYg.png" alt="狗奴一定要用用看(誤"></p>
<span id="more"></span>

<p>寫完的樣子跟一般的 <strong>HTML</strong> 還是有差異，跟 <strong>SASS</strong> 一樣需要編譯過網頁才讀得懂。所以編譯是個問題，那時候記得只會丟上別人寫好的頁面去編譯，然後自己手動貼上，後來想想這樣跟我一個一個改沒差別呀！<a href="https://pughtml.com/">傳送門</a></p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*B4MvrqdSpRqf59-rg0yy0w.png" alt="其實剛開始很不習慣"></p>
<hr>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2400/1*aauGvCK9tgiTgUKHUjuSng.png" alt="圖轉自 [https:&#x2F;&#x2F;hackernoon.com&#x2F;webpack-vs-gulp-e623616b1dc](https:&#x2F;&#x2F;hackernoon.com&#x2F;webpack-vs-gulp-e623616b1dc)"></p>
<h3 id="所以我說關於-Webpack-呢？"><a href="#所以我說關於-Webpack-呢？" class="headerlink" title="所以我說關於 Webpack 呢？"></a>所以我說關於 Webpack 呢？</h3><p>前言有點過常了，這邊將進入正題，在發現編譯問題後上網爬文得知了 <strong>Webpack</strong> 及 <strong>Gulp</strong> 這兩個打包工具，由於這邊不是要探討兩者差異問題所以不過多比較，會選擇 <strong>Webpack</strong> 的原因不外乎幾點原因。</p>
<ol>
<li><p><strong>Gulp</strong> 比較偏向命令式的設定，所有編譯動作的邏輯都要自己動手寫，而且 <strong>Gulp</strong> 比較注重在任務方面，而 <strong>Webpack</strong> 注重在編譯及打包，另外規範明瞭，別人接手也能一目瞭然。</p>
</li>
<li><p>其他大大(<a href="https://medium.com/@Mike_Cheng1208/%E3%84%91gulp%E8%B7%9Fwebpack%E4%B8%80%E6%A8%A3%E9%83%BD%E6%98%AF%E5%8F%AF%E4%BB%A5%E7%B7%A8%E8%AD%AFpreprocess%E7%9A%84%E5%B7%A5%E5%85%B7-%E5%8F%AA%E6%98%AFgulp%E6%AF%94%E8%BC%83%E5%81%8F%E5%90%91%E5%91%BD%E4%BB%A4%E5%BC%8F%E7%9A%84%E7%B7%A8%E5%AF%AB%E8%A8%AD%E5%AE%9A-%E4%B9%9F%E5%B0%B1%E6%98%AF%E8%AA%AA%E6%89%80%E6%9C%89%E7%9A%84%E7%B7%A8%E8%AD%AF%E5%8B%95%E4%BD%9C%E7%9A%84%E9%82%8F%E8%BC%AF%E9%83%BD%E8%A6%81%E8%87%AA%E5%B7%B1%E7%B7%A8%E5%AF%AB-webpack%E5%B0%B1%E5%81%8F%E5%90%91%E8%A8%AD%E5%AE%9A-%E8%A8%AD%E5%AE%9A%E6%B8%85%E6%A5%9A%E6%98%8E%E7%9E%AD-%E8%80%8C%E4%B8%94%E6%9C%89%E4%B8%80%E5%AE%9A-a32dfc9153df">傳送門</a>)有說 <strong>Gulp</strong> 可能會停止更新。作者推特<a href="https://twitter.com/blainebublitz/status/948300201302769664?ref_src=twcamp%5Eshare%7Ctwsrc%5Eios%7Ctwgr%5Ecom.apple.UIKit.activity.PostToFacebook">傳送門</a></p>
</li>
</ol>
<p>其實我想要的比較符合 <strong>Webpack</strong> ；另外兩者其實並不會衝突，也沒有哪個特別好用，甚至你想要也可以把 <strong>Webpack</strong> 包進 <strong>Gulp</strong> 內，所以還是那句老話『<strong>沒有最好，只有最適合</strong>』。綜合以上兩點，我就直接選擇了 <strong>Webpack</strong> 了。</p>
<h3 id="Webpack-的核心概念"><a href="#Webpack-的核心概念" class="headerlink" title="Webpack 的核心概念"></a>Webpack 的核心概念</h3><p>仔細看官方網站的介紹其實再看看其他框架，都有一個共通點，就是都會有一個 <strong>JS</strong> 進入點，並且從這個進入點去告訴程式他要做什麼事情，當你東西一多，也不會散得到處都是。</p>
<p><strong>entry → translate → output ( Webpack 基本流程</strong></p>
<p>透過 <strong>Webpack</strong> 基本流程你可以引入多個檔案，然後透過 <strong>JS</strong> 進入點，導出一支或多支檔案。( 下方示意圖 與本次介紹無關 別害怕</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*KMDXF7F5OGhyzXsa1d9-9w.png" alt="Source from [Hero Of UnderGround — 8F](https:&#x2F;&#x2F;github.com&#x2F;RexHung0302&#x2F;JS-and-Fighter&#x2F;blob&#x2F;master&#x2F;JS-and-Fighter-8F&#x2F;src&#x2F;main.js) 井字遊戲"></p>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><ol>
<li><p><a href="#8e5b">安裝</a></p>
</li>
<li><p><a href="#7935">初始化</a></p>
</li>
<li><p><a href="#3cf4">上工</a></p>
</li>
<li><p><a href="#75f4">結論</a></p>
<blockquote>
<p><em>防雷提示：關於我的 Note 系列還有任何內容都是作為筆記作用，因為還是菜雞一枚，如果有寫不好的地方非常歡迎指教，也歡迎指正，但是文章所寫所說的並未必一定百分百正確，所以請各位大神們多多包涵。</em></p>
</blockquote>
</li>
</ol>
<hr>
<h3 id="Webpack-老司機發車囉"><a href="#Webpack-老司機發車囉" class="headerlink" title="Webpack 老司機發車囉"></a>Webpack 老司機發車囉</h3><p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*Ajk5-UqHDQOZNixaZly6NA.png" alt="[傳送門](https:&#x2F;&#x2F;nodejs.org&#x2F;en&#x2F;)"></p>
<h3 id="安裝-—-工欲善其事必先利其器"><a href="#安裝-—-工欲善其事必先利其器" class="headerlink" title="安裝 — 工欲善其事必先利其器"></a>安裝 — 工欲善其事必先利其器</h3><p>首先 <strong>Webpack</strong> 是在 <strong>Node.js</strong> 上運行的，所以必須安裝好 <strong>Node.js</strong> 及 <strong>npm</strong>，關於 <strong>Node.js</strong> 安裝部分<a href="https://blog.gtwang.org/web-development/install-node-js-in-windows-mac-os-x-linux/">傳送門</a>在此。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2800/1*1CxeVgrmLL0Uvc_n23hXrA.png" alt="我又跳出來啦"></p>
<blockquote>
<p><strong>npm</strong> 全稱 <strong>Node Package Manager</strong>，即「<strong>node包管理器</strong>」，它是一個線上套件庫，可以下載各式各樣的 <strong>JavaScript</strong> 套件來使用。<br>關於使用 <strong>npm</strong> 安裝 <strong>Vue-cli</strong> 專案也可以看看我的另一個文章，<strong><a href="https://medium.com/@zehung860486/vue-notes-vue-cli-1-%E5%88%9D%E6%AC%A1%E8%A6%8B%E9%9D%A2-e2d868ee04aa?postPublishedType=repub">[Vue Notes] — Vue-Cli #1 初次見面</a></strong>。</p>
</blockquote>
<p>基本上安裝好 <strong>Node.js</strong> 後 <strong>npm</strong> 就會一併安裝了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">$ npm -v</span><br><span class="line">// 輸入以上兩個指令查看有無安裝成功及版本號</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*ET0ndKBVjCbsvlBein59Og.png" alt="安裝完成 (紅線請忽略"></p>
<hr>
<h3 id="題外話-node-modules-圖書館"><a href="#題外話-node-modules-圖書館" class="headerlink" title="題外話 node_modules 圖書館"></a><strong>題外話 node_modules 圖書館</strong></h3><p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/3374/1*HiXeuYdvdLEjfIhyPfRYUA.png" alt="強力推薦這個網站 **[傳送門](https:&#x2F;&#x2F;cdnjs.com&#x2F;)**"></p>
<blockquote>
<p>了解 <strong>node_modules</strong> 的話這部分可跳過</p>
</blockquote>
<p>如果你在使用函式庫的時候還是需要使用 <strong>cdn</strong> 方式(上網複製一串網址)，其實你有更好的方法。</p>
<p>如果你有發現上網找套件時，找 <strong>cdn</strong> 那串網址前都會有另外的安裝方式 <strong>npm</strong>，其實裝了 <strong>npm</strong> 之後就可以使用啦。<strong>npm</strong> 安裝分為全域及當下的專案，把你想要的套件比如  <strong>Bootstrap、JQuery、AXIOS</strong>…等等安裝在全域，等下次需要建立新專案的時候，直接 <strong>npm install</strong> 就會跑出一個 <strong>node_modules</strong> 資料夾，裡面會有你安裝全域時安裝過的套件。</p>
<p>因為 <strong>node_modules</strong> 檔案有可能檔案會很多，所以通常大家把專案釋出或是上傳到其他空間或 <strong>Git</strong> 等等不會把 <strong>node_modules</strong> 一併上傳，那我們怎麼知道他裝了什麼套件呢？很簡單，進到專案直接 <strong>npm install package.json</strong>，你所安裝的套件也會寫在裡面。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*itJPnF5qeieEhrspxxhRkg.png" alt="一目瞭然 ( package.json 之一小部分"></p>
<blockquote>
<p><em>所以你想把專案搬家也很容易了呢。</em></p>
</blockquote>
<hr>
<h3 id="初始化-—-萬事俱備-只欠東風"><a href="#初始化-—-萬事俱備-只欠東風" class="headerlink" title="初始化 — 萬事俱備 只欠東風"></a>初始化 — 萬事俱備 只欠東風</h3><p>讓我們進入正題吧，直接到你想開專案的地方，開啟終端機，然後照著步驟做。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir 你的專案名稱  // 建立資料夾</span><br><span class="line">cd 你的專案名稱     // 移動到資料夾</span><br><span class="line"></span><br><span class="line">// 初始化專案(二選一)</span><br><span class="line">npm init</span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure>

<p>接下來會出現一些資訊要你填寫，這邊我們全都直接按  <strong>Enter</strong> 跳過即可，可以先不用特別了解。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2396/1*AnlkwJF3H6JzVQK3mUh3Mw.gif" alt="**一路 enter 到北**"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@簡單介紹</span><br><span class="line">package name: (rexwebpack) // 專案名稱</span><br><span class="line">version: (1.0.0)           // 版本</span><br><span class="line">description:               // 專案描述</span><br><span class="line">entry point: (index.js)    // 進入點 類似 Vue.js 的 app.js</span><br><span class="line">test command:              // 專案的測試指令</span><br><span class="line">git repository:            // 專案原始碼的版本控管位置</span><br><span class="line">keywords:                  // 專案的關鍵字</span><br><span class="line">author:                    // 作者</span><br><span class="line">license: (ISC)             // 專案版權</span><br><span class="line">@end簡單介紹</span><br></pre></td></tr></table></figure>

<p>這時候你的資料夾會多一個 <strong>package.json</strong>的檔案，也是我們上面說的，以後要搬家或是別人要接手你的案子，拿到這個檔案，直接 <strong>install package.json</strong> 就好了。</p>
<p>接下來直接安裝我們的主角 <strong>Webpack</strong> 。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2396/1*8JCyQNbhugNE72GkmlBv5w.gif" alt="車子發動要一下呀"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install -g webpack // 首先先全域安裝 Webpack</span><br><span class="line">$ npm install webpack webpack-cli --save-dev // 在專案上安裝 Webpack</span><br><span class="line">// p.s Webpack4.0  </span><br><span class="line">// 開始必須安裝 webpack-cli 不然會無法執行</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*Z6wlCmGeN5uHFoJdroTL9Q.png" alt="安裝成功"></p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2026/1*tU8L2SXIcV5jo6UNHDMT8Q.png" alt="會多出 node_modules 及 package-lock.json"></p>
<blockquote>
<p>node_modeules：所有套件跟工具都會在這裡面。</p>
</blockquote>
<blockquote>
<p>package.json：關於整個專案所有的資訊，要搬移檔案也要靠這支檔案。</p>
</blockquote>
<blockquote>
<p>package-lock.json：package-lock.json是npm5版本新增的，是專門用來紀錄更細節的內容。</p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*nromrm_ezLXic7Ke26X-sA.jpeg" alt="我的恐慌症要發作啦"></p>
<blockquote>
<p>OS：好像很麻煩 到這邊講了好多</p>
</blockquote>
<blockquote>
<p>老天爺不會虧待努力的人，看到這邊不要放棄，你就快成功了。</p>
</blockquote>
<hr>
<h3 id="上工-—-伐伐伐伐木工"><a href="#上工-—-伐伐伐伐木工" class="headerlink" title="上工 — 伐伐伐伐木工"></a>上工 — 伐伐伐伐木工</h3><p>接下來讓我們新增兩個檔案 <strong>Webpack.config.js</strong> 及 <strong>index.js</strong> ，前者是主要的設定檔，後者為入口。</p>
<blockquote>
<p>如果接下來你想照著官方教學走也可以 <strong><a href="https://www.webpackjs.com/guides/getting-started/">傳送門</a></strong></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*eUKiW1Zyaf0aUN94oJLgmA.png" alt="目前結構"></p>
<p>接下來打開 <strong>Webpack.config.js</strong> 輸入以下的程式碼。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nodejs 的 api 主要用來做跟檔案位子或搬移有關的事情</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">// 主要的設定都會在這下面</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 入口</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./index.js&#x27;</span>,</span><br><span class="line">  <span class="comment">// 出口</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;index.bundle.js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>), </span><br><span class="line">    <span class="comment">// path.resolve 為絕對位置 dirname = &#x27;/&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>然後我們再 <strong>index.js</strong>上新增一些東西，讓我借用官方網站的範例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">component</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> element = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">  <span class="comment">// Lodash (目前還沒安裝相關套件必須加上這個)</span></span><br><span class="line">  element.<span class="property">innerHTML</span> = _.<span class="title function_">join</span>([<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;webpack&#x27;</span>], <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(<span class="title function_">component</span>());</span><br></pre></td></tr></table></figure>

<p>之後再到 <strong>package.json</strong> 的 <strong>scripts</strong> 下加上：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;start&quot;</span>: <span class="string">&quot;webpack --config webpack.config.js&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*KYs_S4A9TRGGln8FTJtpJA.png"></p>
<p>這邊其實跟 <strong>Vue.js</strong> 很像，在 <strong>scripts</strong> 後加上指令，在直接輸入 <strong>npm run XXXX</strong> 程式就會自己開始幫你編譯，然後輸出，這也是我們要用 <strong>Webpack</strong> 的出發點，他幫你編譯，然後把一堆零件，組成一個機器人。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2372/1*a3tpTAtJx-IG-1xj1is9iA.png" alt="成功畫面"><br>這時候你會多出一個 <strong>dist</strong> 的資料夾，打開後發現多了一個檔案，點開發現會出現你看不太懂的程式碼，代表你編譯成功了。</p>
<hr>
<h3 id="關於紅色框框處"><a href="#關於紅色框框處" class="headerlink" title="關於紅色框框處"></a>關於紅色框框處</h3><p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*JpNjnX-eFIzrUHhGy-Pvaw.png" alt="關於黃字"></p>
<p>這部分基本是提醒您目前您還沒有設定是什麼模式，基本上有 <strong>開發模式</strong> 及 <strong>生產模式</strong>。要設定模式也很簡單，在你要使用的指令後方加上：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xxxxxxxxxxx --mode development <span class="comment">// 開發模式</span></span><br><span class="line">or</span><br><span class="line">xxxxxxxxxxx --mode production <span class="comment">// 生產模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 建議可以新增下面這幾個</span></span><br><span class="line"><span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack --mode=production&quot;</span>,</span><br><span class="line"><span class="string">&quot;build:dev&quot;</span>: <span class="string">&quot;webpack --mode=development&quot;</span>,</span><br><span class="line"><span class="string">&quot;start:dev&quot;</span>: <span class="string">&quot;webpack-dev-server --mode=development&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*ymT-a-4oeChK9KUY_wx8zg.png" alt="黃色的警告字消失了 ( 後來才又截圖的 請忽略內容…"></p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*2wt5MCEqomVdsSHDh0xGXw.png" alt="編譯過的檔案"></p>
<h3 id="只有一個登機口？"><a href="#只有一個登機口？" class="headerlink" title="只有一個登機口？"></a>只有一個登機口？</h3><p>如果我想編譯好幾個 <strong>JS</strong> 檔案呢？別急，這邊我們把 <strong>Webpack.config.js</strong> 的 <strong>entry</strong> 改寫一下，把 <strong>entry</strong> 改成 <strong>Object</strong>方式，下方的 <strong>output</strong> 會照著順序編譯出來，<strong>output</strong> 也可以使用下面的方式：</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*SCLrYAzvFlmd1xREtfEl9g.png"></p>
<blockquote>
<p>另外關於路徑也可以在上面多一個 <strong>context</strong> 設定路徑要從哪裡開始。</p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*Vh4YJ64BT3Zf1-07B4N-vA.png" alt="改造之後"></p>
<p>新增一支 <strong>second.js</strong> 還有更改一下檔案放置位置。基本上編寫的程式碼檔案都會在 <strong>src</strong>  內，編寫出來的檔案都會放在 <strong>dist</strong> 的位置，讓我們新增一個 <strong>src</strong> 的資料夾，然後丟一個 <strong>index.html</strong> 在 <strong>dist</strong> 資料夾做實驗吧！</p>
<p><strong>index.html 打上：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My First Webpack<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    // lodash 套件還沒安裝 先用 cdn 方式</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/lodash@4.16.6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./main.bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*MlHYquyr9MSQFMWJ3n3QAw.png" alt="目前結構 — 編譯前"></p>
<p>編譯成功後打開 <strong>index.html</strong> 應該可以看見 <strong>Hello webpack</strong></p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*aIniSX9koI9xz0NMiqyNHA.png" alt="目前結構 — 編譯後"></p>
<h3 id="不只伐木工-還有-礦礦礦礦工-建建建…"><a href="#不只伐木工-還有-礦礦礦礦工-建建建…" class="headerlink" title="不只伐木工 還有 礦礦礦礦工 建建建…"></a>不只伐木工 還有 礦礦礦礦工 建建建…</h3><p>這時你可能會想要問，不是說好了還有 <strong>pug scss</strong> 什麼的嗎？</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*_3j40Cax5xKrhicE3H_O0Q.png" alt="圖轉自 [https:&#x2F;&#x2F;codeburst.io&#x2F;kickstart-your-next-project-with-this-starter-kit-d62e64b688da](https:&#x2F;&#x2F;codeburst.io&#x2F;kickstart-your-next-project-with-this-starter-kit-d62e64b688da)"></p>
<p>除了最一開始的 <strong>entry、output</strong> ，這就讓我們先來簡單了解一下 <strong>Webpack.config.js</strong> 的另外兩個基本架構吧。</p>
<blockquote>
<p>更詳細可見 <a href="https://zhuanlan.zhihu.com/p/28245984">傳送門</a></p>
<h1 id="module-—-基本上裡面都會寫關於-loader-的東西，比如-sass-loader、pug-loader…等等"><a href="#module-—-基本上裡面都會寫關於-loader-的東西，比如-sass-loader、pug-loader…等等" class="headerlink" title="module — 基本上裡面都會寫關於 loader 的東西，比如 sass-loader、pug-loader…等等"></a><em><strong>module — 基本上裡面都會寫關於 loader 的東西，比如 sass-loader、pug-loader…等等</strong></em></h1><h1 id="plugins-—-裡面會寫一些套件相關的東西，比如CleanWebpackPlugin-或-HtmlWebpackPlugin…等等"><a href="#plugins-—-裡面會寫一些套件相關的東西，比如CleanWebpackPlugin-或-HtmlWebpackPlugin…等等" class="headerlink" title="plugins — 裡面會寫一些套件相關的東西，比如CleanWebpackPlugin 或 HtmlWebpackPlugin…等等"></a><em><strong>plugins — 裡面會寫一些套件相關的東西，比如CleanWebpackPlugin 或 HtmlWebpackPlugin…等等</strong></em></h1><p>關於各式各樣的 <strong>loader</strong> <a href="https://www.webpackjs.com/loaders/">傳送門</a></p>
</blockquote>
<hr>
<h3 id="牛刀小試"><a href="#牛刀小試" class="headerlink" title="牛刀小試"></a>牛刀小試</h3><p>說再多不如親身試一次懂的比較快，先在終端機輸入指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install --save-dev html-webpack-plugin</span><br><span class="line">// 先安裝 html-webpack-plugin 可以自動產出一個 HTML 檔案</span><br><span class="line"></span><br><span class="line">$ npm i -D node-sass sass-loader css-loader mini-css-extract-plugin</span><br><span class="line">// 關於更多的 loader 及 plugins 的安裝方式都大同小異</span><br></pre></td></tr></table></figure>

<p>之後查看 <strong>package.json</strong> 的 <strong>devDependencies</strong> 下方是否多了一個 <strong>“sass-loader”: “＾7.1.0”</strong>(後方數字為版本號 不一樣沒關係 確認為最新的即可)。</p>
<p>然後修改 <strong>Webpack.config.js</strong> 的設定：</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*BYXIcVp9w_62lJCw60rlkw.png"></p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*3j63R0eh69BA3A2tRn_DQw.png"></p>
<p>entry 的部分新增要讀取的 <strong>SCSS</strong> ，然後透過 <strong>module</strong> 的 <strong>loader</strong> 去讀取 <strong>CSS</strong> 或是 <strong>SASS</strong> 編譯成 <strong>Webpack</strong> 看得懂的程式碼，然後再透過 <strong>plugins</strong> 去把他編譯成你需要的 <strong>CSS HTML</strong> … 等等的檔案。</p>
<blockquote>
<p><em>這邊特別要注意，關於 <strong>module</strong> 內的 <strong>loader</strong> 讀取順序會從下往上。</em></p>
</blockquote>
<p>之後新增 <strong>SCSS</strong> 的資料夾及檔案，之後執行編譯，就會發現多出了編譯過後的檔案，相同的，<strong>pug</strong> 也是這樣子做。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm i -D pug pug-loader html-webpack-plugin</span><br></pre></td></tr></table></figure>

<p>在 <strong>module</strong> 的 <strong>rules</strong> 裡面新增：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">rules</span>: [</span><br><span class="line">  &#123; </span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.pug$/</span>,</span><br><span class="line">    <span class="attr">use</span>: [“pug-loader”]</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>然後再 <strong>plugins</strong> 裡新增：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 有幾個 pug 檔就要用幾個</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;RexWebpack&#x27;</span>,</span><br><span class="line">  <span class="attr">hash</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;./pug/index.pug&#x27;</span>, </span><br><span class="line">  <span class="comment">// 檔案位子 因為前面加過 context: path.resolve(__dirname, &#x27;src&#x27;) 所以不用從 ./src 開始</span></span><br><span class="line">  <span class="attr">filename</span>: <span class="string">&#x27;./index.html&#x27;</span> </span><br><span class="line">  <span class="comment">// 檔案輸出</span></span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2086/1*6Yr_r2YR_i4UocpkA93uVg.png" alt="編譯成功"></p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>再接觸前端半年時一直都是東摸摸西摸摸，這邊學一點那邊學一點，雖然有人說過，學的越多，不懂的越多，但是你會發現你所摸所學的那些到最後竟然好像都有那麼點關聯。之前摸了一陣子的 <strong>Webpack</strong> 後有段時間沒有再去複習竟然有點生疏了，藉此就寫了篇文章來記錄。</p>
<blockquote>
<p>之後或許會有更多更詳細的 <strong>Webpack</strong> 介紹？！</p>
</blockquote>
<p>關於 <strong>Webpack</strong> 其實還有很多東西可以說，但是主要還是寫篇文章來告訴自己大部分的功能怎做，其實只要搞懂怎麼 <strong>npm install、npm 套件、設定 Webpack</strong> 就差不多可以做到大部分你想要做的事情了。</p>
<p>希望這篇文章之後再自己又生疏的時候或是剛好在找尋打包工具迷茫的你，這樣就值得了，不過每次在寫文章都會想，幾年後的我回來看應該會覺得在寫 <strong>3X</strong> 吧，希望沒有誤人子弟。</p>
<p>這次這篇文章也算是自己的計劃內，希望在這一年內可以至少把一個前端框架搞熟，並且在能更符合前端工程師的 <strong>Level</strong> (至少不要是只會切版啦…)，所以能摸能練習的東西都不會放過，縱使有錯，也希望能跟大家討論並且學習成長。寫完這篇文章，下一次就會開始嘗試在 <strong>Vue.js</strong> 內使用 <strong>Webpack</strong> ，又是一大挑戰呀！</p>
<blockquote>
<p><em>是說官方網站其實介紹的也挺詳細的 強烈建議可以去看看 <a href="https://webpack.js.org/">傳送門</a></em><br><em>最後的最後附上弱弱的 <strong>Webpack Git</strong> <a href="https://github.com/RexHung0302/WebpackPractice">傳送門</a> 有興趣可以抓下來玩</em><br><em>P.S 記得之前在爬文練習找好久都找不到有裝 <strong>Pug-loader</strong> 的 <strong>Webpack</strong><br> 不然就是找到不能跑 555…</em></p>
</blockquote>
<blockquote>
<p><em><strong>2020&#x2F;04&#x2F;12 後更： 上傳了新版的 Webpack 程式碼，內容包含 Vue 打包，請至<a href="https://github.com/RexHung0302/WebpackPractice2.0">此處</a>觀看。</strong></em></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*9mCnawxIwbAePCrn2fvaRQ.png"></p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li>Webpack 官方網站 — <a href="https://webpack.js.org/">英文</a>、<a href="https://www.webpackjs.com/">中文</a></li>
<li>John Wu 大大 — <a href="https://blog.johnwu.cc/article/webpack-4-sass-to-css.html">Webpack 4 打包 Sass to Css 範例</a></li>
<li><a href="https://medium.com/html-test?source=logo-1048e5942f7a---7e8ed50b6485">進擊的 Front End‘s</a> — <a href="https://medium.com/html-test/%E5%BE%9E%E9%9B%B6%E9%96%8B%E5%A7%8B-%E4%BD%BF%E7%94%A8npm%E5%A5%97%E4%BB%B6-317beefdf182">從零開始: 使用NPM套件</a></li>
<li><a href="https://j6qup3.github.io/">初雪的中二 &amp; 爆肝工程師之路</a> — <a href="https://j6qup3.github.io/2016/08/15/%E7%8C%B4%E5%AD%90%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84-React-%E6%95%99%E5%AD%B8-3/#Hot-Module-Replacement">猴子也能看懂的 React 教學 — 3 — Webpack 建置指南</a></li>
<li><a href="https://medium.com/@Mike_Cheng1208">Mike</a> 大大 — <a href="https://medium.com/@Mike_Cheng1208/%E4%BB%80%E9%BA%BC%E6%98%AFwebpack-%E4%BD%A0%E9%9C%80%E8%A6%81webpack%E5%97%8E-2d8f9658241d">Webpack教學 (一) ：什麼是Webpack? 能吃嗎？</a></li>
<li><a href="https://itnext.io/@geeostan8">Stan Georgian</a> 大大 — <a href="https://itnext.io/webpack-4-write-pug-templates-c24e5ea07317">Webpack 4 write .pug templates</a></li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>Webpack</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>[JavaScript Note] — 淺談 JavaScript #1</title>
    <url>/2019/10/09/20191009/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>筆記系列終於寫到了 <strong>JavaScript</strong>，想想接觸程式跟前端已經快滿一年了，這一年剛開始的時候很著急想要盡可能地快點學會點什麼，後來發現真的是跟練功一模一樣，除非你是萬中選一的寫 <strong>Code</strong> 奇才，不穩紮穩打，就會摔得很慘啊！</p>
<blockquote>
<p><em>註：因為前陣子出車禍加上滿多事情突然席捲而來，筆記停了好久，<strong>The F2E</strong> 原本也想要寫篇心得文，以至於都沒完成，在寫 <strong>Code</strong> 的路上慢慢能體會別人說的，這是一件很需要耐心及毅力的事情；你熱愛它，它即熱愛你。</em></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*Hu1IAfpJ4GKDlLWp-7rOQw.png" alt="沒完賽 真羞愧"></p>
<span id="more"></span>

<p>剛接觸程式的時候連 <strong>Java</strong> 跟 <strong>JavaScript</strong> 都傻傻搞不清楚，就一臉萌逼的亂摸亂玩下去了，一路上還是很感謝身邊的人不嫌棄的指導；在剛接觸程式的不久，剛好碰到六角學院舉辦的地下城活動 (沒錯就是上方那張圖)，這活動真的幫助自己的 <strong>JavaScript</strong> 很多，其中自己跌跌撞撞玩了一些東西，發現好多東西都跟 <strong>JavaScript</strong> 脫離不了關係，直到最近六角學院剛好推出了 <strong><a href="https://www.hexschool.com/courses/js-core.html?utm_source=LINE&utm_medium=message&utm_campaign=0807LINE_message#recommend">JavaScript 核心篇</a></strong>，當下思考了不到三秒就下訂了 (<strong>放心本篇不是業配 也沒這麼爛的業配 xD</strong>)。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2836/1*94kGdqJpA3tbahQYxIXvvA.png" alt="購買 [傳送門](https:&#x2F;&#x2F;www.hexschool.com&#x2F;courses&#x2F;js-core.html?utm_source&#x3D;LINE&amp;utm_medium&#x3D;message&amp;utm_campaign&#x3D;0807LINE_message#recommend)"></p>
<blockquote>
<p><em>接下來就是本篇的出產原因，不免俗的要來一句：</em></p>
</blockquote>
<blockquote>
<p>*<strong>本篇文章一切皆為筆記作用，有任何錯誤及問題，歡迎理性指教及討論，詳情請查閱公開課程說明書。</strong></p>
</blockquote>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><blockquote>
<p>本系列將會淺談 <strong>JavaScript</strong> ，希望給未來自己當作筆記以及剛接觸 <strong>JavaScript</strong> 的夥伴們，甚至能帶點不一樣觀點或您沒聽過的觀點給大家，所以不會太過深入的討論。</p>
</blockquote>
<p>關於淺談的主題將會大致分為下列幾項，<strong>項目可能會做更動</strong>。</p>
<ol>
<li><p><strong><a href="https://rexhung0302.github.io/2019/10/09/20191009/">JavaScript 執行環境及作用域</a></strong></p>
</li>
<li><p><strong><a href="https://rexhung0302.github.io/2019/10/15/20191015/">運算子、型別與文法</a></strong></p>
</li>
<li><p><strong><a href="https://rexhung0302.github.io/2019/10/24/20191024/">物件</a></strong></p>
</li>
<li><p><strong><a href="https://rexhung0302.github.io/2019/10/28/20191028/">關於 This 那些事</a></strong></p>
</li>
</ol>
<p>再次補充，其中大多做為筆記作用，並非一定絕對，也希望錯誤之處各位高手能高台貴手，必且不吝嗇的進行指教。</p>
<p>本章討論的主題為下列幾項。</p>
<ol>
<li><p><strong><a href="#340f">JavaScript 執行環境及作用域</a></strong></p>
</li>
<li><p><strong><a href="#46e6">到底該怎麼寫 JavaScript？</a></strong></p>
</li>
<li><p><strong><a href="#de0d">人生都有第一次 — 錯誤</a></strong></p>
</li>
<li><p><strong><a href="#0d98">作用域</a></strong></p>
</li>
<li><p><strong><a href="#8d2d">執行堆疊</a></strong></p>
</li>
<li><p><strong><a href="#7d64">範圍鍊</a></strong></p>
</li>
<li><p><strong><a href="#a9c2">提升</a></strong></p>
</li>
<li><p><strong><a href="#53ac">同步與非同步</a></strong></p>
</li>
</ol>
<hr>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*xf-vmylN6htlr_C-lx9B4Q.png" alt="程式的起點 Hello world."></p>
<h3 id="首先談談-JavaScript-執行環境及作用域"><a href="#首先談談-JavaScript-執行環境及作用域" class="headerlink" title="首先談談 JavaScript 執行環境及作用域"></a><strong>首先談談 JavaScript 執行環境及作用域</strong></h3><p>再接觸程式之前你或多或少都會聽說過 <strong>HTML CSS JavaScript</strong> 三寶，你也知道  <strong>HTML</strong> 是網頁瀏覽器可以讀懂的語言，<strong>CSS</strong> 則是拿來美化網頁的語言，那  <strong>JavaScript</strong> 呢？剩下你想得到複雜的功能其實都是靠 <strong>JavaScript</strong> 做出來的。</p>
<p>而 <strong>JavaScript</strong> 是直譯式語言，這種類型的程式語言，會透過 <strong>直譯器(註1)</strong> 將程式碼一句一句直接執行，不會事先透過 <strong>編譯器</strong> 編譯成 <strong>機器碼(註2)</strong>，才能執行，優點是彈性高，缺點是往往都要執行後才能發現錯誤，像是透過只要接觸  <strong>JavaScript</strong> 這輩子一定擺脫不了的 <strong>console.log()</strong>，後面會提到。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*2itO_V8DzQ_Bgb1pxEu0lA.png"></p>
<blockquote>
<p><em>註1：關於直譯器可參考 <a href="https://esprima.org/demo/parse.html">傳送門</a>，電腦並非那麼聰明，舉個例子來說 <strong>var abc &#x3D; ‘Hello World’;</strong> 電腦其實看不懂你要把 <strong>Hello World</strong> 放到 <strong>abc</strong> 上，所以必須透過直譯器來一個一個給他型別、用途，電腦才會知道這個要做什麼，詳見下圖。</em></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*X9-GuQWYIt51HBakIV173A.png" alt="直譯器編譯過程"></p>
<blockquote>
<p>註2：機器碼指的即是機器語言( <strong>machine language</strong> )，簡單說就是 01010101010。</p>
</blockquote>
<hr>
<h3 id="所以到底該怎麼寫-JavaScript？"><a href="#所以到底該怎麼寫-JavaScript？" class="headerlink" title="所以到底該怎麼寫 JavaScript？"></a>所以到底該怎麼寫 JavaScript？</h3><p>講了這麼多，所以我該怎麼開始寫 <strong>JavaScript</strong> 呢？ <strong>JavaScript</strong> 的應用非常的多，前端寫到後端都可以使用。這邊是淺談的原因，先列舉最簡單的使用方式，直接在 <strong>HTML</strong> 引入 <strong>JavaScript</strong> 或是 <strong>.js</strong> 檔。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*Ks9ISStI9EyBXkMBMKLBIQ.png" alt="不囉唆 上菜"></p>
<p>值得注意的是， <strong>JavaScript</strong> 跟 <strong>CSS</strong> 一樣，會有順序問題，越下面的，就會把上面的給蓋掉，這點對剛開始接觸程式的我常常踩雷啊。引入的方式就很簡·單兩種，在 <strong>HTML</strong> 裡面直接使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;我是 <span class="title class_">JavaScript</span> 內容&lt;<span class="regexp">/script&gt;** /</span>/ 包起來，或是透過 </span><br><span class="line">&lt;script src=”你的 .<span class="property">js</span> 檔路徑”&gt;&lt;<span class="regexp">/script&gt; /</span>/ 來引入 <span class="title class_">JavaScript</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="人生都有第一次"><a href="#人生都有第一次" class="headerlink" title="人生都有第一次"></a>人生都有第一次</h3><p>我們前面說到 <strong>JavaScript</strong> 是直譯式語言，所以錯誤往往都是最後才會知道，寫上我們下面的範例，然後打開你以後寫程式的另一半 <strong>F12</strong>，點到 <strong>console</strong> 會發現下圖的 ** eft-hand(註3)** 錯誤。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;Hello World&#x27;</span> = <span class="number">666</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*OYHQLFvhXPUBVxO9T-WVgQ.png" alt="錯誤就是這麼顯眼"></p>
<blockquote>
<p><em>註3：典型的錯誤有 <strong>LHS( left-hand side)</strong> 及 <strong>RHS( right-hand side ) 錯誤</strong>，即是賦值到左邊變數上 及 取直來自右邊變數上的錯誤。直得一提的是 RHS 並不會提示在 <strong>F12</strong> 的 <strong>console</strong> 上，如下圖。</em></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*KoSjWekwGhCEw5grji4CZw.png" alt="錯誤就是這麼顯眼且枯燥"></p>
<hr>
<h3 id="放下你的魚-開始拿釣竿"><a href="#放下你的魚-開始拿釣竿" class="headerlink" title="放下你的魚 開始拿釣竿"></a>放下你的魚 開始拿釣竿</h3><p>前面講了一堆，這邊就開始，首先你必須先知道 <strong>JavaScript</strong> 使用時常常要先宣告，宣告什麼呢？這就跟 <strong>語法作用域</strong> 有關係了。我們必須要了解 <strong>JavaScript</strong> 是 <strong>靜態作用域(註4)</strong>，基本上 <strong>JavaScript</strong> 都是由很多函式組成的，如下圖。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*GqD8SwuoJil6vWKgAie1Gw.png" alt="**語法作用域**"></p>
<p>這邊你必須先懂的兩樣東西，一個是宣告變數的方式 <strong>var let const(後面會解說有什麼不同)</strong>，一個是 <strong>function 名稱()</strong>，請見範例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> abc = <span class="string">&#x27;Hello World&#x27;</span>;  <span class="comment">// 全域</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;            <span class="comment">// 函式區域 (a 是你決定要使用時用來呼叫的名稱， 例: a();)</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> def = <span class="string">&#x27;Hello JavaScript&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(abc);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(def);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">a</span>();                      <span class="comment">// 呼叫並使用 function</span></span><br></pre></td></tr></table></figure>

<p>通常我們會透過 <strong>var</strong> 宣告一個變數去裝東西，然後會有很多 <strong>function</strong> 去寫我們要做什麼事情，比如說這個 <strong>function</strong> 我要用來新增錢包的零錢，這個 <strong>function</strong> 我要用來刪除錢包… 等等，那變數放的位子就很重要了，基本上在函式執行階段如果找不到那個變數(例： <strong>abc</strong>)，它就會往外找，如果還是找不到就會出現上方的紅色錯誤提示</p>
<p>你或許會問，那如果我宣告兩個一樣的變數呢？別急！後面會告訴你。</p>
<blockquote>
<p><em>註4：上方有說到直譯式語言及編譯式語言，那 靜態作用域 就是語法在解析的時候就已經確定作用域，不會再做改變， <strong>JavaScript</strong> 就是屬於這一種。動態作用域則是變數的作用域在函式調用的時候才決定。</em></p>
</blockquote>
<hr>
<h3 id="前菜主餐點心"><a href="#前菜主餐點心" class="headerlink" title="前菜主餐點心"></a>前菜主餐點心</h3><p>正所謂吃飯有先後(有嗎？)，在 <strong>JavaScript</strong> 的執行也有先後順序，在電腦的執行序裡程式都是一樣一樣要排好隊，一個一個來，那我們怎麼知道這個順序呢？記得前面提到的 <strong>function</strong> 嗎？在我們執行裡，這些 <strong>function</strong> 就像要一個一個走近一間餐廳，只是這間餐廳只有入口，先來的人先吃，最後進來的人雖然最晚吃，但是它享有先離開的權利。</p>
<blockquote>
<p>為什麼要說到先後順序呢？因為在寫程式時，我們必須時刻了解到你的程式現在會怎麼跑，該怎麼跑。</p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*Zr8XmlTQpS1MkRgB8ffeYQ.png" alt="圖解執行堆疊"></p>
<p>這時候你可能會有個疑問，那如果我寫了了 <strong>b()</strong> 緊接著 <strong>a()</strong> 呢？會怎麼跑呢？我們有個好夥伴，在寫程式的漫漫之路上雖然寂寞，但是它卻會陪著你一直走下去，沒錯，就是<strong>開發者除錯工具 F12</strong>，創建好你的練習題目，然後按下 <strong>F12</strong> 吧。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*Ef42Kc-rwCOFPwTPeov8ww.png" alt="F12"></p>
<blockquote>
<p>按下 <strong>F12</strong> 然後點到 <strong>Sources</strong>，在點擊右邊的暫停按鈕，之後重新整理，你會發現現在程式碼會停止在你觸發的那行程式碼上。</p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*s8Sj-NKa_m33Fbc5PUpzew.png" alt="在這邊你就能清楚地知道執行堆疊啦"></p>
<blockquote>
<p>依序的按往下的箭頭下一步或是往上的箭頭上一部了解整個運作過程。</p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*kv85A-q8mqKQW56x8vrn7g.gif" alt="透過 Call Stack 及 Scope 清楚看見執行堆疊"></p>
<hr>
<h3 id="關於範圍鍊"><a href="#關於範圍鍊" class="headerlink" title="關於範圍鍊"></a>關於範圍鍊</h3><p>為什麼上方會說到執行堆疊呢？因為在寫 <strong>JavaScript</strong> 的時候，還有一點我們必須非常注意，就是我的程式碼影響的範圍多遠？下方的示意圖簡單地表示，雖然我們有宣告兩個一樣的變數 <strong>abc</strong> ，但是 <strong>在哪裡</strong> 使用它會得到不同的結果，像是在 <strong>function a</strong> 的時候因為它在 <strong>function a</strong> 的範圍內找不到 <strong>abc</strong> 所以他會直接向外面那層搜尋 <strong>abc</strong> ，最後結果即是 <strong>66666</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*cC1zMmManfuruemFQXY0TA.png"></p>
<hr>
<h3 id="說好的順序呢？"><a href="#說好的順序呢？" class="headerlink" title="說好的順序呢？"></a>說好的順序呢？</h3><p>前面說了堆疊順序，但總會讓人覺得，好像毫無順序可言，而且其實我把要呼叫的程式碼隨便丟，似乎都會正常的跑。其實這跟本篇會說到的重點之一有關，就是<strong>提升</strong>(<strong>Hoisting</strong>)。</p>
<p>在上方我們有提到 <strong>執行堆疊</strong>，那在執行環境中其實程式已經幫我們做了兩件事情，其中一個是 <strong>創造</strong>，一個是 <strong>執行</strong>，簡單說創造的時候它已經幫你把程式順序把整理好了。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*R2wLE619874j8W_rViKMUA.png"></p>
<p>在前面如果你有試著用 <strong>F12</strong> 工具去執行會發現，執行到宣告的地方，變數沒有立即的被賦值，卻出現了 <strong>undefined</strong>，這是為什麼呢？說到這邊就要講講關於記憶體的部分。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*ZzaeHcftemdP5g_SPFklVg.png" alt="創造階段"></p>
<p>再創造階段時變數都會先被記錄下來，但是值都是 <strong>undefined(註5)</strong> ，比較不同的是 <strong>函式陳述式</strong> 會被完整的先記錄下來並且做提升。一直到執行階段，變數才會賦值上去。</p>
<blockquote>
<p><em>註5：關於 undefined 及 not defined 的差別要注意，一個是已經在創造階段宣告變數名稱但是沒有賦值，一個是在創造階段沒有宣告變數名稱也沒有賦值。</em></p>
</blockquote>
<h3 id="說完記憶體來談談同步與非同步"><a href="#說完記憶體來談談同步與非同步" class="headerlink" title="說完記憶體來談談同步與非同步"></a>說完記憶體來談談同步與非同步</h3><p>上方我們有提到 <strong>執行堆疊</strong>，那在 JavaScript 中如果你要讓某個程式碼晚一點在執行就必須靠非同步來執行，直接來看下面一張圖。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*ObKobMAi41s_KKTzfnknZg.png" alt="事件佇列"><em>事件佇列</em></p>
<p>因為 <strong>Javascript</strong> 是 單執行緒，一次只能做一件事情，如果你想要讓它依照你的順序去執行，就必須靠事件佇列來解決，所有非同步內容丟進事件佇列內，最後執行完本次的執行環境才會執行事件佇列的內容。</p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>其實應該算本章的小結論，這次筆記其實想記錄很多東西，但是有些又覺得不需要特別去紀錄，所以整理起來或許會有點亂，但是在寫文章的過程或多或少又能整理到自己一些思緒，我覺得這次收穫最大的。</p>
<p>在寫這篇文章的時候突然想起，剛接觸程式時不懂 <strong>Javascript(雖然現在也不懂)</strong>，胡亂寫一通，竟然還是跑得起來，某些程式碼也沒有離預期太遠，不過俗話說的好，基礎沒打穩，等你上戰場後就會原形畢露，這段時間覺得自己還是應該好好再次精進 <strong>Javascript</strong> 的能力。</p>
<p>關於 <strong>Javascript</strong> 還有很多會慢慢寫筆記，最近常常有種怠惰的感覺，或許是剛開始什麼都不會，進步得很快，但是像那句老話，你學的越多你就越不懂，也或許碰到了學習階段的檻。學習急不得，我會告訴自己努力加油還要保持自己的初衷。<strong>To be continued.</strong></p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li>六角學院 — <a href="https://www.hexschool.com/courses/js-core.html?utm_source=LINE&utm_medium=message&utm_campaign=0807LINE_message#recommend">JavaScript 核心篇</a></li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>[JavaScript Note] — 淺談 JavaScript #4</title>
    <url>/2019/10/28/20191028/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>這章節主要筆記關於 <strong>This</strong> 的一些淺談，剛學 <strong>JavaScript</strong> 時就常常聽到『你真的了解 <strong>This</strong> 嗎？』、『<strong>This</strong> 到底指的是什麼？』，剛好在 <strong>JavaScript</strong> 核心篇的一個章節提到 <strong>This</strong> ，課後終於小了解關於 <strong>This</strong> 的三兩事，如果沒有搞清楚，常常會在錯誤的作用域裡做事情呢，話不多說，下面就開始來認識認識 <strong>This</strong> 吧。</p>
<span id="more"></span>

<blockquote>
<p>接下來的每一章，不免俗的都會來一句：</p>
</blockquote>
<blockquote>
<p>本篇文章一切皆為筆記作用，有任何錯誤及問題，歡迎理性指教及討論，詳情請查閱公開課程說明書。</p>
</blockquote>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><blockquote>
<p>本系列將會淺談 <strong>JavaScript</strong> ，希望給未來自己當作筆記以及剛接觸 <strong>JavaScript</strong> 的夥伴們，甚至能帶點不一樣觀點或您沒聽過的觀點給大家，所以不會太過深入的討論。</p>
</blockquote>
<p>關於淺談的主題將會大致分為下列幾項，<strong>項目可能會做更動</strong>。</p>
<ol>
<li><p><strong><a href="https://rexhung0302.github.io/2019/10/09/20191009/">JavaScript 執行環境及作用域</a></strong></p>
</li>
<li><p><strong><a href="https://rexhung0302.github.io/2019/10/15/20191015/">運算子、型別與文法</a></strong></p>
</li>
<li><p><strong><a href="https://rexhung0302.github.io/2019/10/24/20191024/">物件</a></strong></p>
</li>
<li><p><strong><a href="https://rexhung0302.github.io/2019/10/28/20191028/">關於 This 那些事</a></strong></p>
</li>
</ol>
<p>本章討論的幾個關鍵標題為下列幾項。</p>
<ol>
<li><p>This 是什麼？</p>
</li>
<li><p>This 的特性</p>
</li>
<li><p>關於箭頭函式對 this 的影響</p>
</li>
</ol>
<hr>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*emhX3OcXv7c1b7yzUfsg5A.png" alt="關於 This"></p>
<h3 id="This-是什麼？"><a href="#This-是什麼？" class="headerlink" title="This 是什麼？"></a>This 是什麼？</h3><p>關於 <strong>JavaScript</strong> 的 <strong>This</strong> 其實上 <strong>Google</strong> 就會發現好多大神的文章，究竟為什麼 <strong>This</strong> 這麼重要呢？在相關文章中能看見，如果你搞清楚 <strong>This</strong> 你就能掌握到程式將會怎麼走，也能掌握程式在對的地方執行對的事情。</p>
<blockquote>
<p>JavaScript <strong>函式內的 this 關鍵字</strong> 表現，和其他語言相比略有差異。在<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode">嚴格模式</a>與非嚴格模式下也有所不同。<br>通常，this 值由被呼叫的函式來決定。它不能在執行期間被指派，每次函式呼叫調用的值也可能不同。ES5 引入了 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">bind</a> 方法去<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/this#The_bind_method">設置函式的 this 值，而不管它怎麼被呼叫。</a><strong>ECMAScript 2015</strong> 也導入了定義 this 詞法範圍的<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Functions/Arrow_functions">箭頭函式</a><br>— 擷至 MDN</p>
</blockquote>
<hr>
<h3 id="This-的特性"><a href="#This-的特性" class="headerlink" title="This 的特性"></a>This 的特性</h3><p>原理或是理論的部分這邊就不過多的詳細描述，但是主要還是要說一些比較淺顯易懂的東西。關於 <strong>This</strong> 的特性有幾點：</p>
<ol>
<li><p><strong>不需宣告。</strong></p>
</li>
<li><p><strong>每個執行環境都有自己的 This 關鍵字。</strong></p>
</li>
<li><p><strong>This 和 Function 如何宣告沒有關聯性，和被呼叫方式有關。</strong></p>
</li>
<li><p><strong>在嚴格模式下，與在簡易模式下很不同。</strong></p>
</li>
</ol>
<p>在我們打開網頁 <strong>F12</strong> 之後開啟 <strong>Sources</strong> 然後就能看見最一開始的 <strong>This</strong> 指的是 <strong>Windows</strong>，而隨著我們的 <strong>Function</strong> ， <strong>This</strong> 的指向位置又會開始改變。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">moreThis</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// ....</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> student = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Rex&#x27;</span>,</span><br><span class="line">  <span class="attr">moreThis</span>: moreThis,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student.<span class="title function_">moreThis</span>(); </span><br><span class="line"><span class="comment">// 前面宣告什麼的都可以不用注意 只要看呼叫的時候 student 就是那個 This</span></span><br></pre></td></tr></table></figure>

<p>上面提到到所謂的 <strong>嚴格模式(‘use strice’)</strong>，在 <strong>JavaScript</strong> 裡有一個靜默的小錯誤，不至於影響程式進行將會被忽略不會跳出警告，而使用 <strong>嚴格模式(‘use strice’)</strong> 後將會直接看見，而 <strong>嚴格模式(‘use strice’)</strong> 也可以依照部分環境加入，意思就是這個 <strong>Function</strong> 我想要加入，另一個不要其實也可以。</p>
<hr>
<p>2020.07.31 後更：</p>
<h3 id="關於箭頭函式對-this-的影響"><a href="#關於箭頭函式對-this-的影響" class="headerlink" title="關於箭頭函式對 this 的影響"></a>關於箭頭函式對 this 的影響</h3><h4 id="廢話前言"><a href="#廢話前言" class="headerlink" title="廢話前言"></a>廢話前言</h4><p>沒想到過了快一年才回來補充，最近剛好在挑戰六角學院的 <strong>JS 60 Day</strong>，有興趣可以看看我的文章 <a href="https://rexhung0302.github.io/2020/06/07/20200607/#more">[Hexschool JS60 Training] — 60天 JavaScript 學徒試煉 Day1-30</a> 及 <a href="https://rexhung0302.github.io/2020/07/29/20200729/#more">[Hexschool JS60 Training] — 60天 JavaScript 學徒試煉 Day31-60</a>。</p>
<p>在第三十九天練習時碰到的題目剛好跟之前的 <strong>JS核心</strong> 有相關，就補充在這邊啦！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20191028/es6.png" alt="ECMAScript6 - ES6"></p>
<p>關於 <strong>ES6</strong> 的歷史，在這個系列前一章 <a href="https://rexhung0302.github.io/2019/10/24/20191024/#%E9%A1%8D%E5%A4%96%E8%A3%9C%E5%85%85">[JavaScript Notes] — 淺談 JavaScript #3</a> 有介紹到，這邊大致再帶過一次。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20191028/es_history.png" alt="ES歷史"></p>
<blockquote>
<p><em>ES 又稱 ECMAScript，Script 代表著腳本，而 ECMAScript 提供了腳本語言需要遵守的規則、細節和規範， JavaScript 是實現 ECMAScript 的規範後所誕生出來的語言。簡單點來說就是一些可以讓你更簡單做事情的 Function 及 一些寫 Code 規範，更詳細的發展歷程可以點 傳送門 查看。</em></p>
</blockquote>
<h4 id="進入正題"><a href="#進入正題" class="headerlink" title="進入正題"></a>進入正題</h4><p>這邊雖然大家可能已經知道箭頭函式是做什麼的，但還是要提一下，在剛學習 <strong>JS</strong> 一陣子後可能會開始發現很多很酷炫的寫法，比如常見的 <strong>箭頭函式</strong>、<strong>解構</strong>、<strong>字串模板</strong>…等等，以下為 <strong>箭頭函式</strong> 的範例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 舊寫法</span></span><br><span class="line"><span class="keyword">var</span> callName = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;I&#x27;m&quot;</span> + name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 箭頭函式 寫法</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">callName</span> = (<span class="params">name</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;I&#x27;m&quot;</span> + name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">callName</span>(<span class="string">&#x27;王小明&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>上面可以看到 <strong>箭頭函式</strong> 取代了 <code>function</code>，雖然剛開始不是很習慣，但寫久了會變得很直覺，而且省下很多時間，身為工程師就必須能多懶就多懶，但是又要能懶到要處，讓人一看 <strong>Code</strong> 就知道你在寫蝦咪碗糕！</p>
<p>所以上面的例子我們還能這樣省：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 箭頭函式 寫法</span></span><br><span class="line"><span class="comment">// 單一行陳述不需要 `&#123;&#125;`</span></span><br><span class="line"><span class="comment">// 此為舉例，如果需要 return 要自己帶入，並非可以省略並有 return 效果！</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">callName</span> = name =&gt; <span class="string">&quot;I&#x27;m&quot;</span> + name;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">callName</span>(<span class="string">&#x27;王小明&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>夠省吧！簡單的說只要記得下列幾點：</p>
<ol>
<li><p><code>function</code> 改為 <code>=&gt;</code></p>
</li>
<li><p>帶有參數情況下，<code>()</code> 必須移到 <code>=&gt;</code> 箭頭前，且如果只有一個參數情況下，可省略 <code>()</code>，但若 <strong>沒有參數</strong> 或 <strong>一個以上的參數</strong> 情況下，一定要帶括號！</p>
</li>
<li><p>單一行陳述不需要 <code>&#123;&#125;</code></p>
</li>
</ol>
<h4 id="呼應主題-This"><a href="#呼應主題-This" class="headerlink" title="呼應主題 This"></a>呼應主題 This</h4><p>一篇好的文章結尾處是必須要呼應主題的，既然這篇文章是在講 <strong>This</strong>，那這邊就要再回來題 <strong>箭頭函式</strong> 對 <strong>This</strong> 的影響。</p>
<p>首先我們先記得兩點關於 <strong>This</strong> 的差別：</p>
<ol>
<li><p>傳統函式 &#x3D;&gt; 依呼叫的方法而定</p>
</li>
<li><p>箭頭函式 &#x3D;&gt; 綁定到其定義時所在的物件</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;王小明&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> myFriend = &#123;</span><br><span class="line">  name = <span class="string">&#x27;王大錘&#x27;</span>,</span><br><span class="line">  <span class="attr">callName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// 王大錘</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// myFriend</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">callName_2</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// 王小明</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// window</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myFriend.<span class="title function_">callName</span>();</span><br><span class="line">myFriend.<span class="title function_">callName_2</span>();</span><br></pre></td></tr></table></figure>

<p>上述例子很清楚可以看見使用 <strong>箭頭函式</strong> 的 <strong>This</strong> 會穿過原本的區塊直接指向外層的 <strong>window</strong>，這是因為 <strong>箭頭函式</strong> 的 <strong>This</strong> 會綁定在 <code>其定義時所在的物件</code>，一般建立函式都是在 <strong>window</strong> 下，所以很自然就會指向 <strong>window</strong>，那要怎麼才能指向函式呢？</p>
<p>這邊再說一個比較好記的方式：</p>
<p>建立在物件內的函式，才會影響箭頭函式的 <strong>This</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">fun</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="title function_">fun2</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> fun3 = &#123;</span><br><span class="line">    <span class="attr">fun</span>: fun2,</span><br><span class="line">    <span class="attr">xxx</span>: <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">fun2</span>(); <span class="comment">// this =&gt; window</span></span><br><span class="line">  fun3.<span class="title function_">fun</span>(); <span class="comment">// this =&gt; fun3 Object</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>簡單說就是如果你的 <strong>function</strong> 有被物件包起來，這時候 <strong>This</strong> 指向的位置就不會是 <strong>window</strong>，因為你並不是建立在 <strong>window</strong> 上的，而是 <strong>Object</strong> 上的。</p>
<blockquote>
<p>注意：上方示範的箭頭函式，適用於原本一般的函式。</p>
</blockquote>
<h4 id="call，apply，bind"><a href="#call，apply，bind" class="headerlink" title="call，apply，bind"></a>call，apply，bind</h4><p>關於這三個可以參考 <a href="https://ithelp.ithome.com.tw/articles/10195896">JavaScript - call，apply，bind</a>，會提到這三個屬性是因為在 <strong>箭頭函式</strong> 裡， <strong>This</strong> 是被綁定的，所以 <code>call()</code> 無法修改 <strong>This</strong>，<code>call()</code> 或 <code>apply()</code> 呼叫箭頭函式只能傳入參數。</p>
<h4 id="建構函式-Out"><a href="#建構函式-Out" class="headerlink" title="建構函式 Out"></a>建構函式 Out</h4><p>如果使用 <strong>new</strong> 運算子，<strong>箭頭函式</strong> 不可作為建構式使用；若使用於建構式，會在使用 <strong>new</strong> 時候拋出錯誤(範例為 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Functions/Arrow_functions">MDN</a>)。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">Foo</span> = (<span class="params"></span>) =&gt; &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> <span class="title class_">Foo</span>(); <span class="comment">// TypeError: Foo is not a constructor</span></span><br></pre></td></tr></table></figure>

<h4 id="DOM-監聽"><a href="#DOM-監聽" class="headerlink" title="DOM 監聽"></a>DOM 監聽</h4><p>記得前面提過的 <strong>This</strong> 會綁到 <strong>window</strong> 上嗎？所以如果拿來當 <strong>監聽事件</strong> 的作用會錯誤。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="variable language_">document</span>.<span class="title function_">getElementsById</span>(<span class="string">&#x27;name_input&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">changeName</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);                   <span class="comment">// window</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">disable</span> = <span class="string">&#x27;true&#x27;</span> <span class="comment">// 錯誤</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">name.<span class="title function_">addEventListener</span>(<span class="string">&#x27;onkeyup&#x27;</span>, changeName, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上述例子為參考 <a href="https://wcc723.github.io/javascript/2017/12/21/javascript-es6-arrow-function/">卡斯伯老師 - 鐵人賽：箭頭函式 (Arrow functions)</a> 修改。</p>
</blockquote>
<h4 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h4><p>關於 <strong>箭頭函式</strong> 或是其他一些 <strong>ES語法糖</strong> 雖然很方便，但總還是會有需要注意的地方，但我們並無法都預先知道所有的錯誤， 就算知道了也可能很快就會忘記，所以最好的作法就是多練習，多犯錯！</p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>本篇其實在原本就是打算做筆記之用途，因為實在有太多的大神已經寫了好多篇關於 <strong>This</strong> 的文章，沒有十足把握的話其實覺得多寫一篇關於 <strong>This</strong> 的文章真的是很沒意義，不過既然是自己要作為筆記用途，那就多少寫一些多少記一些囉。</p>
<p>更多關於 <strong>This</strong> 就等之後補上囉～</p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li>六角學院 — <a href="https://www.hexschool.com/courses/js-core.html?utm_source=LINE&utm_medium=message&utm_campaign=0807LINE_message#recommend">JavaScript 核心篇</a></li>
<li>MDN — <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/this">This</a></li>
<li>TechBridge 技術共筆部落格 — <a href="https://blog.techbridge.cc/2019/02/23/javascript-this/">淺談 JavaScript 頭號難題 this：絕對不完整，但保證好懂</a></li>
<li><a href="https://kuro.tw/">Kuro’s Blog</a> — <a href="https://kuro.tw/posts/2017/10/12/What-is-THIS-in-JavaScript-%E4%B8%8A/">What’s THIS in JavaScript ? [上]</a></li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hero Of UnderGround 地下城] — 12F Puzzle 拼圖</title>
    <url>/2019/06/25/20190625/</url>
    <content><![CDATA[<h2 id="成果-程式碼"><a href="#成果-程式碼" class="headerlink" title="成果 &amp; 程式碼"></a>成果 &amp; 程式碼</h2><blockquote>
<p><em>Demo： <a href="https://rexhung0302.github.io/JS-and-Fighter/JS-and-Fighter-12F/dist/index.html">傳送門</a><br/><br>Code Source： <a href="https://github.com/RexHung0302/JS-and-Fighter/tree/master/JS-and-Fighter-12F">點我</a></em></p>
</blockquote>
<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>在前陣子得知 <a href="https://www.facebook.com/groups/173311386703334/?ref=group_header">The F2E — 前端修練精神時光屋</a> 之後剛好發現今年即將舉辦第二屆的切版大賽(？！)想想地下城好像還剩下幾樓，就想著看開賽前能完成多少是多少了，順便當練習。</p>
<p>這次拼圖有點免強做出來，原本打算再複習一下 <strong>Webpack</strong> 跟 <strong>Vue.js</strong> ，結果發現有些眉眉角角還需要修改呀。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*BRR_0ftKoi9dfKHQXf137A.png" alt="12F大魔王 — 拼圖"></p>
<span id="more"></span>

<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p>由於JS地下城每個BOSS的弱點都不一樣，每一層都要由弱點去進行攻略，本次BOSS的弱點有四項。</p>
<ol>
<li><p>【特定技術】可用 JS 框架，當然你想用原生 JS，也是 ok 的。</p>
</li>
<li><p>【特定技術】在設計稿上，總計有三個介面。</p>
</li>
<li><p>【特定技術】前端之碑審核時，會特別注重「遊戲體驗」</p>
</li>
<li><p>【書寫能力】請寫篇部落格，描述你在做此關時，「所遇到的瓶頸，以及你是如何克服的」</p>
</li>
</ol>
<hr>
<h3 id="關於畫面"><a href="#關於畫面" class="headerlink" title="關於畫面"></a>關於畫面</h3><p>其實到雙數樓層後，畫面一直都是基本要求，看了十個人就會有十個不同的切版方式，你還是需要找到自己最好用也最好明白的方式去切。</p>
<p>這次的拼圖對自己來說算是第一次嘗試實作的功能，所以就先到處爬爬文，整理完之後發現有兩條路可以走。</p>
<ol>
<li><p><strong>HTML5</strong> 新增的 <strong>draggable</strong></p>
</li>
<li><p>使用 <strong>addEventListener</strong> 去處理</p>
</li>
</ol>
<p>個人是選擇前者去使用，因為基本會用到的功能都差不多有了，直接加在 <strong>HTML</strong> 的 <strong>Element</strong> 上即可。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2664/1*NlGuMXyjoYa1Wrox8TxLfw.gif" alt="今日主角 拖曳"></p>
<hr>
<h3 id="前人種樹"><a href="#前人種樹" class="headerlink" title="前人種樹"></a>前人種樹</h3><p>這邊需要先感謝 <a href="https://github.com/HuiyuLiz">HuiyuLiz</a> 大神的文章，看完大神推薦的兩位大大神影片後其實這樓基本上都能解決了。</p>
<p>分別是 <a href="https://www.youtube.com/watch?v=C22hQKE_32c">Drag &amp; Drop With Vanilla JS</a></p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/3264/1*RPTu7wtqIEfXa2JrbPMguw.png"></p>
<p>還有 <a href="https://www.bilibili.com/video/av43463663/?p=1">鼻孔哥JS案例-拼图游戏</a></p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*nbTHZUOfkasTOaMeBCJVsw.png"></p>
<hr>
<h3 id="draggable-有什麼好料？"><a href="#draggable-有什麼好料？" class="headerlink" title="draggable 有什麼好料？"></a>draggable 有什麼好料？</h3><p>其實照著影片看完，先了解到你會用到的幾個 <strong>draggable</strong> 屬性就可以了。首先在你要拖曳的地方加上 <strong>draggable &#x3D; true</strong>，然後加上下方的事件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ondragstart --&gt; 拖曳開始時發生</span><br><span class="line">ondragover  --&gt; 拖曳經過時發生</span><br><span class="line">ondragleave --&gt; 拖曳離開目標區域時發生</span><br><span class="line">ondragend   --&gt; 拖曳停止時發生(放開滑鼠)</span><br><span class="line">ondrop      --&gt; 拖曳停止時發生(放開滑鼠)</span><br></pre></td></tr></table></figure>

<p>在HTML的DOM上直接加上去就不用再 <strong>addEventListener</strong> 一次，然後從最上面開始添加。</p>
<p>首先 <strong>ondragstart</strong> 抓起時我們必須讓原本殘留在原地的圖片消失，就必須加上 <strong>CSS</strong> <strong>disable:none</strong> ，但是這時候原本的圖片會直接消失，必須加上 <strong>setTimeout</strong> 來防止。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> (e.<span class="property">target</span>.<span class="property">className</span> += <span class="string">&quot; invisible&quot;</span>), <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>接下來我們必須用到 <strong>ondragover</strong> 幫我們加上 <strong>hover</strong> 的效果，但是因為我們的 <strong>ondrop</strong> 事件會被 <strong>ondragover</strong> 事件不斷發生給卡住，所以這邊必須在  <strong>ondragover</strong> 事件裡面加上 <strong>e.preventDefault()</strong> 來防止事件不斷產生，然後可以再透過 <strong>ondragleave</strong> 事件來取消 <strong>hover</strong> 的樣式。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*umudwkR8NrcQuB-oeYW22Q.gif" alt="hover 事件"></p>
<p>最後我們必須透過 <strong>ondrop</strong> 來判斷你丟的拼圖是不是正確位子，這邊我使用拼圖 <strong>ID</strong> 最後一個數字和拼圖格子上的 <strong>ID</strong> 最後一個數字來比對，正確就加上發光的 <strong>CSS</strong> 。</p>
<blockquote>
<p>這邊還可以用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/setData"><strong>DataTransfer.setData()</strong> </a>的方式來傳遞 <strong>ID</strong> 值，不過在使用前我已經用陣列去判斷哪個地方已經完成了所以沒用到，不過算是又學了一個新的方法。</p>
</blockquote>
<p>最後因為扔下拼圖的時候我必須去除掉 <strong>display:none</strong> 的 <strong>CSS</strong> 樣式，但是我把去除樣式寫在 <strong>ondrop</strong> 裡沒有反應，最後加在 <strong>ondragend</strong> 上才有反應，這邊還需要去研究一下為什麼會這樣。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2120/1*Bi2gjKOjNZCbSBLxkdrvPg.png"></p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>這次拼圖關卡也拖了好久的時間，不過每次打王就會學到新的技能，這才是最重要的。( 雖然這次偷懶很多地方，要改的地方也很多…</p>
<p>最近總結一下自己學了一這陣子的程式發現不管學程式也好，學其他東西也是，都會在你剛開始的時候覺得自己學什麼都好快而且收穫滿滿，那個感覺也超棒，但是在一段時間後會發現自己突然卡住了，而且發現好多事情你突然發現不是那麼簡單，挫折感會挺重的。我想是因為剛開始什麼都不會，所以學什麼都快，但是因為碰到的都是基礎層面，所以一段時間後就會發現你了解的越多，你不懂的也越多。但是我們往往都是在感覺突破不了的時候突然突破了會發現自己成長好多，現在的自己就像是卡住一樣，我想是時候好好想想並規劃自己接下來該怎麼走了。</p>
<p>最後除了繼續努力之外還是要列出檢討的地方，然後希望 <strong>F2E</strong> 開賽前還有時間朝下一關繼續加油，完畢。</p>
<ul>
<li><p>JS</p>
</li>
<li><p>邏輯</p>
</li>
<li><p>文筆</p>
</li>
<li><p><del><em>體重</em></del></p>
</li>
</ul>
<h3 id="我的其他範例"><a href="#我的其他範例" class="headerlink" title="我的其他範例"></a>我的其他範例</h3><ul>
<li><strong>Hero Of UnderGround — 地下層系列</strong><blockquote>
<p><em>Demo &amp; Blog：<a href="https://github.com/RexHung0302/JS-and-Fighter">點我</a></em></p>
</blockquote>
</li>
</ul>
<h3 id="Vue系列-—"><a href="#Vue系列-—" class="headerlink" title="Vue系列 —"></a>Vue系列 —</h3><ul>
<li><strong>[Vue Notes] — Vue-Cli #1 初次見面</strong><blockquote>
<p><em>Blog：<a href="https://medium.com/@zehung860486/vue-notes-vue-cli-1-%E5%88%9D%E6%AC%A1%E8%A6%8B%E9%9D%A2-e2d868ee04aa">點我</a></em></p>
</blockquote>
</li>
</ul>
<h3 id="CSS系列-—"><a href="#CSS系列-—" class="headerlink" title="CSS系列 —"></a>CSS系列 —</h3><ul>
<li><strong>[CSS Notes] — 談談CSS模組化</strong><blockquote>
<p><em>Blog：<a href="https://medium.com/@zehung860486/css-notes-css%E6%A8%A1%E7%B5%84%E5%8C%96-3bb03e72523e">點我</a></em></p>
</blockquote>
</li>
</ul>
<h3 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h3><ul>
<li><a href="https://github.com/HuiyuLiz">HuiyuLiz</a> 大大 —<a href="https://github.com/HuiyuLiz/js-puzzle"> JavaScript 題目篇 — 新手 JS 地下城</a></li>
<li><a href="https://github.com/ChenDarYen">ChenDarYen</a> 大大 — <a href="https://github.com/ChenDarYen/puzzle">Vue Puzzle</a></li>
<li><a href="https://www.youtube.com/watch?v=C22hQKE_32c">Drag &amp; Drop With Vanilla JS</a></li>
<li>鼻孔哥 — <a href="https://www.bilibili.com/video/av43463663/?p=1">鼻孔哥JS案例-拼图游戏</a><br><a href="https://www.gamer.com.tw/index2.php?ad=N">*巴哈姆特 舒壓用</a>*</li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>前端</category>
        <category>HeroOfUnground[地下城]</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
        <tag>HexSchool</tag>
      </tags>
  </entry>
  <entry>
    <title>[JavaScript Note] — 淺談 JavaScript #2</title>
    <url>/2019/10/15/20191015/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>因為前陣子出車禍，這陣子算是痊癒了，已經一個多月沒有運動，但是運動的感覺還是很熟悉。 寫程式也是這樣，底子打穩才是最重要的。廢話不多說，立馬進入第二章。</p>
<span id="more"></span>

<blockquote>
<p>接下來的每一章，不免俗的都會來一句：</p>
</blockquote>
<blockquote>
<p><strong>本篇文章一切皆為筆記作用，有任何錯誤及問題，歡迎理性指教及討論，詳情請查閱公開課程說明書。</strong></p>
</blockquote>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><blockquote>
<p><em>本系列將會淺談 <strong>JavaScript</strong> ，希望給未來自己當作筆記以及剛接觸 <strong>JavaScript</strong> 的夥伴們，甚至能帶點不一樣觀點或您沒聽過的觀點給大家，所以不會太過深入的討論。</em></p>
</blockquote>
<p>關於淺談的主題將會大致分為下列幾項，<strong>項目可能會做更動</strong>。</p>
<ol>
<li><p><strong><a href="https://rexhung0302.github.io/2019/10/09/20191009/">JavaScript 執行環境及作用域</a></strong></p>
</li>
<li><p><strong><a href="https://rexhung0302.github.io/2019/10/15/20191015/">運算子、型別與文法</a></strong></p>
</li>
<li><p><strong><a href="https://rexhung0302.github.io/2019/10/24/20191024/">物件</a></strong></p>
</li>
<li><p><strong><a href="https://rexhung0302.github.io/2019/10/28/20191028/">關於 This 那些事</a></strong></p>
</li>
</ol>
<p>再次補充，其中大多做為筆記作用，並非一定絕對，也希望錯誤之處各位高手能高台貴手，必且不吝嗇的進行指教。</p>
<p>本章討論的主題為下列幾項。</p>
<ol>
<li><p><a href="#858f">JavaScript 的基礎介紹</a></p>
</li>
<li><p><a href="#8d98">關於型別的部分</a></p>
</li>
<li><p><a href="#a2c1">型別種類</a></p>
</li>
<li><p><a href="#08cf">動態型別</a></p>
</li>
<li><p><a href="#c08a">運算子</a></p>
</li>
<li><p><a href="#24f5">邏輯運算子</a></p>
</li>
</ol>
<hr>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2100/1*S2SPgJ3UKJzbgApJx8zemA.png" alt="圖片取自 https:&#x2F;&#x2F;scotch.io&#x2F;bar-talk&#x2F;5-tips-to-write-better-conditionals-in-javascript"></p>
<h3 id="JavaScript-的基礎介紹"><a href="#JavaScript-的基礎介紹" class="headerlink" title="JavaScript 的基礎介紹"></a>JavaScript 的基礎介紹</h3><p>在我們看 <strong>JavaScript</strong> 時很常看見一些運算符號，或是前面一章說的宣告…等等，這邊就要來介紹 <strong>JavaScript</strong> 的基本兩個式子，分別是 <strong>陳述式(statement)</strong> 及 <strong>表達式(Expression)。</strong></p>
<blockquote>
<p><strong>陳述式(statement)</strong>-&gt; 命令指定一系列的操作，特點是不會回傳結果。</p>
</blockquote>
<blockquote>
<p><strong>表達式(Expression)</strong>-&gt; 常常和我們看見的運算符號結合再一起，並會回傳運算結果。</p>
</blockquote>
<p>前者類似 <strong>If..else</strong> 或是變數宣告 <strong>var let const</strong> 或是迴圈 <strong>for…of</strong> …等等這些都不會回傳一個結果，後者是我們常看到的 <strong>10 + 100</strong> 或是 <strong>20 &#x2F; 2</strong> ，會回傳一個特定結果的。</p>
<p>前面一章我們除了變數宣告外還提到了很重要的 <strong>函式(function)</strong>，在這邊函式依然也有兩種式子，就是 <strong>函數陳述式</strong>(又稱 <strong>具名函式</strong>) 及 <strong>函數表達式</strong>。其實和前面大同小異，前者是宣告一個 <strong>function</strong> 名稱，然後給他操作內容；後者是宣告一個變數然後帶入一個 <strong>function</strong> 最後會回傳一個結果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函式陳述式(陳述式不可為匿名)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// do something...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函示表達式(這是匿名函式 給名字就是 具名函式)</span></span><br><span class="line"><span class="comment">// (仔細看和運算子又綁在一起了!!)</span></span><br><span class="line"><span class="keyword">var</span> sayHello = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>值得一提的小地方是，有時候在 <strong>JavaScript</strong> 內寫一些 <strong>function</strong> 後會忘記加上分號，但是程式碼可以順利地跑，有時候又不行，是因為 <strong>JavaScript</strong> 有 <strong>ASI(Automatic Semicolon Insertion)</strong> 的機制，會自動幫你補上分號。通常水能載舟亦能覆舟，有時候斷點之後就會造成你的程式碼錯誤。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">;(<span class="keyword">function</span>(<span class="params"></span>) &#123;  <span class="comment">// 所以知道為什麼有些立即函式剛開始前面要加上分號了吧！</span></span><br><span class="line">    <span class="comment">// do something...</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="關於型別的部分"><a href="#關於型別的部分" class="headerlink" title="關於型別的部分"></a>關於型別的部分</h3><p>另外 <strong>JavaScript</strong> 有個值得一提的地方，因為 <strong>JavaScript</strong> 是弱型別(<strong>註1</strong>)，所以在做運算上要特別注意，雖然有時候程式會自動幫你轉換型別，但是如果自己搞不清楚現在到底是什麼型別，會讓自己之後來看或是接手的同事們很辛苦的。</p>
<blockquote>
<p>*註1：程式語言的分類上分為 <strong>強型別 (Strong type)</strong> 及 <strong>弱型別(Weak type)</strong>，而 <strong>JavaScript</strong> 就是後者，前者在變數宣告時必須去定義這個變數的型別，在運算過程通也鮮少會有自動之型態轉換；後者在定義時則不需要特別去定義型別。所以後面更出現了 <strong>TypeScript</strong>，多了一些規範，改善弱型別的問題。更多關於 <strong>強型別 (Strong type)</strong> 及 **弱型別(Weak type) *<em>的介紹歡迎至 <a href="https://medium.com/enjoy-life-enjoy-coding/typescript-%E8%81%BD%E8%AA%AA-javascript-%E6%9C%89%E4%BB%80%E9%BA%BC%E5%BC%B1%E5%9E%8B%E5%88%A5-typescript-%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95-i-bb487251d387">神Q超人 </a>大大那兒參閱一系列的文章 精彩好文推推推。</em></p>
</blockquote>
<h3 id="型別種類"><a href="#型別種類" class="headerlink" title="型別種類"></a>型別種類</h3><p><strong>JavaScript</strong> 在型別上在分為 <strong>原始型別</strong> 及 <strong>物件型別</strong>，基本上只要記得 <strong>原始型別</strong> 的基本幾項，其他不在裡面的都是 <strong>物件型別</strong>。原始型別有下列幾種：</p>
<ol>
<li><p><strong>布林 Boolean</strong></p>
</li>
<li><p><strong>空 Null(註2)</strong></p>
</li>
<li><p><strong>未定義 Undefined</strong></p>
</li>
<li><p><strong>數值 Number</strong></p>
</li>
<li><p><strong>字串 String</strong></p>
</li>
<li><p><strong>整數數值 BigInt</strong></p>
</li>
<li><p><strong>Symbol</strong></p>
</li>
</ol>
<blockquote>
<p>註2：在使用 <strong>typeof(null)</strong> 時會回傳 <strong>Object(物件)</strong>，這是 <strong>JavaScript</strong> 的長久錯誤之一。</p>
</blockquote>
<h3 id="動態型別"><a href="#動態型別" class="headerlink" title="動態型別"></a>動態型別</h3><p>前面有提過 <strong>JavaScript</strong> 有創造跟執行階段，當創造階段會先在記憶體內佔一個空間，一直到執行階段賦予變數一個值得時候，變數就會正式有型別，這時候我們就可以使用 <strong>typeof()</strong> 來確認變數的型別。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name;                  <span class="comment">// 創造階段</span></span><br><span class="line">name = <span class="string">&#x27;Rex&#x27;</span>;              <span class="comment">// 執行階段</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(name)); <span class="comment">// 打開 F12 查看會出現 String</span></span><br><span class="line">name = <span class="number">666</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(name)); <span class="comment">// 打開 F12 查看會出現 Number</span></span><br></pre></td></tr></table></figure>

<p>雖然 <strong>JavaScript</strong>是弱型別的關係，有時候程式會自動幫你做轉換，但是這邊會有一顆大地雷在，初學時常常因為這個踩雷踩的滿身包啊；在程式碼轉換時分為 <strong>顯性轉換(Explicit conversion)</strong> 及 <strong>隱性轉換(Implicit conversion)</strong>，前者就像是上面例子中我們直接再度賦予 <strong>name</strong> 數字這種轉換，後者就是我們常常會踩到的雷，就像下面例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="number">666</span>;</span><br><span class="line"><span class="keyword">var</span> number2 = <span class="string">&#x27;222&#x27;</span>;</span><br><span class="line"></span><br><span class="line">number = number + number2;</span><br><span class="line"><span class="comment">// 會出現多少呢？</span></span><br></pre></td></tr></table></figure>

<p>這邊在初學時第一個反應肯定是 <strong>888</strong> ，這就中了型別的陷阱，因為 <strong>Number</strong> 和 String 無法做相加，所以 <strong>JavaScript</strong> 會自動幫你將數字轉為字串，結果會變為 <strong>‘666222’</strong>。但是如果這時候你把 <strong>‘666222’</strong> 的字串乘上3結果又會變回數字，其實這就是弱型別的問題，這時候就善用 <strong>typeof</strong> 去鑑定吧！</p>
<blockquote>
<p><strong>小筆記之型別的相等 &#x3D;&#x3D;&gt;</strong></p>
</blockquote>
<blockquote>
<p>上面提到的型別在做相等判斷時會有 <strong>寬鬆相等</strong> 及 <strong>嚴格相等</strong>，這邊跟 <strong>弱型別</strong> 又有點關係了。我們有說到 <strong>JavaScript</strong> 在創建時並不強制要求給予型別，所以在判別兩個型別是否一樣的時候透過 <strong>寬鬆相等(&#x3D;&#x3D;)</strong> 及 <strong>嚴格相等(&#x3D;&#x3D;&#x3D;)</strong> 結果會不一樣，這邊必須特別小心。</p>
</blockquote>
<hr>
<h3 id="運算子"><a href="#運算子" class="headerlink" title="運算子"></a>運算子</h3><p>在 <strong>JavaScript</strong> 中我們很常看見運算符號，在這邊我們稱為運算子，關於運算子要注意的有兩點分別為 <strong>優先性(Precedence)</strong> 及 <strong>相依性(Associativity)</strong>，前者在說的就是類似於先乘除後加減的概念，就是所謂的 <strong>權重</strong>，權重越重，就會優先執行，後者在說的就是權重相同時，<strong>執行的順序</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span> * <span class="number">2</span> + <span class="number">2</span> * <span class="number">3</span>;      <span class="comment">// 乘號權重較大(14) 優先執行乘法 然後加法(13)</span></span><br><span class="line">=&gt; <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span> * ( <span class="number">2</span> + <span class="number">2</span> ) * <span class="number">3</span>;  <span class="comment">// 想讓加法先執行 就再加上一個權重較高的括號(20)</span></span><br><span class="line">=&gt; <span class="number">24</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">10</span> / ( <span class="number">2</span> + <span class="number">2</span> ) * <span class="number">3</span>; <span class="comment">// 權重相同時(14) 相依性會由左至右</span></span><br><span class="line">=&gt; <span class="number">7.5</span></span><br></pre></td></tr></table></figure>

<h3 id="邏輯運算子"><a href="#邏輯運算子" class="headerlink" title="邏輯運算子"></a>邏輯運算子</h3><p>邏輯運算指雖然只有三項，但是再接觸 <strong>JavaScript</strong> 卻是很常用到，分別為 <strong>&amp;&amp;(且)</strong> 及 <strong>||(或)</strong> 及 <strong>!(not)</strong> 三項，詳細介紹可以<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Obsolete_Pages/Obsolete_Pages/Obsolete_Pages/%E9%81%8B%E7%AE%97%E5%AD%90/%E9%82%8F%E8%BC%AF%E9%81%8B%E7%AE%97%E5%AD%90">點我</a>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> number2 = <span class="string">&#x27;666&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 number 嚴格相等為 數值 &#x27;&#x27;且&#x27;&#x27; number2 嚴格相等為 數值 就執行</span></span><br><span class="line"><span class="keyword">if</span>(number === <span class="title class_">Number</span> &amp;&amp; number2 === <span class="title class_">Number</span>) &#123;</span><br><span class="line">    <span class="comment">// do something...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 number 嚴格相等為 數值 &#x27;&#x27;或&#x27;&#x27; number2 嚴格相等為 數值 其中一個為 true 就執行</span></span><br><span class="line"><span class="keyword">if</span>(number === <span class="title class_">Number</span> &amp;&amp; number2 === <span class="title class_">Number</span>) &#123;</span><br><span class="line">    <span class="comment">// do something...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 number 嚴格相等為 數值 的結果相反為 true 就執行</span></span><br><span class="line"><span class="comment">// 這邊直接理解為回傳的布林直接轉為相反會比較好記</span></span><br><span class="line"><span class="keyword">if</span>(number !== <span class="title class_">Number</span>) &#123;</span><br><span class="line">    <span class="comment">// do something...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="函式小補充"><a href="#函式小補充" class="headerlink" title="函式小補充"></a>函式小補充</h3><p>關於上面提到的函式其實還有一種用法是 <strong>閉包</strong> 及 <strong>工廠模式</strong> 。我們說過在 <strong>JavaScript</strong> 創建階段時，會進行變數的宣告，而這時候就會在記憶體內佔了一個空間，那我們可以思考，如果在函式內創建變數呢？是否會讓記憶體更省呢，因為函式內的變數完成動作後就不會在記憶體上直到再次呼叫這個函式，所以就出現了 <strong>閉包</strong> 這種方法。以下有個簡單的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deposit</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> base = <span class="number">100</span>; <span class="comment">// 最低儲值金額</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">money</span>) &#123;</span><br><span class="line">    base = base + money; <span class="comment">// 加上儲值的金額</span></span><br><span class="line">    <span class="keyword">return</span> base; <span class="comment">// 返回總共儲值的金額</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125; -&gt; 閉包的 <span class="keyword">function</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 執行 function</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">RexDeposit</span> = <span class="title function_">deposit</span>(); <span class="comment">// 返回 100</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">RexDeposit</span> = <span class="title function_">deposit</span>(); <span class="comment">// 因記憶體不會釋放 所以會返回 200</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">BuzzDeposit</span> = <span class="title function_">deposit</span>(<span class="number">200</span>); <span class="comment">// 返回 300</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">BuzzDeposit</span> = <span class="title function_">deposit</span>(<span class="number">200</span>); <span class="comment">// 返回 500</span></span><br></pre></td></tr></table></figure>

<p>由 <strong>閉包</strong> 延伸而出我們能探討到 工廠模式，既然你已經明白 <strong>function</strong> 就是丟東西進去，然後他幫你產出一樣你預期內的產品，那何不讓工廠內進行分組呢？一個幫你 <strong>生產</strong>，一個幫你 <strong>組裝</strong>，一個幫你 <strong>售出</strong>，所以後來又出現了 <strong>私有方法</strong> 即是在工廠模式內 放入好幾個 <strong>function</strong> 然後各自可被呼叫，你會得到你預期的東西。下方有個簡單的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deposit</span>(<span class="params">baseMoney</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> base = baseMoney || <span class="number">100</span>; <span class="comment">// 最低儲值金額</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">addMoney</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123; &lt;-- 生產</span><br><span class="line">      // do something...</span><br><span class="line">    &#125;,</span><br><span class="line">    spendMoney: function() &#123; &lt;-- 組裝</span><br><span class="line">      // do something...</span><br><span class="line">    &#125;,</span><br><span class="line">    xxxxxx: function... // 更多 function &lt;-- 售出</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>詳細閉包可參考 <a href="https://cythilya.github.io/2018/10/22/closure/">傳送門</a></p>
</blockquote>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>雖然本章的內容較少，但卻是在使用 <strong>JavaScript</strong> 時息息相關的，有時候最基礎的東西，卻會影響日後寫程式時的邏輯順暢程度， 雖然菜雞我目前還在往偉大的航道上努力著，但我相信努力只會使自己越來越好。</p>
<p>這次筆記到目前是第二篇，想想從接觸六角學院的地下城開始寫部落格後，寫部落格是繼教別人第二快且扎實的學習方式，不明白就爬文，不清楚就實作，這就是自己寫部落格的初衷，我想一直告訴自己，永遠別忘了當初為什麼會開始敲鍵盤，也別迷失了自己，致自己。</p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li>六角學院 — <a href="https://www.hexschool.com/courses/js-core.html?utm_source=LINE&utm_medium=message&utm_campaign=0807LINE_message#recommend">JavaScript 核心篇</a></li>
<li><a href="https://medium.com/@GQSM">神Q超人大大</a> — <a href="https://medium.com/enjoy-life-enjoy-coding/typescript-%E8%81%BD%E8%AA%AA-javascript-%E6%9C%89%E4%BB%80%E9%BA%BC%E5%BC%B1%E5%9E%8B%E5%88%A5-typescript-%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95-i-bb487251d387">TypeScript | 聽說 JavaScript 有什麼弱型別？ TypeScript 的基本用法 ( I )</a></li>
<li><a href="https://cythilya.github.io/">Summer。桑莫。夏天</a> — <a href="https://cythilya.github.io/2018/10/22/closure/">你懂 JavaScript 嗎？#15 閉包（Closure）</a></li>
<li>[JavaScript Notes] — 淺談 JavaScript #2</li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>萬事起頭不會難</title>
    <url>/2019/11/01/20191101/</url>
    <content><![CDATA[<h1 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h1><p>先前都是使用<strong>Medium</strong>來記錄一些寫<strong>Code</strong>的心得感想或是小筆記，但在很早前其實就有想要寫一個自己的部落格，但是礙於超級菜雞剛上線，只能找現成的部落格寫寫文章。<br><br>後來在偶然間聽到<strong>Hexo</strong>，突然就勾起我的熊熊烈火，自己可以架一個<strong>Blog</strong>，又可以學一些程式的設定，我還不來玩玩。雖然這個其實也是別人弄好的討件，打打指令也不算什麼太難的事情，但是對小菜雞來說是個新天地，沒玩過的東西就想玩看看，就像上數學課明知道老師告訴你數學不能用問到底的，但你還是會想要一虧這天大的樹林。<br></p>
<blockquote>
<p>這篇文章除了拿來開頭，也會拿來記錄一下關於<strong>Hexo</strong>的一些小筆記</p>
</blockquote>
<span id="more"></span>

<hr>
<h2 id="Hexo安裝流程"><a href="#Hexo安裝流程" class="headerlink" title="Hexo安裝流程"></a>Hexo安裝流程</h2><ul>
<li>此處是以 bash 指令完成</li>
</ul>
<h3 id="安裝-Node-js"><a href="#安裝-Node-js" class="headerlink" title="安裝 Node.js"></a>安裝 Node.js</h3><ul>
<li>請先至 <a href="https://nodejs.org/en/">Node.js</a> 官方網站下載安裝</li>
</ul>
<blockquote>
<p>這邊不了解關於 <strong>Node.js</strong> 的話可以參考我的文章</p>
</blockquote>
<h3 id="安裝-Hexo-Git"><a href="#安裝-Hexo-Git" class="headerlink" title="安裝 Hexo Git"></a>安裝 Hexo Git</h3><ul>
<li>這是用來部署你的 <strong>Hexo</strong> 上 <strong>GitHub</strong> 用的，透過 <strong>GitHub</strong> 的提供，你能有一個靜態網站</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h3 id="安裝-Hexo"><a href="#安裝-Hexo" class="headerlink" title="安裝 Hexo"></a>安裝 Hexo</h3><ul>
<li>這邊會使用 <strong>npm</strong> 來安裝 <strong>Hexo</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<blockquote>
<p>這邊不了解 <strong>npm</strong> 可以參考我的文章</p>
</blockquote>
<p>安裝完成後可以使用下方指令查看版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo version 或 $hexo -v</span><br></pre></td></tr></table></figure>

<h3 id="初始化部落格"><a href="#初始化部落格" class="headerlink" title="初始化部落格"></a>初始化部落格</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo init blog       # 初始化 blog</span><br><span class="line">$ cd blog              # 移動到剛創建的 blog 資料夾裡</span><br><span class="line">$ npm install		   # 安裝相關套件</span><br></pre></td></tr></table></figure>

<ul>
<li>blog 可以取自己喜歡的資料夾名稱 不過不影響我們後面的部落格網站顯示名稱 後續設定都會在 <strong>_config.yml</strong> 及我們使用的 <strong>themes(主題)</strong> 內</li>
</ul>
<h3 id="配置-Hexo-至-GitHub"><a href="#配置-Hexo-至-GitHub" class="headerlink" title="配置 Hexo 至 GitHub"></a>配置 Hexo 至 GitHub</h3><ol>
<li>首先至 <a href="https://github.com/">GitHub</a> 網站登入，再新增一個 **倉庫(Repositories)**</li>
</ol>
<p><img src="/images/others/loading.gif" data-original="/images/20191101/step1.png" alt="登入後右上角 Repositories 點下去就對啦"></p>
<ol start="2">
<li>上方的 Repositories Name 請取為 <strong>yourname.github.io</strong> 前面的 yourname 請替換為你的帳號名稱 然後點擊 Create repository 創建</li>
</ol>
<p><img src="/images/others/loading.gif" data-original="/images/20191101/step2.png" alt="登入後右上角 Repositories 點下去就對啦"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20191101/step3.png" alt="成功畫面"></p>
<ol start="3">
<li>接下來要設定自動部署的相關設定，到你剛剛創建的 <strong>Blog</strong> 資料夾，打開後會有一個叫 <strong>_confg.yml</strong> 的檔案，這是 <strong>Hexo</strong> 的全域配置，打開它</li>
</ol>
<p><img src="/images/others/loading.gif" data-original="/images/20191101/step4.png" alt="成功畫面"></p>
<p>拉開後到最底部可以看到下方程式碼</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type:</span><br></pre></td></tr></table></figure>

<p>請改為下方程式碼</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: http://github.com/yourname/yourname.github.io.git</span><br><span class="line">  branch: master # 或你的分支</span><br></pre></td></tr></table></figure>

<blockquote>
<p>切記！設定中的 <strong>“ : “</strong> 後面一定要有一個空格，不然會發生錯誤</p>
</blockquote>
<ol start="4">
<li>接下來打開終端機，到你的 <strong>Blog</strong> 資料夾，輸入下方程式碼創建一篇新的文章，然後你會在 <strong>source</strong> 內的 <strong>_posts</strong> 看見你的文章，這是預備推上 <strong>GitHub</strong> 的文章區。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo new 你的文章名稱 </span><br></pre></td></tr></table></figure>

<ol start="5">
<li>接下來輸入下方程式碼就會產生一個 <strong>public</strong> 的資料夾，裡面就是要準備推上 <strong>GitHub</strong> 的東西，然後就會根據你的設定推上你的 <strong>GitHub</strong> 了！</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo d -g </span><br><span class="line"># d 表示產生一個 public 的資料夾 -g 表示部署上你的 GitHub</span><br></pre></td></tr></table></figure>

<h3 id="Hexo-設定檔配置"><a href="#Hexo-設定檔配置" class="headerlink" title="Hexo 設定檔配置"></a>Hexo 設定檔配置</h3><ul>
<li><strong>_config.yml</strong> 是 <strong>hexo</strong> 的預設設定檔，內容設定是用 <strong>yaml</strong> 格式編寫</li>
</ul>
<p>其設定內容可參考 <a href="https://hexo.io/zh-tw/docs/configuration.html">Hexo的官方文檔</a></p>
<h3 id="Hexo-主題使用"><a href="#Hexo-主題使用" class="headerlink" title="Hexo 主題使用"></a>Hexo 主題使用</h3><ul>
<li>我想大多數的人都對這個很有興趣，畢竟可以客製化自己的 Blog ，但其實最麻煩的也是在這邊，每次換個主題都要重新再設定一遍一些設定，建議最好一開始就確定好。</li>
</ul>
<p>這邊推薦使用 <strong>Next</strong> 主題，這是最多人使用的，也有 <a href="http://theme-next.iissnan.com/getting-started.html">官方教學文件(中文)</a>，而小菜機在此使用的是 <strong>jerryc大大的</strong><a href="https://github.com/jerryc127/hexo-theme-butterfly">hexo-theme-butterfly</a> 關於 <strong>Demo</strong> 請<a href="https://jerryc.me/">點我</a></p>
<hr>
<h1 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h1><p>雖然使用 <strong>MarkDown</strong> 上還需要習慣一下，但至少能確保自己的文章是可以保存下來的，放在 <strong>Medium</strong> 上其實說放心不放心，不放心也還好，但還是希望自己花時間寫的東西能留下來。不過接下來要搬文章也要花點時間呢…</p>
<blockquote>
<p>關於 <strong>Medium</strong> 的問題可參考 <a href="https://medium.com/@leafwind/%E6%98%AF%E6%99%82%E5%80%99%E5%82%99%E4%BB%BD%E4%BD%A0%E7%9A%84-medium-%E6%96%87%E7%AB%A0%E4%BA%86-cd81ae59ce91">是時候備份你的 Medium 文章了</a></p>
</blockquote>
<p>另外之後會寫關於怎麼匯出 <strong>Medium</strong> 文章成 <strong>Markdown</strong> 格式的介紹。也歡迎留下你的 <strong>Blog</strong> 來加入我的 <a href="https://rexhung0302.github.io/link/">友情鏈接</a> 介紹各路大神的 <strong>Blog</strong> 或是網站</p>
<hr>
<h1 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h1><ul>
<li><a href="https://yaoandy107.github.io/hexo-tutorial/">BlackMaple’s Blog</a></li>
</ul>
<hr>
<h1 id="MarkDown-筆記區"><a href="#MarkDown-筆記區" class="headerlink" title="MarkDown 筆記區"></a>MarkDown 筆記區</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% note success %&#125;</span><br><span class="line">#### Warning Header</span><br><span class="line">**Welcome** to [Hexo!](https://hexo.io)</span><br><span class="line"></span><br><span class="line">[class]   : default | primary | success | info | warning | danger.</span><br><span class="line">[no-icon] : Disable icon in note.</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Code</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>Life</tag>
        <tag>Note</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>[JavaScript Note] — 淺談 JavaScript #3</title>
    <url>/2019/10/24/20191024/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>這系列章節來到預計的一半，慢慢開始會記錄自己比較不熟悉的一些筆記，如果有誤還請各位不吝嗇盡情指教。</p>
<span id="more"></span>

<blockquote>
<p>接下來的每一章，不免俗的都會來一句：</p>
</blockquote>
<blockquote>
<p>本篇文章一切皆為筆記作用，有任何錯誤及問題，歡迎理性指教及討論，詳情請查閱公開課程說明書。</p>
</blockquote>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><blockquote>
<p>本系列將會淺談 <strong>JavaScript</strong> ，希望給未來自己當作筆記以及剛接觸 <strong>JavaScript</strong> 的夥伴們，甚至能帶點不一樣觀點或您沒聽過的觀點給大家，所以不會太過深入的討論。</p>
</blockquote>
<p>關於淺談的主題將會大致分為下列幾項，<strong>項目可能會做更動</strong>。</p>
<ol>
<li><p><strong><a href="https://rexhung0302.github.io/2019/10/09/20191009/">JavaScript 執行環境及作用域</a></strong></p>
</li>
<li><p><strong><a href="https://rexhung0302.github.io/2019/10/15/20191015/">運算子、型別與文法</a></strong></p>
</li>
<li><p><strong><a href="https://rexhung0302.github.io/2019/10/24/20191024/">物件</a></strong></p>
</li>
<li><p><strong><a href="https://rexhung0302.github.io/2019/10/28/20191028/">關於 This 那些事</a></strong></p>
</li>
</ol>
<p>本章討論的幾個關鍵標題為下列幾項。</p>
<ol>
<li><p><a href="#81d2">物件實字</a></p>
</li>
<li><p><a href="#ee36">物件的宣告與刪除</a></p>
</li>
<li><p><a href="#66f8">臨門來一腳</a></p>
</li>
<li><p><a href="#5799">物件的參考特性</a></p>
</li>
<li><p><a href="#7b5a">關於參考位置</a></p>
</li>
<li><p><a href="#6f06">影分身之術？</a></p>
</li>
<li><p><a href="#2560">額外補充</a></p>
</li>
</ol>
<hr>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2520/1*lglXyJz6puM2OL5Wd1wEUw.png" alt="圖片取至 https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;42801598&#x2F;how-to-render-a-js-object-with-underscore-templates"></p>
<h3 id="物件實字"><a href="#物件實字" class="headerlink" title="物件實字"></a>物件實字</h3><p>前面兩個章節我們都談過 <strong>JavaScript</strong> 的基礎，這邊依然要說 <strong>JavaScript</strong> 的基礎 — <strong>”物件“</strong>。在 <strong>JavaScript</strong> 上常用的種類可以大概的分為兩項，一為 <strong>物件</strong>，二為 <strong>Function</strong>，兩者我們都會很常碰見，但是最常做資料處理的就是物件，所以把物件的一些眉眉角角搞清楚也是很重要的！</p>
<p>首先要先說物件的讀取方式，通常物件的讀取方式有兩種，一種是 <strong>點</strong>，一種是 <strong>中括號</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> aaa = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aaa.<span class="property">name</span>);    -&gt; 第一種讀取方式 點</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aaa[<span class="string">&#x27;name&#x27;</span>]); -&gt; 第二種讀取方式 中括號</span><br></pre></td></tr></table></figure>

<p>那你肯定會問，兩種都可以讀取差別在哪呢？其實之前菜雞如我一直也都不知道，傻傻的想能讀到值就好啦，一直到這次開始做筆記才發現兩者的不同。兩者的差別如下：</p>
<p><strong>點的特性：</strong></p>
<ol>
<li><p>只能單純讀取字串。</p>
</li>
<li><p>能讀取的用法比較有限。</p>
</li>
</ol>
<p><strong>中括號的特性：</strong></p>
<ol>
<li><p>可以用變數作為屬性名或訪問，而點方法不可以。</p>
</li>
<li><p>可以用數字作為屬性名，而點語法不可以。</p>
</li>
<li><p>可以動態訪問的屬性名，可以在程式執行時建立和修改屬性，點操作符就不行。</p>
</li>
<li><p>如果屬性名中包含會導致語法錯誤的字元，或者屬性名是關鍵字或者保留字，也可以使用方括號表示法 ( 比如 空格[‘first name’] )。</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> aaa = &#123;&#125;;</span><br><span class="line">aaa.<span class="property">name</span> = <span class="string">&#x27;小明&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> myName = <span class="string">&#x27;Rex&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aaa.<span class="property">myName</span>);  <span class="comment">// undefined 訪問不到對應的屬性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aaa[myName]); <span class="comment">// 小明</span></span><br></pre></td></tr></table></figure>

<p>簡單來說，中括號可運用範圍較大，點的方法通常只能用來呼叫字串。上方有提到 <strong>JavaScript</strong> 常用的種類第二種是 <strong>Function</strong> ，所以如果要執行一段函式我們會這樣呼叫：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> aaa = &#123;</span><br><span class="line">  <span class="attr">run</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 點的呼叫方式-&gt;</span></span><br><span class="line">aaa.<span class="title function_">run</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中括號的呼叫方式-&gt;</span></span><br><span class="line">aaa[<span class="string">&#x27;run&#x27;</span>]();</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="物件的宣告與刪除"><a href="#物件的宣告與刪除" class="headerlink" title="物件的宣告與刪除"></a>物件的宣告與刪除</h3><p>上方我們講解了使用，但是物件其實還有宣告及與變數刪除，下方就用Code解說怎麼使用吧！</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> aaa = &#123;&#125;;</span><br><span class="line"><span class="comment">// 新增用法</span></span><br><span class="line">aaa.<span class="property">name</span> = <span class="string">&#x27;我是後來加上的名字&#x27;</span>;</span><br><span class="line">aaa[<span class="string">&#x27;habit&#x27;</span>] = <span class="string">&#x27;寫Code&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aaa.<span class="property">name</span>); <span class="comment">// 會得到 &#x27;我是後來加上的名字&#x27;;</span></span><br><span class="line"><span class="comment">// 刪除用法</span></span><br><span class="line"><span class="keyword">delete</span> aaa.<span class="property">name</span>;</span><br></pre></td></tr></table></figure>

<p>雖然物件的變數可以刪除，但是這邊有個小地方需要注意，<strong>變數無法被刪除 屬性才可以</strong>，甚至你可以使用 <strong>delete</strong> 來刪除全域變數，不過通常我們不會這樣做。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">b = <span class="string">&#x27;456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> a; <span class="comment">// 變數 a 無法被刪除</span></span><br><span class="line"><span class="keyword">delete</span> b; <span class="comment">// 變數 b 屬性可以被刪除</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>詳細可參考 MDN <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Obsolete_Pages/Obsolete_Pages/Obsolete_Pages/%E6%96%B0%E7%89%A9%E4%BB%B6%E7%9A%84%E5%BB%BA%E7%AB%8B/%E5%B1%AC%E6%80%A7%E7%9A%84%E5%88%AA%E9%99%A4">傳送門</a></p>
</blockquote>
<blockquote>
<h4 id="小提示：console-dir-可以看到物件的所有型別，陣列也算物件型別-可以自由新增屬性，Function-也算物件型別下的子型別，-Function-的屬性無法覆蓋-只能新增不同名稱。"><a href="#小提示：console-dir-可以看到物件的所有型別，陣列也算物件型別-可以自由新增屬性，Function-也算物件型別下的子型別，-Function-的屬性無法覆蓋-只能新增不同名稱。" class="headerlink" title="小提示：console.dir(); 可以看到物件的所有型別，陣列也算物件型別 可以自由新增屬性，Function 也算物件型別下的子型別， Function 的屬性無法覆蓋 只能新增不同名稱。"></a><em>小提示：console.dir(); 可以看到物件的所有型別，陣列也算物件型別 可以自由新增屬性，Function 也算物件型別下的子型別， Function 的屬性無法覆蓋 只能新增不同名稱。</em></h4></blockquote>
<hr>
<h3 id="臨門來一腳"><a href="#臨門來一腳" class="headerlink" title="臨門來一腳"></a>臨門來一腳</h3><p>有時候我們會碰到 <strong>undefined</strong> 未定義物件的情況 ，這種情況一種處理方式是 一開始就給物件預設的名稱，後面給空物件或陣列或是後來再給物件或陣列。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解決方法一</span></span><br><span class="line"><span class="keyword">var</span> aaa = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">  <span class="attr">habit</span>: &#123;     &lt;-- 一開始就給預設屬性</span><br><span class="line">    // ...  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 解決方法二</span><br><span class="line">aaa.habit = &#123;  &lt;-- 第二種方式</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="物件的參考特性"><a href="#物件的參考特性" class="headerlink" title="物件的參考特性"></a>物件的參考特性</h3><p>這個地方就要講到我們的記憶體了，相信很多文章常常會說到這個。你有想過宣告的變數都跑去哪了嗎？還有為何宣告後其他的地方可以使用這個變數？改變了另一個變數的屬性，為何上一個相同的變數屬性會跟著改變呢？這就要說到 <strong>傳值與傳參考</strong> (<strong>值傳過去後就沒什麼關聯性</strong>)，傳什麼值又傳什麼參考呢？只要先記得，傳得值基本是下面五項，傳的參考呢，就是 Function。</p>
<blockquote>
<p><strong>1.布林 Boolean、空 Null(註2)、未定義 Undefined、數值 Number、字串 String — &gt; 傳值</strong></p>
</blockquote>
<blockquote>
<p><strong>2.function</strong> — &gt; 傳參考</p>
</blockquote>
<hr>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*5FqxBv_nFG-ovBruchDjrQ.png"></p>
<h3 id="關於參考位置"><a href="#關於參考位置" class="headerlink" title="關於參考位置"></a>關於參考位置</h3><p>講到這邊就常常會想起上方那張圖，當我們在宣告一個變數的時候，在前面章節說到的創建階段電腦會先幫我們的變數找一個記憶體位置存放，而當後面我們把存放完成的變數拿來賦予到其他值上的時候，那個值的記憶體位置就會指向原本儲存過的記憶體位置，這樣就能解省電腦的記憶體空間。</p>
<blockquote>
<p>小筆記：求值策略</p>
</blockquote>
<blockquote>
<p>傳參照呼叫(Call by reference) 傳值是傳實際參數 不是拷貝的 (ex: C語言)</p>
</blockquote>
<blockquote>
<p>傳共用物件呼叫(Call by sharing) 如果被呼叫者修改了物件，呼叫者可以看見變化 (ex:JavaScript)</p>
</blockquote>
<blockquote>
<p>更詳細的解說可以參考 Alex 宅幹嘛 — <a href="https://www.youtube.com/watch?v=sxe-oahUARI&list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&index=14">[ Alex 宅幹嘛 ] 👨‍💻 深入淺出 Javascript30 快速導覽 | Day 14：JavaScript References VS Copying</a></p>
</blockquote>
<h3 id="影分身之術？"><a href="#影分身之術？" class="headerlink" title="影分身之術？"></a>影分身之術？</h3><p>講到複製就必須要提到 <strong>深拷貝</strong> 及 <strong>淺拷貝</strong>，如果傳參考更改值都會影響到前一個，那要怎麼辦呢？就必須脫離前一個參考，自己另立門戶，所以深拷貝簡單說就是在創造一個看似一模一樣，但是已經是Ａ貨等級的山寨品，跟原本的值八杆子打不著，下面就來看看怎麼深拷貝 及 淺拷貝吧。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先說說淺層複製 如果要把 aaa 的變數都加進新的陣列裡 這種方法會是 淺拷貝</span></span><br><span class="line"><span class="keyword">var</span> aaa = &#123;</span><br><span class="line">  name = <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">  habit = &#123;</span><br><span class="line">    <span class="attr">sing</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">dance</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> newArr = &#123;&#125;;</span><br><span class="line"><span class="comment">// 第一種方式</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> aaa)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key); -&gt; name, habit</span><br><span class="line">  newArr[key] = aaa[key];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第二種 及 第三種方式 都是 JQuery</span></span><br><span class="line"><span class="keyword">var</span> bbb = jQuery.<span class="title function_">extend</span>(&#123;&#125;, family);</span><br><span class="line"><span class="keyword">var</span> ccc = jQuery.<span class="property">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, family);</span><br><span class="line"><span class="comment">// 這邊必須提一下 Object.assign 是 ES6(註1) 的新函式，&#123;&#125;的地方意思是先建立一個空物件，然後所有的屬性複製過去新的陣列 ccc，雖然第一層能順利地指向不同的記憶體位置，但是第二層開始又是一樣指向原本的記憶體位置，無法做到真正的深拷貝。</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>有興趣可以參考這篇文章 <a href="https://larry850806.github.io/2016/09/20/shallow-vs-deep-copy/">傳送門</a></p>
</blockquote>
<p>關於淺拷貝的問題就是，他傳值過來，你跟原本的變數指向的記憶體位置都是同一個地方，就如上方那張圖，所以改了值，原本的變數的屬性也會跟著變動，那解決方式就是下方的深拷貝了！</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 目前最快的深拷貝方式 缺點是無法轉 Function</span></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringfy</span>(<span class="string">&#x27;666&#x27;</span>)); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 如果使用 jQuery 可以使用 jQuery 的語法</span></span><br><span class="line"><span class="keyword">var</span> obj2 = $.<span class="title function_">extend</span>(<span class="literal">true</span>, &#123;&#125;, obj1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. lodash 這是目前我最常用的 有興趣可以參考文件 [傳送門](https://lodash.com/)</span></span><br><span class="line">_.<span class="title function_">cloneDeep</span>();</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="額外補充"><a href="#額外補充" class="headerlink" title="額外補充"></a>額外補充</h3><p>關於陣列塞值，如果新增的變數有跳號，中間沒有 <strong>value</strong> 得值會自動補上 <strong>empty</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Arr</span> = [</span><br><span class="line">  <span class="number">0</span>: <span class="number">1</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="title class_">Arr</span>[<span class="string">&#x27;1&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="title class_">Arr</span>[<span class="string">&#x27;3&#x27;</span>] = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Arr[&#x27;2&#x27;] = empty</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*pqS9YUzSx4A4ZYc7dF_FiA.png" alt="JavaScript 發展歷程 圖片擷取至 https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;22733283"></p>
<blockquote>
<p><em>註1：<strong>ES</strong> 又稱 <strong>ECMAScript</strong>，<strong>Script</strong> 代表著腳本，而 <strong>ECMAScript</strong> 提供了腳本語言需要遵守的規則、細節和規範， <strong>JavaScript</strong> 是實現 <strong>ECMAScript</strong> 的規範後所誕生出來的語言。簡單點來說就是一些可以讓你更簡單做事情的 Function 及 一些寫 Code 規範，更詳細的發展歷程可以點 <strong><a href="https://zhuanlan.zhihu.com/p/22733283">傳送門</a></strong> 查看。</em></p>
</blockquote>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>本次章節的內容雖然也是短短的，但是這卻是學了好一陣子才慢慢開始發現的知識，有些地方也是埋了滿滿的雷，像是深拷貝及淺拷貝，如果沒有處理好，一不小心就會噴錯；而最近常常在處理資料的轉換，對於物件好像又像從新認識一番，既熟悉又陌生的感覺，我想也是需要再加油的地方，不過這次寫了一點筆記，感覺又熟悉了一點呢，繼續努力的往前進！加油。</p>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li>六角學院 — <a href="https://www.hexschool.com/courses/js-core.html?utm_source=LINE&utm_medium=message&utm_campaign=0807LINE_message#recommend">JavaScript 核心篇</a></li>
<li>ITREAD — <a href="https://www.itread01.com/content/1546844402.html">JavaScript中物件屬性通過點(.)和方括號([])取值的不同之處</a></li>
<li>MDN — <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Obsolete_Pages/Obsolete_Pages/Obsolete_Pages/%E6%96%B0%E7%89%A9%E4%BB%B6%E7%9A%84%E5%BB%BA%E7%AB%8B/%E5%B1%AC%E6%80%A7%E7%9A%84%E5%88%AA%E9%99%A4">屬性的刪除</a></li>
<li>[ Alex 宅幹嘛 ] — 👨‍💻 <a href="https://www.youtube.com/watch?v=sxe-oahUARI&list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&index=14">深入淺出 Javascript30 快速導覽 | Day 14：JavaScript References VS Copying</a></li>
<li>Loadsh —<a href="https://lodash.com/"> index</a></li>
<li>鐵人幫<a href="https://ithelp.ithome.com.tw/users/20111948/ironman">AndyChen</a>大大 —<a href="https://ithelp.ithome.com.tw/articles/10206587"> JS版本差異！ES5、ES6</a></li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>[Tool Note] — 關於爬蟲#2</title>
    <url>/2019/12/01/20191201/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>繼上一篇爬蟲之後這次決定繼續研究爬蟲，一方面當興趣玩，一方面了解 <strong>LINE</strong> 的機器人及繼續了解 <strong>Node.js</strong>。這次一樣是透過上次完成的爬蟲機器人將日幣資訊傳送至 <strong>LINE</strong> 上，文章將不會過多涉略到太難的 <strong>LINE API</strong>。</p>
<span id="more"></span>

<p><img src="/images/others/loading.gif" data-original="/images/20191201/Node.js_logo.png"></p>
<hr>
<h3 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h3><p>一樣需要 <strong>node.js</strong> 需要至少 <strong>4.x</strong> 版本以上，不過現在官方網站都能下載到最新的，所以還沒安裝到官方網站下載就可以囉，<a href="https://nodejs.org/en/download/">傳送門</a>。</p>
<p><img src="/images/others/loading.gif" data-original="https://cdn-images-1.medium.com/max/2000/1*8a9ra6jgkwacL-JiACSclQ.png" alt="安裝完成"></p>
<p>-&gt; 安裝的時候會一併安裝 <strong>npm</strong>，不曉得這是什麼可以點我看我的文章介紹，<a href="https://rexhung0302.github.io/2019/06/18/20190618/">[Tool Notes] — 關於Webpack</a>。</p>
<p>關於爬蟲的套件可以參考 <a href="https://rexhung0302.github.io/2019/08/20/20190820/">[Tool Notes] — 關於爬蟲</a>。</p>
<hr>
<h3 id="目錄"><a href="#目錄" class="headerlink" title="目錄"></a>目錄</h3><ol>
<li><p>LINE Bot 基本介紹</p>
</li>
<li><p>LINE Bot 申請</p>
</li>
<li><p>LINE Bot Webhook 伺服器 建置</p>
</li>
<li><p>LINE Bot 與日幣爬蟲應用</p>
</li>
</ol>
<blockquote>
<p>本文章如果有任何錯誤之資訊敬請不吝嗇告知，也歡迎理性的切磋指教，非常感謝各路大神。</p>
</blockquote>
<hr>
<h3 id="LINE-Bot-基本介紹"><a href="#LINE-Bot-基本介紹" class="headerlink" title="LINE Bot 基本介紹"></a>LINE Bot 基本介紹</h3><h4 id="基本概念說明"><a href="#基本概念說明" class="headerlink" title="基本概念說明"></a>基本概念說明</h4><p><strong>LINE BOT</strong> 是 <strong>LINE</strong> 其中一個服務，原為『<strong>LINE@生活圈</strong>』或『<strong>LINE官方帳號</strong>』，不過 <strong>2019年4月18日</strong> 起，已經整合為  <strong>LINE官方帳號2.0</strong>，且原本的 <strong>LINE@生活圈 免費帳號</strong> 及 <strong>付費帳號</strong> 都會在 <strong>2019年10月1日</strong> 前完成帳號的自動升級。</p>
<blockquote>
<p>有興趣可以參考此篇文章 <a href="https://medium.com/8-interactive/%E8%BF%8E%E6%8E%A5-line-%E5%AE%98%E6%96%B9%E5%B8%B3%E8%99%9F-2-0-%E5%85%A8%E9%9D%A2%E5%8D%87%E7%B4%9A-%E5%88%B0%E5%BA%95%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BA%8B%E6%83%85%E6%94%B9%E8%AE%8A%E4%BA%86-a543078ad23e">迎接 LINE 官方帳號 2.0 全面升級：到底有哪些事情改變了？</a></p>
</blockquote>
<p>通常 <strong>LINE BOT</strong> 就像是你會在外面加的官方帳號，你需要加入他為好友，才能與之互動。</p>
<blockquote>
<p><strong>為什麼現在越來越多人會使用 <strong>LINE Bot</strong> 呢？簡單說就是任何使用者及商家都能從0元無料上手，後台功能全部都開放，甚至API串接無需審核即可使用，現今不一定每一個人每天都會用 FaceBook 但是有使用智慧型手機的人幾乎都離開不通訊軟體，而台灣及日本就是 LINE 的最大使用客群。</strong></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20191201/LineBotImg_1.png" alt="LineBot"></p>
<h4 id="基本架構說明"><a href="#基本架構說明" class="headerlink" title="基本架構說明"></a>基本架構說明</h4><p>基本上如果沒有透過 <strong>LINE API</strong> 回應的話，就是從 <strong>LINE</strong> 的後台直接去做設定，就不會有 <strong>Client Server</strong> 這塊，那我們要做的事情很簡單，就是申請一個 <strong>LINE Bot</strong> 然後建立我們的 <strong>Client Server</strong>。</p>
<p>大致上流程就是 <strong>LINE Users</strong> 會發起要求或回應，然後 <strong>LINE Server</strong> 會判斷要傳送訊息給哪一個 <strong>LINE Bot</strong>，並解確認是否有起用 <strong>Webhook URL</strong> 並且有設定 <strong>Webhook 網址目標</strong>，如果沒有就不會傳送訊息給任何伺服器。</p>
<p>如果有設定 <strong>Webhook 目標網址</strong>，<strong>LINE Server</strong> 會將 <strong>LINE Users</strong> 的使用者訊息，傳送一個 <strong>HTTP POST Resquest</strong>，在 <strong>Resquest</strong> 中會定義使用者的訊息類型。</p>
<blockquote>
<p><em>其中在 <strong>LINE Server</strong> 轉傳訊息時，會將 <strong>LINE Bot</strong> 的 <strong>Channel Secret</strong> 進行 <strong>SHA-256</strong>(<strong>註1</strong>) 加密並附加在 <strong>HTTP POST Resquest</strong> 的 <strong>Header</strong> 的 <strong>X-Line-Signature</strong> 欄位，讓 <strong>Client Server</strong> 收到訊息可以驗證此欄位，證明訊息發送者身份是不是真的 <strong>LINE Server</strong>。</em></p>
</blockquote>
<p>每一個 LINE Bot 都有他自己的 <strong>頻道識別編號</strong>(<strong>Channel ID</strong>)，用來區分不同的聊天機器人，我們有兩種方式來管理我們的機器人，一種就是上面提到的 <strong>LINE 後台</strong>，一種即是我們要提到的 <strong>Messaging API</strong>。</p>
<p>簡單說會用到的就是 <strong>Channel ID</strong>、<strong>Channel Secret</strong>(<strong>頻道密鑰</strong>) 及 <strong>Channel access token</strong>(<strong>頻道存取令牌</strong>)，最後還有 <strong>UserId</strong> 這四種。</p>
<blockquote>
<p><strong>這邊並不是一般使用者自行設定的ID 是一組30位數的英數字混合字串 不同 LINE Bot 將會有不同的 UserID</strong></p>
</blockquote>
<p>最後在 <strong>Client Server</strong> 我們需要建立一個 <strong>Web API</strong> 服務的伺服器，接著收到不同類型的使用者訊息之後，需要回應(Response)<strong>HTTP OK</strong> 的狀態碼(<strong>ex:HTTP Status Code:200 註2</strong>)給 <strong>LINE Server</strong> 伺服器確認。</p>
<p><strong>Client Server</strong> 就是我們可以設計程式的地方，可以把我們的爬蟲放這邊，透過 <strong>Messaging API</strong> 我們可以傳送各式各樣的訊息，譬如文字、圖片、選單…等等。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20191201/stepImg.png" alt="大致架構"></p>
<blockquote>
<p><em>註1: SHA256是SHA-2下細分出的一種演算法。SHA-2，名稱來自於安全雜湊演算法2（英語：Secure Hash Algorithm 2）的縮寫，一種密碼雜湊函式演算法標準，由美國國家安全域性研發，屬於SHA演算法之一，是SHA-1的後繼者。詳細可參考 <a href="https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/602774/">SHA256演算法原理詳解</a></em></p>
</blockquote>
<blockquote>
<p><em>註2: 200為請求成功，相關代碼查詢可以參考 <a href="https://developer.mozilla.org/zh-TW/docs/Web/HTTP/Status">HTTP 狀態碼</a></em></p>
</blockquote>
<hr>
<h3 id="LINE-Bot-申請"><a href="#LINE-Bot-申請" class="headerlink" title="LINE Bot 申請"></a>LINE Bot 申請</h3><h4 id="LINE-Bot-基本介紹-1"><a href="#LINE-Bot-基本介紹-1" class="headerlink" title="LINE Bot 基本介紹"></a>LINE Bot 基本介紹</h4><p>根據申請人的資格分為兩種帳號『<strong>一般帳號</strong>』與『<strong>認證帳號</strong>』還有最後一種是無法自行申請的『<strong>LINE企業帳號</strong>』，差別在下方。</p>
<ol>
<li>一般帳號<br>普遍人物都能申請，但是發送的訊息內容需要遵循法規以及LINE官方帳號使用條款</li>
<li>認證帳號<br>政府立案合法經營的客戶，要符合審核條件即可成為認證帳號</li>
<li>企業帳號</li>
</ol>
<p>-&gt; 透過LINE的邀請，通常會是在LINE上深度經營的帳戶。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20191201/Line_difference.png" alt="Line差別"></p>
<p>關於收費不再依照付費區分訊息使用量，改採用訊息發送數量，就是像發簡訊一樣，分成三種用量『<strong>低用量</strong>』、『<strong>入門版</strong>』、『<strong>進階版</strong>』三種，值得一提的是 <strong>2.0版本</strong> 沒有了好友的上限。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20191201/Line_charge.png" alt="收費方案"></p>
<h4 id="LINE-Bot-帳號申請"><a href="#LINE-Bot-帳號申請" class="headerlink" title="LINE Bot 帳號申請"></a>LINE Bot 帳號申請</h4><p>廢話說了一堆就開始拿起你的釣竿吧！首先我們要先申請一組 <strong>LINE Bot 帳號</strong>，進入 <a href="https://www.linebiz.com/">LINE for Business</a> ，我們會申請一個低用量方案的 <strong>Messaging API</strong>。</p>
<p>點選右上方的『<strong>線上申請官方帳號</strong>』，進入後會要求登入 <strong>LINE帳號</strong>，或直接進入『<a href="https://manager.line.biz/"><strong>LINE Official Account Manager</strong></a>』進入後點選 <strong>建立LINE官方帳號</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20191201/LINE_SignIn.png" alt="點選 使用LINE帳號登入"></p>
<p>基本上填寫『<strong>帳號名稱</strong>』、『<strong>電子郵件</strong>』與選擇『<strong>業種</strong>』，點擊確認之後再確認一次資訊然後點擊『<strong>提交</strong>』送出。</p>
<blockquote>
<p><em>LINE官方帳號是隨機ID，如果想購買專屬ID，可以到 <a href="https://manager.line.biz/"><strong>LINE Official Account Manager</strong></a> 的『設定』-&gt;『帳務專區』-&gt;『專屬ID』。</em></p>
</blockquote>
<h4 id="LINE-Messaging-API-啟用"><a href="#LINE-Messaging-API-啟用" class="headerlink" title="LINE Messaging API 啟用"></a>LINE Messaging API 啟用</h4><p>在 <strong>LINE Official Account Manager</strong> 頁面左上角區域，可以看到目前官方帳號資訊。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20191201/Line_Messaging_API.png" alt="點擊左上角 回應模式 再點左側 Messaging API"></p>
<p>中間會有 <strong>狀態 未使用</strong>，點擊下方按鈕 <strong>啟用Messaging API</strong>，接著會跳出選擇提供者，目的在於讓企業或使用者管理多個聊天機器人，選取『<strong>建立使用者</strong>』，並且輸入新的『<strong>提供者名稱</strong>』，然後按下同意，<strong>設定隱私權政策</strong> 及 <strong>服務條款</strong> 可以跳過，最後確認資訊並點下確定啟用。</p>
<p>接下來再回來看剛剛那個頁面，會發現需要填入 <strong>Channel資訊</strong> 及 <strong>Webhook網址</strong>。</p>
<p>我們先進入 <a href="https://developers.line.biz/console/"><strong>開發人員管理介面</strong></a>，前往 <strong>提供者列表</strong>(<strong>Provider List</strong>)，選擇剛剛建立的提供者。</p>
<p>之後點擊 <strong>Create New Channel</strong> 進入，在選擇 <strong>Messaging API</strong>，另外兩個暫時不會用到。</p>
<p><img src="/images/others/loading.gif" data-original="/Line_Messaging_API_2.png" alt="選擇 Messaging API"></p>
<h4 id="Channel-Access-Token-頻道存取令牌"><a href="#Channel-Access-Token-頻道存取令牌" class="headerlink" title="Channel Access Token 頻道存取令牌"></a>Channel Access Token 頻道存取令牌</h4><p>還記得剛剛的 <strong>Channel資訊</strong> 都是空的嗎？在我們建立完新的 <strong>Messaging API</strong> 後，找到 <strong>Messaging API</strong> 的標頭點下去，往下滑動找到 <strong>Channel access token (long-lived)</strong> 然後點擊 <strong>Issue</strong> 按鈕產生一組新的 <strong>Channel access token</strong>(<strong>頻道存取令牌</strong>)，接著會跳出一個彈窗，選擇 <strong>0 hours</strong>，目的在於不讓這個頻道存取令牌過期。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20191201/Line_Messaging_API_3.png" alt="點擊標頭切換頁面"></p>
<p>然後把這行複製更改掉原本空的 <strong>Channel資訊</strong> 的 <strong>Channel secret</strong>，在找到剛剛的頁面，複製標頭 <strong>Basic settings</strong> 裡的 <strong>Channel ID</strong> 貼到剛剛 <strong>Channel資訊</strong> 的 <strong>Channel ID</strong>。</p>
<p>到此LINE Bot建置基本上到一個段落，接下來我們會直接透過 <strong>Heroku</strong> 架設一個伺服器。</p>
<blockquote>
<p><em>如果想要使用本機測試，可以嘗試使用 <a href="https://ngrok.com/">Ngrok</a>，詳細可以參考 <a href="https://5xruby.tw/posts/easy-ngrok-by-nginx-ssh-tunnel/">ngrok 不求人：自己搭一個窮人版的 ngrok 服務</a> 搭建一個 <strong>本地 server</strong>，之後再把上方提到原本空的 <strong>Webhook網址</strong> 填入自己的 Ngrok 網址。之後如果有更新會再補上教學。</em></p>
</blockquote>
<hr>
<p><img src="/images/others/loading.gif" data-original="/images/20191201/herokuImg.png" alt="Heroku 雲平台"></p>
<h3 id="LINE-Bot-Webhook-伺服器-建置"><a href="#LINE-Bot-Webhook-伺服器-建置" class="headerlink" title="LINE Bot Webhook 伺服器 建置"></a>LINE Bot Webhook 伺服器 建置</h3><p>透過 <strong>Heroku</strong>(註3) 的免費方案可以執行一個伺服器，但是伺服器 <strong>30分鐘</strong> 內沒有任何連線，程式會進入休眠，不過再次連線只是需要一點等待時間即可。</p>
<h4 id="Heroku-帳號申請"><a href="#Heroku-帳號申請" class="headerlink" title="Heroku 帳號申請"></a>Heroku 帳號申請</h4><p>首先進入 <a href="https://signup.heroku.com/">Heroku 網站</a> 申請帳號，輸入紅色米字號的必要輸入資訊後送出，然後到信箱點擊驗證信件的網址驗證，最後到彈出的網頁輸入密碼，完成申請。</p>
<h4 id="Heroku-Cli-安裝"><a href="#Heroku-Cli-安裝" class="headerlink" title="Heroku Cli 安裝"></a>Heroku Cli 安裝</h4><p>接著我們必須安裝 <strong>Heroku Cli</strong>，前往 <a href="https://devcenter.heroku.com/articles/heroku-cli">Heroku 網站 Cli 下載點</a>，依照你的作業系統下載安裝。</p>
<h4 id="Git-版本控制軟體"><a href="#Git-版本控制軟體" class="headerlink" title="Git 版本控制軟體"></a>Git 版本控制軟體</h4><p>這邊就不多做 Git 安裝介紹，有興趣可以參考 <a href="https://progressbar.tw/posts/1">進度條</a>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20191201/git.png" alt="Git"></p>
<blockquote>
<p><em>註3: Heroku是一個支援多種程式語言的雲平台即服務。簡單說他就是一個伺服器，別人可以透過他給你的網址，執行你的程式；這個雲平台的優點是可以免費使用，所以你並不需要去自行架設或是擔心剛入門就要準備大量銀彈去繳學費。</em></p>
</blockquote>
<hr>
<h3 id="LINE-Bot-與日幣爬蟲應用"><a href="#LINE-Bot-與日幣爬蟲應用" class="headerlink" title="LINE Bot 與日幣爬蟲應用"></a>LINE Bot 與日幣爬蟲應用</h3><p>在建立一個新專案之前，這邊必須要來套用上次的爬蟲應用，但是要怎麼跟 LINE 結合呢？這邊就需要用到 <strong>LIEN</strong> 官方的 <strong>Node.js SDK</strong>，官方其實提供了好幾種的程式語言版本，但我幾經思考後還是選擇了 <strong>Node.js</strong> 畢竟 <strong>JavaScript</strong> 還是能多少無痛上手嘛(笑…</p>
<p>那怎麼引入套件可以參考之前的文章 <a href="https://rexhung0302.github.io/2019/06/18/20190618/#%E9%A1%8C%E5%A4%96%E8%A9%B1-node-modules-%E5%9C%96%E6%9B%B8%E9%A4%A8">[TOOL Notes]-關於Webpack</a>，這邊就不再次說明，直接上<strong>Code</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> line = <span class="built_in">require</span>(<span class="string">&#x27;@line/bot-sdk&#x27;</span>); <span class="comment">// line 的 sdk</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>); <span class="comment">// node.js 套件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> crawler = <span class="built_in">require</span>(<span class="string">&#x27;./crawler&#x27;</span>); <span class="comment">// 爬蟲的部分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// LINE 的 ENV 設定</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    <span class="attr">channelAccessToken</span>: process.<span class="property">env</span>.<span class="property">CHANNEL_ACCESS_TOKEN</span>,</span><br><span class="line">    <span class="attr">channelSecret</span>: process.<span class="property">env</span>.<span class="property">CHANNEL_SECRET</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> line.<span class="title class_">Client</span>(config);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/callback&#x27;</span>, line.<span class="title function_">middleware</span>(config), <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Promise</span></span><br><span class="line">        .<span class="title function_">all</span>(req.<span class="property">body</span>.<span class="property">events</span>.<span class="title function_">map</span>(handleEvent))</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> res.<span class="title function_">json</span>(result))</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">            res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">end</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 測試回應用</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">json</span>(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleEvent</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="comment">// 判斷是否為 Webhook URL 測試</span></span><br><span class="line">    <span class="keyword">if</span> (event.<span class="property">replyToken</span> === <span class="string">&quot;00000000000000000000000000000000&quot;</span> || event.<span class="property">replyToken</span> === <span class="string">&quot;ffffffffffffffffffffffffffffffff&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 設定關鍵字 查詢匯率</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (event.<span class="property">type</span> === <span class="string">&#x27;message&#x27;</span> &amp;&amp; event.<span class="property">message</span>.<span class="property">text</span> === <span class="string">&#x27;告訴我日幣匯率&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 跑日幣的爬蟲程式碼</span></span><br><span class="line">        crawler.<span class="title function_">crawler</span>(<span class="string">&#x27;JPY&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> msgToUser = &#123;</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">                <span class="attr">text</span>: <span class="string">`日幣現金匯率為-&gt;<span class="subst">$&#123;res.cashSellExchange&#125;</span>, \n日幣即期匯率為-&gt;<span class="subst">$&#123;res.sightSellExchange&#125;</span>, \n詳細資訊請參考-&gt;<span class="subst">$&#123;res.webSideUrl&#125;</span>`</span>,</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> client.<span class="title function_">replyMessage</span>(event.<span class="property">replyToken</span>, msgToUser);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">3000</span>;</span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`listening on <span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>這邊我們很快速的講解過去，首先是 <strong>use strict</strong> 嚴謹模式(有興趣可以參考我的 <a href="https://rexhung0302.github.io/2019/10/09/20191009/">JavaScript 系列</a>)，接下來引入 <strong>LINE SDK</strong> 及 <strong>Node.js express</strong> 框架，隨後引入 <strong>crawler</strong> 這隻檔案，讓 <strong>Code</strong> 可以比較乾淨，等一下會講解另一隻檔案如何讓現在的檔案吃到。</p>
<p>接著 <strong>config</strong> 就是設定 <strong>LINE</strong> 的環境變數，這邊等等也會做講解，在程式碼完成之後，要傳上 <strong>Heroku</strong> 之前，會把環境變數設定上去。</p>
<p>最後在下面的 <strong>handleEvent</strong> 主要是判斷 <strong>event</strong> 的事件是，<br>接收到訊息該如何回應，裡面可以新增各式各樣的判斷，比如對方傳文字來或是圖片來，你應該要如何回應。在剛開始 <strong>LINE</strong> 那邊會有判斷是否為 <strong>Webhook URL</strong> 測試。在 Line Server 那邊會傳來 <strong>replyToken &#x3D;&#x3D;&#x3D; “00000000000000000000000000000000”</strong> 或 <strong>replyToken &#x3D;&#x3D;&#x3D; “ffffffffffffffffffffffffffffffff”</strong> 若收到這樣的訊息可以不做回應。</p>
<p>接著就是 <strong>event.type &#x3D;&#x3D;&#x3D; ‘message’</strong> 而且 <strong>event.message.text &#x3D;&#x3D;&#x3D; ‘告訴我日幣匯率’</strong>；意思就是如果收到訊息且內容是『<strong>告訴我日幣匯率</strong>』，那就去跑另一個 <strong>JavaScript</strong> 檔案 <strong>crawler</strong> 的 <strong>Function -&gt; crawler()</strong>。</p>
<p>不論結果如何，記得要 <strong>return Promise.resolve(null)</strong>;。</p>
<h4 id="接下來會簡單講解一下另外一個頁面的程式碼"><a href="#接下來會簡單講解一下另外一個頁面的程式碼" class="headerlink" title="接下來會簡單講解一下另外一個頁面的程式碼"></a>接下來會簡單講解一下另外一個頁面的程式碼</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>); <span class="comment">// 抓整個 html</span></span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">&quot;cheerio&quot;</span>); <span class="comment">// 用來抓 element 的 類似 JQuery 的選擇器</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抓取日幣的爬蟲</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">crawler</span>(<span class="params">type</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;type&#x27;</span>, type);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">request</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&quot;http://rate.bot.com.tw/Pages/Static/UIP003.zh-TW.htm&quot;</span>,</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        &#125;, <span class="keyword">function</span>(<span class="params">error, response, body</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (error || !body) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;nullnull&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> $ = cheerio.<span class="title function_">load</span>(body); <span class="comment">// 載入 body</span></span><br><span class="line">                <span class="keyword">const</span> tr = $(<span class="string">&quot;tbody tr&quot;</span>); <span class="comment">// 抓取每一行的 tr</span></span><br><span class="line">                <span class="keyword">const</span> result = []; <span class="comment">// 建立一個儲存結果的容器</span></span><br><span class="line">                <span class="keyword">const</span> bankDate = $(<span class="string">&quot;#h1_small_id&quot;</span>); <span class="comment">// 放台銀牌告匯率日期</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">let</span> JPY_cashSellExchange = <span class="literal">null</span>; <span class="comment">// 用來放日幣現金匯率的</span></span><br><span class="line">                <span class="keyword">let</span> JPY_sightSellExchange = <span class="literal">null</span>; <span class="comment">// 用來放日幣即期匯率的</span></span><br><span class="line">                <span class="keyword">let</span> AUD_cashSellExchange = <span class="literal">null</span>; <span class="comment">// 用來放澳幣現金匯率的</span></span><br><span class="line">                <span class="keyword">let</span> AUD_sightSellExchange = <span class="literal">null</span>; <span class="comment">// 用來放澳幣即期匯率的</span></span><br><span class="line">                <span class="keyword">let</span> webSideUrl = <span class="string">&#x27;http://rate.bot.com.tw/Pages/Static/UIP003.zh-TW.htm&#x27;</span>;</span><br><span class="line">                <span class="keyword">let</span> resDate = <span class="literal">null</span>; <span class="comment">// 用來放要回傳回去的匯率資訊</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; tr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">const</span> coinType = tr.<span class="title function_">eq</span>(i).<span class="title function_">find</span>(<span class="string">&#x27;.hidden-phone.print_show&#x27;</span>).<span class="title function_">text</span>().<span class="title function_">trim</span>(); <span class="comment">// 幣別</span></span><br><span class="line">                    <span class="keyword">const</span> cashBuyExchange = tr.<span class="title function_">eq</span>(i).<span class="title function_">children</span>().<span class="title function_">eq</span>(<span class="number">1</span>).<span class="title function_">text</span>(); <span class="comment">// 現金匯率(銀行買入)</span></span><br><span class="line">                    <span class="keyword">const</span> cashSellExchange = tr.<span class="title function_">eq</span>(i).<span class="title function_">children</span>().<span class="title function_">eq</span>(<span class="number">2</span>).<span class="title function_">text</span>(); <span class="comment">// 現金匯率(銀行賣出)</span></span><br><span class="line">                    <span class="keyword">const</span> sightBuyExchange = tr.<span class="title function_">eq</span>(i).<span class="title function_">children</span>().<span class="title function_">eq</span>(<span class="number">3</span>).<span class="title function_">text</span>(); <span class="comment">// 即期匯率(銀行買入)</span></span><br><span class="line">                    <span class="keyword">const</span> sightSellExchange = tr.<span class="title function_">eq</span>(i).<span class="title function_">children</span>().<span class="title function_">eq</span>(<span class="number">4</span>).<span class="title function_">text</span>(); <span class="comment">// 即期匯率(銀行賣出)</span></span><br><span class="line">                    <span class="keyword">const</span> bankDateText = bankDate.<span class="title function_">text</span>(); <span class="comment">// 當日日期</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 抓日圓</span></span><br><span class="line">                    <span class="keyword">if</span> (type === <span class="string">&#x27;JPY&#x27;</span> &amp;&amp; coinType === <span class="string">&#x27;日圓 (JPY)&#x27;</span>) &#123;</span><br><span class="line">                        <span class="comment">// 放進 JSON 檔</span></span><br><span class="line">                        result.<span class="title function_">push</span>(<span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123; bankDateText, coinType, cashBuyExchange, cashSellExchange, sightBuyExchange, sightSellExchange &#125;));</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 更新日幣變數</span></span><br><span class="line">                        JPY_cashSellExchange = cashSellExchange;</span><br><span class="line">                        JPY_sightSellExchange = sightSellExchange;</span><br><span class="line"></span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;跑爬蟲的 Function 裡面&#x27;</span>, <span class="string">&#x27;現金匯率-&gt;&#x27;</span>, JPY_cashSellExchange, <span class="string">&#x27;即期匯率-&gt;&#x27;</span>, JPY_sightSellExchange)</span><br><span class="line"></span><br><span class="line">                        resDate = &#123;</span><br><span class="line">                            <span class="attr">cashSellExchange</span>: JPY_cashSellExchange, <span class="comment">// 現金匯率</span></span><br><span class="line">                            <span class="attr">sightSellExchange</span>: JPY_sightSellExchange, <span class="comment">// 即期匯率</span></span><br><span class="line">                            <span class="attr">webSideUrl</span>: webSideUrl, <span class="comment">// 爬蟲網站</span></span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 抓澳幣</span></span><br><span class="line">                    <span class="keyword">if</span> (type === <span class="string">&#x27;AUD&#x27;</span> &amp;&amp; coinType === <span class="string">&#x27;澳幣 (AUD)&#x27;</span>) &#123;</span><br><span class="line">                        <span class="comment">// 放進 JSON 檔</span></span><br><span class="line">                        result.<span class="title function_">push</span>(<span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123; bankDateText, coinType, cashBuyExchange, cashSellExchange, sightBuyExchange, sightSellExchange &#125;));</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 更新日幣變數</span></span><br><span class="line">                        AUD_cashSellExchange = cashSellExchange;</span><br><span class="line">                        AUD_sightSellExchange = sightSellExchange;</span><br><span class="line"></span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;跑爬蟲的 Function 裡面&#x27;</span>, <span class="string">&#x27;現金匯率-&gt;&#x27;</span>, AUD_cashSellExchange, <span class="string">&#x27;即期匯率-&gt;&#x27;</span>, AUD_sightSellExchange)</span><br><span class="line"></span><br><span class="line">                        resDate = &#123;</span><br><span class="line">                            <span class="attr">cashSellExchange</span>: AUD_cashSellExchange, <span class="comment">// 現金匯率</span></span><br><span class="line">                            <span class="attr">sightSellExchange</span>: AUD_sightSellExchange, <span class="comment">// 即期匯率</span></span><br><span class="line">                            <span class="attr">webSideUrl</span>: webSideUrl, <span class="comment">// 爬蟲網站</span></span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 回傳資訊</span></span><br><span class="line">                <span class="title function_">resolve</span>(resDate);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 輸出這個 JS</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">crawler</span> = crawler;</span><br></pre></td></tr></table></figure>

<p>基本上與之前的程式碼大同小異，差別在於這次是把程式碼包進 <strong>new Promise</strong>，最後再靠 <strong>exports.crawler &#x3D; crawler;</strong> 就能在其他檔案使用了。</p>
<h4 id="一枝穿雲箭"><a href="#一枝穿雲箭" class="headerlink" title="一枝穿雲箭"></a>一枝穿雲箭</h4><p>最後這邊我們就可以把程式上傳了，在專案的目錄下，先輸入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ heroku create 名稱(如不填 系統會隨機給一個名稱)</span><br></pre></td></tr></table></figure>

<p>其中要小心一些 <strong>heroku</strong> 的規定，比如開頭不能大寫之類的。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20191201/heroku-create-fail.png" alt="有錯誤"></p>
<p>看到下方這張圖才代表成功。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20191201/heroku-create-success.png" alt="成功創建"></p>
<blockquote>
<p><em>免費的方案似乎有專案的數量上限限制，目前創建到第五個以上就會被拒絕，如理解有誤敬請糾正，非常感謝。</em></p>
</blockquote>
<p>隨後執行下列幾行，然後等待： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git init      // git init 初始化專案</span><br><span class="line"></span><br><span class="line">$ heroku git:remote -a &lt;Heroku 專案 名稱&gt;</span><br><span class="line"></span><br><span class="line">$ touch .gitingnore // 這邊 把不要上傳的 檔案 資料夾 都寫入這裡面</span><br><span class="line"></span><br><span class="line">$ git commit -am &quot;init my chatBox&quot;</span><br><span class="line"></span><br><span class="line">$ git push heroku master</span><br></pre></td></tr></table></figure>

<p>整個操作起來其實跟推上 <strong>GitHub</strong> 非常像；傳送上去之後如果要看到作品可以直接輸入 <a href="https://dashboard.heroku.com/apps">https://dashboard.heroku.com/apps</a> 進入後點擊創建的那個專案。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20191201/heroku-index.png" alt="Heroku 首頁"></p>
<p>接著到右上角點擊 <strong>Open app</strong>，就可以看到了，</p>
<p><img src="/images/others/loading.gif" data-original="/images/20191201/heroku-open-app.png" alt="Heroku Open APP"></p>
<p>如果想看見程式的 <strong>log</strong> ，那就點擊右上角的 <strong>View logs</strong>，就可以查看你的程式碼有沒有錯誤了。</p>
<h4 id="錯誤千軍萬馬來相見"><a href="#錯誤千軍萬馬來相見" class="headerlink" title="錯誤千軍萬馬來相見"></a>錯誤千軍萬馬來相見</h4><p>這時候你可能會發現錯誤，其實是因為前面我們有提到，程式碼剛開始有 <strong>config</strong> 但是我們沒有只接填寫，變成他會去抓 <strong>Heroku</strong> 的設定，如果沒設定就會出錯。</p>
<p>輸入下面的程式碼(看情況自己增加)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ heroku config:set CHANNEL_ACCESS_TOKEN=&quot;&lt;Your LINE Bot Token&gt;&quot;</span><br><span class="line"></span><br><span class="line">$ heroku config:set CHANNEL_SECRET=&quot;&lt;Your LINE Bot Srcret&gt;&quot;</span><br></pre></td></tr></table></figure>

<p>最後把 Open APP 打開後的網址貼到最上面我們提到的 <strong>Webhook網址</strong>，大功告成啦！</p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>其實自己摸了好一陣子的 <strong>LINE</strong> 但是一直都沒有去瞭解過他怎麼執行還有流程是怎麼樣，這次剛好在玩爬蟲，就順水推舟連 <strong>Node.js</strong> 都一起研究研究，所以如果有講不好的地方還敬請歡迎指教。</p>
<p><strong>LINE Bot</strong> 其實還有很多好玩的地方，這就等著大家自己去發掘啦～</p>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>Crawler</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>Other</tag>
        <tag>Crawler</tag>
      </tags>
  </entry>
  <entry>
    <title>[Life Note] - LINE TAIWAN TechPulse 2019</title>
    <url>/2019/12/04/20191204/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>其實從接觸資訊相關工作開始至今一年又25天，也是自己的第一份程式語言工作，一直都沒有去參加過什麼大型的會議，再加上自己工作的內容跟 <strong>LINE</strong> 息息相關，一直覺得自己應該去參加個資訊相關活動，很開心的意外在2019年尾聲有幸參加了 <strong>LINE TAIWAN TechPulse 2019</strong>。</p>
<span id="more"></span>

<p>這次的開發者大會是第四屆，並且首次移動到了 <strong>臺北和平籃球館</strong>，聽說規模是去年的兩倍，將近千人到場參與，因為這是我第一次參加，就不會去比較今年有多好還是多壞了。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20191204/LINE_TechPulse_2019.png" alt="LINE TAIWAN TechPulse 2019"></p>
<blockquote>
<p><em>嚴重提醒：本篇也是以筆記及心得為主的文章，如果內容有誤，敬請不吝社指出也請多多海涵，感謝各路大神！另外圖片會有模糊問題因為當天臨時靠手機拍攝，離得也較遠，還請各位大神見諒。</em></p>
</blockquote>
<hr>
<h3 id="本次重點"><a href="#本次重點" class="headerlink" title="本次重點"></a>本次重點</h3><p><img src="/images/others/loading.gif" data-original="/images/20191204/LINE_outside_logo.png" alt="門外的看板"></p>
<p>今天的主題其實一直圍繞著最近很火紅的 <strong>AI人工智慧</strong>，並且延伸至 <strong>數據分析及使用</strong>、<strong>資安</strong>、<strong>公司開發規劃</strong> 及 <strong>工商時間</strong>…等等。</p>
<p>與以往一樣分別為 <strong>上半場</strong> 及 <strong>下半場</strong>，上半場為 <strong>LINE台灣公司員工</strong> 介紹 <strong>公司目前近況</strong> 及 <strong>未來目標</strong>，還有 <strong>Clova Chatbot AutoML 專家</strong> - <strong>李在元</strong>(<strong>Jaewon Lee</strong>) 及 補充說明的 <strong>LINE台灣資深資料工程師</strong> - <strong>孫韻如</strong>(<strong>Penny Sun</strong>)，及 <strong>國際頂尖白帽駭客</strong> - <strong>李丞鎮</strong>(<strong>Beist</strong>)，最後還有 <strong>LINE貼文串推薦系統</strong>(<strong>Timeline Post Recommender System</strong>) - <strong>李知洪</strong>(<strong>Jihong Lee</strong>)…等等，下午多為開發應用示範及 <strong>LINE</strong> 內部員工介紹各項功能還有預期要上線的功能。</p>
<p>-&gt; 簡單給個重點：</p>
<ol>
<li><p><strong>LINE平台技術發展與最新工具</strong></p>
</li>
<li><p><strong>跨海大神的演講</strong></p>
</li>
<li><p><strong>五大專家 十大開發團隊 交流交流</strong></p>
</li>
<li><p><strong>LINE 預期願景</strong></p>
</li>
</ol>
<p><img src="/images/others/loading.gif" data-original="/images/20191204/LINE_BeaconSeat.png" alt="這次座位表是用 Beacon 推播的 酷"></p>
<hr>
<h3 id="報到"><a href="#報到" class="headerlink" title="報到"></a>報到</h3><p>順帶一提這次到會場騎乘的是 <strong>GOShare</strong> 的 <strong>GOGORO</strong>，不得不說方便是很方便，但是發動了很久，原來不管是 <strong>側柱</strong>、<strong>中柱</strong> 甚至 <strong>車廂</strong> 只要一個沒關好沒收好就不能發動。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20191204/go_share.png" alt="人品還大爆發 拿到壞掉的安全帽"></p>
<p>到會場會給先發一則座位的訊息，接著再到報到區，他們會給你對應顏色手環。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20191204/signIn.png" alt="報到處 紅圈為辨別位置用"></p>
<hr>
<h3 id="活動開始"><a href="#活動開始" class="headerlink" title="活動開始"></a>活動開始</h3><h4 id="上半場"><a href="#上半場" class="headerlink" title="上半場"></a>上半場</h4><h5 id="第一位-LINE台灣資深技術總監-陳鴻嘉"><a href="#第一位-LINE台灣資深技術總監-陳鴻嘉" class="headerlink" title="第一位(LINE台灣資深技術總監 - 陳鴻嘉)"></a>第一位(LINE台灣資深技術總監 - 陳鴻嘉)</h5><blockquote>
<p>從全球與地區的兩種角度，了解 LINE 的技術策略布局；了解 LINE TW 的工程團隊如何與總部及其他國家團隊分工合作，並培養自我職能，貢獻價值。</p>
</blockquote>
<p>主要提 <strong>八大人工智慧的應用領域</strong>(Speed, NLU, Voice, Data, Video, Face, OCR, Vision)</p>
<p>2020目標繼續朝 <strong>人工AI</strong> 發展，<strong>LINE Brain</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20191204/speakImg_1.png" alt="八大人工智慧的應用領域"></p>
<hr>
<h5 id="第二位-LINE台灣董事總經理-陳立人"><a href="#第二位-LINE台灣董事總經理-陳立人" class="headerlink" title="第二位(LINE台灣董事總經理 - 陳立人)"></a>第二位(LINE台灣董事總經理 - 陳立人)</h5><p>講者一開始就提到 <strong>Life of LINE</strong>，並且深深地提醒了使用者，你的日常生活都與 <strong>LINE</strong> 息息相關，所以他們希望能將使用者的生活上每一個細節都與 <strong>LINE</strong> 串接起來。</p>
<p>講者接著提到將會透過兩大策略來優化使用者體驗：</p>
<p>第一策略 - <strong>一致性</strong>(<strong>consistency</strong>)：</p>
<ol>
<li><p>Life Of LINE</p>
</li>
<li><p>LINE Mini APP</p>
</li>
</ol>
<p>第二策略 - <strong>透過資料科學與人工智慧的技術來優化 UX</strong>：</p>
<ol>
<li>AI Company(AI DJ, 檢舉審核系統, Smart Channel, LINE AI Hackathon(黑客松)自動報帳)</li>
</ol>
<p>這位講者的結論是 AI, Privary, Data, Governamece</p>
<hr>
<h5 id="第三位-LINE-技術專家-技術傳教士-Evan-Lin"><a href="#第三位-LINE-技術專家-技術傳教士-Evan-Lin" class="headerlink" title="第三位(LINE 技術專家&#x2F;技術傳教士 - Evan Lin)"></a>第三位(LINE 技術專家&#x2F;技術傳教士 - Evan Lin)</h5><blockquote>
<p>Clova Chatbot Builder 是一項 AI 服務，讓使用者建立自己業務領域的聊天機器人，透過深度學習與自然語言處理技術建構智能對話。本議程將介紹 Clova Chatbot Builder 架構的 pipeline、如何處理對話情境資料，以及串接 LINE 平台。此外，也將展示 Chatbot Builder 的主要功能與應用案例。</p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20191204/LINE_Time_2018.png" alt="2018年 LINE 的整年預覽"></p>
<p>講者一開始就提到去年的整年度表現 及 新的一年的時程，關於目前及未來的展望：</p>
<ol>
<li><p>UX&#x2F;DX</p>
</li>
<li><p>OA 2.0</p>
</li>
<li><p>Flex Message Simulator(不需要再面對JSON)</p>
</li>
<li><p>Rich menu Batch API(後台一些數據可用 API 拿到，不需要再去後台盯著)</p>
</li>
</ol>
<p>隨後也提到了 <strong>LIFF V2</strong> 可以在手機以外的網頁上開啟並且做一些 <strong>API</strong> 的串接，以往的 <strong>LIFF</strong> 是以 <strong>LINE</strong> 開頭的，<strong>V2</strong> 改為 <strong>https</strong> 開頭。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20191204/LIFF_V2.png" alt="LIFF V2"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20191204/LIFF_SupImg.jpeg" alt="支援 Browsers"></p>
<p>結論：更好的使用者提現 及 開發者體驗，Flex Message V2 不用再面對 JSON，Rich menu Batch API。</p>
<p>AI ChatBox：</p>
<ol>
<li><p>OA</p>
</li>
<li><p>Task-oriented</p>
</li>
<li><p>Chit-chat</p>
</li>
</ol>
<p><img src="/images/others/loading.gif" data-original="/images/20191204/LINE_Time_2018to2019.png" alt="2018至2019的總結"></p>
<hr>
<h4 id="第四位-Clova-Chatbot-AutoML-專家-Jaewon-Lee-及-LINE台灣資深資料工程師-Penny-Sun"><a href="#第四位-Clova-Chatbot-AutoML-專家-Jaewon-Lee-及-LINE台灣資深資料工程師-Penny-Sun" class="headerlink" title="第四位(Clova Chatbot AutoML 專家 - Jaewon Lee 及 LINE台灣資深資料工程師 - Penny Sun)"></a>第四位(Clova Chatbot AutoML 專家 - Jaewon Lee 及 LINE台灣資深資料工程師 - Penny Sun)</h4><p>應該是算第四組上場的是來自韓國的 <strong>Clova Chatbot AutoML</strong> 專家 - <strong>李在元</strong>(<strong>Jaewon Lee</strong>)，隨後還有 <strong>LINE台灣資深資料工程師</strong> - <strong>孫韻如</strong>(<strong>Penny Sun</strong>)。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20191204/JaewonLeeImg_01.png" alt="李在元 - Jaewon Lee"></p>
<p>開場是以 <strong>Chatbot</strong> 為開頭，其中最主要的主菜當然是 <strong>Clova Chatbot Builder</strong>，其中提到了當未來企業要製作一個 <strong>AI</strong> 聊天機器人，甚至要開發一個內容管理系統，建立一個介面，讓使用者輸入問題並且不是關鍵字式回覆，這些 <strong>Clova Chatbot Builder</strong> 都幫你做好了，未來也會靠你的客群們來搜集訓練材料，並且慢慢成長為更精準更到位的 <strong>AI Chatbot</strong>。</p>
<p>不過中文博大精深，中文還未引進，看起來中文要精準的回答還需要一哩路呢。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20191204/JaewonLeeImg_02.png" alt="未來非工程師建立自己的 ChatBot 也越來越方便且快速了"></p>
<hr>
<h4 id="第五位-國際頂尖白帽駭客-李丞鎮-Beist"><a href="#第五位-國際頂尖白帽駭客-李丞鎮-Beist" class="headerlink" title="第五位(國際頂尖白帽駭客 - 李丞鎮(Beist))"></a>第五位(<strong>國際頂尖白帽駭客</strong> - <strong>李丞鎮</strong>(<strong>Beist</strong>))</h4><blockquote>
<p>本議程將介紹企業資安團隊的運作模式，並說明企業面臨的資安風險與因應策略。此外，將介紹 LINE 資安團隊如何與開發人員合作，進行程式碼審核、檢查內部和外部網路安全，以及使用機器學習檢測惡意行為。</p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20191204/BeistImg_01.png" alt="國際頂尖白帽駭客"></p>
<p>來自韓國，目前擔任 <strong>LINE GrayLab資安研究室</strong> 的負責人 <strong>李丞鎮</strong>(<strong>Beist</strong>)，是亞洲首位進入 <strong>世界駭客大賽DEFCON CTF</strong> 決賽的選手，也在韓國駭客競賽中獲得多次優勝；開場以 <strong>Why Enterprise Security Is Hard ?</strong> 切入。</p>
<p>講者在演講期間多次提到安全把關你我做起，破解工程師比破解伺服器容易。</p>
<blockquote>
<p><em>直得一提：LINE GrayLab特別構思出Becks (資安社群聚會），以定期巡迴的方式與各地的駭客們交流最頂尖的防護技術，全球首場Becks (資安社群聚會）。相關訊息可點擊 <a href="https://www.ithome.com.tw/pr/130855">傳送門</a></em></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20191204/BeistImg_02.png" alt="Summary"></p>
<hr>
<h4 id="第六位-Timeline-Post-Recommender-System-Jihong-Lee"><a href="#第六位-Timeline-Post-Recommender-System-Jihong-Lee" class="headerlink" title="第六位(Timeline Post Recommender System - Jihong Lee)"></a>第六位(Timeline Post Recommender System - Jihong Lee)</h4><blockquote>
<p>LINE 貼文串讓使用者們分享貼文進行互動，取得的使用數據讓我們能為使用者提供個人化推薦服務。本議程將介紹我們如何為使用者提供完善的體驗、持續進化推薦系統，並從資料分析的角度探討相關洞見，以及如何提升整體系統品質。</p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20191204/JihongLeeImg_01.png" alt="資料交叉比對"></p>
<p>講者主要在分析推薦系統 <strong>Recommender System</strong>，以及如何分析使用者然後利用演算法去推薦使用者他想看的東西，其實也是離不開 <strong>AI</strong>。</p>
<p>總結：Recommender System, Pareto Optimality</p>
<p><img src="/images/others/loading.gif" data-original="/images/20191204/JihongLeeImg_02.png" alt="Summary"></p>
<p>另外現場還 <strong>show</strong> 出了用 <strong>Timeline Post Recommender System</strong> 技術做出來的照片牆，只要現場拍照就可以上傳到照片牆，大家都拿手機出來拍照上傳，最後也被拿來當 <strong>See You Next Year</strong> 的背景圖，很有創意！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20191204/Timeline_post_recommender.png" alt="照片牆"></p>
<hr>
<h3 id="下半場"><a href="#下半場" class="headerlink" title="下半場"></a>下半場</h3><p>這次演講比較緊湊，時間上有往後延，過了大約半小時開始下半場，下半場的前半部時間是 <strong>LINE新星計畫新創團隊</strong> 介紹，就像是工商時間，各家公司紛紛分享自己的機器人或產品。</p>
<table>
<thead>
<tr>
<th align="center">時間</th>
<th align="center">公司 或 APP 名稱</th>
</tr>
</thead>
<tbody><tr>
<td align="center">13:50</td>
<td align="center"><strong>牙醫診所</strong>DEMO及各API使用介紹</td>
</tr>
<tr>
<td align="center">14:00</td>
<td align="center"><strong>記帳雞</strong> - 記帳軟體DEMO</td>
</tr>
<tr>
<td align="center">14:10</td>
<td align="center"><strong>Tournii</strong>(<strong>途你</strong>) - LINE 旅遊 APP</td>
</tr>
<tr>
<td align="center">14:21</td>
<td align="center"><strong>肚肚找美食</strong> - 餐廳預約及找餐廳 APP</td>
</tr>
<tr>
<td align="center">14:30</td>
<td align="center"><strong>通勤學</strong> - 學習 APP</td>
</tr>
<tr>
<td align="center">14:40</td>
<td align="center"><strong>Montagg</strong> - 影片推薦 APP</td>
</tr>
<tr>
<td align="center">14:49</td>
<td align="center"><strong>TikiPoki</strong> - 票券 APP</td>
</tr>
<tr>
<td align="center">15:04</td>
<td align="center"><strong>Dr.Line</strong> - 診所預約掛號 APP</td>
</tr>
<tr>
<td align="center">15:18</td>
<td align="center"><strong>優活家(德軒醫療)</strong> - 慢簽相關 APP</td>
</tr>
</tbody></table>
<blockquote>
<p>更詳細資訊請點 <a href="https://linecorp.com/zh-hant/pr/news/zh-hant/2019/3005">傳送門</a></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20191204/Tournii_QRCode.png" alt="這邊奉上途你的九折優惠 搭 LINE Text 也可以用喔"></p>
<hr>
<h4 id="LINE-PAY"><a href="#LINE-PAY" class="headerlink" title="LINE PAY"></a>LINE PAY</h4><p>緊接著都是 LINE 公司的相關技術介紹，首先登場的是 <strong>LINE PAY</strong>，介紹一些變動、 <strong>LINE BANK</strong>、<strong>APP2APP</strong> 及 <strong>API V3</strong>…等等，甚至未來出國能直接在國外使用 <strong>LINE PAY</strong> 付款，無需換匯。</p>
<h4 id="LINE-SPOT"><a href="#LINE-SPOT" class="headerlink" title="LINE SPOT"></a>LINE SPOT</h4><p>再來是 <strong>LINE SPOT</strong>，他們的初衷是目前 <strong>LINE</strong> 有了眾多服務，但是卻無法好好的串起來直接使用，比方說想約朋友吃飯，但是卻要在眾多的 <strong>APP 來回穿梭</strong>，達到 <strong>訂餐廳</strong>、<strong>看菜單</strong>、<strong>叫車</strong>…等等的最終結果，因為這樣，所以 <strong>LINE SPOT</strong> 誕生了。</p>
<h4 id="Fact-Checker"><a href="#Fact-Checker" class="headerlink" title="Fact Checker"></a>Fact Checker</h4><p>這個講者提到，因為每天都有數已難記的檢舉數量，光靠人工是無法快速且有效率的去分析這些資料是不是假消息，所以一樣透過演算法及AI人工智慧，達到機器人分工的效果。</p>
<h4 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h4><p>其他還有提到<strong>收尋</strong>、<strong>音樂</strong>、<strong>QA</strong>、<strong>FCU</strong> 甚至 <strong>LINE的環境架構</strong>…等等，這邊就不一一補充說明了。</p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>這次去 <strong>LINE TAIWAN TechPulse 2019</strong> 算是收穫頗多，也聽了很多家企業的分享，常常覺得自己在碰到資訊相關知識時，自己就好像走入了一片森林，自己只看到最前面那棵樹，不過就跟運動一樣，這種事情就是什麼都不重要，重要的是你的毅力呀！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20191204/see_you.png" alt="明年見 各位"></p>
<p>最後用一張紀念品圖來結束這回合囉，以上資訊如有誤還請多見諒，圖片模糊再次跟各位大神道歉，因為很臨時的用手機拍攝，距離也較遠，當天電腦恰巧又沒電，當下都是手寫筆記，如果之後有再想起什麼片段，會再更新並且補上來。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20191204/finally.png" alt="聽說啤酒很好喝"></p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><p>LINE - <a href="https://techpulse.line.me/">報名網站</a></p>
</li>
<li><p>LINE — <a href="https://linecorp.com/zh-hant/pr/news/zh-hant/2019/3005">LINE TAIWAN TECHPULSE 2019 LINE 旗下服務全面導入人工智慧 LINE BRAIN 計畫即將開始招募台灣企業夥伴</a></p>
</li>
<li><p>LINE TODAY — <a href="https://today.line.me/tw/pc/article/LINE%E5%B9%B4%E5%BA%A610%E5%A4%A7%E6%96%B0%E5%89%B5%E6%9C%8D%E5%8B%99%E3%80%80AI%E4%B8%B2%E9%80%A3%E7%94%9F%E6%B4%BB+2020%E5%B9%B4Clova%E4%B8%AD%E6%96%87%E5%8C%96-mGX8Xw">LINE年度10大新創服務　AI串連生活 2020年Clova中文化</a></p>
</li>
<li><p>電腦DIY — <a href="https://www.computerdiy.com.tw/20191204_aichatbot_line-taiwan-techpulse-2019/">導入AI聊天機器人服務LINE TAIWAN TECHPULSE 2019精彩內容看這篇</a></p>
</li>
<li><p>Yahoo!新聞 - <a href="https://tw.news.yahoo.com/line%E9%96%8B%E7%99%BC%E8%80%85%E5%A4%A7%E6%9C%83-ai%E6%99%BA%E6%85%A7%E5%B9%AB%E5%BF%99%E6%8E%A5%E9%A4%90%E5%BB%B3%E5%AE%A2%E6%9C%8D%E8%A8%82%E4%BD%8D-095019674.html">LINE開發者大會 AI智慧幫忙接餐廳客服訂位</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>LINE</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>Other</tag>
        <tag>Life</tag>
        <tag>LINE</tag>
        <tag>TechPulse</tag>
      </tags>
  </entry>
  <entry>
    <title>[Tool Note] - Mac OS 使用 HomeBrew 建置 Web 開發環境</title>
    <url>/2019/11/04/20191104/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>最近終於擺脫了舊電腦，可以捨棄那猶如牛車的速度，每次 <strong>yarn server</strong> 電腦就像是要起飛了一樣，噢！不對是快爆炸了！最近托公司的福終於換了一台筆電，但是環境就必須重來啦～</p>
<p>鑑於之前環境太髒亂，那時候什麼都不了解胡亂裝了一通，這次剛好 <strong>Blog</strong> 搬家了，就剛好做個筆記記錄一下吧。</p>
<blockquote>
<p><em>這一樣是一篇用來筆記的文章，以防日後需要重新建置環境時忘記怎麼設定。</em></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20191104/MacbookPro15.png" alt="香！!"></p>
<span id="more"></span>

<hr>
<h3 id="安裝目標"><a href="#安裝目標" class="headerlink" title="安裝目標"></a>安裝目標</h3><ol>
<li><p>基本程式</p>
</li>
<li><p>開發環境建置</p>
</li>
</ol>
<blockquote>
<p><em>本篇以第二項為主，關於第一項會在另一篇文章</em></p>
</blockquote>
<hr>
<h3 id="安裝-PHP7-2"><a href="#安裝-PHP7-2" class="headerlink" title="安裝 PHP7.2"></a>安裝 PHP7.2</h3><p>首先安裝一定會用到的 <strong>PHP</strong>，目前最穩定版本為 <strong>7.2</strong> 所以輸入以下指令開始安裝：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew install php72</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20191104/step1.png" alt="安裝中"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20191104/step2.png" alt="輸入 brew services start php@7.2 啟動"></p>
<h4 id="PHP-環境變數設定"><a href="#PHP-環境變數設定" class="headerlink" title="PHP 環境變數設定"></a>PHP 環境變數設定</h4><p>接下來把 <strong>PHP</strong> 的環境變數加到 ~&#x2F;.zshrc 或 ~&#x2F;.bashrc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vi ~/.zshrc</span><br><span class="line"># 使用 brew 安裝的 php (這行是註解)</span><br><span class="line">export PATH=/usr/local/opt/php@7.2/bin:$PATH;</span><br></pre></td></tr></table></figure>

<p>確定有無安裝成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php -v // 確認安裝成功 (7.2.24 或 更高)</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20191104/php-v.png" alt="輸入 php -v 可以查看是否安裝成功"></p>
<h4 id="修改-php-fpm-設定"><a href="#修改-php-fpm-設定" class="headerlink" title="修改 php-fpm 設定"></a>修改 php-fpm 設定</h4><p>先輸入下面這行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /usr/local/etc/php/7.2/php-fpm.d/www.conf</span><br></pre></td></tr></table></figure>

<p>接著更新內容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 這邊的 user 及 listen.owner 改為自已的 Mac user</span><br><span class="line">user = rexhung</span><br><span class="line">group = staff</span><br><span class="line"></span><br><span class="line">listen.owner = rexhung</span><br><span class="line">listen.group = staff</span><br><span class="line">listen.mode = 0660</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20191104/php-form-1.png" alt="看到 user 的地方記得修改"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20191104/php-form-2.png" alt="看到 user 的地方記得修改"></p>
<p>修改結束後執行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 開始背景執行 php fpm</span><br><span class="line">$ brew services start php72</span><br><span class="line"># 列出目前所有使用 brew 執行的 services</span><br><span class="line">$ brew services list</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20191104/startPHP.png" alt="brew services start php72"></p>
<hr>
<h3 id="安裝-MYSQL5-7"><a href="#安裝-MYSQL5-7" class="headerlink" title="安裝 MYSQL5.7"></a>安裝 MYSQL5.7</h3><p>一樣在終端機輸入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew install mysql@5.7</span><br></pre></td></tr></table></figure>

<h4 id="MYSQL-環境變數設定"><a href="#MYSQL-環境變數設定" class="headerlink" title="MYSQL 環境變數設定"></a>MYSQL 環境變數設定</h4><p>將環境變數加到 ~&#x2F;.zshrc 或 ~&#x2F;.bashrc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ~/.bashrc</span><br><span class="line"># 使用 brew 安裝的 mysql 5.7</span><br><span class="line">$ export PATH=/usr/local/opt/mysql@5.7/bin:$PATH</span><br></pre></td></tr></table></figure>

<p>接著修改完後輸入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 開始背景執行 mysql5.7</span><br><span class="line">$ brew services start mysql@5.7</span><br><span class="line"># 列出目前所有使用 brew 執行的 services</span><br><span class="line">$ brew services list</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20191104/startMySQL.png" alt="brew services start mysql@5.7 這個有小數點要記得"></p>
<h4 id="修改-MYSQL-密碼"><a href="#修改-MYSQL-密碼" class="headerlink" title="修改 MYSQL 密碼"></a>修改 MYSQL 密碼</h4><p>剛安裝完成後的 <strong>MYSQL</strong> 密碼預設都是空白的，需要更改只需要輸入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mysql -u root -p # 登入 mysql</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20191104/useMySQL.png" alt="登入MySQL"></p>
<p>接著進去後輸入下方指令修改密碼：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 登入 mysql 後執行</span><br><span class="line">$ set password for &#x27;使用者帳號&#x27;@&#x27;localhost&#x27;=password(&#x27;新密碼&#x27;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p><em>這邊必須要修改密碼，如果不修改密碼會無法登入資料庫(資料庫會檢查密碼是否為空)</em></p>
</blockquote>
<hr>
<h3 id="安裝-Nginx"><a href="#安裝-Nginx" class="headerlink" title="安裝 Nginx"></a>安裝 Nginx</h3><p>接著輸入下方指令安裝 <strong>Nginx</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew install nginx</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20191104/installNginx.png" alt="install nginx"></p>
<blockquote>
<p><em>設定檔位置在 &#x2F;usr&#x2F;local&#x2F;etc&#x2F;nginx&#x2F;</em></p>
</blockquote>
<p>設定檔的內容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># /usr/local/etc/nginx/nginx.conf</span><br><span class="line">#user nobody;</span><br><span class="line">worker_processes 1;</span><br><span class="line"></span><br><span class="line">#error_log logs/error.log;</span><br><span class="line">#error_log logs/error.log notice;</span><br><span class="line">#error_log logs/error.log info;</span><br><span class="line"></span><br><span class="line">#pid    logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">  worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">  include    mime.types;</span><br><span class="line">  default_type application/octet-stream;</span><br><span class="line"></span><br><span class="line">  #log_format main &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">  #         &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">  #         &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">  #access_log logs/access.log main;</span><br><span class="line">  error_log /var/log/nginx/error.log;  # &lt;===== 這是你放 log 的地方 可以更改</span><br><span class="line"></span><br><span class="line">  sendfile    on;</span><br><span class="line">  client_max_body_size 5G;</span><br><span class="line">  #tcp_nopush   on;</span><br><span class="line"></span><br><span class="line">  #keepalive_timeout 0;</span><br><span class="line">  keepalive_timeout 300;</span><br><span class="line">  send_timeout 600;</span><br><span class="line"></span><br><span class="line">  fastcgi_connect_timeout   300;</span><br><span class="line">  fastcgi_send_timeout    300;</span><br><span class="line">  fastcgi_read_timeout    300;</span><br><span class="line">  fastcgi_buffer_size     256k;</span><br><span class="line">  fastcgi_buffers     8 256k;</span><br><span class="line">  fastcgi_busy_buffers_size  512k;</span><br><span class="line">  fastcgi_temp_file_write_size    256k;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  proxy_connect_timeout    300;</span><br><span class="line">  proxy_read_timeout     300;</span><br><span class="line">  proxy_send_timeout     300;</span><br><span class="line">  proxy_buffer_size      256k;</span><br><span class="line">  proxy_buffers      8 256k;</span><br><span class="line">  proxy_busy_buffers_size   512k;</span><br><span class="line">  proxy_temp_file_write_size 256k;</span><br><span class="line"></span><br><span class="line">  #gzip on;</span><br><span class="line"></span><br><span class="line">  include /usr/local/etc/nginx/sites-enabled/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><em>之後如果有新的站，就要加 nginx conf. 到 &#x2F;usr&#x2F;local&#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;</em></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20191104/sites-enabled.png" alt="步驟一個一個來"></p>
<p><del><strong>詳細 Nginx 歡迎參考 <a href="https://blog.ariby.tw/article/47cc456a-3614-411e-aa39-804c47b92f63">Arriby大神</a> 的 Blog.</strong></del></p>
<blockquote>
<p>大神已關站</p>
</blockquote>
<h4 id="小提示"><a href="#小提示" class="headerlink" title="小提示"></a>小提示</h4><p>請記得如果有把 <strong>log</strong> 加到 <strong>var</strong> 的資料夾內的話，要給予他權限，比如上方的 <strong>nginx.config</strong> 你就需要給他權限，方法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo chmod 777 檔案名稱</span><br></pre></td></tr></table></figure>

<p>最後輸入 ls -al 可以查看所有賦予權限的檔案。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20191104/chmod777.png" alt="chmod7777777777"></p>
<h4 id="執行-Nginx"><a href="#執行-Nginx" class="headerlink" title="執行 Nginx"></a>執行 Nginx</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 開始背景執行 nginx</span><br><span class="line">$brew services start nginx</span><br><span class="line"># 列出目前所有使用 brew 執行的 services</span><br><span class="line">$ brew services list</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20191104/startNginx.png" alt="brew services start nginx"></p>
<h4 id="檢查狀態"><a href="#檢查狀態" class="headerlink" title="檢查狀態"></a>檢查狀態</h4><p>在這邊你可以輸入 <strong>brew services list</strong> 檢查上面安裝的三個東西有沒有順利進行起來。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20191104/brewList.png" alt="brew services list"></p>
<p>如果像上方有出現黃色的字代表沒有成功啟動，記得可以關掉再重啟，或是輸入下方程式碼，不用整個關掉再啟動：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nginx -s reload</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="安裝-PHPRedis"><a href="#安裝-PHPRedis" class="headerlink" title="安裝 PHPRedis"></a>安裝 PHPRedis</h3><p>到最後一個步驟了，還記得之前我們有篇文章的筆記是關於 <strong>PHPRedis</strong> 嗎？忘記可以再去看看哦！</p>
<p>因為之前舊的 <strong>PHP</strong> 版本沒有內建 <strong>pecl</strong> 而 <strong>7.2</strong> 之後就有內建了，這邊就無需要安裝繁瑣的步驟。</p>
<p>這時候只要鍵入 <strong>pecl</strong> 就會正常輸出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 順便連 xdebug 一起安裝，版本可見 https://pecl.php.net/package/xdebug</span><br><span class="line">pecl install xdebug-2.8.0</span><br><span class="line"># 安裝 Igbinary，版本可見 https://pecl.php.net/package/igbinary</span><br><span class="line">pecl install igbinary-3.0.1﻿﻿</span><br><span class="line"># 使用 brew 安裝 Redis</span><br><span class="line">brew install redis</span><br><span class="line"># 安裝 phpredis，版本可見 https://pecl.php.net/package/redis</span><br><span class="line"># 會被詢問兩個問題</span><br><span class="line">#﻿ enable igbinary serializer support? [no]: yes</span><br><span class="line"># ﻿enable lzf compression support? [no]: no</span><br><span class="line"># enable zstd compression support? [no] : no</span><br><span class="line">pecl install redis-5.1.0</span><br><span class="line">﻿</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20191104/PHPRedisInstall.png" alt="Install 成功！"></p>
<h4 id="修改-php-ini-設定檔"><a href="#修改-php-ini-設定檔" class="headerlink" title="修改 php.ini 設定檔"></a>修改 php.ini 設定檔</h4><p>接著到 <strong>php.ini</strong> 檔最上方查看會發現多了幾行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">extension=&quot;redis.so&quot;</span><br><span class="line">extension=&quot;igbinary.so&quot;</span><br><span class="line">zend_extension=&quot;xdebug.so&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20191104/oldSetting.png" alt="舊的設定"></p>
<p>接著把這三行刪除掉(dd掉)，鍵入下方的程式碼：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; CUSTOM variables</span><br><span class="line">short_open_tag = Off</span><br><span class="line">expose_php = Off</span><br><span class="line"></span><br><span class="line">error_reporting = E_ALL &amp; ~E_STRICT</span><br><span class="line">display_errors = On</span><br><span class="line">error_log = &quot;/usr/local/log/php/php_errors.log&quot; # php log 位置</span><br><span class="line"></span><br><span class="line">upload_tmp_dir = &quot;/tmp/&quot;</span><br><span class="line">allow_url_fopen = on</span><br><span class="line"></span><br><span class="line">[xdebug]</span><br><span class="line">zend_extension=&quot;xdebug.so&quot;</span><br><span class="line">xdebug.remote_enable=1</span><br><span class="line">xdebug.remote_autostart=1</span><br><span class="line">xdebug.remote_host=localhost</span><br><span class="line">xdebug.remote_handler=dbgp</span><br><span class="line">xdebug.remote_port=9000</span><br><span class="line"></span><br><span class="line">[redis]</span><br><span class="line">extension=&quot;igbinary.so&quot;</span><br><span class="line">extension=&quot;redis.so&quot;</span><br><span class="line"># 如果 session 要用 redis</span><br><span class="line"># session.save_handler = &quot;redis&quot;</span><br><span class="line"># session.save_path = &quot;tcp://127.0.0.1:6379?weight=1&amp;timeout=2.5&quot;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="確認安裝完成"><a href="#確認安裝完成" class="headerlink" title="確認安裝完成"></a>確認安裝完成</h3><p>最後輸入下方指令檢查 phpinfo 有沒有 redis ，有則成功！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 開始背景執行 redis</span><br><span class="line">$ brew services start redis</span><br><span class="line"># 列出目前所有使用 brew 執行的 services</span><br><span class="line">$ brew services list</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20191104/startPHPRedis.png" alt="brew services start redis"></p>
<p>在最後輸入 <strong>brew services list</strong> 之後你應該至少會看見三個程式在執行當中。</p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>這是這次環境建置的小筆記，比上次的省略還多，圖片方面還在想辦法找圖床上傳，目前上傳至 <strong>Hexo</strong> 所以載入會比較慢，文字部分就加減參考囉，如果有什麼問題也歡迎留言告知我～</p>
]]></content>
      <categories>
        <category>Code</category>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>PHP</tag>
        <tag>Life</tag>
        <tag>Note</tag>
        <tag>PHPRedis</tag>
        <tag>Homebrew</tag>
      </tags>
  </entry>
  <entry>
    <title>[The F2E 2nd] — 10 Week Masks Map 口罩地圖</title>
    <url>/2020/02/12/20200212/</url>
    <content><![CDATA[<h2 id="成果-程式碼"><a href="#成果-程式碼" class="headerlink" title="成果 &amp; 程式碼"></a>成果 &amp; 程式碼</h2><blockquote>
<p><em>Demo： <a href="https://rexhung0302.github.io/The-F2E-Challenge/masks-map/dist/index.html#/masksMap/index">傳送門</a><br/><br>Code Source： <a href="https://github.com/RexHung0302/The-F2E-Challenge/tree/master/masks-map">點我</a></em></p>
</blockquote>
<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>之前有寫一系列的地下城文章，原本其實在去年 <strong>The F2E</strong> 活動想要在最後打一篇文章結尾的，結果出了車禍Ｑ，也導致那時候很多版沒切完。接觸前端一年多了，每每看到有活動還是會想參與，雖然常常因為工作或是作息打斷，但我想在當中獲得的才是最珍貴的。</p>
<p>The F2E 的活動(<strong>註1</strong>)其實是為期九週的一系列活動(<a href="https://www.hexschool.com/2019/06/14/2019-06-14-the_f2e/">相關介紹請點我</a>)，去年是第二次舉辦了，那為什麼會有第10週呢？而且現在才出來。其實這都跟武漢肺炎有關，相信看到標題的人八成都能猜到為什麼有這一關卡了，當中其實也包含了<a href="https://futurecity.cw.com.tw/article/1239"> 科技防疫｜自製「超商口罩地圖」的工程師：地圖上線6小時，我收到60萬Google帳單</a>，當然還有最一開始發起黑客松活動得<a href="https://g0v.tw/zh-TW/">零時政府</a>…等。</p>
<span id="more"></span>

<p>六角學院的校長為了方便大家投稿，就直接選定在這個平台推出第10關了，一看到想想能練習切版又能幫助人這機會難得，當下就打定主意這次絕對要完成，還好地圖之前有碰過一點點，雖然當中還是踩了幾個坑。</p>
<p>這次我覺得最困難的應該還是在資料的 <strong>Filter</strong> 塞選了，如何在下關鍵字的時候塞選出想要的結果又不會照成效能上的緩慢，這邊會在研究並且改進。</p>
<blockquote>
<p><em>註1：The F2E 第二屆是由 <strong>六角學院 x Adobe Xd Taiwan</strong> 聯名舉辦的活動，當中的前端 &amp; UI 修練精神時光屋其實和勇闖地下城差不多，特定的關卡都會有特定需要完成的條件，比較特別的是這邊最一開始你能選擇要在<strong>UI組</strong>出生還是<strong>前端工程</strong>出生，如果選擇後者，你就能等待<strong>UI組</strong>的畫面產出，然後擇一去切版，這個活動並沒有限制完成才能提交，所以單純只有切版也是可以過關的。</em></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20200212/10WeekLogo.png" alt="10 Week 口罩地圖"></p>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p>每關都有特定的條件需要達成，如果只有切完版面也是可以的。</p>
<ol>
<li><p>【特定技術】我可以在 Google Map 、或文字列表上看到所有賣口罩的廠商，以及廠商的休息時間。</p>
</li>
<li><p>【特定技術】我可以看到離自己最近的廠商剩餘的口罩數量。</p>
</li>
<li><p>【特定技術】我可以看到頁面提醒，自己今天的身分證字號是否能買口罩，如下圖規則。</p>
</li>
</ol>
<p><img src="/images/others/loading.gif" data-original="/images/20200212/10WeekCondition.png" alt="圖片來至 衛生福利部"></p>
<hr>
<h3 id="關於畫面"><a href="#關於畫面" class="headerlink" title="關於畫面"></a>關於畫面</h3><p>這次沒有想太多就挑了一個版面來切，主要還是在地圖的部分，因為之前大概有做過地圖，稍微有點頭緒。雖然錯過六角的 <strong>The F2E</strong> 第十關直播，但是超佛的六角還是有把<a href="https://www.youtube.com/watch?v=pUizu62dlnY">直播影片</a>及<a href="https://quip.com/vdqYAiFHHkaV">講義</a>上傳至Youtube，感恩SeaFood嘆讚SeaFood。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200212/author.png" alt="感謝作者 @Chrispy"><br><a href="https://challenge.thef2e.com/user/2872">設計稿連結請點我</a></p>
<blockquote>
<p><del><em>這邊沒有做 RWD，應該會於日後補上…</em></del></p>
</blockquote>
<blockquote>
<p><strong>2&#x2F;13更：已經補上 RWD，但是目前手機版效能還是很差，還會想辦法改進Q，請有使用的大大們手下留情。</strong></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/phoneRWD__1.jpg" alt="手機畫面"></p>
<p><img src="/images/others/loading.gif" data-original="/phoneRWD__2.jpg" alt="手機畫面"></p>
<hr>
<h3 id="關於地圖"><a href="#關於地圖" class="headerlink" title="關於地圖"></a>關於地圖</h3><p><img src="/images/others/loading.gif" data-original="/images/20200212/google-maps-layers.png" alt="圖片轉至 Google"></p>
<p>首先你必須了解地圖的一些概念，在上圖中你會看到，地圖其實是很多東西疊起來的，並不是一整張完好的地圖，在這邊我們會做到最基本的幾件事情。</p>
<ol>
<li><p>找到你的地圖套件，這邊使用 <a href="https://vue2-leaflet.netlify.com/">Vue Leaflet</a></p>
</li>
<li><p>找到你要的圖資，這邊使用免費開源的 <a href="https://www.openstreetmap.org/#map=8/23.611/120.768">Openstreetmap</a></p>
</li>
<li><p>帶入你的參數並且在地圖上顯示出資訊</p>
</li>
<li><p>安裝你愛的套件吧！</p>
</li>
</ol>
<hr>
<h4 id="底盤要先穩"><a href="#底盤要先穩" class="headerlink" title="底盤要先穩"></a>底盤要先穩</h4><p>我們必須要先安裝 leafLet 套件，不管你是用 CDN 或是 NPM 都可以，這邊我使用 NPM 安裝，安裝完成後引入套件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入地圖</span></span><br><span class="line"><span class="keyword">import</span> L <span class="keyword">from</span> <span class="string">&#x27;leaflet&#x27;</span>;</span><br><span class="line"><span class="comment">// 引入地圖套件相關</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">LMap</span>, <span class="title class_">LTileLayer</span>, <span class="title class_">LMarker</span>, <span class="title class_">LPopup</span>, <span class="title class_">LTooltip</span> &#125; <span class="keyword">from</span> <span class="string">&quot;vue2-leaflet&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>之後在你的 HTML 上使用它。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">lang</span>=<span class="string">&quot;pug&quot;</span>&gt;</span></span><br><span class="line">l-map(:zoom=&#x27;zoom&#x27; :center=&#x27;center&#x27; style=&#x27;height: 100%&#x27; @ready=&quot;onReady&quot; @locationfound=&quot;onLocationFound&quot;)</span><br><span class="line">  l-tile-layer(:url=&#x27;url&#x27; :attribution=&#x27;attribution&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>再來要到設定的地方加上你的圖資，可能會是 <strong>Openstreetmap</strong> 或是 <strong>Google Map</strong> 也可能是 <strong>mapbox</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">zoom</span>: <span class="number">17</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;https://&#123;s&#125;.tile.openstreetmap.org/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png&#x27;</span>,</span><br><span class="line">    <span class="attr">attribution</span>:</span><br><span class="line">      <span class="string">&#x27;&amp;copy; &lt;a href=&quot;http://osm.org/copyright&quot;&gt;OpenStreetMap&lt;/a&gt; contributors&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p><strong>url</strong> 就是我們要設定圖資的地方，另外其他相關的設定都可以使用 <strong>v-bind</strong> 綁在 <strong>component</strong> 上，這就是 <strong>Vue</strong> 的魅力啦～你只需要處理好資料部分就好了。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200212/emptyMap.png" alt="熱騰騰的地圖"></p>
<p>然後你會看到一張地圖出來了，但是蝦咪都沒有，因為你還沒加上 Marker，或是一些套件。</p>
<hr>
<h4 id="開始著色吧"><a href="#開始著色吧" class="headerlink" title="開始著色吧"></a>開始著色吧</h4><p>接下來就可以開始加上標籤，<strong>Vue</strong> 的使用方式比較簡單，就是在 <strong>HTML</strong> 加上一個 <strong>Tag</strong> 之後使用 <strong>v-for</strong> 就可以把 <strong>Marker</strong> 印上去了，不過這邊不知道是我的問題還是拿到的 <strong>API</strong> 經緯度本來就是對調的，在我打 <strong>API</strong> 拿到資料後自己又透過 <strong>reverse()</strong> 去把他對調回來，不然座標就全都跑到北極去了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template lang=<span class="string">&quot;pug&quot;</span>&gt;</span><br><span class="line">l-<span class="title function_">map</span>(:zoom=<span class="string">&#x27;zoom&#x27;</span> :center=<span class="string">&#x27;center&#x27;</span> style=<span class="string">&#x27;height: 100%&#x27;</span> @ready=<span class="string">&quot;onReady&quot;</span> @locationfound=<span class="string">&quot;onLocationFound&quot;</span>)</span><br><span class="line">  l-tile-<span class="title function_">layer</span>(:url=<span class="string">&#x27;url&#x27;</span> :attribution=<span class="string">&#x27;attribution&#x27;</span>)</span><br><span class="line">  <span class="comment">//- 這邊開始加上 Marker</span></span><br><span class="line">  l-<span class="title function_">marker</span>(v-<span class="keyword">for</span>=<span class="string">&quot;(store,index) in storeList&quot;</span> :lat-lng=<span class="string">&quot;store.geometry.coordinates&quot;</span> :icon=<span class="string">&quot;icon&quot;</span> :visible=<span class="string">&quot;true&quot;</span>)</span><br><span class="line">    l-popup</span><br><span class="line">      span 這邊開始可以放點擊後打開視窗的內容</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>要特別注意的是官方有提到必須到 Main.js 加上下面的程式碼，以防預設圖片跑掉。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* leaflet icon */</span></span><br><span class="line"><span class="keyword">delete</span> L.<span class="property">Icon</span>.<span class="property">Default</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_getIconUrl</span>;</span><br><span class="line">L.<span class="property">Icon</span>.<span class="property">Default</span>.<span class="title function_">mergeOptions</span>(&#123;</span><br><span class="line">   <span class="attr">iconRetinaUrl</span>: <span class="built_in">require</span>(<span class="string">&#x27;leaflet/dist/images/marker-icon-2x.png&#x27;</span>),</span><br><span class="line">   <span class="attr">iconUrl</span>: <span class="built_in">require</span>(<span class="string">&#x27;leaflet/dist/images/marker-icon.png&#x27;</span>),</span><br><span class="line">   <span class="attr">shadowUrl</span>: <span class="built_in">require</span>(<span class="string">&#x27;leaflet/dist/images/marker-shadow.png&#x27;</span>),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>但是這邊我們可以使用自己的圖片，然後可以在 HTML 上用三元運算去判斷目前要給哪一張圖片。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">zoom</span>: <span class="number">17</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;https://&#123;s&#125;.tile.openstreetmap.org/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png&#x27;</span>,</span><br><span class="line">    <span class="attr">attribution</span>:</span><br><span class="line">      <span class="string">&#x27;&amp;copy; &lt;a href=&quot;http://osm.org/copyright&quot;&gt;OpenStreetMap&lt;/a&gt; contributors&#x27;</span>,</span><br><span class="line">    <span class="comment">// 上面一樣 下面開始替換 Marker Icon</span></span><br><span class="line">    <span class="attr">icon_hasAllMask</span>: L.<span class="title function_">icon</span>(&#123;</span><br><span class="line">      <span class="attr">iconUrl</span>: <span class="built_in">require</span>(<span class="string">&quot;@/assets/images/Icon_location_green.svg&quot;</span>),</span><br><span class="line">      <span class="attr">iconSize</span>: [<span class="number">70</span>, <span class="number">100</span>],</span><br><span class="line">      <span class="attr">iconAnchor</span>: [<span class="number">22</span>, <span class="number">94</span>]</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="attr">icon_onlyOneMask</span>: L.<span class="title function_">icon</span>(&#123;</span><br><span class="line">      <span class="attr">iconUrl</span>: <span class="built_in">require</span>(<span class="string">&quot;@/assets/images/Icon_location_orange.svg&quot;</span>),</span><br><span class="line">      <span class="attr">iconSize</span>: [<span class="number">70</span>, <span class="number">100</span>],</span><br><span class="line">      <span class="attr">iconAnchor</span>: [<span class="number">22</span>, <span class="number">94</span>]</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="attr">icon_noMask</span>: L.<span class="title function_">icon</span>(&#123;</span><br><span class="line">      <span class="attr">iconUrl</span>: <span class="built_in">require</span>(<span class="string">&quot;@/assets/images/Icon_location_red.svg&quot;</span>),</span><br><span class="line">      <span class="attr">iconSize</span>: [<span class="number">70</span>, <span class="number">100</span>],</span><br><span class="line">      <span class="attr">iconAnchor</span>: [<span class="number">22</span>, <span class="number">94</span>]</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20200212/markers.png" alt="三種 Icon 一次滿足"></p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>其實這次的地圖沒有什麼大太的難處，主要就是研究套件然後加上套件，但是往往最不怎麼樣的東西，卻能幫助最大，希望在大家慌亂的時候，能用自己所學，幫助其他人。就像<strong>Howard</strong>大大說的『<strong>資訊愈透明，民眾的恐慌就愈低</strong>』。</p>
<p>在參加 <strong>The F2E</strong> 的時候其實好幾關都偷懶了，切完版面而已，最近雖然工作變忙了，但是能在工作中找到自己的興趣並且能讓自己成長就算熬夜也要完成。這次花了兩個半夜，雖然口罩已經搶到翻，而且換成衛生紙跟衛生棉，但還是不能錯過這個練習又能幫助人的好時機，已經天亮了，該去補眠了。</p>
<p>最後讓我們一起祈禱並且盡自己最大的能力幫助彼此，渡過這一次的難關，加油，不管是任何正在努力付出的人，我們一起加油！</p>
<p><strong>然後還是要呼籲！不要囤積口罩衛生紙衛生棉，大腦是很好的東西，拜託！</strong></p>
<h3 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h3><ul>
<li><a href="https://quip.com/vdqYAiFHHkaV">六角講義</a></li>
<li><a href="https://vue2-leaflet.netlify.com/">Vue2Leaflet</a></li>
<li>qweghj1245大大 — <a href="https://qweghj1245.github.io/mask-app/">賣罩地圖</a><br><a href="https://www.gamer.com.tw/index2.php?ad=N">*巴哈姆特 舒壓用</a>*</li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>前端</category>
        <category>TheF2E</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
        <tag>HexSchool</tag>
        <tag>TheF2E</tag>
      </tags>
  </entry>
  <entry>
    <title>[Blog Note] - Hexo NexT 小筆記</title>
    <url>/2020/03/19/20200319/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>這是一篇用來筆記 Hexo 的小攻略，內容是如何修改一些配置設定，日後會不定時的增加，算是給自己一個筆記也給要使用的人一些參考。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200319/hexo_slogan.png" alt="Hexo"></p>
<span id="more"></span>

<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p>內容會提及下列幾項：</p>
<ol>
<li><p>如何在網頁加入 <strong>Fork Me on GitHub(GitHub Corners)</strong></p>
</li>
<li><p>如何加入 <strong>版權聲明</strong></p>
</li>
<li><p>如何在頁尾加入 <strong>本文结束感謝您的閱讀</strong></p>
</li>
<li><p>如何修改頁尾的 <strong>Tag</strong></p>
</li>
</ol>
<hr>
<h3 id="如何在網頁加入-Fork-Me-on-GitHub-GitHub-Corners"><a href="#如何在網頁加入-Fork-Me-on-GitHub-GitHub-Corners" class="headerlink" title="如何在網頁加入 Fork Me on GitHub(GitHub Corners)"></a>如何在網頁加入 Fork Me on GitHub(GitHub Corners)</h3><p>首先到這個網頁挑選喜歡的樣式 -&gt; <a href="http://tholman.com/github-corners/">傳送門</a></p>
<p><img src="/images/others/loading.gif" data-original="/images/20200319/github_fork_style.png" alt="挑一個你愛的樣式吧"></p>
<p>以第一個白底黑貓為例子，複製後先貼到空白處，然後要修改掉那串程式碼最前面的 <strong>href</strong> 內的 <strong><a href="https://your-url/">https://your-url</a></strong> ，內容替換成你的 GitHub 頁面網址。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;https://your-url&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;github-corner&quot;</span> aria-label=<span class="string">&quot;View source on GitHub&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;80&quot;</span> <span class="attr">height</span>=<span class="string">&quot;80&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 250 250&quot;</span> <span class="attr">style</span>=<span class="string">&quot;fill:#151513; color:#fff; position: absolute; top: 0; border: 0; right: 0;&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span>...略<span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span> </span><br><span class="line"><span class="comment">// ...略</span></span><br></pre></td></tr></table></figure>

<p>隨後把下代碼複製貼至 <strong>&#x2F;themes&#x2F;next&#x2F;layout&#x2F;_layout.swig</strong> 文件中 <strong>div</strong> 的 <strong>class name</strong> 為 <strong>headband</strong> 的下面。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;headband&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20200319/github_fork_dec.png" alt="我最愛圖文了 簡單又清楚"></p>
<p>再回去看看就會出現啦！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200319/github_fork_show.png" alt="喜歡記得訂閱按讚加開啟小鈴鐺"></p>
<hr>
<h3 id="如何加入-版權聲明"><a href="#如何加入-版權聲明" class="headerlink" title="如何加入 版權聲明"></a>如何加入 版權聲明</h3><p>原本的做法比較複雜，需要自己去新建文件(<a href="https://theme-next.org/next-6-6-0-released/">詳情可見主題文件</a>)，不過在 <strong>NexT 6.6.0</strong> 開始直接到 <strong>&#x2F;themes&#x2F;next&#x2F;_config.yml</strong> 裡搜尋 <strong>creative_commons</strong> 然後修改要顯示在 <strong>sidebar</strong> 還是 <strong>post</strong> 還是<strong>全都要</strong>就可以了，如下設定：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Creative Commons 4.0 International License.</span><br><span class="line"># See: https://creativecommons.org/share-your-work/licensing-types-examples</span><br><span class="line"># Available values of license: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span><br><span class="line"># You can set a language value if you prefer a translated version of CC license, e.g. deed.zh</span><br><span class="line"># CC licenses are available in 39 languages, you can find the specific and correct abbreviation you need on https://creativecommons.org</span><br><span class="line"></span><br><span class="line">creative_commons:</span><br><span class="line">  license: by-nc-sa</span><br><span class="line">  sidebar: true</span><br><span class="line">  post: true</span><br><span class="line">  language: deed.zh_TW</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20200319/copy_right_show.png" alt="然後你就會發現左邊的 sidebar 跟文章內都會出現啦"></p>
<p>順帶一提，<strong>language</strong> 並非文字在<strong>文章</strong>內顯示的語言喔！而是你導向 <strong>creative commons</strong> 網址時，你的版權聲明顯示的語言，預設是英文，如果改成 <strong>deed.zh_TW</strong> 就會顯示中文，如何看你的語言呢？在<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh_TW">版權聲明網站</a>內中間有一個語言 <strong>select</strong> 下拉後在看網址最後帶的是什麼，·比如說中文是 <strong>deed.zh_TW</strong> 而日文就是 <strong>deed.ja</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200319/copy_right_language_select_show.png" alt="隨意更改其他語言就能找到相對應的代號了"></p>
<hr>
<h3 id="如何在頁尾加入-本文结束感謝您的閱讀"><a href="#如何在頁尾加入-本文结束感謝您的閱讀" class="headerlink" title="如何在頁尾加入 本文结束感謝您的閱讀"></a>如何在頁尾加入 本文结束感謝您的閱讀</h3><p>先到 <strong>&#x2F;themes&#x2F;next&#x2F;layout&#x2F;_macro</strong> 下查看有無 <strong>passage-end-tag.swig</strong> 這隻檔案，沒有就自己手動建立一個，隨後在內文貼上下列程式碼：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;color: #ccc;font-size:14px;&quot;</span>&gt;</span>-------------本文结束<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-paw&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>感謝您的閱讀-------------<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>之後至 <strong>&#x2F;themes&#x2F;next&#x2F;layout&#x2F;_macro&#x2F;post.swig</strong> 文件中 <strong>div</strong> 的 <strong>class name</strong> 為 <strong>post-footer</strong> 內有中括弧 <strong>%- endfor %</strong> 的下面貼上下列程式碼：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 貼在這整段的下面</span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">&quot;post-footer&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// ...略</span><br><span class="line">&#123;%- endfor %&#125;</span><br><span class="line"></span><br><span class="line">// 程式碼貼在這邊 -&gt;</span><br><span class="line">&#123;&#123; partial(&#x27;_partials/post/post-footer.swig&#x27;, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line"></span><br><span class="line">// ...略</span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20200319/thx_to_read_position.png" alt="還不了解就看圖吧"></p>
<p>再回去看看就會出現啦！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200319/thx_to_read_show.png" alt="喜歡記得訂閱按讚加開啟小鈴鐺"></p>
<hr>
<h3 id="如何修改頁尾的-Tag"><a href="#如何修改頁尾的-Tag" class="headerlink" title="如何修改頁尾的 Tag"></a>如何修改頁尾的 <strong>Tag</strong></h3><p><img src="/images/others/loading.gif" data-original="/images/20200319/tag_before.png" alt="美化前樣式"></p>
<p>舊版的設定比較麻煩，必須自己到 <code>/themes/next/layout/_macro/post.swig</code> 內修改 <code>#</code> 為 <code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code> 但是當到這個文件查看時，會發現上面是帶有判斷式的，有中括弧的 <code>%- if theme.tag_icon %</code> ，而且 <code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code> 也已經在程式碼內。</p>
<p>現在你唯一需要做的事情只有一樣，就是到 <code>/themes/next/_config.yml</code> 裡搜尋 <code>tag_icon</code> 並且將它改為 <code>tag_icon: true</code> ，結果將會為下圖。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200319/tag_after.png" alt="美化後樣式"></p>
<p>因為只是多了個 icon ，身為有強迫症的前端，還是想要美化一下，原本想要弄個書籤樣式，但怕做壞了，就用最簡單的美化方式吧。</p>
<p>找到 <code>/themes/next/source/css/_common/components/post/post-tags.styl</code> 這隻檔案，把下面程式碼蓋上去：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.post-tags</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="selector-tag">text</span>-align: center;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">$font-size-smaller</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//- 客製化CSS</span></span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">3px</span> <span class="number">1px</span> <span class="number">#757575</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1px</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">3s</span> linear;</span><br><span class="line"></span><br><span class="line">    &amp;<span class="selector-pseudo">:not</span>(:last-child) &#123;</span><br><span class="line">      <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//- 客製化CSS</span></span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>);</span><br><span class="line">      <span class="attribute">box-shadow</span>: <span class="number">3px</span> <span class="number">4px</span> <span class="number">5px</span> <span class="number">1px</span> <span class="number">#757575</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20200319/tag_hover.gif" alt="成果展示"></p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>這是接觸 <strong>Hexo</strong> 的第二個主題 <strong>NexT</strong>，其實最一開始是使用 <strong><a href="https://jerryc.me/">hexo-theme-archer</a></strong> 這個主題，我想第一次用 <strong>Hexo</strong> 都會想找炫一點的主題，但是有些比較算獨立維護的，可能功能上就沒有那麼齊全，像是很多設定，在 <strong>NexT</strong> 的 <strong>_config.yml</strong> 裡面就有了，你只需要改成 <strong>true</strong> 其實就能用了，但是比較冷門的主題或是沒有那麼多人維護的主題就必須要自己建立檔案，或是東加西加，這也是為什麼後來我選用 <strong>NexT</strong>。 的原因。</p>
<p>因為之前換過主題中間也加了一些東西導致 <strong>Hexo</strong> 爆開(<strong>真心建議新手不要亂動文件 也記得勤於備份</strong>)，所以重新用了三四次，所以寫篇文章把一些功能記下來，希望日後能快速找到方法不用再到處去爬文了，也希望這篇文章能幫助到您，之後也會不定時的加一些筆記進來。</p>
<h3 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h3><ul>
<li><a href="https://hexo.io/zh-tw/">Hexo 官網文件</a></li>
<li><a href="https://theme-next.org/">NexT 主題 Blog</a></li>
<li><a href="http://tholman.com/github-corners/">GitHub Corners</a></li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>Life</tag>
        <tag>Note</tag>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>[Tool Note] — 關於Webpack #2 - Babel？</title>
    <url>/2020/03/21/20200321/</url>
    <content><![CDATA[<p><img src="/images/others/loading.gif" data-original="/images/20200321/babel_logo.png" alt="Webpack又來啦！"></p>
<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>最近這陣子剛好公司新的專案必須從頭開始，終於前後端分離，之前都是依附在 <strong>Laravel</strong> 底下，新專案是用 <strong>Vue Cli3</strong> 寫的，最近老闆猛然一提，才思考到舊手機支援問題，當下心整個懸在空中，糊塗的自己只顧著因為第一次自己從頭開始一個前端專案很興奮的心情，竟然忘了顧及支援度的問題，所以在今天上班時趕緊研究 <a href="https://babeljs.io/docs/en/babel-polyfill">babel&#x2F;polyfill</a> ，研究時 <strong>Vue Cli3</strong> 爆出一些警告訊息(內容就先不討論了)，這時候想到了前陣子摸過的 <strong>Webpack</strong>。</p>
<p>相較於這次的專案，之前許多頁面都是單純<del>SPA</del>一頁式的網頁 ( <strong>HTML CSS JavaScript</strong> )，而且只有在手機上跑，不會到萬惡的 <strong>Bug Maker IE</strong> 跑，所以基本上不是非常舊的東西還是都支援。但最後還是碰到了有手機不能跑的問題，其實會發現這種不能跑的情況是從一個拿 <strong>Iphone6 IOS9</strong> 的同事身上開始…</p>
<span id="more"></span>

<blockquote>
<p>溫馨提醒：強烈建議還沒看過 關於Webpack #1 的同學們去看看<a href="https://rexhung0302.github.io/2019/06/18/20190618/">[Tool Notes] — 關於Webpack #1 - 第一次就上手</a></p>
</blockquote>
<p>因為發生了這種狀況，所以 <strong>JavaScript</strong> 能不用 (註1)<strong>ES6</strong> 就盡量避免，但其實在那時候就決定要再回來用 <strong>Webpack</strong> 了，無奈最近時程真的是被壓縮壓縮超級壓縮呀…(苦笑</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200321/six_logo.png" alt="基礎打得穩 切版沒煩惱"></p>
<p>近期六角開了一堂特別的線上直播課程，<a href="https://www.hexschool.com/courses/web-layout-training-1st.html">網頁切版直播班</a>，因為覺得自己基本功不是很穩，近期切版時程太趕，希望自己能快速且精準又能寫出乾淨程式碼的情況下，就報名了，哎…<strong>出來寫前端，總是要還的，而且是別人說的倍數成長呀</strong>。</p>
<p>因為課程開始前有新手任務，剛好要切一個版，就打算拿那個版面來練習，不過這篇文章不會介紹怎麼切，而是要先介紹怎麼編譯 <strong>ES6 &#x3D;&gt; ES5</strong> ，因為目前 <strong>ES5</strong> 的支援度還是比 <strong>ES6</strong> 高。</p>
<blockquote>
<p>謎之音：如果 ES5 也不支援怎麼辦呢？</p>
<p>答：解決有 ES 看不到問題的人就@&amp;^<em>$&amp;)(#</em>@)…</p>
</blockquote>
<blockquote>
<p><em>註1:  <strong>ES</strong> 為 <strong>ECMAScript</strong>，他制定了瀏覽器腳本語言的標準，而 <strong>JavaScript</strong> 算是 <strong>ECMAScript</strong> 最著名的實現。<a href="https://ithelp.ithome.com.tw/articles/10209809">詳情請點我</a></em></p>
</blockquote>
<hr>
<h3 id="單刀直入"><a href="#單刀直入" class="headerlink" title="單刀直入"></a>單刀直入</h3><p>廢話說了很多，這邊我們繼續說！這篇主要會提到 <strong>Babel</strong>，這就是前言提到的，新的 <strong>ES6</strong> 如果舊手機舊瀏覽器吃不到怎麼辦？那你就必須透過加工廠(<strong>Babel</strong>)加工把東西弄的適合<del>過時</del>的東西吃。</p>
<p>這邊假設 <strong>if</strong> ( 您已經看過 <a href="https://rexhung0302.github.io/2019/06/18/20190618/">[Tool Notes] — 關於Webpack #1 - 第一次就上手</a> ) <strong>else if</strong> ( 或已經具備基本的 <strong>Webpack</strong> 概念 ) ，<strong>else</strong> ( 請看看就好尊重友善包容手下留情感激不盡，這邊就不在介紹如何初始化一個 <strong>Webpack</strong> 專案 ) 。</p>
<p>上一篇提過 <strong>module</strong> 及 <strong>plugins</strong> 在 <strong>webpack.config.js</strong> 裡的差別，前者是專們放 <strong>xxx-loader</strong> 的，後者顧名思義是專們放 <strong>plugins</strong>，沒錯，今天的主角 <strong>Babel</strong> 是要放在 <strong>module</strong> 裡的，有點像我們使用 <strong>pug</strong> 或是 <strong>scss</strong> 的預處理器，靠 <strong>loader</strong> 幫我們編譯成網頁看得懂的語言。</p>
<hr>
<h3 id="巴別塔？"><a href="#巴別塔？" class="headerlink" title="巴別塔？"></a>巴別塔？</h3><p>首先在 <a href="https://babeljs.io/docs/en/">官方網站</a> 會看見其實 Babel 底下還有很多 Plugins，我們需要幾項東西。</p>
<ol>
<li><p><strong>babel-loader</strong>       &#x3D;&gt; 最基本的橋樑, 透過它來讀取在 <strong>Webpack</strong> 上 <strong>ES6</strong> 的語言</p>
</li>
<li><p><strong>@babel&#x2F;core</strong>       &#x3D;&gt; 最多人的疑惑，他說穿了就是幫你把你文件的字串透過 <strong>transform</strong> 方法轉為新的字符串，再返回給你，所以編譯時只帶入 <strong>babel-loader</strong> 及 <strong>@babel&#x2F;core</strong> 你會發現編譯過後東西原封不動地吐給你</p>
</li>
<li><p><strong>@babel&#x2F;preset-env</strong>  &#x3D;&gt; <strong>Babel</strong> 怎麼編譯呢？在  <strong>Webpack</strong> 的 <strong>Loader</strong> 裡面其實也有自己專屬的 <strong>Plugins</strong>，透過這個 <strong>Plugin</strong> 就能編譯</p>
</li>
</ol>
<hr>
<h3 id="開動了"><a href="#開動了" class="headerlink" title="開動了"></a>開動了</h3><p>首先我們拿上次的範例繼續做，需要的可以 <a href="https://github.com/RexHung0302/WebpackPractice">這邊</a> 下載，建立好之後我們需要安裝 Babel，輸入下面程式碼安裝：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install babel-loader @babel/core @babel/preset-env --save-dev</span><br></pre></td></tr></table></figure>

<blockquote>
<p><em>再次複習 &#x3D;&gt; <strong>–save</strong> 和 <strong>–save-dev</strong> 都是將模塊安裝到項目目錄下，差別在前者是在 dependencies 寫入依賴，後者是在 <strong>devDependencies</strong> 寫入依賴。 寫入 <strong>dependencies</strong> 內的套件是您打包後在發布環境下還會用到的套件，而 <strong>devDependencies</strong> 則是開發環境下會用到的套件。</em></p>
</blockquote>
<p>隨後到 <strong>Webpack.config.js</strong> 內在 <strong>module</strong> 裡新增 <code>test: /\.(js)$/</code> 幾行程式碼：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>, <span class="comment">// 這個會後執行</span></span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span> <span class="comment">// 這個會先執行</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//- ...略</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//- ...略</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//- 新增這幾行</span></span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.(js)$/</span>,</span><br><span class="line">      <span class="attr">exclude</span>: <span class="regexp">/(node_modules)/</span>,</span><br><span class="line">      <span class="attr">use</span>: &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>接著之後到 <code>/src/js/index.js</code> 裡面輸入下面程式碼：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//- ES6 Example</span></span><br><span class="line"><span class="keyword">const</span> habit = [<span class="string">&quot;Write Code&quot;</span>, <span class="string">&quot;Watch Udemy&quot;</span>, <span class="string">&quot;DeBug&quot;</span>, <span class="string">&quot;Sleep&quot;</span>];</span><br><span class="line"></span><br><span class="line">habit.<span class="title function_">forEach</span>(</span><br><span class="line">  <span class="function">(<span class="params">item, index</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">`<span class="subst">$&#123;index&#125;</span> =&gt; <span class="subst">$&#123;item&#125;</span>`</span> )</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20200321/example_code.png" alt="範例程式碼"></p>
<p>這邊使用了 ES6 常見的幾個語法，包含 const、字串模板、箭頭函式…等等，有興趣可以詳見 <a href="https://es6.ruanyifeng.com/">ES6 武功秘籍大全</a>，語法糖真的香！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200321/good.gif" alt="真甜真好吃"></p>
<p>隨後輸入下面程式碼編譯：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm run build:dev 或 npm run build</span><br></pre></td></tr></table></figure>

<p>接著打開 <code>dist/index.html</code> 成功的話會在 <strong>console.log</strong> 裡看見下面這張圖：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200321/success_console.png" alt="勝利的果實"></p>
<p>你會好奇真的編譯成功了嗎？可以打開 <code>dist/main.bundle.js(或你編譯的檔案名稱)</code>，發現最下面有已經編譯好的程式碼：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200321/finishImg.png" alt="請忽略箭頭"></p>
<p>仔細瞧瞧原本的 <strong>Const</strong> 已經替換成 <strong>var</strong>， 原本的 “<strong>&#x3D;&gt;</strong>“ 箭頭函式也被編譯為 <strong>function</strong> 也有多了 <strong>return</strong>，真的是很貼心！</p>
<blockquote>
<p>P.S: <strong>那個箭頭並非 ES6 的箭頭函式哦！</strong></p>
</blockquote>
<hr>
<h3 id="然後呢？"><a href="#然後呢？" class="headerlink" title="然後呢？"></a>然後呢？</h3><p>然後就完成了，就這麼簡單！其實 <strong>Babel</strong> 幫我們做了很多事情，自己也並非真的深入地摸索過，但至少看到 <strong>ES6</strong> 能成功的編譯成 <strong>ES5</strong> 讓我安心不少。</p>
<p>如果你想瞧瞧到底有沒有編譯成功，可以試著把 <strong>babel-loader</strong> 下一行的 <strong>options</strong> 內容註解掉，再跑一次編譯，然後再打開編譯後的 <strong>JS</strong> 檔案，你會發現內容真的沒有編譯過：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200321/notCompiler.png" alt="並沒有成功編譯"></p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>這次並沒有做太深入的研究，時間上其實也挺有限的，不過說實在的，有編譯過真的讓人放心不少，而且 <strong>Webpack</strong> 真的可以把容量壓縮在最小卻能發揮最大效能這點，真的是推薦每一位前端真的都要玩玩看，期待之後還有繼續摸 <strong>Webpack</strong> 還會繼續 <strong>#3</strong>。</p>
<p>接下來四月要為期八週的切版訓練，希望自己能練得更扎實，這邊推薦給可能在貧頸或是迷途的你，不管你是不是正在寫程式，我想找到你有興趣且會讓你有成就感的目標，是讓你過得快樂且會成長的有效方法之一！</p>
<p>最後這邊會再上傳一份更新過的 <strong>Webpack</strong> 到之前的 <strong>GitHub</strong> 上，有興趣的可以抓下來玩玩，也歡迎各路 <strong>Webpack</strong> 高手中手低手 或 有興趣的人一起來交流，但記得<strong>友善尊重包容</strong>，謝謝～</p>
<blockquote>
<p><strong>範例傳送門 &#x3D;&gt; <a href="https://github.com/RexHung0302/WebpackPractice">點我</a></strong></p>
</blockquote>
<blockquote>
<p><em><strong>2020&#x2F;04&#x2F;12 後更： 上傳了新版的 Webpack 程式碼，內容包含 Vue 打包，請至<a href="https://github.com/RexHung0302/WebpackPractice2.0">此處</a>觀看。</strong></em></p>
</blockquote>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li>Babel 官網 — <a href="https://babeljs.io/docs/en/">Babel</a></li>
<li>ES6 寶典 — <a href="https://es6.ruanyifeng.com/">ESMAScript 6 入門</a></li>
<li>Mike 大大 — <a href="https://medium.com/i-am-mike/webpack%E6%95%99%E5%AD%B8-%E5%9B%9B-javascript-%E8%88%87-babel-1d7acd911e63">Webpack教學 (四)：JavaScript 與 Babel</a></li>
<li>Rex — <a href="https://rexhung0302.github.io/2019/06/18/20190618/">[Tool Notes] — 關於Webpack #1 - 第一次就上手</a></li>
<li>Chris 技術筆記 — <a href="https://dwatow.github.io/2018/03-08-babel-cli/">Babel 第一次接觸</a></li>
<li>小蘑菇小哥 — <a href="https://zhuanlan.zhihu.com/p/43249121">一口（很长的）气了解 babel</a></li>
<li><del>在線梗圖</del> — <a href="https://sorry.xuty.tk/wangjingze/">愿你出走半生，归来仍是少年</a></li>
</ul>
<hr>
<h3 id="題外話"><a href="#題外話" class="headerlink" title="題外話"></a>題外話</h3><p>最近安裝 <strong>npm</strong> 套件突然一直出現下列錯誤：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">No receipt for &#x27;com.apple.pkg.CLTools_Executables&#x27; found at &#x27;/&#x27;.</span><br><span class="line"></span><br><span class="line">No receipt for &#x27;com.apple.pkg.DeveloperToolsCLILeo&#x27; found at &#x27;/&#x27;.</span><br><span class="line"></span><br><span class="line">No receipt for &#x27;com.apple.pkg.DeveloperToolsCLI&#x27; found at &#x27;/&#x27;.</span><br><span class="line"></span><br><span class="line">gyp: No Xcode or CLT version detected!</span><br></pre></td></tr></table></figure>

<p>上網爬<a href="https://juejin.im/post/5e3cc3fce51d45270c276f7f">相關文章</a>過後都說要輸入下面兩行指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo rm -rf $(xcode-select -print-path)</span><br><span class="line">$ xcode-select --install</span><br></pre></td></tr></table></figure>

<p>但是好像沒有用，20點跪求大神解答…</p>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>Webpack</category>
        <category>Babel</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>[CSS Note] - 第一次 Flex 就上手</title>
    <url>/2020/03/23/20200323/</url>
    <content><![CDATA[<p><img src="/images/others/loading.gif" data-original="/images/20200323/grid&flex.png" alt="網頁佈局"></p>
<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>相信只要接觸切版的人，都聽過現代人都已經在使用 <strong>Flexbox</strong> 排版了，如果還在用 <strong>Float</strong> 不如學著用 <strong>Flexbox</strong>，排版會輕鬆很多。</p>
<p>如果你已經試著想要著手暸解 <strong>Flexbox</strong> 不妨參考看看接下來的文章，也許沒辦法讓你變成 <strong>Flexbox</strong> 神手，但或許你能找到一根還能用的釣竿…</p>
<span id="more"></span>

<blockquote>
<p>首先還是要提醒，<strong>Flexbox</strong> 適用於較小區塊的排版，如果是較大的區塊，比如 <strong>Header、Sidebar、Content、Footer</strong> 這樣的排版，還是建議使用 <strong>Grid</strong> 來做排版。</p>
</blockquote>
<h3 id="Flexbox-的歷史-及-為什麼要學？"><a href="#Flexbox-的歷史-及-為什麼要學？" class="headerlink" title="Flexbox 的歷史 及 為什麼要學？"></a>Flexbox 的歷史 及 為什麼要學？</h3><p>俗話說 『<strong>飯在吃，也要知道飯哪裡來的</strong>』；<strong>Flexbox</strong> 從 <strong>2009</strong> 年開始，但剛開始瀏覽器支援度其實沒有很高，一直到 <strong>2015、2016</strong> 開始趨於穩定，到現在幾乎是所有瀏覽器都已經支援了，基於下面四點我非常推薦切版人一定要好好學習：</p>
<ol>
<li><p><strong>排版簡單</strong></p>
</li>
<li><p><strong>排版快速</strong></p>
</li>
<li><p><strong>易上手</strong></p>
</li>
<li><p><strong>裝置支援度高</strong></p>
</li>
</ol>
<p><img src="/images/others/loading.gif" data-original="/images/20200323/flex_support.png" alt="看來還是只有IE不乖 但算合格了"></p>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p>一直想寫一篇關於 <strong>Flexbox</strong> 的文章，碰巧最近六角學院的課程剛好會使用 <strong>Flex</strong>，而且課前任務就是要完成 <strong>Flex</strong> 課程的兩項排版，趁著這次把該記得筆記記下來，就跟著我一起開心學 <strong>Flex</strong> 吧！</p>
<ol>
<li><p><strong>基礎認識</strong></p>
</li>
<li><p><strong>屬性介紹</strong></p>
</li>
<li><p><strong>實作練習</strong></p>
</li>
</ol>
<hr>
<h2 id="基礎認識"><a href="#基礎認識" class="headerlink" title="基礎認識"></a>基礎認識</h2><p>幾乎每篇 <strong>Flexbox</strong> 文章都說到必須先認識一個基礎概念， <strong>Flexbox</strong> 可以主要分為兩大類：</p>
<ol>
<li><p><strong>Flex container (容器)</strong></p>
</li>
<li><p><strong>Flex item (子項目)</strong></p>
</li>
</ol>
<p><img src="/images/others/loading.gif" data-original="/images/20200323/flex-container&item.png" alt="看圖最容易懂"></p>
<p>想要將一個元素設定為 <strong>Flex container</strong> 其實很簡單，在元素上加入 <code>display: flex</code> 或 <code>display: inline-flex</code> 即可。兩個差別類似 <code>display: block</code> 及 <code>display: inline-block</code> 的差別，下面有詳細介紹。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span>    //- =&gt; 外容器</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  //- =&gt; 子項目</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  //- =&gt; 子項目</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  //- =&gt; 子項目</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="題外話-block-及-inline-block"><a href="#題外話-block-及-inline-block" class="headerlink" title="題外話 block 及 inline-block"></a>題外話 block 及 inline-block</h3><p>如果這邊您已經瞭解了，可以跳過。</p>
<p>相信很多人跟我一樣，剛開始切版其實不管 <strong>block</strong> 或 <strong>inline-block</strong>，反正能用就用，不過有時候強迫症一來，還是會想要釐清差別到底是什麼。</p>
<p><strong>block</strong> 及 <strong>inline-block</strong> 簡單的兩個記法為前者是 <strong>block(區塊元素)</strong> 後者則是 <strong>inline-block(區塊及行內元素)</strong>。</p>
<table>
<thead>
<tr>
<th></th>
<th>block(區塊元素)</th>
<th>inline(行內元素)</th>
<th>inline-block(區塊及行內元素)</th>
</tr>
</thead>
<tbody><tr>
<td>特性</td>
<td>會將整個容器空間擠滿，不在這裡面的就會換行</td>
<td>會與文字等等段落擠在同一行，不會強行將空間佔滿</td>
<td>同時具有 inline 同行的特性，又能維持 block 的特性</td>
</tr>
</tbody></table>
<p>這邊你可能會好奇，那 <strong>inline</strong> 及 <strong>inline-block</strong> 又有什麼差別呢？</p>
<p>其實你只需要記得一個大方向，<strong>block</strong> 前後會換行，會站滿父元素的整個寬度，<strong>inline</strong> 及 <strong>inline-block</strong> 前後不會換行，可以一個擠一個，前者可以設定左右的 <strong>margin、padding</strong>，後者上下左右都能設定 <strong>margin、padding</strong>。</p>
<blockquote>
<p>詳細介紹可以看這邊：<a href="https://zh-tw.learnlayout.com/inline-block.html">學習CSS版面配置</a></p>
</blockquote>
<blockquote>
<p>block(區塊元素) 及 inline(行內元素) 的分類可以看這邊：<a href="https://injerry.pixnet.net/blog/post/38847454">[CSS教學] - CSS基礎您不能不知道的block(塊元素)、inline(內聯元素)差別</a></p>
</blockquote>
<hr>
<h2 id="屬性介紹"><a href="#屬性介紹" class="headerlink" title="屬性介紹"></a>屬性介紹</h2><h3 id="Flex-container-容器"><a href="#Flex-container-容器" class="headerlink" title="Flex container (容器)"></a>Flex container (容器)</h3><p>想學好 <strong>Flexbox</strong> 就必須要先知道兩條線，分別為 <strong>主軸(main axis)</strong>  及 <strong>交叉軸(cross axis)</strong>，但就我個人而言比較喜好用 <strong>主軸</strong> 及 <strong>副軸</strong> 來記，依個人好記為主。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200323/axis-example.png" alt="Flexbox 的關鍵"></p>
<p>上方我們有提到 <strong>inline</strong> 及 <strong>inline-block</strong> 一般我們見到的情境大概就是長這樣：</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="[Flexbox] - Block Example" src="https://codepen.io/rexhung0302/embed/ZEGMdQG?height=265&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/ZEGMdQG'>[Flexbox] - Block Example</a> by ZeHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<p>而我們通常會在外層的 <strong>Flex container (容器)</strong> 加入 <strong>display: flex;</strong>，這時候你會發現似乎容器自動幫我們變成 <strong>inline-block</strong> 的感覺。</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="[Flexbox] - Flex Example" src="https://codepen.io/rexhung0302/embed/QWbVXEX?height=265&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/QWbVXEX'>[Flexbox] - Flex Example</a> by ZeHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<p>你已經踏出第一步了，接下來這邊會介紹幾個 <strong>Flex container (容器)</strong> 的屬性介紹。</p>
<h4 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h4><p>這一屬性決定 <strong>主軸(main axis)</strong> 的方向，進而會影響到 <strong>Flex item (子項目)</strong> 的排列， <strong>flex-direction</strong> 預設為 <strong>row</strong>，就是由左到右，如果想要上下就改為 <code>flex-direction: column</code>，另外如果需要反轉在後面加上 <strong>-reverse</strong> 即可。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果是 <code>flex-direction: row</code>，主軸就是左到右：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200323/flex-direction-show.png" alt="主軸為左到右"></p>
<p>如果是 <code>flex-direction: column</code>，主軸就是上到下：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200323/flex-direction-show-2.png" alt="主軸為上到下"></p>
<h4 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h4><p>這個屬性可以決定要不要讓所有元素擠在同一行， <strong>flex-wrap</strong> 預設是所有擠在同一行，但是 <strong>flexbox</strong> 會自己分配空間。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<iframe height="265" style="width: 100%;" scrolling="no" title="[Flexbox] - Flex Wrap Example" src="https://codepen.io/rexhung0302/embed/WNvgqZV?height=265&theme-id=dark&default-tab=html,result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/WNvgqZV'>[Flexbox] - Flex Wrap Example</a> by ZeHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<h4 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h4><p>這個屬性可以說是 <strong>flex-direction</strong> 及 <strong>flex-wrap</strong> 的融合，簡單說就是可以一行搞定兩個屬性。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">flex-flow</span>: <span class="built_in">flex-direction</span>(預設為row) || <span class="built_in">flex-wrap</span>(預設為nowrap)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h4><p>這邊開始可以說是 <strong>flexbox</strong> 的地基了，你決定地基怎麼蓋，最終的成果就會蓋出怎麼樣的房子。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20200323/justify-content-show.png" alt="注意主軸方向"></p>
<p>另外還有 <strong>space-between</strong> 及 <strong>space-around</strong> 兩屬性，前者會將空白平均分配到所有 <strong>Flex item</strong> 之間，第一個 <strong>item</strong> 靠在最左邊*，最後一個 <strong>item</strong> 靠在最右邊，後者將平均分配空間到所有的 <strong>Flex item</strong> 周圍，但你會發現似乎中間的間距比較大，原因在於中間的間隔方式不同，中間的間隔是左邊 <strong>item</strong> 的右間隔加上右邊 <strong>item</strong> 的左間隔。</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="[Flexbox] - Flex justify-content Example" src="https://codepen.io/rexhung0302/embed/MWwqMzb?height=265&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/MWwqMzb'>[Flexbox] - Flex justify-content Example</a> by ZeHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<h4 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h4><p>主軸講過了接著就換交錯軸了，這個屬性基本上和 <strong>justify-content</strong> 只是他是跑在交錯軸上，如果今天 <strong>flex-direction</strong> 是 <strong>row</strong> 代表主軸由左到右，交錯軸由上到下，但是如果 <strong>flex-direction</strong> 是 <strong>column</strong> 代表主軸由上到下，交錯軸由左到右，除非交錯軸也被更換了方向。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h4><p>此一屬性相當於 <strong>justify-content</strong> 與 <strong>align-items</strong> 的合體，但是 <strong>主軸(main axis)</strong> 沒有換行時，此屬性不會作用，其實這個屬性我是很少用到。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Flex-item-子項目"><a href="#Flex-item-子項目" class="headerlink" title="Flex item (子項目)"></a>Flex item (子項目)</h3><p>上面講了一串終於要說子項目了，這邊要記得一個觀念，以下面程式碼的例子來看，<strong>float、clear</strong> 和 <strong>vertical-align</strong> 對 <strong>Flex item(子項目)</strong> 不會有影響，有影響的是 <strong>box</strong> 下面那層開始。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box_1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box_2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box_3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="order"><a href="#order" class="headerlink" title="order"></a>order</h4><p>這個屬性可以控制元素的排列順序，數字越小，得以放越前面，這是個很方便很簡單的不需要透過修改  <strong>HTML</strong> 就能改變順序的 <strong>CSS</strong>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-item</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: <span class="string">&#x27;number&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以下面的例子來說，原本順序應該為 <strong>紅黃綠</strong>，但是賦予了黃色 <code>order:1</code> 的屬性，在三個之中是最小的，所以會被放到主軸開頭去。</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="[Flexbox] - Flex order Example" src="https://codepen.io/rexhung0302/embed/jOPvgPM?height=265&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/jOPvgPM'>[Flexbox] - Flex order Example</a> by ZeHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<h4 id="flex-grow-及-flex-shrink"><a href="#flex-grow-及-flex-shrink" class="headerlink" title="flex-grow 及 flex-shrink"></a>flex-grow 及 flex-shrink</h4><p>這個元素設定了每一個 <strong>flex-item</strong> 在需要時自動佔滿父元素的程度，如果 <strong>flex-item</strong> 都是設定<strong>1</strong> ，那便會等值分配，如果其中一個設定為 <strong>2</strong>，那他將會是其他元素分配比例的 <strong>兩倍大</strong>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-item</span> &#123;</span><br><span class="line">  <span class="comment">/* 預設為 0 */</span></span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="string">&#x27;number&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而 flex-shrink 則是相反</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-item</span> &#123;</span><br><span class="line">  <span class="comment">/* 預設為 1 */</span></span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="string">&#x27;number&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h4><p>這個可以想像為 <strong>min-width</strong>，但是他的權重大於 <strong>min-width</strong>，如果需要伸縮時，將會比照 <strong>flex-grow</strong> 或 <strong>flex-shrink</strong> 的設定來伸縮。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-item</span> &#123;</span><br><span class="line">  <span class="comment">/* 預設為 auto */</span></span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="string">&#x27;length&#x27;</span> | auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h4><p>此屬性為 <strong>flex-grow</strong>、<strong>flex-shrink</strong> 和 <strong>flex-basis</strong> 的縮寫，第二及第三個參數可以不寫，預設為 <code>0 1 auto</code>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-item</span> &#123;</span><br><span class="line">  <span class="comment">/* 預設為 auto */</span></span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="string">&#x27;length&#x27;</span> | auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通常建議使用此屬性來設定，盡量避免單獨使用 <strong>flex-grow</strong>、<strong>flex-shrink</strong> 和 <strong>flex-basis</strong> 三個屬性來設定 <strong>flex-item</strong> 的寬高。</p>
</blockquote>
<h4 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h4><p>此值可以將 flex-item 的 <strong>align-items</strong> 屬性覆蓋過去，使用更為彈性的設定。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="實作練習"><a href="#實作練習" class="headerlink" title="實作練習"></a>實作練習</h2><p>這邊會提供一份六角學院的 <strong>Flex</strong> 練習到 <strong><a href="https://github.com/RexHung0302/Hexschool-Flex-Practice">Github</a></strong> 有興趣的同學也可以下載下來練習看看，裡面有10個練習題，也會有我的實作成果，十個練習題如下：</p>
<ol>
<li><p><strong><a href="https://rexhung0302.github.io/Hexschool-Flex-Practice/1/1.html">並排卡片</a></strong></p>
</li>
<li><p><strong><a href="https://rexhung0302.github.io/Hexschool-Flex-Practice/2/2.html">雙欄排版</a></strong></p>
</li>
<li><p><strong><a href="https://rexhung0302.github.io/Hexschool-Flex-Practice/3/3.html">雙欄選單設計</a></strong></p>
</li>
<li><p><strong><a href="https://rexhung0302.github.io/Hexschool-Flex-Practice/4/4.html">表頭表尾設計</a></strong></p>
</li>
<li><p><strong><a href="https://rexhung0302.github.io/Hexschool-Flex-Practice/5/5.html">常見三種排版</a></strong></p>
</li>
<li><p><strong><a href="https://rexhung0302.github.io/Hexschool-Flex-Practice/6/6.html">圖文並排</a></strong></p>
</li>
<li><p><strong><a href="https://rexhung0302.github.io/Hexschool-Flex-Practice/7/7.html">首頁橫幅排版</a></strong></p>
</li>
<li><p><strong><a href="https://rexhung0302.github.io/Hexschool-Flex-Practice/8/8.html">圖文並排設計</a></strong></p>
</li>
<li><p><strong><a href="https://rexhung0302.github.io/Hexschool-Flex-Practice/9/9.html">訂單明細</a></strong></p>
</li>
<li><p><strong><a href="https://rexhung0302.github.io/Hexschool-Flex-Practice/10/10.html">產品列表</a></strong></p>
</li>
</ol>
<p>不得不說這十個題目真的是非常非常非常常遇到，推薦一定要練習看看，也不得不讚嘆 <strong>Flex</strong> 的方便呀，想如今置中多麽容易(雖然我剛接觸前端就有 <strong>Flex</strong> 了)，真是多幸福的年代(笑</p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>這次報名了六角的切版直播課程，課程前有幾個任務，其中之一就是 Flex，當初其實還很猶豫要不要報名，但是基於最近案子真的是超級趕，權衡之下還是覺得雖然沒什麼時間，但還是想練習好自己的切版功力，以應付今天PM要你先照感覺切，明天就跟你說要改，後天就要驗收的情況…希望這次八週的課程可以撐過去Ｑ</p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><a href="https://rhadow.github.io/2015/02/26/learnFlexbox/">學習 Flexbox 版面配置</a></li>
<li><a href="https://cythilya.github.io/2017/04/04/flexbox-basics/">圖解 Flexbox 基本屬性</a></li>
<li><a href="https://wcc723.github.io/css/2017/07/21/css-flex/">圖解：CSS Flex 屬性一點也不難</a></li>
<li><a href="https://github.com/RexHung0302/Hexschool-Flex-Practice">Hexschool-Flex-Practice GitHub</a></li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>CSS</category>
        <category>Flex</category>
        <category>Flexbox</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hexschool Web Layout Training] — Week_3 伸縮自如的 RWD 手機網頁排版術</title>
    <url>/2020/04/29/20200429/</url>
    <content><![CDATA[<p><img src="/images/others/loading.gif" data-original="/images/20200429/week_3_classLogo.png" alt="第三週的練習"></p>
<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>終於來到這次上課一直想好好學好的地方了，沒錯，就是 <strong>RWD</strong>，如何搭配 <strong>Flex</strong> 切出完美的 <strong>RWD</strong>，製造出完美的 <strong>UI&#x2F;UX</strong> 體驗就是本週要上的課了！</p>
<span id="more"></span>

<p>是說本週個人作業突然大耀進，感覺大家都卡住了Q，這次自己的作業也還有很多瑕疵的地方，但在工作與練習之中取得最大的平衡了，修到剩<del>一些</del>小問題 ( 自己說HaHa</p>
<p>剩下的就有望助教及校長指導了…Orz</p>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><blockquote>
<p>*本篇文章將會以三個角度來紀錄， <strong>課程心得(上課後的心得整理)</strong>、<strong>練習心得(做完作業後的心得整理))</strong> 及 <strong>小組任務(每週會有一項小組任務，寫完後的心得)</strong>。*</p>
</blockquote>
<p>每週的練習挑戰和地下城有點像，都有自己必須練習到的地方；本週需要練習的目標有至少兩點以上的<a href="https://hackmd.io/@YmcMgo-NSKOqgTGAjl_5tg/HJpJk8ABU/%2FiE6mxohOS-ujKU398Ewk1w">練習菜單</a>，及額外的一項打字練習。</p>
<ol>
<li><p><strong>熟悉三個編輯器熱鍵</strong></p>
</li>
<li><p>大推真的加快寫 <strong>Code</strong> 速度很多 -&gt; <strong>幾乎全程使用 <a href="https://docs.emmet.io/cheat-sheet/">emmet</a> 開發</strong></p>
</li>
<li><p><strong><a href="http://keybr.com/">英打速度</a></strong> 練習</p>
</li>
</ol>
<h4 id="關卡目標"><a href="#關卡目標" class="headerlink" title="關卡目標"></a>關卡目標</h4><ol>
<li><p>RWD 響應式設計原理</p>
</li>
<li><p>CSS Media Queries 語法運用</p>
</li>
</ol>
<hr>
<h3 id="課程心得"><a href="#課程心得" class="headerlink" title="課程心得"></a>課程心得</h3><p>本週 <strong>RWD</strong> 終於開跑，點開本週作業範例就呆在原地幾分鐘過去了，難度突然是 <strong>UpUpUp</strong> 往上跑，本週也有一些 <strong>Hover</strong> 及使用 <strong>JavaScript</strong> 的地方，還好還算應付的來。</p>
<p>本週主要使用的 <strong>CSS</strong> 語法主要也是 <code>display: flex;</code>！</p>
<h4 id="RWD-起手式"><a href="#RWD-起手式" class="headerlink" title="RWD 起手式"></a>RWD 起手式</h4><p>學好 <strong>RWD</strong> 有兩件重要的事情記住準沒錯，第一件事在課程開始時就先提到想做 <strong>RWD</strong> 的朋友，在你的 <strong>HTML</strong> 的 <strong>META</strong> 一定要加上一句語法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><em>校長洧杰：說要做 RWD 但沒加這行的人你就盡量笑他吧！沒加這行網頁出現 X 軸的我就把他釘到牆上！</em></p>
</blockquote>
<p>這句基本意思就是說我的<strong>寬度會自適應裝置的寬度</strong>，並且<strong>縮放比為1</strong>，記得要乖乖的加上去喔！</p>
<p>第二件事就是記住怎麼使用 <strong>CSS media Queries</strong> 語法(後面會提到)！</p>
<h4 id="寬度那些事"><a href="#寬度那些事" class="headerlink" title="寬度那些事"></a>寬度那些事</h4><p>切記開始寫 <strong>RWD</strong> 後就不要寫死寬度了，但請加上 <code>max-width</code>，視窗縮小時，加上 <code>max-width</code> 的地方會自動縮小。</p>
<p>另外百分比的算法就是除總寬，例如 <strong>1000px</strong> 的 <strong>20%</strong> 為 <strong>50px</strong>，靈活的運用百分比會讓你排版更輕鬆。</p>
<h4 id="權力重遊戲"><a href="#權力重遊戲" class="headerlink" title="權力重遊戲"></a>權<del>力</del>重遊戲</h4><p>講到 <strong>CSS</strong> 一定要來提到權重的問題，記得會接觸六角就是因為當初自己寫的 <strong>CSS</strong> 太髒被後端工程師砲轟。</p>
<p>你一定接觸過 CSS 下滿滿的 <code>!important</code> 抑或是直接在 <strong>Element</strong> 上下 <code>style=&quot;width: 200px&quot;</code> 直接就開幹的人，也會遇到用 <strong>id</strong> 當 <strong>CSS</strong> 選擇器的人(都市傳說 聽說渲染比較快)，別懷疑這些我都幹過！</p>
<p>剛開始切版連 <strong>CSS</strong> 怎麼獨立出來都不懂，後來只知道怎麼加上樣式，也不知道要怎麼給 <strong>Class</strong> 取名稱，現在就讓過來人告訴你權重那些事。</p>
<p>你一定好奇過 <strong>HTML</strong> 的 <strong>Element</strong> 上可以下 <strong>style</strong>，<strong>id</strong> 可以當選擇器，甚至有些 CSS 覆蓋不過去，下一個 <code>!important</code> 就收工。</p>
<p>那如果這些都蹦再一起呢？蹦出新滋味？錯！你會蹦出別人的一堆髒話！</p>
<p>權重其實很簡單，他們都有各自的分數，就跟先乘除後加減一樣。</p>
<p>仔細看下方的表格：</p>
<table>
<thead>
<tr>
<th></th>
<th>權重分數</th>
<th>範例</th>
</tr>
</thead>
<tbody><tr>
<td>HTML</td>
<td>1</td>
<td>p、span、div…</td>
</tr>
<tr>
<td>Class</td>
<td>10</td>
<td>.title、.container…</td>
</tr>
<tr>
<td>ID</td>
<td>100</td>
<td>#menu、#sideBar…</td>
</tr>
<tr>
<td>inline style</td>
<td>1000</td>
<td>style&#x3D;”width: 200px;”</td>
</tr>
<tr>
<td>!important</td>
<td>10000</td>
<td>width: 100px!important</td>
</tr>
</tbody></table>
<p><strong>!important &gt; inline style &gt; ID &gt; class &gt; HTML</strong></p>
<blockquote>
<p><strong>CSS</strong> 先比權重分數，相同在比順序，後者覆蓋前者。</p>
</blockquote>
<h4 id="斷點該選哪？"><a href="#斷點該選哪？" class="headerlink" title="斷點該選哪？"></a>斷點該選哪？</h4><p><strong>Media</strong> 的用法其實很簡單，有幾種方式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">375px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">not</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">375px</span>)&#123;</span><br><span class="line">  <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一種為最簡單用法，顧名思義就是最寬到 <strong>768px</strong> 顏色都是紅色，第二種為 <strong>375px</strong> 到 <strong>768px</strong> 之間顏色都是藍色，第三種為除了小於 <strong>375px</strong> 顏色都是黃色。</p>
<p>其實主要就是定好範圍或是一個值，並且用 <strong>max</strong> 或 <strong>min</strong> 來判斷。</p>
<p>這邊通常我們在切版時會定下幾個斷點，比較常用的有 <strong>767px</strong>、<strong>414px</strong>、<strong>375px</strong>…</p>
<h4 id="課堂小補充"><a href="#課堂小補充" class="headerlink" title="課堂小補充"></a>課堂小補充</h4><p>前面我們有使用 <strong>CSS</strong> 很常提到 <strong>CSS Reset</strong>，但通常我們會在自己加上兩段語法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*, *<span class="selector-pseudo">::before</span>, *<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line"> <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;<span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一個是圖片自適應寬度，另一個則是寬度多少為多少，不會瘦 <strong>padding</strong> 及 <strong>margin</strong> 影響！</p>
<hr>
<h3 id="練習心得"><a href="#練習心得" class="headerlink" title="練習心得"></a>練習心得</h3><p>本次練習持續使用 <strong><a href="https://docs.emmet.io/cheat-sheet/">emmet</a></strong> 來寫，私心推啊！真的快很多。</p>
<p>本週的個人作業有點小難度，尤其是中間的 <strong>聯名設計鏡框</strong> 區塊，搞了老半天還是卡在那邊，另外設計稿有偷偷藏陷阱，在 <strong>Banner</strong> 下方的四個 <strong>Icon</strong> 縮小時竟然對換位子了，還好<br><strong>Flex</strong> 有 <code>order: 2;</code> 可以處理。</p>
<h4 id="CSS-Animated"><a href="#CSS-Animated" class="headerlink" title="CSS Animated"></a>CSS Animated</h4><p>頁面有使用到 <strong>Hover</strong> 的功能，但如何讓 <strong>Hover</strong> 結束之後能補上之間的補間動畫呢？</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.collectionSecond</span> <span class="selector-class">.btnArea</span> <span class="selector-class">.btnArea__btn__text</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;MORE&#x27;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--primary-color);</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transition</span>: top .<span class="number">5s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上方為例子，如果想更改 <strong>Hover</strong> 時文字會往上跑，那你的 <strong>transition</strong> 後面就要加上你改的東西。假使要改 <strong>width</strong><strong>、color</strong>…等等，一樣在 <strong>transition</strong> 後面加上你要改的東西，也可以直接寫 <strong>all</strong>&gt;</p>
<h4 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h4><p>另外在漢堡鈕的部分也使用了 <strong>Javascript</strong> 來達成，這邊需要 <strong>CSS</strong> 做搭配，簡單說就是點擊漢堡鈕後替指定的 <strong>Element</strong> 加上 <strong>Class</strong>，然後再透過 <strong>CSS</strong> 去打開菜單。</p>
<p>這邊助教有寫範例可以參考：<a href="https://codepen.io/TzuHui/pen/WNQRjXd">點我</a></p>
<hr>
<h3 id="小組任務"><a href="#小組任務" class="headerlink" title="小組任務"></a>小組任務</h3><p>本週小組任務可挑兩項來做：</p>
<h4 id="任務一-看圖作範例"><a href="#任務一-看圖作範例" class="headerlink" title="任務一 - 看圖作範例"></a>任務一 - 看圖作範例</h4><p>本週老師有提供一系列的<a href="https://drive.google.com/file/d/1r8z8i3LzzEKIzDBlztkpFmuXK6EDyMx3/view">版型範例</a>，有興趣的朋友也可以載下來玩玩。</p>
<p>版型的切版也是幾乎都用到 <code>display: flex;</code>，但是有一個斷點會讓畫面變更排版，這邊是使用 <strong>768px</strong> 設為斷點，縮小時只要覆蓋掉前面的 <strong>CSS</strong> 即可。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在畫面到 <strong>768px</strong> 時後面的 <strong>CSS</strong> 會打開。</p>
</blockquote>
<h4 id="任務二-IT-邦偵探遊戲"><a href="#任務二-IT-邦偵探遊戲" class="headerlink" title="任務二 - IT 邦偵探遊戲"></a>任務二 - IT 邦偵探遊戲</h4><p>這邊會再補上心得。</p>
<h4 id="任務三-討論第三週版型該怎麼做"><a href="#任務三-討論第三週版型該怎麼做" class="headerlink" title="任務三 - 討論第三週版型該怎麼做"></a>任務三 - 討論第三週版型該怎麼做</h4><p>本週大家都卡關了，但夠過同學分享的東西總是能學到點什麼！</p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>在切得焦頭爛額之際，上去繳作業平台寫著 <strong>可只完成首頁版型，不需完成 FAQ 頁面版型，但假使想都提交也 ok</strong>，所以再趁還沒有很多人教之前先交一份給助教批改了。</p>
<p>另外最近專案時程更短了，幾乎都是一兩週內要完成一個案子的速度，希望之後還有時間能寫作業Ｑ，這次幾乎是用大半夜零碎時間做出來的，心好累…Orz。</p>
<p>希望這幾週能在這邊學到更多的切版技巧，可以加快自己的切版速度！</p>
<p>想知道 Flex 可以參考我的前幾篇文章 -&gt; <strong><a href="https://rexhung0302.github.io/2020/03/23/20200323/#more">[CSS Notes] - 第一次 Flex 就上手</a></strong></p>
<hr>
<h2 id="Demo-成果程式碼"><a href="#Demo-成果程式碼" class="headerlink" title="Demo &amp; 成果程式碼"></a>Demo &amp; 成果程式碼</h2><p>Source Code：<a href="https://github.com/RexHung0302/Hexschool-web-layout-training/tree/master/Week_3">點我</a></p>
<p>Demo：<a href="https://rexhung0302.github.io/Hexschool-web-layout-training/Week_3/index.html">點我</a></p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><p><a href="https://rexhung0302.github.io/2020/03/23/20200323/#more">[CSS Notes] - 第一次 Flex 就上手</a></p>
</li>
<li><p><a href="https://www.oxxostudio.tw/articles/201810/css-media-queries.html">CSS Media Queries 詳細介紹</a></p>
</li>
<li><p><a href="https://codepen.io/TzuHui/pen/WNQRjXd">葉子助教設計第三關漢堡選單收闔</a></p>
</li>
<li><p><a href="https://codepen.io/AliceChiang/pen/pojeJbW">穎旻助教設計第三關常見問題卡片收合</a></p>
</li>
<li><p><a href="https://codepen.io/TzuHui/pen/WNQRjXd">葉子助教設計第三關漢堡選單收闔</a></p>
</li>
<li><p><a href="https://codepen.io/saffranwang/pen/OJygpor">Saffran</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>前端</category>
        <category>Hexschool-Web-Layout-Training[六角網頁切版直播班]</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>HexSchool</tag>
        <tag>Web-Layout-Training</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hexschool Web Layout Training] — Week_1 個人履歷</title>
    <url>/2020/04/12/20200412/</url>
    <content><![CDATA[<p><img src="/images/others/loading.gif" data-original="/images/20200412/week_1_classLogo.png" alt="第一週的練習"></p>
<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>依稀記得剛開始寫前端切版都是東摸西湊的，很多東西都是靠感覺硬拚出來的，最近公司案子變趕的情況下終於意識到自己的寫 <strong>Code</strong> 速度好像有待提升，除了打錯字外，在排版上似乎也還有很多可以精進的空間，又這麼剛好，在今年的 <strong>The F2E</strong> 開始前 <strong>六角學院</strong> 就釋出了一則消息：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200412/line_class_message.png" alt="荷包君 TAT"></p>
<span id="more"></span>

<p>沒錯，工程師的限量就跟大媽瘋搶衛生紙一樣，沒多想就刷下去了，原本想等課程結束再來一篇完整的心得，但現在一個練習搭配一篇文章已經是基本了(笑</p>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><blockquote>
<p>*本篇文章將會以三個角度來紀錄， <strong>課程心得(上課後的心得整理)</strong>、<strong>練習心得(做完作業後的心得整理))</strong> 及 <strong>小組任務(每週會有一項小組任務，寫完後的心得)</strong>。*</p>
</blockquote>
<p>每週的練習挑戰和地下城有點像，都有自己必須練習到的地方；本週需要練習的目標有至少兩點以上的<a href="https://hackmd.io/@YmcMgo-NSKOqgTGAjl_5tg/HJpJk8ABU/%2FiE6mxohOS-ujKU398Ewk1w">練習菜單</a>，及額外的一項打字練習。</p>
<ol>
<li><p><strong>熟悉三個編輯器熱鍵</strong></p>
</li>
<li><p><strong>幾乎全程使用 <a href="https://docs.emmet.io/cheat-sheet/">emmet</a> 開發</strong></p>
</li>
<li><p><strong><a href="http://keybr.com/">英打速度</a></strong> 練習</p>
</li>
</ol>
<h4 id="關卡目標"><a href="#關卡目標" class="headerlink" title="關卡目標"></a>關卡目標</h4><ol>
<li><p>充分了解 box model 盒模型概念</p>
</li>
<li><p>了解 margin、padding 使用時機</p>
</li>
<li><p>inline 行內與 block 區塊元素運用</p>
</li>
<li><p>行距觀念</p>
</li>
</ol>
<hr>
<h3 id="課程心得"><a href="#課程心得" class="headerlink" title="課程心得"></a>課程心得</h3><p>課程分為八週，一堂兩小時半，本週為第一次上課，到課率在第一天是很高的，畢竟校長都親口說不來上課的人會一個一個打電話了(笑，另外也許現代許多人還是能擠出零碎的時間來上線上課程，畢竟比起實體課程事後還是有錄影可以補課的，不用搭配老師時間。</p>
<p>這次直播班就是標榜打好你的底，所以有許多同學也是從 0 開始，剛好矯正我一些不對的觀念，以前剛開始學前端切版就是亂學亂用，也沒在乎過一些定義什麼的，所以後來才又陸陸續續學了 <strong><a href="https://www.udemy.com/course/sasssecret/">Sass 實戰全攻略 - 成為前 1% 的 CSS 頂尖好手</a></strong> 及 <strong><a href="https://www.udemy.com/course/javascript-adv/">JavaScript 核心篇</a></strong>…等等來打好自己基礎。</p>
<p>這堂課介紹的項目主要如下：</p>
<h4 id="什麼元素會佔滿版？"><a href="#什麼元素會佔滿版？" class="headerlink" title="什麼元素會佔滿版？"></a>什麼元素會佔滿版？</h4><p>從前自己的觀念是任何東西我都要用 <strong>Div</strong> 包起來，有的東西也不知道為什麼自己就是 <code>width:100%</code>，因為有套用 <a href="https://bootstrap.hexschool.com/">Bootstrap</a>，所以有換行就給他用 <code>class=&quot;d-block&quot;</code> 不換行就給他 <code>class=&quot;d-inline-block&quot;</code>，上了課之後終於好好的了解了。</p>
<p>根據 <strong>W3C</strong>(註1) 的規定，元素都有一個預設的 <strong>display</strong> 值，而元素預設的屬性又是以 <strong>display: block;(區塊元素)</strong> 及 <strong>display: inline-block;(行內元素)</strong> 為主。</p>
<p><strong>display: block;(區塊元素)</strong>： </p>
<ol>
<li><p>區塊元素之後的元素都會被擠到下一行。</p>
</li>
<li><p>高度寬度都可以另外給予。</p>
</li>
<li><p>預設寬度會自適應父元素的寬度，自己為預設 <code>width:100%;</code>。</p>
</li>
</ol>
<p>有這些預設屬性的標籤如下：<code>html, address, blockquote, body, dd, div, dl, dt, fieldset, form, frame, frameset, h1, h2, h3, h4, h5, h6, noframes, ol, p, ul, center, dir, hr, menu, pre</code>。</p>
<blockquote>
<p><em>這邊需要提到，以前一直不知道，一直到六角校長及助教提醒才知道一個網頁只會有一個 <code>&lt;h1&gt;&lt;/h1&gt;</code>，這點還真的要特別注意一下。</em></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20200412/block-example-1.png" alt="自動佔滿 100%"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20200412/block-example-1.png" alt="自訂 block 寬度後還是會佔滿一行"></p>
<p><strong>display: inline-block;(行內元素)</strong>： </p>
<ol>
<li><p>會和其他的元素在同一行上，如果有多的行內元素則會一直排到排不下自動還行。</p>
</li>
<li><p>高度寬度無法另外給予。</p>
</li>
<li><p><code>margin-top, margin-bottom, padding-top, padding-bottom</code> 這四個屬性無效，但是左右是可以的 <code>margin-left, margin-right, padding-left, padding-right</code>。</p>
</li>
</ol>
<p>有這些預設屬性的標籤如下：<code>span, em, i, b, strong, a, img, br, q, bdo, sub, sup, button, textarea, input, select</code>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200412/inline-block-example-1.png" alt="一直排到排不下才會自動換行"></p>
<blockquote>
<p><em>註1: W3C為 全球資訊網協會，又稱W3C理事會，是全球資訊網的主要國際標準組織。為半自治非政府組織，詳細介紹可參考<a href="https://www.ozchamp.com/professionals-d793-n1.html">此處</a>。</em></p>
</blockquote>
<h4 id="CSS-還你漂漂拳"><a href="#CSS-還你漂漂拳" class="headerlink" title="CSS 還你漂漂拳"></a>CSS 還你漂漂拳</h4><p><strong>W3C</strong> 制定 <strong>HTML</strong> 及 <strong>CSS</strong> 時，沒有強制規定網頁需要有規定的預設樣式，簡單說就是很多瀏覽器都有自己預設的樣式，比如下面這張 <strong>chrome</strong> 的截圖：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200412/chrome-web-example.png" alt="瀏覽器壞壞"></p>
<p>這時候你可能會納悶，有時候我明明就對準了且下對了 <strong>CSS</strong>，可是怎麼跑版了？這時候你就需要用到 <strong>CSS Reset</strong> 或 <strong>CSS Normalize</strong>，這是用來重置你網頁 <strong>CSS</strong> 的 <strong>CSS</strong>(好饒舌？！)，看下面這段 <strong>CSS Reset Code</strong> 就知道了：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-tag">div</span>, <span class="selector-tag">span</span>, applet, <span class="selector-tag">object</span>, <span class="selector-tag">iframe</span>,</span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">p</span>, <span class="selector-tag">blockquote</span>, pre,</span><br><span class="line"><span class="selector-tag">a</span>, <span class="selector-tag">abbr</span>, acronym, <span class="selector-tag">address</span>, big, <span class="selector-tag">cite</span>, <span class="selector-tag">code</span>,</span><br><span class="line"><span class="selector-tag">del</span>, <span class="selector-tag">dfn</span>, <span class="selector-tag">em</span>, <span class="attribute">font</span>, <span class="selector-tag">img</span>, <span class="selector-tag">ins</span>, <span class="selector-tag">kbd</span>, <span class="selector-tag">q</span>, s, <span class="selector-tag">samp</span>,</span><br><span class="line">small, strike, <span class="selector-tag">strong</span>, sub, <span class="selector-tag">sup</span>, tt, <span class="selector-tag">var</span>,</span><br><span class="line"><span class="selector-tag">dl</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">li</span>,</span><br><span class="line"><span class="selector-tag">fieldset</span>, <span class="selector-tag">form</span>, <span class="selector-tag">label</span>, <span class="selector-tag">legend</span>,</span><br><span class="line"><span class="selector-tag">table</span>, <span class="selector-tag">caption</span>, <span class="selector-tag">tbody</span>, <span class="selector-tag">tfoot</span>, <span class="selector-tag">thead</span>, <span class="selector-tag">tr</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">outline</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">font-weight</span>: inherit;</span><br><span class="line">	<span class="attribute">font-style</span>: inherit;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="number">100%</span>;</span><br><span class="line">	<span class="attribute">font-family</span>: inherit;</span><br><span class="line">	<span class="attribute">vertical-align</span>: baseline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* remember to define focus styles! */</span></span><br><span class="line"><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">	<span class="attribute">outline</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">	<span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">	<span class="attribute">color</span>: black;</span><br><span class="line">	<span class="attribute">background</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ol</span>, <span class="selector-tag">ul</span> &#123;</span><br><span class="line">	<span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* tables still need &#x27;cellspacing=&quot;0&quot;&#x27; in the markup */</span></span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">	<span class="attribute">border-collapse</span>: separate;</span><br><span class="line">	<span class="attribute">border-spacing</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">caption</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123;</span><br><span class="line">	<span class="attribute">text-align</span>: left;</span><br><span class="line">	<span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">blockquote</span><span class="selector-pseudo">:before</span>, <span class="selector-tag">blockquote</span><span class="selector-pseudo">:after</span>,</span><br><span class="line"><span class="selector-tag">q</span><span class="selector-pseudo">:before</span>, <span class="selector-tag">q</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">blockquote</span>, <span class="selector-tag">q</span> &#123;</span><br><span class="line">	<span class="attribute">quotes</span>: <span class="string">&quot;&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>明白了吧，就是把瀏覽器預設給你的 <strong>CSS</strong> 給歸零，而你可能會納悶 <strong>CSS Normalize</strong> 是蝦咪？！在時間上 <strong>CSS Reset</strong> 是比較早出來的，但是缺點就是 <strong>CSS Reset</strong> 像是強制把所有的 <code>margin, padding, border, outline...等等</code> 都直接歸零，所以很多地方使用者必須自己重新設定，而後者提到的最主要的目標則是 <strong>保留有用的瀏覽器默認設置，不是將之刪除</strong>，所以對針對不同的瀏覽器版本進行微調整。</p>
<blockquote>
<p>這邊筆者最常使用的是 <strong><a href="https://necolas.github.io/normalize.css/">Normalize.css</a></strong>，跟框架一樣，沒有哪個最好，只有最適合自己的。</p>
</blockquote>
<h4 id="頁面排版怎麼推擠？"><a href="#頁面排版怎麼推擠？" class="headerlink" title="頁面排版怎麼推擠？"></a>頁面排版怎麼推擠？</h4><p>在以前不懂排版總是會給予 <strong>魔數高度(註2)</strong>，什麼寬高就是直接照的舒服的樣子或是設計稿直接設定，但是其實排版最不會出錯的法則就是由上而下，網頁該怎麼讓他往下排版呢？就是一個推一個，這邊建議朝同一個方向推擠即可，比如說 <code>margin-bottom: 20px; margin-bottom: 30px;</code> 這樣一路往下推，千萬不要左邊推一個，右邊推一個。</p>
<p>而這時候你可能會想說那高度怎麼算呢？這時候就要來圖解啦：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200412/height-example.png" alt="高度這樣來的"></p>
<p>剛學切版我也不曉得東西高度怎麼算，後來才知道每一個元素高度是由 <code>font-size</code> 及 <code>line-height</code> 加出來的，這樣你就知道距離下一個東西高度為多少了吧！千萬不要再讓設計師生氣了(笑</p>
<p><em>註2: 這是一種統稱，意指那些不規律的數字，比方說 <code>height: 237px;</code> 或 <code>margin-top: 164px;</code>，通常不建議給予元素這種之後回來看 Code 或是其他人接手會毫無頭緒的數字</em></p>
<h4 id="一般人不會注意到的-Img-小秘密"><a href="#一般人不會注意到的-Img-小秘密" class="headerlink" title="一般人不會注意到的 Img 小秘密"></a>一般人不會注意到的 Img 小秘密</h4><p>上面講完高度你可能開始會去注意每一個元素到底有沒有對齊，<strong>1px 也不想差</strong>，但是會意外發現 <strong>img</strong> 這個元素藏的彩蛋，你或許會納悶為什麼他的高度會多出 <strong>2px - 3px</strong> 呢？</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200412/img-more-2px-example.png" alt="什麼？"></p>
<p>以前壓根沒注意過呀，因為 <strong>Bootstrap</strong> 套進去加上 <code>img-fluid</code> 或是直接給 <code>.img:&#123;height:100&#125;</code> 都不會發現這問題，那為什麼會這樣呢？</p>
<p>因為 <strong>img</strong> 其實算是 <strong>text</strong> 的歸類，而文字分為 <code>頂線(top line), 中線(middle line), 基線(base line), 底線(bottom line)</code>，所以在文字上會多出 <strong>2px - 3px</strong> 來預留顯示會在 <strong>底線(bottom line)</strong> 上文字的尾巴，比如 <code>j</code>。</p>
<p>解決方式通常都會建議直接給予圖片 <code>display: block;</code>，佔滿整個元素寬高，或是把圖調整到 <strong>中線(middle line)</strong> 上對齊，程式碼如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.img</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 或</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.img</span> &#123;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p class="codepen" data-height="265" data-theme-id="dark" data-default-tab="html,result" data-user="rexhung0302" data-slug-hash="ZEbGWBX" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="2020春季網頁切版直播班 - 第一週範例程式碼 - Img 的小眉角">
  <span>See the Pen <a href="https://codepen.io/rexhung0302/pen/ZEbGWBX">
  2020春季網頁切版直播班 - 第一週範例程式碼 - Img 的小眉角</a> by ZeHung (<a href="https://codepen.io/rexhung0302">@rexhung0302</a>)
  on <a href="https://codepen.io">CodePen</a>.</span>
</p>
<script async src="https://static.codepen.io/assets/embed/ei.js"></script>

<blockquote>
<p>另外有人提到通常不建議使用 <code>display：block;</code> 這種寫法，因為通常項目在圖片右邊，如果這樣使用，就不能使文字緊鄰圖片排版，這時候就隨機應變囉！</p>
</blockquote>
<h4 id="額外小眉角"><a href="#額外小眉角" class="headerlink" title="額外小眉角"></a>額外小眉角</h4><ol>
<li>關於 <strong>Border</strong> 是會算進寬高的，如果不想要被算進寬高，可以使用：</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 或是自定義 Class Name 然後個別給予這個屬性</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>關於行動裝置人體手指點選最適大小為 <strong>44px</strong>，記得囉，千萬不要在使用過小的按鈕或連結，造成差勁的使用者體驗！</p>
</li>
<li><p>關於 <strong>CodePen</strong> 的小眉角，可以直接在部落格貼上片段程式碼，只要到 <strong>CodePen</strong> 上寫完程式碼後存儲下來，然後點選右下角的 <strong>Embed</strong> 會彈出樣式給你選擇，複製最下面的 <strong>Copy &amp; Paste Code</strong> 即可。</p>
</li>
</ol>
<p><img src="/images/others/loading.gif" data-original="/images/20200412/share-codepen-example-1.png" alt="點選右下角 Embed"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20200412/share-codepen-example-2.png" alt="選擇好樣式後複製下方程式碼貼上部落格"></p>
<ol start="4">
<li>關於 <strong>MarkMan 馬克曼</strong>，這是一款 <strong>高效的設計稿標註與測量工具</strong>，有時候你不知道設計師距離到底設定多少，就可以使用這款程式測量。</li>
</ol>
<p><img src="/images/others/loading.gif" data-original="/images/20200412/MarkMan-example-2.png" alt="很方便呢"></p>
<p>但是 <strong>MacOS</strong> 似乎安裝有點問題，還好同學(<strong>treeman</strong>)神通廣大，解決方法如下：</p>
<blockquote>
<p><strong>如果您安裝有遇到問題請在試著這樣做</strong></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 記得打開終端機，前方的錢字號不需要複製</span><br><span class="line"></span><br><span class="line">$ cd /Library/Frameworks</span><br><span class="line"></span><br><span class="line">$ sudo xattr -d com.apple.quarantine &quot;Adobe AIR.framework&quot;</span><br><span class="line"></span><br><span class="line">// 如果執行了第二行沒有顯示任何東西就是成功了</span><br><span class="line"></span><br><span class="line">// 接著請重新安裝</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>安裝位置及方法可以參考 <strong>六角學院文章</strong> <a href="https://ithelp.ithome.com.tw/articles/10209355">MarkMan - 高效的設計稿標註與測量工具</a>。</p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20200412/markman-example.png" alt="感謝大神同學"></p>
<hr>
<h3 id="練習心得"><a href="#練習心得" class="headerlink" title="練習心得"></a>練習心得</h3><p>這次排版練習使用了 <strong>emmet</strong> 來寫，整個流程雖然不太習慣，但是有感覺到整體速度提升了許多，我想之後還是會按照這種方式寫下去。</p>
<p>另外之前六角學院校長及助教提過 <strong>h1</strong> 一個網頁只會有一個，所以這邊也特別注意並且改善掉。</p>
<p>而在切版時有些觀念不太清楚，在爬文中偶然爬見助教 <a href="https://medium.com/@alice0050722/flex-%E4%BF%AE%E7%85%89%E6%99%82%E5%85%89%E5%B1%8B-9faf909c1405">穎旻</a> 的 <strong>Flex 修煉時光屋</strong> 作業批改心得，裡面有提到通常 <strong>ul li</strong> 不會再另外包一層 <strong>Div</strong> 了，這邊也有特別修正程式碼，但其實滿好奇如果有時候 <strong>ul</strong> 需要和其他元素綁在一起而且需要下 <strong>padding</strong> 一起置中或給獨立的背景顏色的情況下，還能不能包一個 <strong>Div</strong>，這邊還有待跟助教確認。</p>
<p>最後在切版上沒有太大的問題，覺得自己刪減掉很多不必要的 <strong>Div</strong> 了，這邊就等待校長或助教改完程式碼再進行課後檢討及修正了！</p>
<hr>
<h3 id="小組任務"><a href="#小組任務" class="headerlink" title="小組任務"></a>小組任務</h3><p>本週小組任務有五題：</p>
<h4 id="第一題-選擇題"><a href="#第一題-選擇題" class="headerlink" title="第一題 選擇題"></a>第一題 選擇題</h4><p>以下範例程式碼的 .text 高度是多少？(請不要用瀏覽器觀察)</p>
<ol>
<li>90px</li>
<li>92~93px</li>
<li>120px</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;logo.png&quot;</span> <span class="attr">height</span>=<span class="string">&quot;90&quot;</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>解：因為圖片為文字屬性，有預留 <strong>底線(bottom line)</strong>，所以會多出 <strong>2px - 3px</strong>。</p>
<h4 id="第二題"><a href="#第二題" class="headerlink" title="第二題"></a>第二題</h4><p>請問 .box 的高度是多少？(請不要用瀏覽器觀察)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>標題<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;logo.png&quot;</span> <span class="attr">height</span>=<span class="string">&quot;90&quot;</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">h1</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">36px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">24px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解：圖片不考慮多出來的 <strong>2px - 3px</strong>，因為有給予 <code>display: block;</code> 屬性，高度算法為 <strong>h1</strong> 的 <strong>line-height: 36px</strong> 加上 <strong>p</strong> 段落的 <code>line-height: 1.5;(1 為網頁預設的 16px, 1.5 x 16px)</code> 先加上 <code>margin-bottom: 24px</code> 在乘上兩個，加上圖片的高度 <strong>90px</strong>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">36</span> + (( <span class="number">1.5</span> * <span class="number">16</span> + <span class="number">24</span> ) * <span class="number">2</span>) + <span class="number">90</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// -&gt; 222px</span></span><br></pre></td></tr></table></figure>

<h4 id="第三題"><a href="#第三題" class="headerlink" title="第三題"></a>第三題</h4><p>請問 .card 的寬高與高度各是多少？(請不要用瀏覽器觀察)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.card</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">3px</span> solid orange;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">3px</span> solid <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200412/question-3-example.png" alt="圖解"></p>
<h4 id="第四題"><a href="#第四題" class="headerlink" title="第四題"></a>第四題</h4><p>請優化此<a href="https://codepen.io/liao/pen/OJyLOzr">程式碼</a>，優化重點為：</p>
<ul>
<li>在不影響外觀情況下，試著將不必要的 CSS 移除或整合</li>
<li>請不用更動 HTML 程式碼，僅需優化 CSS 程式碼</li>
</ul>
<p>解：<a href="https://codepen.io/rexhung0302/pen/GRpgaQp">傳送門</a></p>
<blockquote>
<p>父層下的 css 其實都可以直接下在父層上, 因為幾乎都是共通的, 如果有需要客製在另外下 css 即可 </p>
</blockquote>
<h4 id="第五題"><a href="#第五題" class="headerlink" title="第五題"></a>第五題</h4><p>請優化此<a href="https://codepen.io/liao/pen/qBOWPea">程式碼</a>，並將程式碼連結放到 Codepen 上。優化重點為：</p>
<ul>
<li>在不影響外觀情況下，將重複的 CSS 樣式，獨立成一個共用的 class</li>
<li>可依照您設定的共用 class，適當調整 HTML 結構</li>
</ul>
<p>解：<a href="https://codepen.io/rexhung0302/pen/MWaYdOr">傳送門</a></p>
<blockquote>
<p>盡量把能重複使用的樣式獨立出來，如果有需要特別客製化的 CSS 如 height: 100px; 或 background: green; 在另外下，獨立 CSS 到新的 Class Name 有益網頁渲染速度，因為減少了 CSS 的階層數。</p>
<p>註：因為有 “在不影響外觀情況下” 的前提下，所以不考慮多放一個 container 的 div 至 wrap 下然後給 500px，或是直接對 wrap 下寬度 500px，因為這樣背景顏色會無法佔滿滿版。</p>
</blockquote>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>這次直播課也是吸取了很多新知，人們常說，了解的越多你不懂的也越多，所以不論什麼人事物身上都是有值得你學習的地方，我想這次的階版直播班從 0 開始也能糾正我很多觀念。</p>
<p>希望之後幾週也能順利，然後接著 <strong>The F2E</strong>，不過還是希望 <strong>PM</strong> 能好好的跟客戶排時程放過我 QQ。</p>
<hr>
<h2 id="Demo-成果程式碼"><a href="#Demo-成果程式碼" class="headerlink" title="Demo &amp; 成果程式碼"></a>Demo &amp; 成果程式碼</h2><p>Source Code：<a href="https://github.com/RexHung0302/Hexschool-web-layout-training/tree/master/Week_1">點我</a></p>
<p>Demo：<a href="https://rexhung0302.github.io/Hexschool-web-layout-training/Week_1/index.html">點我</a></p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><p><a href="http://www.flycan.com/article/css/w3c-html-4-css-386.html">W3C 規定~ 全部 HTML 標籤的 CSS 屬性預設值</a></p>
</li>
<li><p><a href="https://zh-tw.learnlayout.com/display.html">關於 “display” 屬性</a></p>
</li>
<li><p><a href="https://medium.com/@small2883/%E5%8D%80%E5%A1%8A%E5%85%83%E7%B4%A0-%E8%A1%8C%E5%85%A7%E5%85%83%E7%B4%A0-%E7%A9%BA%E5%85%83%E7%B4%A0%E7%89%B9%E9%BB%9E%E5%88%86%E5%88%A5%E6%9C%89%E5%93%AA%E4%BA%9B-19f8c05f16f6">區塊元素 行內元素 空元素特點？分別有哪些？</a></p>
</li>
<li><p><a href="https://blog.csdn.net/weixin_45543743/article/details/99750142">h5-div内img会多2px间隙</a></p>
</li>
<li><p><a href="https://www.hexschool.com/courses/web-layout-training-1st.html">六角學院切版直播班</a></p>
</li>
<li><p><a href="https://docs.emmet.io/cheat-sheet/">Emmet</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>前端</category>
        <category>Hexschool-Web-Layout-Training[六角網頁切版直播班]</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>HexSchool</tag>
        <tag>Web-Layout-Training</tag>
      </tags>
  </entry>
  <entry>
    <title>[Tool Note] — 關於Gulp</title>
    <url>/2020/05/06/20200506/</url>
    <content><![CDATA[<p><img src="/images/others/loading.gif" data-original="/images/20200506/gulp_logo.jpg" alt="終於講到飲料杯了"></p>
<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>如果你為了前端切版每次都要從 <strong>HTML</strong> 開始建立檔案，然後 <strong>CSS</strong> 再來 <strong>JavaScript</strong>…等等，而且碰到多頁面的版面手足無措，那你就可以考慮看看這篇文章了。</p>
<span id="more"></span>

<p>開始前先提醒一下文章較長，您可以重頭開始看怎麼建立 <strong>Gulp</strong> 抑或是滑到下方選擇觀看 <strong><a href="#%E9%A0%90%E5%91%8A%E5%A4%AA%E9%95%B7%E4%BA%86">安裝後的Gulp筆記</a></strong> 或 <strong><a href="#%E9%97%9C%E9%8D%B5%E6%87%B6%E4%BA%BA%E5%8C%85%E7%9B%AE%E9%8C%84">關鍵懶人包目錄</a></strong>！！</p>
<p>之前玩過 <strong>Webpack</strong> 時就一直聽過 <strong>Gulp</strong>，但是一直沒有去研究過，一直以為兩個是差不多性質的東西，應該一個就夠用了，但是藉由這次的六角切版直播班真的接觸到了 <strong>Gulp</strong>，我想是時候好好研究研究一番了。</p>
<blockquote>
<p><em>溫馨提醒：如果還沒看過 Webpack 或是您已經是 Webpack 高手，建議可以先參考看看我的前兩篇文章，如果您只是想研究 Gulp 其實只看本篇文章也沒關係，<a href="https://rexhung0302.github.io/2019/06/18/20190618/">[Tool Notes] — 關於Webpack #1 - 第一次就上手</a> 及 <a href="https://rexhung0302.github.io/2020/03/21/20200321/">[Tool Notes] — 關於Webpack #2 - Babel？</a> 如果有歡念錯誤歡迎各路高手不吝社指教。</em></p>
</blockquote>
<blockquote>
<p><em>地雷警告：由於 <strong>Gulp</strong> 自己也還不是很熟，本篇文章就是用來筆記加練習的，如果有觀念錯誤也歡迎各路高手不吝社指教。</em></p>
</blockquote>
<hr>
<h3 id="關鍵懶人包目錄"><a href="#關鍵懶人包目錄" class="headerlink" title="關鍵懶人包目錄"></a>關鍵懶人包目錄</h3><p>這邊提供給已經安裝過並且懂的大概的 <strong>npm</strong> 操作流程，只想看 <strong>Gulp</strong> 怎麼操作的人：</p>
<ol>
<li><p><a href="#%E9%97%9C%E9%8D%B5%E6%87%B6%E4%BA%BA%E5%8C%85%E4%B8%80">任務執行基礎的兩個API - 同步任務 及 非同步任務</a></p>
</li>
<li><p><a href="#%E9%97%9C%E9%8D%B5%E6%87%B6%E4%BA%BA%E5%8C%85%E4%BA%8C">檔案操作基礎的兩個API - 取得 及 輸出</a></p>
</li>
<li><p><a href="#%E8%B6%85%E7%B4%9A%E6%AF%94%E4%B8%80%E6%AF%94">最後關鍵比一比懶人包</a></p>
</li>
<li><p><a href="#%E4%BD%A0%E8%A6%81%E7%9A%84%E9%AD%9A%E5%9C%A8%E9%80%99">範例檔下載</a></p>
</li>
</ol>
<hr>
<h3 id="Gulp-是什麼？"><a href="#Gulp-是什麼？" class="headerlink" title="Gulp 是什麼？"></a>Gulp 是什麼？</h3><p>和 <strong>Webpack</strong> 一樣，剛學前端在切版時我們很長就是創建一個新的 <strong>HTML CSS JavaScript</strong>…等等，碰到多頁面的版面我們就是 <strong>index_1.html index_2.html index_3.html</strong>，久了就會覺得麻煩，身為工程師，不就是要把麻煩的事情簡單化嗎？！</p>
<p>所以在後來就出現了基於 <strong>Node.js</strong>(剛接觸前端不久後可能就會常常碰到)<strong>、NPM</strong> 的<strong>自動化建構工具(註1)</strong>，幫你省去很多重複且枯燥的步驟。</p>
<blockquote>
<p><em>註1:就字面上的意思大概已經解釋了 87% 簡單說就是下個指令之後幫你執行一些不必重複做的工作，比方說 編譯、壓縮、命名或是開發時用一種寫法，上正式環境換一種寫法。</em></p>
</blockquote>
<h3 id="使用說明？"><a href="#使用說明？" class="headerlink" title="使用說明？"></a>使用說明？</h3><p><img src="/images/others/loading.gif" data-original="/images/20200506/gulp_logo_gif.gif" alt="自動化建構工具"></p>
<p>其實仔細看 <strong>Gulp</strong> 跟 <strong><a href="https://webpack.js.org/">Webpack</a></strong> 的官網介紹，會發現兩個非常像，但你實際使用，會發現 <strong>Gulp</strong> 更注重於 <strong>任務</strong> 的概念，而 <strong>Webpack</strong> 注重於 <strong>打包</strong> 及 <strong>效能</strong> 方面。</p>
<p>但其實兩種工具官方都有很詳盡的介紹，只要跟著走，基本都沒什麼問題！甚至最後你還能將兩者合併使用呢！</p>
<p>但筆記不是寫心情日記，今天還是要認真的跑過一次流程，下面開始就會介紹怎麼把 <strong>Gulp</strong> 跑過一遍。</p>
<hr>
<h3 id="釣竿來"><a href="#釣竿來" class="headerlink" title="釣竿來"></a>釣竿來</h3><blockquote>
<p>這邊建議還是要有一點 <strong>JavaScript</strong> 的基礎，如果沒有沒關係，如果有會比較輕鬆。</p>
</blockquote>
<p>首先您必須要先安裝 <strong>Node.js</strong> 之後才能使用 <strong>npm</strong>，這邊先不用搞懂他們在幹嘛，只要記得之後常常會碰到 <strong>node_module</strong> 而這裡面放滿你會用到的<strong>前端套件</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200506/node_logo.png" alt="NodeJS"></p>
<p>安裝方法很簡單，可以到 <strong>Node.js</strong> 的官方網站下載安裝檔安裝，或是參考我的這篇文章安裝 <a href="https://rexhung0302.github.io/2019/06/18/20190618/">[Tool Notes] — 關於Webpack #1 - 第一次就上手</a> 裡面有提到 <strong>Node.js</strong> 怎麼安裝。</p>
<blockquote>
<p><em>安裝完成記得打開終端機輸入 <code>node --version</code> 如果安裝成功你會看到 <code>v版本號</code>，就是安裝成功了，記得也要輸入 <code>npm --version</code> 就能看到有沒有把 <strong>npm</strong> 安裝成功！</em></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20200506/node&npm_version.png" alt="成功安裝！"></p>
<h3 id="趕快發車"><a href="#趕快發車" class="headerlink" title="趕快發車"></a>趕快發車</h3><p>前置作業了之後我們要安裝 <strong>全域的Gulp-cli</strong> 及 <strong>專案裡的Gulp</strong>，前者的安裝讓使用者可以在任何地方透過 <strong>cli</strong> 指令(比如 <strong>gulp</strong>) 來下指令，後者讓使用者可以使用 <strong>gulp API</strong> 來自定義建構的任務。</p>
<p>首先安裝全域的 <strong>gulp-cli</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install gulp-cli -g // 安裝全域的 gulp-cli</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>接著進到你要實作的專案底下輸入以下指令(安裝路徑記得要對喔！！)，縮寫的 <strong>i</strong> 為 <strong>install</strong> 縮寫 <strong>-D</strong> 為 <strong>–save-dev</strong> 的縮寫，意指只安裝到 <strong>package.json</strong> 的 <strong>devDependencies</strong>，不理解的話先略過沒關係</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm i -D gulp // 安裝 gulp 到專案</span><br></pre></td></tr></table></figure>

<p>安裝完成輸入 <code>gulp --version</code> ，如果看見下圖 <strong>Local version: Unknown</strong> 就代表你目前在錯誤的目錄，一定要進到你要實作的專案底下安裝才會有版本號出現！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200506/gulp_install_finished.png" alt="安裝完成"></p>
<hr>
<h3 id="初始化專案"><a href="#初始化專案" class="headerlink" title="初始化專案"></a>初始化專案</h3><p>以往我們都是從 <strong>index.html</strong> 開始建立，這邊我們換個做法，到你要實作的專案資料夾下，先在終端機輸入 <code>npm init</code> 或 <code>npm init -y</code>，第一次建立建議都輸入前者，因為接下來會跳出一連串的問題給你作答，大致就是問你 <strong>專案名稱 專案介紹 作者</strong> 或是 <strong>是否要連上Git</strong>…等等，建議跑過一次流程之後再試試後面的輸入方法，後者可以省略那堆問題！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200506/question.png" alt="一連串的問題"></p>
<p>因為我們是練習，所以就是一路 <strong>Enter</strong> 下來，最後會在你的資料夾內看到 <strong>package.json</strong> 檔案，這邊我們先來介紹一下這個檔案是幹嘛的。</p>
<p>以往我們會把需要用的套件直接用 <strong>CDN</strong> 方式插入在 <strong>index.html</strong> 裡面，就像下圖所示。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200506/cdn_example.png" alt="傳統套件引入作法"></p>
<p>但是隨著引用的套件越來越多，會越來越雜亂，而且也不好管理版本，所以後來的 <strong>package.json</strong> 就是在做這件事情，裡面詳細記載你用了什麼套件，還有這個專案的詳細介紹(沒錯 就是你前面略過的那一大串)，至於版本號等等還會有個檔案叫 <strong>package-lock.json</strong> 記載。</p>
<p>前置步驟的最後在輸入下列語法，就會安裝記載在 <strong>package.json</strong> 裡的所有套件，這也是為什麼我們最後只需要上傳 <strong>原始檔</strong> 及 <strong>package.json</strong> 給下一個人，他就會知道你用了什麼套件並且怎麼修改，而我們也不需要把一大包套件上傳到空間上去。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<p>除此之外使用 <strong>package.json</strong> 管理套件還有個好處，通常使用 cdn 方式引入套件，如果對方存放套件的 <strong>Server</strong> 掛掉了，或是連結甚至網路掛掉了，基本上就無法使用這個套件了，但安裝在 <strong>node_module</strong> 等於是安裝在本地，即使網路斷了，或是來源遺失了，至少你還保留一份套件檔案在這邊，前提是你必須在掛掉之前安裝Ｑ。</p>
<p>安裝完成後就會出現 <strong>package-lock.json</strong>，這就會記載你安裝套件的版本號啦！</p>
<hr>
<h3 id="預告太長了"><a href="#預告太長了" class="headerlink" title="預告太長了"></a>預告太長了</h3><p>先別急，這邊正式要開始了。這邊開始 <strong>Gulp</strong> 做法跟 <strong>Webpack</strong> 有點像，後者會在資料夾建立 <strong>webpack.config.js</strong>，前者會在資料夾建立 <strong>gulpfile.js</strong>，這就是我們的 <strong>核心設定</strong> 檔案了。</p>
<p>按照官網的指示，我們先在專案資料夾創建 <strong>gulpfile.js</strong> 然後在裡面貼上下列程式碼：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">defaultTask</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">  <span class="comment">// place code for your default task here</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>);</span><br><span class="line">  <span class="title function_">cb</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">default</span> = defaultTask</span><br></pre></td></tr></table></figure>

<p>之後在終端機上輸入 <strong>gulp</strong>(記得要到專案目錄底下喔！)，會出現下面的結果，先講解一下，終端機輸入 <strong>gulp</strong> 後面如果不帶任何字串，預設就是 <strong>gulp default</strong>，而我們要有個概念 <strong>gulp</strong> 都是以任務為出發點再跑的，意思就是跑一個 <strong>default</strong> 的任務，而前面我們已經寫好了，預設的 <strong>default</strong> 任務就是 <code>function defaultTask()</code>，內容就是 <code>console.log(123);</code>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200506/task_example.png" alt="預設任務"></p>
<p>沒錯！到這邊你就完成了，就是這麼簡單。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200506/easy.jpg" alt="就這麼簡單"></p>
<hr>
<h3 id="不是幼幼班"><a href="#不是幼幼班" class="headerlink" title="不是幼幼班"></a>不是幼幼班</h3><p>當然事情沒有這麼容易，我們想做到的事情和現在還差<strong>十萬八千里遠</strong>，但放心，如果是 <strong>Webpack</strong> 的話目前應該還有<strong>二十萬八千里遠</strong>(以一個菜鳥過來人的上手經驗來說，有誤別砲我)。</p>
<p>在我們有了 <strong>任務</strong> 的概念之後，我們還要先有一個基礎知識，前面提到我們有說我們會安裝很多套件在 <strong>node_module</strong> 立面並且記載在 <strong>package.json</strong>，那是不是 <strong>npm install</strong> 之後出現 <strong>package-lock.json</strong> 就可以使用了呢？</p>
<p>這邊就要講解一下了，通常透過 <strong>Node.js</strong> 安裝的套件，在那個專案都會有一個 <strong>進入點(在前面 npm init 的時候會問你要不要指定檔案 不要就是預設 index.js)</strong>，而我們想使用套件就必須在 <strong>進入點</strong> 把套件 <strong>import</strong> 或是 <strong>required</strong> 近來，意思其實跟 <strong>cdn</strong> 在 <strong>index.html</strong> 插入一行 <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;./plugins/bootstrap-v4.3.1/css/bootstrap.min.css&quot; /&gt;</code> 是差不多的，接著你就能在 <strong>進入點</strong> 的那隻檔案使用那個套件，最後只要你的檔案可以吃得到 <strong>進入點</strong> 就能使用套件。</p>
<blockquote>
<p><em>Gulp 4.0 和以前的寫法可能有些許差異，因為菜雞我沒用過以前版本，但 4.0 的寫法在 4.0 以前會無法使用，例如陣列寫法改為 <strong>series()</strong> 及 <strong>parallel()</strong></em></p>
</blockquote>
<h3 id="怎麼引入套件"><a href="#怎麼引入套件" class="headerlink" title="怎麼引入套件"></a>怎麼引入套件</h3><p>這邊我們會引領您記得幾個 <strong>Gulp</strong> 要記得的 <strong>API</strong>，以後您會常常使用到它！</p>
<p>首先這邊就以 <strong>Gulp</strong> 為例子，當我們有很多任務要執行的時候，我們該怎麼做呢？</p>
<p>在檔案內改為以下的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入套件 及 套件API</span></span><br><span class="line"><span class="keyword">const</span> &#123; series, parallel &#125; = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 任務一</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">taskOne</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="title function_">cb</span>();</span><br><span class="line">  &#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 任務二</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">taskTwo</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="title function_">cb</span>();</span><br><span class="line">  &#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 任務三</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">taskThree</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">  <span class="title function_">cb</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 輸出整個任務</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">default</span> = <span class="title function_">series</span>(taskOne, <span class="title function_">parallel</span>(taskTwo, taskThree))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第一句就是我們引進套件及套件的API(方法)，而 4.0 跟以往最大的差異就在多了 <code>series</code> 及 <code>parallel</code>，前者為任務一個結束才會換下一個，後者為同步進行，我不管前面完成沒有，反正包在 <code>parallel</code> 裡的我全部都一次進行。</p>
<p>而範例的進行結果就是後面會等 <strong>taskOne</strong> 運行結束(記得如果沒有 Return 在 Function 立面都要設定一個 end 宣吿，例如 cb())，結束後包在 <code>parallel</code> 裡面的不管順序都會一起進行。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200506/series_example.png" alt="仔細看看秒數"></p>
<blockquote>
<p><em>順帶一提，最前方的 <code>const &#123; series, parallel &#125; = require(&#39;gulp&#39;);</code> 亦可寫為 <code>const gulp = require(&#39;gulp&#39;);</code> 然後在需要使用的地方加上 <code>gulp.series</code> 或 <code>gulp.parallel</code>，例如最後一句可改為 <code>exports.default = gulp.series(taskOne, gulp.parallel(taskTwo, taskThree))</code>，意思為使用 <strong>gulp 的 API</strong> <code>series</code> 及 <code>parallel</code>。</em></p>
</blockquote>
<blockquote>
<p><em>除了前面寫的 cb() 當作結束任務外，任務還可以使用諸如 <code>promise</code>、<code>event emitter</code>、<code>child process</code>或<code>observable</code>…等等，詳細可參考<a href="https://www.gulpjs.com.cn/docs/getting-started/async-completion/">官方指南</a>，如果都不用就是必須向前面寫的，要有一個 <strong>callback</strong>(例：cb())。</em></p>
</blockquote>
<h4 id="關鍵懶人包一"><a href="#關鍵懶人包一" class="headerlink" title="關鍵懶人包一"></a>關鍵懶人包一</h4><p><strong>上述例子做完你已經學會了基本的兩個API，<code>series</code> 及 <code>parallel</code>，只要記得要呼叫任務就是使用這兩個，前者為不同步呼叫，後者為同步呼叫！</strong></p>
<h3 id="還有什麼全都拿出來！"><a href="#還有什麼全都拿出來！" class="headerlink" title="還有什麼全都拿出來！"></a>還有什麼全都拿出來！</h3><p>再學會前面兩個基本的 <strong>API</strong> 後，這邊開始我們要學另外<strong>兩個</strong>基本的 <strong>API</strong>；想要 <strong>自動化建構</strong> 我們最基本需要的事情就是 <strong>操作檔案</strong>。</p>
<blockquote>
<p><em>為什麼 <strong>Gulp</strong> 的 <strong>API</strong> 可以操作檔案呢？因為他接受 <strong>glob</strong> 參數，詳細的介紹可參考<a href="https://www.gulpjs.com.cn/docs/getting-started/explaining-globs/">此處</a>。</em></p>
</blockquote>
<p>首先我們要記得第一個 <strong>API</strong> 為 <strong>src()</strong>，意思就是從哪個路徑讀取檔案，使用方式和前方一樣，先引入 <code>const gulp = require(&#39;gulp&#39;);</code>，然後呼叫 <code>gulp.src(&#39;./檔案路徑&#39;)</code>，或是在最前方改為 <code>const &#123; src &#125; = require(&#39;gulp&#39;);</code>，然後使用 <code>src(&#39;./檔案路徑&#39;)</code>。</p>
<p>按照官網的說法，取得檔案後會生成一個 <strong><a href="https://nodejs.org/api/stream.html">Node流(stream)</a></strong>，意思是蝦咪呢？<del>Steam 我還理解(誤)</del></p>
<p>翻了網上的解釋，它是一種數據處理的方法，從輸入到輸出，可以稱為一個流，他並不是像傳統的讀寫文件，一次一個，而是隨讀取的數據多寡，處理其內容，而在大數據之中就非常強大，例如檔案可能超過你的空間容量，不可能將整個文件塞進你的空間在讀取，而這時後 <strong><a href="https://nodejs.org/api/stream.html">Node流(stream)</a></strong> 就發揮作用了。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200506/stream_example.png" alt="流的抽象概念"></p>
<blockquote>
<p><em>抱歉我實在是找不到圖片，如果比喻有誤還請手下留情。</em></p>
</blockquote>
<p>而 <strong><a href="https://nodejs.org/api/stream.html">Node流(stream)</a></strong> 分為四種流：</p>
<h4 id="清流？流派？"><a href="#清流？流派？" class="headerlink" title="清流？流派？"></a>清流？流派？</h4><p>流大致可分為四種類型：</p>
<ol>
<li><p>Writable - 可寫入的流</p>
</li>
<li><p>Readable - 可讀取數據的流</p>
</li>
<li><p>Duplex - 可讀又可寫的流</p>
</li>
<li><p>Transform - 在讀取過程中可以修改或轉換數據的 Duplex 流</p>
</li>
</ol>
<blockquote>
<p><em>上面貼這麼多流得介紹網站如果你英文不好可以參考這邊 <a href="http://nodejs.cn/api/stream.html">中文流</a>。</em></p>
</blockquote>
<h4 id="繼續開車"><a href="#繼續開車" class="headerlink" title="繼續開車"></a>繼續開車</h4><p>接著繼續學習我們的 <strong>Gulp API</strong>，簡單理解下，從我們發起讀取檔案 <code>gulp.src(&#39;./檔案路徑&#39;)</code> 後，這時候就會產生 <strong><a href="https://nodejs.org/api/stream.html">Node流(stream)</a></strong> 而這時候我們就可以在這之間去對 <strong><a href="https://nodejs.org/api/stream.html">Node流(stream)</a></strong> 做動作。</p>
<p>然而怎麼做動作可以依靠 <strong><a href="https://nodejs.org/api/stream.html">Node流(stream)</a></strong> 提供的方法 <code>.pipe()</code>，適用於 <strong>轉換流(Transform streams)</strong> 或是 <strong>寫流(Writable streams)</strong>，透過 <code>.pipe()</code> 我們可以把想做的事情透過方法寫在 <code>.pipe()</code> 內，比如 <code>.pipe(babel())</code>。</p>
<p>這邊就會學到我們接下來第二個基本的 <strong>API</strong>，<strong>dest()</strong>。</p>
<p>如果不想理解上方這麼多細節的話，請先在專案底下創建 <strong>app</strong> 資料夾，裡面在創建一個 <strong>assets</strong> 資料夾，最後再放入 <strong>js</strong> 資料夾，然後創建兩個 <strong>.js</strong> 在裡面，這邊範例一個名稱為 <strong>main.js</strong> 另一個為 <strong>second.js</strong>，接著在 核心檔案 <strong>gulpfile.js</strong> 內輸入以下程式碼：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 來源, 目的地</span></span><br><span class="line"><span class="keyword">const</span> &#123; src, dest &#125; = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">js</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">src</span>(<span class="string">&#x27;./app/assets/js/*.js&#x27;</span>)  <span class="comment">// 讀取資料夾 ./app/assets/js 底下的所有 .js 檔案</span></span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">dest</span>(<span class="string">&#x27;./dist&#x27;</span>)) <span class="comment">// 輸出所有被讀取的 .js 檔案</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">default</span> = js</span><br></pre></td></tr></table></figure>

<p>接著在終端機輸入 <strong>gulp(或 gulp default)</strong>，就會開始編譯，這時候你會發現多出一個 <strong>dist</strong> 資料夾，仔細瞧，你的自動化已經踏出一大步了！</p>
<h4 id="關鍵懶人包二"><a href="#關鍵懶人包二" class="headerlink" title="關鍵懶人包二"></a>關鍵懶人包二</h4><p><strong>上述例子做完你又學會了基本的兩個API，<code>src()</code> 及 <code>dest()</code>，只要記得想要操作檔案，就要取檔案及輸出檔案，前者為取得檔案，後者為輸出檔案，而這中間的過程可以對檔案做一些<del>壞壞的事情</del>想做的事情！</strong></p>
<hr>
<h4 id="補充說明"><a href="#補充說明" class="headerlink" title="補充說明"></a>補充說明</h4><p>上面提到的 <code>.pipe(dest())</code> 為 <code>gulp</code> 提供的一個 <strong>API</strong>，而我們有一些多的套件都可以加入到這裡面，比方說 <code>ES6</code> 編譯，接著來學習怎麼使用套件吧！</p>
<p>先輸入 <code>npm i -D gulp-babel @babel/core @babel/preset-env</code> 然後在  <strong>gulpfile.js</strong> 上方引入 <code>const babel = require(&#39;gulp-babel&#39;);</code> 編譯套件，接著在把前面提到的範例程式碼做一下改編：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 來源, 目的地</span></span><br><span class="line"><span class="keyword">const</span> &#123; src, dest &#125; = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">js</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">src</span>(<span class="string">&#x27;./app/assets/js/*.js&#x27;</span>)  <span class="comment">// 讀取資料夾 ./app/assets/js 底下的所有 .js 檔案</span></span><br><span class="line">    .<span class="title function_">pipe</span>(</span><br><span class="line">      <span class="title function_">babel</span>(&#123;</span><br><span class="line">        <span class="attr">presets</span>: [<span class="string">&#x27;@babel/env&#x27;</span>], <span class="comment">// 使用預設環境編譯</span></span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">dest</span>(<span class="string">&#x27;./dist&#x27;</span>)) <span class="comment">// 輸出所有被讀取的 .js 檔案</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">default</span> = js</span><br></pre></td></tr></table></figure>

<p>然後到我們的 <code>./app/assets/js/main.js</code> 把裡面的程式碼改為下列範例，範例為 <strong>ES6</strong> 的箭頭函示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">exampleWord</span> = (<span class="params"></span>) =&gt; <span class="string">&quot;Hello Gulp!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">exampleWord</span>());</span><br></pre></td></tr></table></figure>

<p>之後一樣在專案底下開啟終端機輸入 <code>gulp(或 gulp default)</code>，結果再到 <code>./dist</code> 資料夾查看編譯出來的 <strong>.js</strong> 檔案，你會發現語法已經被編譯成普通的 <strong>JavaScript</strong> 了！</p>
<p>像是 <strong>babel()</strong> 這個 <strong>API</strong> 就是套件提供給我們的，我們只需要塞入 <code>.pipe()</code> 然後在看套件有什麼需要設定的；而像 <strong>模板、SCSS、複製檔案</strong>…等等，差不多都是這樣的做法，突然覺得還挺簡單得吧(當我沒說哈哈？！</p>
<hr>
<h3 id="你畢業了"><a href="#你畢業了" class="headerlink" title="你畢業了"></a>你畢業了</h3><p>學會四個基本的 <strong>API</strong>，其實你已經學得差不多了，接著就是剩下的套件學習，是不是覺得跟 <strong>Webpack</strong> 基礎理解差不多，只要抓到基礎得點，剩下再延伸進入研究就差不多了，雖然我還是覺得 <strong>Gulp</strong> 比較好上手。</p>
<p>接下來這邊會提供一份範例，有興趣的同學可以抓下來研究，也可以自己重無到有去創建，記住只要抓住那四個基礎，如何<strong>開始任務</strong>，如何解決<strong>同步非同步任務</strong>，如何<strong>取得</strong>及<strong>輸出</strong>檔案，你就能慢慢上手。</p>
<blockquote>
<p><em>恭喜幼幼班畢業</em></p>
</blockquote>
<hr>
<h3 id="超級比一比"><a href="#超級比一比" class="headerlink" title="超級比一比"></a>超級比一比</h3><p>雖然這樣比好像不是正確的，但目前自己練習完 <strong>Webpack</strong> 及 <strong>Gulp</strong> 之後的整理心得如下圖，如果想入門一探這兩種自動建構工具的學習基礎：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200506/compare.png" alt="自動化建構工具比一比"></p>
<blockquote>
<p>搞懂這幾個基礎點之後剩下的就是一些設定及套件研究了！</p>
</blockquote>
<hr>
<h3 id="你要的魚在這"><a href="#你要的魚在這" class="headerlink" title="你要的魚在這"></a>你要的魚在這</h3><p>這邊提供一個範例，包含 <strong>JS 編譯、Sass&#x2F;Scss 編譯、檔案複製、檔案監聽、模擬瀏覽器</strong>…等等，之後會再補上 <strong>HTML</strong> 模板部分，可至 <strong>GitHtb</strong> 的 <strong>README.md</strong> 查看安裝的過程。</p>
<blockquote>
<p><strong>Gulp 範例傳送門 &#x3D;&gt; <a href="https://github.com/RexHung0302/GulpPractice">點我</a></strong></p>
</blockquote>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>其實以前已經想研究 <strong>Gulp</strong> 很久了，這次會接觸也是因為<a href="https://www.hexschool.com/courses/web-layout-training-1st.html">六角切版直播班</a>，但因為是切版為主，課程沒有太在 <strong>Gulp</strong> 著墨，但我想工程師的本質都是想追根究底的，碰到東西還是會想研究學習一番，畢竟之後開始處理問題總不能一直拿老師的範例吧。</p>
<p>這次為 <strong>Gulp</strong> 初體驗，我想還有許多改進空間，像是之後還會再考慮如何把 <strong>Webpack</strong> 融入進 <strong>Gulp</strong>，而我想後者的學習門檻似乎比前者還要低一點，恰巧最近碰到需要把前端規劃出一個有效且快速的部署環境，我想 <strong>Gulp</strong> 應該會很適合我。</p>
<p>這邊有機會在寫下一篇 <strong>Gulp</strong> 了，感謝各路大神的觀看，如果有錯還請各路大神不吝社指教，在此小弟先謝過了！</p>
<blockquote>
<p><em>我們都是在錯誤和學習中成長，但憑著興趣或快樂學習的速度將會是倍數成長！</em></p>
</blockquote>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li>Gulp 官網 — <a href="https://gulpjs.com/">Gulp EN</a></li>
<li>Gulp 中文官網 — <a href="https://www.gulpjs.com.cn/docs/getting-started/working-with-files/">Gulp CH</a></li>
<li>鐵人邦 ayugioh2003 大大 — <a href="https://ithelp.ithome.com.tw/articles/10217595">[試著把切版專案升級到 gulp4.0 吧] Day03 Gulp4 環境配置</a></li>
<li>Roya’s Blog — <a href="https://awdr74100.github.io/2020-01-08-gulp-gulpbabel/">Gulp 前端自動化 - 使用 Babel 編譯 ES6</a></li>
<li>Ray Blog — <a href="https://hsiangfeng.github.io/tags/%E9%80%99%E6%98%AF%E5%9C%A8%E8%AC%9B-Gulp-%E4%B8%8D%E6%98%AF%E9%A3%B2%E6%96%99%E6%98%AF%E4%BB%BB%E5%8B%99%E8%87%AA%E5%8B%95%E5%8C%96%E5%B7%A5%E5%85%B7%E9%80%99%E4%BB%B6%E4%BA%8B/">這是在講 Gulp 不是飲料是任務自動化工具這件事</a></li>
<li>六角 — <a href="https://www.hexschool.com/courses/web-layout-training-1st.html">切版直播班</a></li>
<li>Rex — <a href="https://rexhung0302.github.io/2019/06/18/20190618/">[Tool Notes] — 關於Webpack #1 - 第一次就上手</a></li>
<li>Rex — <a href="https://rexhung0302.github.io/2020/03/21/20200321/">[Tool Notes] — 關於Webpack #2 - Babel？</a></li>
</ul>
<hr>
<h3 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h3><p>這篇文其實實在 <strong>2020&#x2F;05&#x2F;05</strong> 晚上寫的，但 <strong>hexo</strong> 似乎無法用兩個一樣名字的 <strong>.md</strong> 所以只好把日期往後延一天了。</p>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>Gulp</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
        <tag>Gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hexschool Web Layout Training] — Week_2 Flexbox 網頁排版術</title>
    <url>/2020/04/19/20200419/</url>
    <content><![CDATA[<p><img src="/images/others/loading.gif" data-original="/images/20200419/week_2_classLogo.png" alt="第二週的練習"></p>
<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>緊接著來到第二週的直播課程了，拖到了週日才練習作業跟寫部落格，絕對不是因為自己<del>愛玩</del>（誤</p>
<p>這週的直播其實有點卡，不知道是不是 <strong>Zoom</strong> 太多人導致還是其他原因，總之最後到了今天才看重播影片。</p>
<p>這週的重頭戲就是常常聽到的 <strong>Flex</strong> 了！</p>
<span id="more"></span>

<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><blockquote>
<p>*本篇文章將會以三個角度來紀錄， <strong>課程心得(上課後的心得整理)</strong>、<strong>練習心得(做完作業後的心得整理))</strong> 及 <strong>小組任務(每週會有一項小組任務，寫完後的心得)</strong>。*</p>
</blockquote>
<p>每週的練習挑戰和地下城有點像，都有自己必須練習到的地方；本週需要練習的目標有至少兩點以上的<a href="https://hackmd.io/@YmcMgo-NSKOqgTGAjl_5tg/HJpJk8ABU/%2FiE6mxohOS-ujKU398Ewk1w">練習菜單</a>，及額外的一項打字練習。</p>
<ol>
<li><p><strong>熟悉三個編輯器熱鍵</strong></p>
</li>
<li><p><strong>幾乎全程使用 <a href="https://docs.emmet.io/cheat-sheet/">emmet</a> 開發</strong></p>
</li>
<li><p><strong><a href="http://keybr.com/">英打速度</a></strong> 練習</p>
</li>
</ol>
<h4 id="關卡目標"><a href="#關卡目標" class="headerlink" title="關卡目標"></a>關卡目標</h4><ol>
<li><p>背景處理</p>
</li>
<li><p>了解 Flex 排版技術</p>
</li>
<li><p>理解 inline、block、Flex 的使用時機</p>
</li>
<li><p>不要亂加語法買保險</p>
</li>
</ol>
<hr>
<h3 id="課程心得"><a href="#課程心得" class="headerlink" title="課程心得"></a>課程心得</h3><p>第二週的直播課程開跑，這週主題為 <strong>Flex</strong>，但本篇不會過多的著墨在介紹，因為之前在直播課程開始前有個切版練習就是要使用 <strong>Flex</strong>，詳細可參考<a href="https://rexhung0302.github.io/2020/03/23/20200323/#more">此篇文章</a>。</p>
<p>校長在課程上講到了幾個網站，並且實際的用 <strong>Skitch</strong> 預先切圖看怎麼排版，其中提到了，雖然 <strong>Flex</strong> 好用，但是千萬不要因為好像就隨意下 <strong>Flex</strong>，有些地方可以下 <code>text-align: center;</code> 就不要在另外下 <strong>Flex</strong> 了！</p>
<blockquote>
<p>這就叫做 <strong>不要亂加語法買保險</strong></p>
</blockquote>
<hr>
<h3 id="練習心得"><a href="#練習心得" class="headerlink" title="練習心得"></a>練習心得</h3><p>本次練習一樣使用 <strong><a href="https://docs.emmet.io/cheat-sheet/">emmet</a></strong> 來寫，對於需要常常寫道諸如 <code>justify-content: space-between;</code>, <code>align-items: center;</code>… 等等 這種漏漏長的語法真的節省超多時間，還不會的朋友推薦你一定要盡快入坑使用啊！</p>
<p>整體切版 <strong>Flex</strong> 使用上沒有大礙，只是排版是不是要多塞一個 <strong>Div</strong> 或是該不該把 <strong>CSS</strong> 抽離出來下個別的 <strong>Class Name</strong>，這邊都還是需要另外做練習。 </p>
<hr>
<h3 id="小組任務"><a href="#小組任務" class="headerlink" title="小組任務"></a>小組任務</h3><p>本週小組任務有三個：</p>
<h4 id="任務一-玩-Flexbox-遊戲"><a href="#任務一-玩-Flexbox-遊戲" class="headerlink" title="任務一 - 玩 Flexbox 遊戲"></a>任務一 - 玩 Flexbox 遊戲</h4><p>之前記得在六角的 Slick 就有釋出過<strong>海盜船遊戲</strong>，那時候有試著玩了幾關，但沒有去玩排名模式，對於不會或不熟的朋友真的非常推薦可以使用<strong>海盜船遊戲</strong>。</p>
<p>這邊挑選海盜船來遊玩，青蛙之前也有玩過，聽說海盜船是以青蛙為藍本做出來的遊戲，兩個都可以挑來玩看看。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200419/rank.png" alt="海盜船"></p>
<h4 id="任務二-幫實習生復原完美六角-LOGO"><a href="#任務二-幫實習生復原完美六角-LOGO" class="headerlink" title="任務二 - 幫實習生復原完美六角 LOGO"></a>任務二 - 幫實習生復原完美六角 LOGO</h4><p><img src="/images/others/loading.gif" data-original="/images/20200419/question2.png" alt="哪個實習生給我出來？！"></p>
<h5 id="修改限制"><a href="#修改限制" class="headerlink" title="修改限制"></a>修改限制</h5><ul>
<li>可以修改 HTML li 裡面的圖片路徑</li>
<li>CSS 只能在既有的 ul 與 img 標籤加上語法，不能額外加上選擇器</li>
</ul>
<h5 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h5><p>先替 <code>ul</code> 加上 <code>flex-wrap: wrap;</code> 才不會擠在同一行，接著把第二第三張圖片互換，最後在替 <strong>img</strong> 加上 <code>display: block;</code> 清掉多餘的 <strong>2px-3px</strong>。</p>
<p>解答傳送門：<a href="https://codepen.io/rexhung0302/pen/bGVeOwq">點我</a></p>
<h4 id="任務三-討論第二週版型該怎麼做"><a href="#任務三-討論第二週版型該怎麼做" class="headerlink" title="任務三 - 討論第二週版型該怎麼做"></a>任務三 - 討論第二週版型該怎麼做</h4><p>小組討論為週二，待週二討論完後補上！</p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>這次直播好像滿多人都說很卡，聽說校長下週要開兩個直播平台直播，只希望別再這麼卡了。</p>
<p>這週有點像是複習自己的 <strong>Flex</strong>，但是最基礎往往最致命也是最關鍵，寫完這週練習後有去看過幾個同學的程式碼，突然發現自己還是需要很大的加油啊ＱＱＱ。</p>
<p>這篇沒有提到太多的 Flex 使用方法，如果想知道可以參考我的前幾篇文章 -&gt; <strong><a href="https://rexhung0302.github.io/2020/03/23/20200323/#more">[CSS Notes] - 第一次 Flex 就上手</a></strong></p>
<hr>
<h2 id="Demo-成果程式碼"><a href="#Demo-成果程式碼" class="headerlink" title="Demo &amp; 成果程式碼"></a>Demo &amp; 成果程式碼</h2><p>Source Code：<a href="https://github.com/RexHung0302/Hexschool-web-layout-training/tree/master/Week_2">點我</a></p>
<p>Demo：<a href="https://rexhung0302.github.io/Hexschool-web-layout-training/Week_2/index.html">點我</a></p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><p><a href="https://rexhung0302.github.io/2020/03/23/20200323/#more">[CSS Notes] - 第一次 Flex 就上手</a></p>
</li>
<li><p><a href="https://hexschool.github.io/flexbox-pirate/index.html#/">海盜船 Flex 遊戲</a></p>
</li>
<li><p><a href="https://flexboxfroggy.com/#zh-tw">青蛙 Flex 遊戲</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>前端</category>
        <category>Hexschool-Web-Layout-Training[六角網頁切版直播班]</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>HexSchool</tag>
        <tag>Web-Layout-Training</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hexschool Web Layout Training] — Week_5 後台表單設計</title>
    <url>/2020/05/12/20200512/</url>
    <content><![CDATA[<p><img src="/images/others/loading.gif" data-original="/images/20200512/week_5_classLogo.png" alt="第五週的練習"></p>
<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>結束了前兩週的 <strong>RWD</strong> 地獄式訓練，這週迎來的是難度稍微低一點的後台表單設計，因為後台通常很少用手機看，所以本週沒有 <strong>RWD</strong>。</p>
<p>因為這次的課程有提到 <strong>Bootstrap</strong>，所以這次作業老師是建議套上 <strong>Bootstrap</strong>，但因為平常就有在使用，所以想改用手幹的方式看看能不能幹出一個 <strong>Modal</strong> 以及 <strong>Table</strong>。</p>
<span id="more"></span>

<p>這次也是使用 <strong>Gulp</strong>，如果你還沒用過或是想知道怎麼從 0 開始建立一個 <strong>Gulp</strong> 歡迎參考我的上一篇文章，<a href="https://rexhung0302.github.io/2020/05/06/20200506/#more">[Tool Notes] — 關於Gulp</a>。</p>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><blockquote>
<p>*本篇文章將會以三個角度來紀錄， <strong>課程心得(上課後的心得整理)</strong>、<strong>練習心得(做完作業後的心得整理))</strong> 及 <strong>小組任務(每週會有一項小組任務，寫完後的心得)</strong>。*</p>
</blockquote>
<p>每週的練習挑戰和地下城有點像，都有自己必須練習到的地方；本週需要練習的目標有至少兩點以上的<a href="https://hackmd.io/@YmcMgo-NSKOqgTGAjl_5tg/HJpJk8ABU/%2FiE6mxohOS-ujKU398Ewk1w">練習菜單</a>，及額外的一項打字練習。</p>
<ol>
<li><p>語意命名</p>
</li>
<li><p>再次大推真的加快寫 <strong>Code</strong> 速度很多 -&gt; <strong>幾乎全程使用 <a href="https://docs.emmet.io/cheat-sheet/">emmet</a> 開發</strong></p>
</li>
<li><p><strong><a href="http://keybr.com/">英打速度</a></strong> 練習</p>
</li>
</ol>
<h4 id="關卡目標"><a href="#關卡目標" class="headerlink" title="關卡目標"></a>關卡目標</h4><ol>
<li><p><del>Bootstrap 4 套用</del> 本次不使用 Bootstrap</p>
</li>
<li><p>後台表單設計</p>
</li>
</ol>
<hr>
<h3 id="課程心得"><a href="#課程心得" class="headerlink" title="課程心得"></a>課程心得</h3><p>本週課程開始以 <strong>Input</strong> 表單及三劍客(<strong>form、input、submit</strong>)為開頭，介紹了一下關於 <strong>Form</strong> 表單的使用。</p>
<p>這邊引用 <strong>W3C</strong> 的例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/action_page.php&quot;</span> <span class="attr">methods</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;fname&quot;</span>&gt;</span>First name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;fname&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;John&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;lname&quot;</span>&gt;</span>Last name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;lname&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Doe&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<p>關於 <strong>Form</strong> 表單的使用時機大多都是在資料表格上，像是要填寫個人資訊或是會員資料…等等，那這個頁面可能就會使用大量的 <strong>Input</strong>。</p>
<p>而上方提到的例子就是一個表單，<strong>form</strong> 的使用其實很清楚且容易明白，就是把你要送給後端的那些 <strong>值</strong> 的內容全部包起來！然後透過 <code>action=&quot;/action_page.php&quot;</code> 這句的 <code>action</code> 把內容送到特定的位置去！</p>
<p>至於怎麼送呢，就是透過 <code>methods=&quot;post&quot;</code> 的方式，而方法有兩種，就是 <strong>get</strong> 及 <strong>post</strong>。</p>
<p>兩種方法的差異如下：</p>
<ol>
<li><p><strong>get</strong>: 網址會帶上你的參數，例如上方的 <strong>First name</strong>，將會把 <strong>value</strong> 待在網址後方，<strong>value</strong> 前方會有 <strong>name</strong> 的名稱。例：<a href="https://xxx.com/?fname=%27123">https://xxx.com?fname=&#39;123</a>‘</p>
</li>
<li><p><strong>get</strong>: 有長度限制，因為是 <strong>URL</strong>。</p>
</li>
<li><p><strong>post</strong>: 網址不會帶任何參數，相對安全。</p>
</li>
<li><p><strong>post</strong>: 因為網址不用帶參數，所以不受 <strong>URL</strong> 長度限制。</p>
</li>
</ol>
<h3 id="關於-CSS-Reset-及-CSS-Normalize"><a href="#關於-CSS-Reset-及-CSS-Normalize" class="headerlink" title="關於 CSS Reset 及 CSS Normalize"></a>關於 CSS Reset 及 CSS Normalize</h3><p>大家通常切版應該都會用到 <strong>CSS Reset</strong> 或是 <strong>CSS Normalize</strong>，兩者的最大差異就是 <strong>CSS Reset</strong> 幾乎是把所有東西都初始化歸零，但是 <strong>CSS Normalize</strong> 並不會將瀏覽器的默認裝置給刪除，某些元素還是保有原本自己的特性。</p>
<p>這邊舉個大家最熟悉的套件例子，<strong>Bootstrap</strong> 即是使用 <strong>CSS Normalize</strong>。</p>
<h3 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h3><p>接下來幾乎都是 <strong>Bootstrap</strong> 的介紹時間，主要提及怎麼引入即使用，這邊就是複習階段了。</p>
<hr>
<h3 id="練習心得"><a href="#練習心得" class="headerlink" title="練習心得"></a>練習心得</h3><p>本次最大的挑戰應該就是 <strong>Modal</strong>，所以自己先在腦海大致想了一遍後開始時做。</p>
<h4 id="關於-Modal"><a href="#關於-Modal" class="headerlink" title="關於 Modal"></a>關於 Modal</h4><p>先提醒一下這邊會用到 <strong>JavaScript</strong> 如果還不太了解的可以先參考我的 <strong>JavaScript</strong> 新手系列從0到1筆記(<strong>第一篇大概就能有個概念</strong>)，如果想先以切版為主，參考下方範例就足夠了：</p>
<ol>
<li><p><strong>[JavaScript Notes] — 淺談 JavaScript #1 - <a href="https://rexhung0302.github.io/2019/10/09/20191009/">JavaScript 執行環境及作用域</a></strong></p>
</li>
<li><p><strong>[JavaScript Notes] — 淺談 JavaScript #2 - <a href="https://rexhung0302.github.io/2019/10/15/20191015/">運算子、型別與文法</a></strong></p>
</li>
<li><p><strong>[JavaScript Notes] — 淺談 JavaScript #3 - <a href="https://rexhung0302.github.io/2019/10/24/20191024/">物件</a></strong></p>
</li>
<li><p><strong>[JavaScript Notes] — 淺談 JavaScript #4 - <a href="https://rexhung0302.github.io/2019/10/28/20191028/">關於 This 那些事</a></strong></p>
</li>
</ol>
<p>首先就是要先寫一個 屬性為 <code>position:fixed;</code> 的 <strong>Div</strong> 把整個螢幕包住，然後將 <strong>Modal</strong> 的 <strong>Div</strong> 放置中央，透過 <code>display: flex;</code> 把最外層的 <strong>Div</strong> 設定為 <strong>外元件(Container)</strong>，應該可以很快就辦到！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200512/modal-example.png" alt="先寫一個 Modal Div"></p>
<p>第二步就是在 <strong>內元件(Item)</strong> 開始寫內容樣式，這邊也可以將第二層當作 <strong>內元件+外容器</strong>，因為你可能會在下一層同時有 <strong>Title</strong> 以及 <strong>關閉按鈕</strong>。</p>
<p>第三步就是怎麼打開了，這邊用類似上次第三週助教<a href="https://codepen.io/TzuHui/pen/WNQRjXd">漢堡鈕</a>的寫法，設定好樣式之後，透過最大寬度或是最大高度，預設為 <strong>0</strong> 的方式隱藏它，最後在透過 <strong>JavaScript</strong> 的操作，替設定寬高為 <strong>0</strong> 的那個 <strong>Div</strong> 加上額外的 <strong>Class Name</strong>，比如 <strong>show</strong>，然後透過這個 <strong>Class Name</strong> 去吃另一個設定好的 <em>CSS</em>，之後就會把原本預設寬高為 <strong>0</strong> 的 <strong>CSS</strong> 給蓋過去了！</p>
<p>這邊提供一下這次自己實作的的方法， <code>.modal</code> 為要顯示的彈窗，加上 <code>background-color: rgba(0, 0, 0, 0.7);</code> 看起來會更有彈窗的感覺：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.modal</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">250ms</span> ease;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.7</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中 <strong>Modal</strong> 可以縮放的動畫就是透過 <code>transform: scale(0, 0);</code> 及 <code>transition: all 250ms ease;</code>，其實只要你更改到 CSS 樣式，在那個元件加上 <code>transition: all 250ms ease;</code> 就會替你更改的事情加上補間動畫，有興趣可以參考<a href="https://www.oxxostudio.tw/articles/201803/css-animation.html">此篇文章</a>。</p>
<p>接著再透過 <strong>JavaScript</strong> 的操作，在點擊要開啟彈窗的地方加上 <code>onclick=&quot;showDetailModalHandler()&quot;</code>，例如下列程式碼：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;#&quot;</span> onclick=<span class="string">&quot;showDetailModalHandler()&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;material-icons icon&quot;</span>&gt;</span>visibility<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>然後在透過 <strong>JavaScript</strong> 或是 <strong>JQuery</strong> 替目標加上 <strong>ClassName</strong>(要使用 <strong>addClass</strong> 或 <strong>toggleClass</strong> 其實都可以)：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 顯示個人詳細資訊彈窗</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showDetailModalHandler</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&#x27;#detailModal&#x27;</span>).<span class="title function_">addClass</span>(<span class="string">&#x27;modal-show&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showDetailModalHandler</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> target = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;detailModal&#x27;</span>);</span><br><span class="line">  target.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;modal-show&quot;</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>這樣就能打開彈窗，至於關閉作法一模一樣，在要關閉的叉叉上加上 <code>onclick=&quot;closeModal()&quot;</code> 抑或是直接對目標下 <code>click()</code> 事件都可以，例如下方程式碼，這邊使用 <strong>Class Name</strong> 不使用 <strong>ID</strong> 因為很多地方彈窗可能都會用到：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//- 關閉個人詳細資訊彈窗 或 關閉新增個人詳細資訊彈窗 或 關閉個人編輯詳細資訊彈窗</span></span><br><span class="line">$(<span class="string">&#x27;.closeModal-btn&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&#x27;#detailModal&#x27;</span>).<span class="title function_">removeClass</span>(<span class="string">&#x27;modal-show&#x27;</span>);</span><br><span class="line">  $(<span class="string">&#x27;#addDetailModal&#x27;</span>).<span class="title function_">removeClass</span>(<span class="string">&#x27;modal-show&#x27;</span>);</span><br><span class="line">  $(<span class="string">&#x27;#editDetailModal&#x27;</span>).<span class="title function_">removeClass</span>(<span class="string">&#x27;modal-show&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>這樣就能做到開啟關閉彈窗，提醒一下這邊不是最好的做法，因為你可能每新增一個彈窗就要再來 <strong>JS</strong> 這邊加上要 <strong>add</strong> 及 <strong>remove</strong> 的 <strong>Class Name</strong>，但目前這樣應該是夠用的！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200512/modal-example-gif.gif" alt="CSS動畫94流暢"></p>
<p>另外點擊空白處想關閉 Modal 可以參考<a href="https://stackoverflow.com/questions/37573608/how-to-make-modal-close-on-click-outside">此篇</a>，這邊我的作法就是抓滑鼠的<strong>鬆開事件</strong>(<strong>點擊事件也可以</strong>)，如果點在目標區域外，就做我要做的事情，範例如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//- 點擊空白區域外</span></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">mouseup</span>(<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> clickTargetArea = $(<span class="string">&#x27; #targetOne&#x27;</span>);    <span class="comment">// 設定點擊目標區域</span></span><br><span class="line">  <span class="keyword">if</span>(!clickTargetArea.<span class="title function_">is</span>(e.<span class="property">target</span>) &amp;&amp; clickTargetArea.<span class="title function_">has</span>(e.<span class="property">target</span>).<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//- 關閉個人詳細資訊彈窗 或 關閉新增個人詳細資訊彈窗 或 關閉個人編輯詳細資訊彈窗</span></span><br><span class="line">    $(<span class="string">&#x27;#detailModal&#x27;</span>).<span class="title function_">removeClass</span>(<span class="string">&#x27;modal-show&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>這邊提供完整 <strong>CodePen</strong> 範例 <a href="https://codepen.io/rexhung0302/pen/rNOrmJY">2020春季網頁切版直播班 - 第五週作業範例 - 土炮Modal</a>：</p>
<iframe height="400" style="width: 100%;" scrolling="no" title="2020春季網頁切版直播班 - 第五週作業範例 - 土炮Modal" src="https://codepen.io/rexhung0302/embed/rNOrmJY?height=265&theme-id=dark&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/rNOrmJY'>2020春季網頁切版直播班 - 第五週作業範例 - 土炮Modal</a> by ZeHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<h4 id="關於對話框"><a href="#關於對話框" class="headerlink" title="關於對話框"></a>關於對話框</h4><p>另外應該就是對話框的部分，這邊也是要透過 <strong>JS</strong> 去取得 <strong>Div</strong> 的寬高。這邊透過 <code>$(&#39;.xxx&#39;).height()</code> <code>$(&#39;.xxx&#39;).width()</code> 這種方式取得元素的高及寬，最後一樣加上 <code>transition: all .5s ease</code> 這樣動畫才跑得順！</p>
<h4 id="關於-Select"><a href="#關於-Select" class="headerlink" title="關於 Select"></a>關於 Select</h4><p>我記得上課時校長才說如果你的設計師出了很多更改原本 <strong>Select</strong> 樣式的設計稿，記得去跟設計師<del>吵一番</del>討論，因為要強制改 <strong>Select</strong> 的內容是不大可能的，幾乎都要另外寫樣式才能；還好這次六角的設計師還夠有良心，沒有做下拉內部的設計，但是預設的箭頭樣式跟原本的差滿大的，先來一張原本 <strong>Select</strong> 的樣式照片。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200512/select_style.png" alt="預設樣式"></p>
<p>這時我們大概就是只能更改 <strong>Select</strong> 的背景為白色，然後透過隱藏下拉的箭頭符號，自己替換上圖片或是 <strong>Icon</strong> 來達到外觀與設計稿一致，如果裡面想客製化不另外做成 <strong>Div</strong> 是不太可能了，總之我們先讓他 <strong>87%</strong> 像吧！</p>
<p>透過使用 <code>appearance:none;</code> 來隱藏預設下拉箭頭，如果怕瀏覽器不同語法支援程度也不同的話可以考慮改為下方範例，改掉箭頭，背景改為透明，取消預設邊框：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">select</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ffffff00</span>;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">appearance</span>:none;  // 隱藏預設下拉箭頭</span><br><span class="line">  -moz-<span class="attribute">appearance</span>:none;</span><br><span class="line">  -webkit-<span class="attribute">appearance</span>:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這邊提供完整 <strong>CodePen</strong> 範例 <a href="https://codepen.io/rexhung0302/pen/XWmBgvr">2020春季網頁切版直播班 - 第五週作業範例 - 客製化Select</a>：</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="2020春季網頁切版直播班 - 第五週作業範例 - 土炮Select" src="https://codepen.io/rexhung0302/embed/XWmBgvr?height=265&theme-id=dark&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/XWmBgvr'>2020春季網頁切版直播班 - 第五週作業範例 - 土炮Select</a> by ZeHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<h4 id="關於輸入框"><a href="#關於輸入框" class="headerlink" title="關於輸入框"></a>關於輸入框</h4><p>最後這個要稍微提一下，因為看到設計稿對話框框的的樣式不像是一般的 <strong>Input</strong>，所以這邊就採用了 <strong>contenteditable</strong> 這個屬性，他是一個可以讓你編輯元素的屬性，只要在 <strong>Element</strong> 上加上這個屬性即可編輯。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">contenteditable</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是我們要怎麽替 <strong>Div</strong> 加上 <strong>PlaceHolder</strong> 呢？這時候就要靠 <strong>CSS</strong> 來幫我們辦到這件事情了！</p>
<p>這邊我們會用到 <strong>Attribute selectors（屬性選取器）</strong> 來選擇，就是會用中括弧來選擇特定的屬性，透過 <code>[contenteditable][placeholder]</code> 來找到這個 <strong>Div</strong> 並在後面加上 <code>:empty:before</code>，代表內容是空的時候就加上偽元素，這樣是不是超方便的呀，例子就像下方這樣：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[contenteditable]</span><span class="selector-attr">[placeholder]</span><span class="selector-pseudo">:empty</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">attr</span>(placeholder);</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">color</span>: gray;</span><br><span class="line">  <span class="attribute">background-color</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這邊提供完整 <strong>CodePen</strong> 範例 <a href="https://codepen.io/rexhung0302/pen/PoPBjxK">2020春季網頁切版直播班 - 第五週作業範例 - 土炮Input</a>：</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="PoPBjxK" src="https://codepen.io/rexhung0302/embed/PoPBjxK?height=265&theme-id=dark&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/PoPBjxK'>PoPBjxK</a> by ZeHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<hr>
<h3 id="小組任務"><a href="#小組任務" class="headerlink" title="小組任務"></a>小組任務</h3><h4 id="任務一-請每個小組討論成員，試著載入-BS4-，並作出-modal-效果"><a href="#任務一-請每個小組討論成員，試著載入-BS4-，並作出-modal-效果" class="headerlink" title="任務一 - 請每個小組討論成員，試著載入 BS4 ，並作出 modal 效果"></a>任務一 - 請每個小組討論成員，試著載入 BS4 ，並作出 modal 效果</h4><p>套用 <strong>Bootstrap</strong> 的 <strong>Modal</strong> 效果 <a href="https://codepen.io/rexhung0302/pen/abvKQGb">點我</a></p>
<h4 id="任務二-討論-HTML-裡的表格標籤-table、th、tr、td-的用法，請試著做出設計稿裡面的表格設計，並提供-codepen-來檢視"><a href="#任務二-討論-HTML-裡的表格標籤-table、th、tr、td-的用法，請試著做出設計稿裡面的表格設計，並提供-codepen-來檢視" class="headerlink" title="任務二 - 討論 HTML 裡的表格標籤(table、th、tr、td)的用法，請試著做出設計稿裡面的表格設計，並提供 codepen 來檢視"></a>任務二 - 討論 HTML 裡的表格標籤(table、th、tr、td)的用法，請試著做出設計稿裡面的表格設計，並提供 codepen 來檢視</h4><p>本次 <strong>Table</strong> 就是使用 <strong>HTML</strong> 裡的表格標籤，就不另外做了。</p>
<h4 id="任務三-討論第五週版型該怎麼做"><a href="#任務三-討論第五週版型該怎麼做" class="headerlink" title="任務三 - 討論第五週版型該怎麼做"></a>任務三 - 討論第五週版型該怎麼做</h4><hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>本週其實沒有太多需要一直爬文的特別內容，主要就是回歸到切版的部分，這也是為什麼本週我不使用 <strong>Bootstrap</strong>，自己覺得 <strong>Class Name</strong> 命名的部分還能再加油一點！</p>
<p>這次排版也幾乎都是使用 <code>display: flex;</code> 排版完成，因為不需要 <strong>RWD</strong> 所以排起來算輕鬆，但我想還是有許多可以改進的地方。</p>
<p>另外其實還是算有參考 <strong>Bootstrap</strong> 的表隔排版方式，自己最後又加上 <strong>thead</strong> 及 <strong>tbody</strong>，只能說 <strong>Bootstrap</strong> 真Ｄ神。</p>
<p>最後想知道 Flex 還是推薦可以參考我的前幾篇文章 -&gt; <strong><a href="https://rexhung0302.github.io/2020/03/23/20200323/#more">[CSS Notes] - 第一次 Flex 就上手</a></strong></p>
<hr>
<h2 id="Demo-成果程式碼"><a href="#Demo-成果程式碼" class="headerlink" title="Demo &amp; 成果程式碼"></a>Demo &amp; 成果程式碼</h2><p>Source Code：<a href="https://github.com/RexHung0302/Hexschool-web-layout-training/tree/master/Week_5">點我</a></p>
<p>Demo：<a href="https://rexhung0302.github.io/Hexschool-web-layout-training/Week_5/dist/assignment.html">點我</a></p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><p><a href="https://rexhung0302.github.io/2020/03/23/20200323/#more">[CSS Notes] - 第一次 Flex 就上手</a></p>
</li>
<li><p><a href="https://rexhung0302.github.io/2020/05/06/20200506/#more">[Tool Notes] — 關於Gulp</a></p>
</li>
<li><p><a href="https://bootstrap.hexschool.com/docs/4.2/components/modal/">Bootstrap</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>前端</category>
        <category>Hexschool-Web-Layout-Training[六角網頁切版直播班]</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>HexSchool</tag>
        <tag>Web-Layout-Training</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hexschool Web Layout Training] — Week_4 多頁式網頁設計</title>
    <url>/2020/05/05/20200505/</url>
    <content><![CDATA[<p><img src="/images/others/loading.gif" data-original="/images/20200505/week_4_classLogo.png" alt="第四週的練習"></p>
<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p><strong>RWD</strong> 地獄訓練第二週，搭配 <strong>Gulp</strong> 專車，一起來看看本週出了什麼菜吧！</p>
<span id="more"></span>

<p>本篇文章將會記錄本週課程內容及練習心得，關於 <strong>Gulp</strong> 將會有另一篇文章介紹。</p>
<p>本週的 <strong>RWD</strong> 寫到眼睛花掉，本來想切了兩頁就交差，但不允許惰性的自己就一直切下去了，因為 <strong>RWD</strong> 也是這次報名課程的目標之一，其次才是 <strong>Gulp</strong>，但直播班似乎主力放在切版上，看起來應該是不會探討到 <strong>Gulp</strong>，所以這部分就會自己摸索了。</p>
<blockquote>
<p><em>20200506 後更：<a href="https://rexhung0302.github.io/2020/05/06/20200506/#more">[Tool Notes] — 關於Gulp</a> 文章已補上，有興趣參考怎麼使用 <strong>Gulp</strong> 以及從 <strong>0</strong> 開始建立一個 <strong>Gulp</strong> 的朋友可以參考參考，或給小弟一點觀念指導。</em></p>
</blockquote>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><blockquote>
<p>*本篇文章將會以三個角度來紀錄， <strong>課程心得(上課後的心得整理)</strong>、<strong>練習心得(做完作業後的心得整理))</strong> 及 <strong>小組任務(每週會有一項小組任務，寫完後的心得)</strong>。*</p>
</blockquote>
<p>每週的練習挑戰和地下城有點像，都有自己必須練習到的地方；本週需要練習的目標有至少兩點以上的<a href="https://hackmd.io/@YmcMgo-NSKOqgTGAjl_5tg/HJpJk8ABU/%2FiE6mxohOS-ujKU398Ewk1w">練習菜單</a>，及額外的一項打字練習。</p>
<ol>
<li><p><strong>熟悉三個編輯器熱鍵</strong></p>
</li>
<li><p>一樣大推真的加快寫 <strong>Code</strong> 速度很多 -&gt; <strong>幾乎全程使用 <a href="https://docs.emmet.io/cheat-sheet/">emmet</a> 開發</strong></p>
</li>
<li><p><strong><a href="http://keybr.com/">英打速度</a></strong> 練習</p>
</li>
</ol>
<h4 id="關卡目標"><a href="#關卡目標" class="headerlink" title="關卡目標"></a>關卡目標</h4><ol>
<li><p>多頁 RWD 管理方式</p>
</li>
<li><p>RWD 斷點設計</p>
</li>
</ol>
<hr>
<h3 id="課程心得"><a href="#課程心得" class="headerlink" title="課程心得"></a>課程心得</h3><p>接續上週的 <strong>RWD</strong>，本週直接再度升級，加上多頁式管理，如何多頁管理前面已經先破梗了，就是使用 <strong>Gulp</strong>，其實它有點像 <strong>Webpack</strong>，如何使用可以先上網爬文，或是參考我的前兩篇關於 <strong>Webpack</strong> 的文章。</p>
<blockquote>
<p><a href="https://rexhung0302.github.io/2019/06/18/20190618/">[Tool Notes] — 關於Webpack #1 - 第一次就上手</a></p>
</blockquote>
<blockquote>
<p><a href="https://rexhung0302.github.io/2020/03/21/20200321/">[Tool Notes] — 關於Webpack #2 - Babel？</a></p>
</blockquote>
<h4 id="Layout-觀念"><a href="#Layout-觀念" class="headerlink" title="Layout 觀念"></a>Layout 觀念</h4><p>因為上週版型出來時大家已經先看到有其他頁面，原本自己第一個想法是使用 <code>display:none;</code> 去做隱藏跟顯示，但是我太天真了，呵呵。</p>
<p>上課時提到關於 <strong>EJS樣板語言(註1)</strong>，還有 <strong>Layout</strong> 的觀念，詳細可先參考<a href="https://cacoo.com/diagrams/fWdDuMY0WrfI0im7/CD531">此處</a>。</p>
<p>在我們做多個頁面的時候，大致上表頭表尾都會差不多，主要都是替換內容，這時候剛開始切版的你包括我，都會想說那我就切 <strong>index.html</strong>、<strong>index_2.html</strong>、<strong>index_3.html</strong>…等等，如果只是一般的形象官網可能還好，但如果今天是電商網頁呢？</p>
<p>舉個例子，你可能每一隻檔案都有自己的 <strong>CSS</strong>，可能都會有黑色的顏色樣式 <code>color: #000000;</code>，假使今天你要改為藍色、黃色，豈不是要改幾十次甚至幾百次呢？</p>
<p>所以慢慢的我們會從一個 <strong>HTML</strong> 進化成替換裡面的 <strong>contents</strong>，這該如何做到呢？就有賴 <strong>Gulp</strong> 了。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200505/layout_example.png" alt="Layout觀念"></p>
<p>可能你會有疑問，我手動建立 <strong>HTML</strong> 複製貼上是最簡單的方式，既快又不用花時間研究 <strong>Gulp</strong>，但是誰叫我們是<del>勤奮的工程師</del>呢？</p>
<p>使用 <strong>Layout</strong> 除了改 <strong>Code</strong> 快之外，在最後產出的檔案，就可以直接整包丟給後端工程師，然後讓他們更方便的串接 <strong>API</strong> 及修改，他們不用在一個檔案一個檔案串接起來。</p>
<blockquote>
<p><em>註1：EJS官網上這麼寫著，E代表 可嵌入(Embedded)、高效(Effective)、優雅(Elegant)或者是 簡單(Easy)；網頁開發初期其實前端和後端沒有像現在分這麼開，後端常常會接收到包含 HTML JS CSS 的檔案，他們在把後端語言一起包在裡面，但是這樣會讓檔案很複雜，所以後來有人在 HTML 上開發了 樣板語言(template language&#x2F;engine)，可以直接在 HTML 使用諸如 判斷、迴圈、字串模板…等等的功能，本次文章介紹為字串模板的功能</em></p>
</blockquote>
<h4 id="如何有效與後端溝通"><a href="#如何有效與後端溝通" class="headerlink" title="如何有效與後端溝通"></a>如何有效與後端溝通</h4><p>雖然上方註解提過現今不像以前，前端和後端有分的較清楚，前端就是該做什麼事情，後端就是該做什麼事情，但是規模比較沒有那麼大的公司，其實前後端還是會塞在一塊，因為 方便、好管理、省成本！</p>
<p>在我剛進公司不久，其實很多專案都是我把 <strong>HTML</strong> 寫一寫，丟給後端，然後他們在把檔案改為 <strong>PHP</strong> 然後串接 <strong>API</strong>，不久後開始接觸 <strong>JavaScript</strong> 才知道什麼是打 <strong>API</strong>，慢慢的公司開始做前後端分離。</p>
<p>看起來說的有點遠了，但是一但專案開始前後端分離，假使你是前端，你的檔案如 <strong>HTML CSS JavaScript</strong> 等等就是歸你管，而後端就是開好他的 <strong>API</strong> 等你串接。</p>
<p>但其實不管有沒有前後端分離，如何有效與後端溝通一直都是一們學問，我想不二法門就是，<strong>不恥下問</strong>、<strong>多下註解</strong>、<strong>耐心溝通</strong>！</p>
<h4 id="CSS-預處理器"><a href="#CSS-預處理器" class="headerlink" title="CSS 預處理器"></a>CSS 預處理器</h4><p>切版切了一段時間或許你會開始納悶，<strong>CSS</strong> 樣式一直寫，如果我有幾十頁，那我的 <strong>Code</strong> 是否就會塞上幾百幾千行呢？</p>
<p>沒有錯的，除了你能把 <strong>CSS</strong> 拆成 <strong>CSS_1 CSS_2</strong> 像是 <strong>HTML</strong> 拆開那樣，你不學也至少要聽過現今絕大數人都在用的 <strong>SCSS</strong>。</p>
<h4 id="預處理器怎麼來的？"><a href="#預處理器怎麼來的？" class="headerlink" title="預處理器怎麼來的？"></a>預處理器怎麼來的？</h4><p>你一定聽過網頁三寶，<strong>HTML CSS JavaScript</strong>，網頁基本只認識這三種東西寫出來的語法，但是這三種語法的核心架構有時候滿足不了我們，比方說 <strong>HTML</strong> 拆成好幾個的 <strong>Layout</strong> 功能，或是 <strong>CSS</strong> 加上變數的功能(現在<strong>CSS</strong>有支援了)…等等。</p>
<p>所以厲害的各路大神們就開始研發各種更好寫更方便的框架或是擴充，而這些擴充的東西被稱為預處理器，意思為編譯成網頁三寶前的預備處理器，而這些預處理器可以做到許多原本網頁三寶做不到的事情。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200505/sass-logo.png" alt="SASS?SCSS?"></p>
<h4 id="到底是-SASS-還是-SCSS-呢？"><a href="#到底是-SASS-還是-SCSS-呢？" class="headerlink" title="到底是 SASS 還是 SCSS 呢？"></a>到底是 SASS 還是 SCSS 呢？</h4><p>最少誕生的為 <strong>SASS</strong>，當時 <strong>SASS</strong> 採用 <strong>Ruby</strong> 語言編寫，為了配合 <strong>HAML(縮排式的 HTML 模版語法)</strong> 所以 <strong>SASS</strong> 寫法不寫大括號即分號，這是最大的特色，例如下方：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>:</span><br><span class="line">  .header</span><br><span class="line">    background-color: red;</span><br></pre></td></tr></table></figure>

<p>最初我也是挑選這種方式來寫，可是最大的問題在你要複製範例或是別人的程式碼來改的時候，必須一個一個括號去掉，而且無法兼容一般 <strong>CSS</strong> 語法，而相反的 <strong>SCSS</strong> 可以，如下方例子：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>:</span><br><span class="line">  .header &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這種寫法可以直接無縫接軌 <strong>CSS</strong>，很是方便！</p>
<blockquote>
<p><em>有興趣的同學可以參考<a href="https://css2sass.herokuapp.com/">這個網站</a>，先試著把自己的 CSS 轉為 SCSS 吧!</em></p>
</blockquote>
<h4 id="還有什麼法寶？"><a href="#還有什麼法寶？" class="headerlink" title="還有什麼法寶？"></a>還有什麼法寶？</h4><p>其實不只寫起來更方便，<strong>CSS</strong> 預處理器還提供了諸如 <strong>變數(Variables)、函式(Functions)、嵌套(Nesting)、混入(Mixins)、共用(Extends)</strong>…等等的用法，有興趣可以查看此篇<a href="https://tw.alphacamp.co/blog/css-preprocessor-sass-scss">文章</a>。</p>
<h4 id="我還能注意什麼？"><a href="#我還能注意什麼？" class="headerlink" title="我還能注意什麼？"></a>我還能注意什麼？</h4><p>除了好用的工具外，還要有懂的怎麼使用工具的方法，這邊先推一篇之前上完 <a href="https://www.udemy.com/course/sasssecret/">六角 - Sass 實戰全攻略 - 成為前 1% 的 CSS 頂尖好手</a> 之後寫的文章，<a href="https://rexhung0302.github.io/2019/05/30/20190530/">[CSS Notes] - CSS模組化</a>，內容提到 <strong>如何處理讓你頭疼的 Class Name 命名法</strong> 以及 <strong>如何更有效的減少攏長的 CSS Code</strong>，有興趣可以參考一下，雖然我還在努力的修改並且加強中…Orz。</p>
<hr>
<h3 id="練習心得"><a href="#練習心得" class="headerlink" title="練習心得"></a>練習心得</h3><p>這次雖然使用自己不熟的 <strong>Gulp</strong>，但是好險有老師提供的範例，並且使用自己熟悉的 <strong>SASS</strong>，許多地方不用再寫的漏漏長，而且對於 <strong>RWD</strong> 也有 <strong>Mixin</strong> 可以使用，加快了切版速度許多！</p>
<p>基本上本週也用到許多的 <code>display: flex;</code>，對於能共用的地方都可以抽出來放在共用的 <strong>CSS</strong> 內。</p>
<p>而關於 <strong>SASS</strong> 該如何命名可以參考六角卡斯伯老師的文章，<a href="https://wcc723.github.io/css/2016/12/20/sass-folder/">鐵人賽 20 - Sass 資料夾結構</a>，有效的分類並且管理真的是讓人看 <strong>Code</strong> 看得很舒服啊！</p>
<hr>
<h3 id="小組任務"><a href="#小組任務" class="headerlink" title="小組任務"></a>小組任務</h3><h4 id="任務一-請組員們彼此間確認-Gulp-環境是否都有安裝成功，並成功能看到範例七截圖，若有環境安裝問題，還請組員們彼此透過-ZOOM-分享螢幕協助排錯"><a href="#任務一-請組員們彼此間確認-Gulp-環境是否都有安裝成功，並成功能看到範例七截圖，若有環境安裝問題，還請組員們彼此透過-ZOOM-分享螢幕協助排錯" class="headerlink" title="任務一 - 請組員們彼此間確認 Gulp 環境是否都有安裝成功，並成功能看到範例七截圖，若有環境安裝問題，還請組員們彼此透過 ZOOM 分享螢幕協助排錯"></a>任務一 - 請組員們彼此間確認 Gulp 環境是否都有安裝成功，並成功能看到<a href="https://hackmd.io/yWpLNMPRT2yvIR4Zq_idGw?both">範例七</a>截圖，若有環境安裝問題，還請組員們彼此透過 ZOOM 分享螢幕協助排錯</h4><p>安裝成功後截圖：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200505/gulp_success.png" alt="安裝成功圖"></p>
<h4 id="任務二：請試著找出以下網站，哪些區塊是屬於-Layout-環節，找出三個網站並回報截圖"><a href="#任務二：請試著找出以下網站，哪些區塊是屬於-Layout-環節，找出三個網站並回報截圖" class="headerlink" title="任務二：請試著找出以下網站，哪些區塊是屬於 Layout 環節，找出三個網站並回報截圖"></a>任務二：請試著找出以下網站，哪些區塊是屬於 Layout 環節，找出三個網站並回報截圖</h4><ul>
<li><a href="https://www.hexschool.com/">六角學院</a></li>
<li><a href="https://wcc723.github.io/">卡斯伯技術部落格</a></li>
<li><a href="https://www.apple.com/tw/?afid=p238%7Csd9nZSawW-dc_mtid_18707vxu38484_pcrid_431529166743_pgrid_12618487622_&cid=aos-tw-kwgo-brand--slid---product--">Apple 官方網站</a></li>
<li><a href="https://www.inside.com.tw/">INSIDE 硬塞的網路趨勢觀察</a></li>
<li><a href="https://www.gamer.com.tw/">巴哈姆特</a></li>
</ul>
<p><img src="/images/others/loading.gif" data-original="/images/20200505/example_1.png" alt="六角學院頁頭"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20200505/example_2.png" alt="六角學院頁尾"></p>
<blockquote>
<p>六角官網為常見的頁頭跟頁尾</p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20200505/example_3.png" alt="卡斯伯技術部落格頁頭 及 SideBar"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20200505/example_4.png" alt="卡斯伯技術部落格頁尾"></p>
<blockquote>
<p>卡斯伯技術部落格除了頁頭及頁尾還多的 SideBar</p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20200505/example_5.png" alt="巴哈姆特頁頭"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20200505/example_6.png" alt="巴哈姆特頁尾"></p>
<blockquote>
<p>每天必上的網站還是要練習一下的，除了 TOP-bh 及 BH-menu-path 為頁頭外 BH-footer 為頁尾</p>
</blockquote>
<h4 id="任務三：討論第四週版型該怎麼做"><a href="#任務三：討論第四週版型該怎麼做" class="headerlink" title="任務三：討論第四週版型該怎麼做"></a>任務三：討論第四週版型該怎麼做</h4><hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>終於完成本週的 <strong>RWD</strong> 頁面，雖然有了點時間，但還是要好好研究一下 <strong>Gulp</strong>，另外關於 <strong>RWD</strong> 的地方自己覺得還是有許多需要改進的地方，這邊就只能在自我檢討了Ｑ。</p>
<p>最後想知道 Flex 還是推薦可以參考我的前幾篇文章 -&gt; <strong><a href="https://rexhung0302.github.io/2020/03/23/20200323/#more">[CSS Notes] - 第一次 Flex 就上手</a></strong></p>
<hr>
<h2 id="Demo-成果程式碼"><a href="#Demo-成果程式碼" class="headerlink" title="Demo &amp; 成果程式碼"></a>Demo &amp; 成果程式碼</h2><p>Source Code：<a href="https://github.com/RexHung0302/Hexschool-web-layout-training/tree/master/Week_4">點我</a></p>
<p>Demo：<a href="https://rexhung0302.github.io/Hexschool-web-layout-training/Week_4/dist">點我</a></p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><p><a href="https://rexhung0302.github.io/2020/03/23/20200323/#more">[CSS Notes] - 第一次 Flex 就上手</a></p>
</li>
<li><p><a href="https://abgne.tw/web/gulp/gulp-tuts-install-gulp-js.html">Gulp 入門教學 - 安裝 Gulp.js</a></p>
</li>
<li><p><a href="https://github.com/twtrubiks/Gulp-Beginners-Guide">Gulp 基本使用教學</a></p>
<blockquote>
<p>這個更新時間有點久，建議看看就好，研究了一下發現 Gulp 4.0 和之前版本寫法有所落差！</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>前端</category>
        <category>Hexschool-Web-Layout-Training[六角網頁切版直播班]</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>HexSchool</tag>
        <tag>Web-Layout-Training</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hexschool Web Layout Training] — Week_6 導入網頁規範設計流程</title>
    <url>/2020/05/24/20200524/</url>
    <content><![CDATA[<p><img src="/images/others/loading.gif" data-original="/images/20200524/week_6_classLogo.png" alt="第六週的練習"></p>
<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>沒想到結束前面的兩週 <strong>RWD</strong> 地獄式訓練，這週又來一個有點難度的切版練習。</p>
<p>還好本週配上 <strong>Bootstrap</strong>(以下簡稱 <strong>BS</strong>) 切版，讓整個切版開發順暢許多，甚至 <strong>CSS</strong> 也少寫了非常多，這週就來要說說怎麼使用 <strong>BS</strong> 的 <strong>隔線系統</strong> 及 <strong>修改BS變數為自訂義變數</strong> 讓整個開發流程縮短一半以上的時間吧！</p>
<span id="more"></span>

<p>本週也是使用 <strong>Gulp</strong>，如果你還沒用過或是想知道怎麼從 0 開始建立一個 <strong>Gulp</strong> 歡迎參考我的上一篇文章，<a href="https://rexhung0302.github.io/2020/05/06/20200506/#more">[Tool Notes] — 關於Gulp</a>。</p>
<blockquote>
<p><em>提醒一下，如果沒有使用 <strong>Gulp</strong> 的話可能要另外尋找編譯軟體，因為這邊會使用 <strong>SCSS</strong> 來開發！</em></p>
</blockquote>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><blockquote>
<p>*本篇文章將會以三個角度來紀錄， <strong>課程心得(上課後的心得整理)</strong>、<strong>練習心得(做完作業後的心得整理))</strong> 及 <strong>小組任務(每週會有一項小組任務，寫完後的心得)</strong>。*</p>
</blockquote>
<p>每週的練習挑戰和地下城有點像，都有自己必須練習到的地方；本週需要練習的目標有至少兩點以上的<a href="https://hackmd.io/@YmcMgo-NSKOqgTGAjl_5tg/HJpJk8ABU/%2FiE6mxohOS-ujKU398Ewk1w">練習菜單</a>，及額外的一項打字練習。</p>
<ol>
<li><p>語意命名</p>
</li>
<li><p><strong>幾乎全程使用 <a href="https://docs.emmet.io/cheat-sheet/">emmet</a> 開發</strong></p>
</li>
<li><p><strong><a href="http://keybr.com/">英打速度</a></strong> 練習</p>
</li>
</ol>
<h4 id="關卡目標"><a href="#關卡目標" class="headerlink" title="關卡目標"></a>關卡目標</h4><ol>
<li><p>Bootstrap 4 格線系統設計</p>
</li>
<li><p>電商版型設計</p>
</li>
</ol>
<hr>
<h3 id="課程心得"><a href="#課程心得" class="headerlink" title="課程心得"></a>課程心得</h3><p>由於上週直播課程請假，首先於 <strong>5&#x2F;19(二)</strong> 聽到 <strong>穎旻助教</strong> 的直播，大致講解了一下怎麼做這週的題目，所以大概有個底了，至於重播是大概到週三才看，週四才切版，週五完成。</p>
<h4 id="Desktop-First-Mobile-First"><a href="#Desktop-First-Mobile-First" class="headerlink" title="Desktop First ? Mobile First ?"></a>Desktop First ? Mobile First ?</h4><p>課程首先提到了切版如果有使用 <strong>RWD</strong> 一定都會使用到 <strong>media</strong>，如果不清楚可以先參考<a href="https://www.oxxostudio.tw/articles/201810/css-media-queries.html">此篇文章</a>，那你的切版習慣是從電腦版開始還是手機版呢？</p>
<p>這邊我都習慣從電腦版開始，但是由於 <strong>BS</strong> 是從手機開始，所以這次練習就從手機開始下手，其實兩者都是要先思考到當畫面更改後，我的 <strong>CSS</strong> 應該會怎麼下，這邊簡單示範下。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200524/desktopExample.png" alt="Desktop First"></p>
<p>首先是電腦版先切，<strong>HTML</strong> 及 <strong>CSS</strong> 語法如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*,*<span class="selector-pseudo">:before</span>,*<span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.row</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">outline</span>: <span class="number">5px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">70%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span>(max-width:768px)&#123;</span><br><span class="line">  <span class="selector-class">.box1</span>&#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.box2</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<iframe height="265" style="width: 100%;" scrolling="no" title="2020春季網頁切版直播班 - 第六週作業範例 - RWD &quot;Desktop First&quot;" src="https://codepen.io/rexhung0302/embed/zYvbEJV?height=265&theme-id=dark&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/zYvbEJV'>2020春季網頁切版直播班 - 第六週作業範例 - RWD &quot;Desktop First&quot;</a> by ZeHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<p><img src="/images/others/loading.gif" data-original="/images/20200524/desktopExample2.png" alt="Desktop First"></p>
<p>主要可以看到，這邊電腦版排版完成後，才會去寫當畫面到 <strong>768px</strong> 的時候 <strong>box1</strong> 及 <strong>box2</strong> 的寬度都改為 <strong>100%</strong>，而手機版範例如下：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200524/mobileExample.png" alt="Mobile First"></p>
<blockquote>
<p><em>html 同上，此處略過…</em></p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*,*<span class="selector-pseudo">:before</span>,*<span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.row</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">outline</span>: <span class="number">5px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span>(min-width:992px)&#123;</span><br><span class="line">  <span class="selector-class">.box1</span>&#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">30%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.box2</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">70%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<iframe height="265" style="width: 100%;" scrolling="no" title="2020春季網頁切版直播班 - 第六週作業範例 - RWD &quot;Mobile First&quot;" src="https://codepen.io/rexhung0302/embed/OJyqxqO?height=265&theme-id=dark&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/OJyqxqO'>2020春季網頁切版直播班 - 第六週作業範例 - RWD &quot;Mobile First&quot;</a> by ZeHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<p><img src="/images/others/loading.gif" data-original="/images/20200524/mobileExample2.png" alt="Mobile First"></p>
<p>仔細看其實就是切入點從哪邊，思考點就不一樣，而會提到這個主要是因為 <strong>BS</strong> 的切入點為手機，所以當你套用 <strong>BS</strong> 的時候建議從手機開始切版，如果有要做 <strong>RWD</strong> 的話。</p>
<h4 id="魔數？"><a href="#魔數？" class="headerlink" title="魔數？"></a>魔數？</h4><p>照上面這樣說法，切版肯定會有很多地方要改變排版，比如設計師會想要你在寬度 <strong>200px</strong> 的時候每一欄都是 <strong>100%</strong>，然後在 <strong>490px</strong> 的時候每一欄佔 <strong>70%</strong>，最後 <strong>580px</strong> 的時候每一欄佔 <strong>50%</strong>…</p>
<p>這樣想起來你的 <code>media(min-width:xxxpx)</code> 大概就要寫上百行了吧，所以 <strong>BS</strong> 統整了幾個熱門的 <strong>斷點</strong> 搭配 <strong>格線系統</strong> 來解決這個問題，什麼是 <strong>斷點</strong> 呢？就是在哪個寬度會去改變樣式，而 <strong>BS</strong> 斷點的抓法就是以市面上熱門的手機或是平板寬度來寫，關於 <strong>BS</strong> 的斷線可以參考<a href="https://getbootstrap.com/docs/4.5/layout/overview/">此處</a>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200524/BSoverview.png" alt="斷點參考"></p>
<p>這麼多斷點為什麼會以 <strong>BS</strong> 為主呢？因為大部分的設計師雖然可能不會網頁三寶 <strong>HTML、CSS</strong> 及 <strong>JS</strong>，但大多數都有使用 <strong>BS</strong> 的格線系統來做設計。</p>
<p>這邊就大概示範一下 <strong>BS</strong> 斷點的用法(圖片就不貼了，直接貼上 <strong>Codepen</strong>)：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box col-12 col-lg-3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box col-12 col-lg-9&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*,*<span class="selector-pseudo">:before</span>,*<span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">outline</span>: <span class="number">5px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<iframe height="265" style="width: 100%;" scrolling="no" title="2020春季網頁切版直播班 - 第六週作業範例 - RWD &quot;BS&quot;" src="https://codepen.io/rexhung0302/embed/wvKOPBX?height=265&theme-id=dark&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/wvKOPBX'>2020春季網頁切版直播班 - 第六週作業範例 - RWD &quot;BS&quot;</a> by ZeHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<p>你沒看錯，<strong>CSS</strong> 就是這麼短！雖然上面已經貼出程式碼，但再講斷點之前我們必須先提提 <strong>格線系統</strong>。</p>
<h4 id="960-Grid"><a href="#960-Grid" class="headerlink" title="960 Grid"></a>960 Grid</h4><p>對 <strong>格線系統</strong> 有一定概念的人，應該幾乎都會聽過這個，簡短解釋一下，因為以前解析度都是 <strong>1024</strong>，扣掉瀏覽器的捲軸跟編框，<strong>960</strong> 是許多數字的最小公倍數，所以被拿來當一個基準，而中間被分割成 <strong>12</strong> 等份，也是後來 <strong>BS</strong> 的概念，所以如果是 <strong>grid_3</strong>(<strong>960 的 Class Name</strong>)，就是佔 <strong>960</strong> 的 <strong>40%</strong>(<strong>總共 12 等份</strong>)，因為我們不會讓東西黏再一起，所以 <strong>960</strong> 還會有 <strong>間隔</strong>(<strong>Gutter</strong>)，大概算一下就是 <strong>960 &#x2F; 4 - (10 * 2)</strong>，因為 <strong>960</strong> 間隔設定為 <strong>10px</strong>，所以算出來是 <strong>220px</strong>。</p>
<p>而 <strong>BS</strong> 的用法也是，從 <strong>col-1 ~ col-12</strong>，上面提到的斷點如果加在這裡面，就是 <code>col-sm-2</code>、<code>col-md-5</code>、<code>col-lg-12</code>…</p>
<h4 id="小心地雷"><a href="#小心地雷" class="headerlink" title="小心地雷"></a>小心地雷</h4><p>雖然 <strong>BS</strong> 很方便，但是使用上有幾個要則一定要注意，沒辦法，誰叫你使用了人家的工具就要遵守人家的規則！</p>
<p>由於格線系統已經把大部分的數字都做好處理了，所以要特別遵守對於數字的操作，這邊列出幾點：</p>
<ol>
<li><p>最外層盡量都要包上 <code>container</code> -&gt; <code>&lt;section class=&quot;container&quot;&gt;&lt;/section&gt;</code></p>
</li>
<li><p><code>&lt;section class=&quot;container&quot;&gt;&lt;/section&gt;</code> 的下一層如果要做物件的斷點變化，一定要加上 <code>row</code> -&gt; <code>&lt;div class=&quot;row&quot;&gt;&lt;/div&gt;</code></p>
</li>
<li><p><code>row</code> 的內層第一層只能是 <code>col</code> 格線系統</p>
</li>
<li><p>在 <code>container</code> 及 <code>row</code> 上絕對不要去調整左右的 <strong>margin</strong> 與 <strong>padding</strong></p>
</li>
</ol>
<p>但你以為 <strong>BS</strong> 好處只有這個嗎？仔細上 <strong>BS</strong> <a href="https://getbootstrap.com/docs/4.5/utilities/display/#hiding-elements">網站文件</a>查看，其實許多功能都能加上斷點，比方說 <code>d-none</code> 為 <code>display: none;</code> 隱藏元素，但你可以在 <strong>Class</strong> 上再加上 <code>d-lg-block</code>，這樣元素將會在 <strong>992</strong> 斷點以上的時候將 <code>display: none;</code> 改為 <code>display: block;</code> 直接顯示元素，直接少了好幾行 <strong>CSS</strong> 呢。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200524/d-md-example.png" alt="用處多多"></p>
<h4 id="改進再利用，威力再加倍"><a href="#改進再利用，威力再加倍" class="headerlink" title="改進再利用，威力再加倍"></a>改進再利用，威力再加倍</h4><p>前面講這麼多，其實我們就是要利用 <strong>BS</strong> 已經串好的斷點設計，將預設的變數改為我們設計稿的數字，直接加以利用，下方練習心得將會示範如何修改。</p>
<hr>
<h3 id="練習心得"><a href="#練習心得" class="headerlink" title="練習心得"></a>練習心得</h3><p>這次也是第一次直接修改 <strong>BS</strong> 的預設變數來開發切版，之前在上 <strong>SASS</strong> 課程也沒有這樣做過，實際做起來真的省下不少時間；首先你必須要有 <strong>npm</strong> 的基礎，不然你可能要另外找編譯軟體，因為我們是使用 <strong>SCSS</strong> 來開發。</p>
<h4 id="主角登場"><a href="#主角登場" class="headerlink" title="主角登場"></a>主角登場</h4><p>首先安裝 <strong>BS</strong>。</p>
<blockquote>
<p>此處提醒一下，如果沒有建立 Gulp 的環境</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm init / npm init -y</span><br><span class="line"></span><br><span class="line">$ npm install bootstrap</span><br></pre></td></tr></table></figure>

<p>安裝完成後建立好 <strong>HTML</strong> 的環境，然後建立 <strong>SCSS</strong> 資料夾，之後打開 <strong>node_module</strong> 資料夾然後進入 <code>node_modules/bootstrap/scss/</code> 複製 <strong>_variables.scss</strong>，貼到自己的 <strong>SCSS</strong> 資料夾(要編譯的那個資料夾)。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200524/copySCSSExample.png" alt="複製 variables.scss"></p>
<p>這隻檔案就是 <strong>BS</strong> 的預設變數所在，就像 <strong>CSS</strong> 的 <code>:root</code>，所以我們只要修改裡面的寬度、顏色…等等(有點像原料)，再經過 <strong>BS</strong> 寫好的 <strong>mixin</strong>(有點像機器)，包裝過後就會變成各式各樣的產品。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200524/copySCSSExample2.png" alt="修改 variables.scss"></p>
<p>修改完成後記得在要編譯的 <strong>SCSS</strong> 檔案要引入幾個基本的檔案，順序如下：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../../../node_modules/bootstrap/scss/functions&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./helper/variables&#x27;</span>; <span class="comment">//- 修改 BS 變數</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../../../node_modules/bootstrap/scss/mixins&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../../../node_modules/bootstrap/scss/bootstrap&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>這邊引入之後編譯就能把原本預設的樣式改掉了。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200524/copySCSSExample3.png" alt="修改後的結果"></p>
<p>按照這個樣子，除了修改顏色，也能修改間距，比方說下方這樣：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200524/copySCSSExample4.png" alt="修改後的結果"></p>
<p>就這麼簡單！以上就教完怎麼修改了，這邊看了一遍設計稿抓了大概的數字直接做修改，但其實實務上還是必須和設計師討論過，不然還是會有很多魔數呢…</p>
<h4 id="關於瀑布流"><a href="#關於瀑布流" class="headerlink" title="關於瀑布流"></a>關於瀑布流</h4><p>什麼是瀑布流呢？下面一張圖告訴你。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200524/PinterestExample.png" alt="瀑布流"></p>
<p>平常我們使用 <code>display:flex;</code> 排版，不管元素是不是不一樣高，每一行的高度一定都是抓那一行最高的為主，所以沒辦法做到像上圖這樣的瀑布流。</p>
<p>但是我們可以透過 <code>flex-direction: column;</code> 把一行一行改為一列一列的方式，這樣每一個元素的下一個元素將會緊跟著上一個的屁股，然後第二列也是這樣做，這樣就能做到瀑布流的樣子。</p>
<blockquote>
<p>範例可以參考<a href="https://codepen.io/Chokcoco/pen/wYgYXX">此處</a></p>
</blockquote>
<hr>
<h3 id="小組任務"><a href="#小組任務" class="headerlink" title="小組任務"></a>小組任務</h3><h4 id="任務一：請每個小組討論成員，試著用-NPM-安裝-BS4-SCSS-，並修改變數來調整主色，同時能看到編譯成功的結果"><a href="#任務一：請每個小組討論成員，試著用-NPM-安裝-BS4-SCSS-，並修改變數來調整主色，同時能看到編譯成功的結果" class="headerlink" title="任務一：請每個小組討論成員，試著用 NPM 安裝 BS4 SCSS ，並修改變數來調整主色，同時能看到編譯成功的結果"></a>任務一：請每個小組討論成員，試著用 NPM 安裝 BS4 SCSS ，並修改變數來調整主色，同時能看到編譯成功的結果</h4><p>上方已示範如何修改。</p>
<h4 id="任務二：請試著用第六週分享到的格線系統來實作-album-相簿-、Blog-部落格-的其中一個頁面，還請不要偷看他的程式碼來討論出來。"><a href="#任務二：請試著用第六週分享到的格線系統來實作-album-相簿-、Blog-部落格-的其中一個頁面，還請不要偷看他的程式碼來討論出來。" class="headerlink" title="任務二：請試著用第六週分享到的格線系統來實作 album (相簿)、Blog (部落格)的其中一個頁面，還請不要偷看他的程式碼來討論出來。"></a>任務二：請試著用第六週分享到的格線系統來實作 album (相簿)、Blog (部落格)的其中一個頁面，還請不要偷看他的程式碼來討論出來。</h4><p>程式碼待補。</p>
<h4 id="任務三：討論第六週版型該怎麼做"><a href="#任務三：討論第六週版型該怎麼做" class="headerlink" title="任務三：討論第六週版型該怎麼做"></a>任務三：討論第六週版型該怎麼做</h4><hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>之前其實一直都比較偏好自己手幹 <strong>RWD</strong>，但是這次試著使用 <strong>BS</strong> 並且修改變數後發現省下超多時間，而且一至性更高，推薦給 <strong>CSS</strong> 命名苦手的人，善用別人的輪子在修改，說不定比自己照輪子還要來得快，雖然自己照輪子可能照得更好，因為邏輯是自己想的，但以現今公司案子趕的程度來看，這是最好的方案了。</p>
<p>眼看直播班也快結束了，這次直播班獲益良多，但還是有許多要自己改進的，希望最近遇到瓶頸的自己能快快突破。</p>
<hr>
<h2 id="Demo-成果程式碼"><a href="#Demo-成果程式碼" class="headerlink" title="Demo &amp; 成果程式碼"></a>Demo &amp; 成果程式碼</h2><p>Source Code：<a href="https://github.com/RexHung0302/Hexschool-web-layout-training/tree/master/Week_6">點我</a></p>
<p>Demo：<a href="https://rexhung0302.github.io/Hexschool-web-layout-training/Week_6/dist/index.html">點我</a></p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><p><a href="chrome-extension://klbibkeccnjlkjkiokjodocebajanakg/suspended.html#ttl=960%20Grid%20System%20%E2%80%94%20Demo&pos=0&uri=https://960.gs/demo.html">960 Grid</a></p>
</li>
<li><p><a href="https://getbootstrap.com/docs/4.5/utilities/display/#hiding-elements">BS Document</a></p>
</li>
<li><p><a href="https://wcc723.github.io/design/2018/10/18/grid-system/">鐵人賽：網頁設計常用格線系統(上)</a></p>
</li>
<li><p><a href="https://codepen.io/Chokcoco/pen/wYgYXX">瀑布流範例</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>前端</category>
        <category>Hexschool-Web-Layout-Training[六角網頁切版直播班]</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>HexSchool</tag>
        <tag>Web-Layout-Training</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hexschool Web Layout Training] — Week_7 視差滾動</title>
    <url>/2020/05/25/20200525/</url>
    <content><![CDATA[<p><img src="/images/others/loading.gif" data-original="/images/20200525/week_7_classLogo.png" alt="第七週的練習"></p>
<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>你在看網頁時肯定看過東西突然浮出來會是跳出來，在沒有肯定也看過蘋果官網。</p>
<p>這週就是要來學學怎麼實作視差滾動，而且！而且！而且！<strong>可以不寫任何一行 JS</strong>！</p>
<span id="more"></span>

<p>再次提醒一下，本週也是使用 <strong>Gulp</strong>，如果你還沒用過或是想知道怎麼從 0 開始建立一個 <strong>Gulp</strong> 歡迎參考我的上一篇文章，<a href="https://rexhung0302.github.io/2020/05/06/20200506/#more">[Tool Notes] — 關於Gulp</a>。</p>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><blockquote>
<p>*本篇文章將會以三個角度來紀錄， <strong>課程心得(上課後的心得整理)</strong>、<strong>練習心得(做完作業後的心得整理))</strong> 及 <strong>小組任務(每週會有一項小組任務，寫完後的心得)</strong>。*</p>
</blockquote>
<p>每週的練習挑戰和地下城有點像，都有自己必須練習到的地方；本週需要練習的目標有至少兩點以上的<a href="https://hackmd.io/@YmcMgo-NSKOqgTGAjl_5tg/HJpJk8ABU/%2FiE6mxohOS-ujKU398Ewk1w">練習菜單</a>，及額外的一項打字練習。</p>
<ol>
<li><p>語意命名</p>
</li>
<li><p><strong>幾乎全程使用 <a href="https://docs.emmet.io/cheat-sheet/">emmet</a> 開發</strong></p>
</li>
<li><p><strong><a href="http://keybr.com/">英打速度</a></strong> 練習</p>
</li>
</ol>
<h4 id="關卡目標"><a href="#關卡目標" class="headerlink" title="關卡目標"></a>關卡目標</h4><ol>
<li>學會不使用一行 JS 就做出視差滾動</li>
</ol>
<hr>
<h3 id="課程心得"><a href="#課程心得" class="headerlink" title="課程心得"></a>課程心得</h3><p>本週課程提到了讓網頁互動感提升的方法，沒錯就是動畫。</p>
<p>其實網頁動畫入門並不困難，但是要靈活運用還是要需要一點技巧，把主要要掌握的幾個要點先記起來，後面再慢慢修正就好，但如果你覺得自己手幹太麻煩，其實現在跟大多數好用的套件一樣，也有人幫你包好囉！</p>
<h4 id="手動派"><a href="#手動派" class="headerlink" title="手動派"></a>手動派</h4><p>要學會動畫首先要先記得 <code>animation</code> 這個屬性，它就像 <strong>Flash</strong> 的動畫影格差不多，只是筆者沒學過 <strong>Flash</strong> 所以這邊不對後者做討論，但其實前者屬性和後者都有個共通點都是使用動畫影格，先讓我們看看下面的範例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#42b883</span>;</span><br><span class="line">    <span class="attribute">animation-name</span>: run;</span><br><span class="line">    <span class="attribute">animation-duration</span>: <span class="number">3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> run&#123;</span><br><span class="line">    <span class="number">0%</span>&#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0px</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span>&#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">100px</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<iframe height="265" style="width: 100%;" scrolling="no" title="2020春季網頁切版直播班 - 第七週作業範例 - Animation" src="https://codepen.io/rexhung0302/embed/LYpvWJJ?height=265&theme-id=dark&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/LYpvWJJ'>2020春季網頁切版直播班 - 第七週作業範例 - Animation</a> by ZeHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<p>仔細看 <code>div</code> 會由左往右跑 <strong>3秒</strong> 的時間完成，這邊你已經會動畫起手式了！</p>
<ol>
<li><p><code>animation-name</code> 取好動畫名稱</p>
</li>
<li><p><code>animation-duration</code> 設定動畫完成時間，更多設定下方會提到</p>
</li>
<li><p><code>@keyframes</code> 帶入你的動畫名稱並設定中途要做什麼改變</p>
</li>
</ol>
<p>這邊也有幾個重要點：</p>
<ul>
<li><p><strong>@keyframes 裡的 from 到 to 可以改為數字，可以多個區間，比如 0% 15% 35% 50% 100%，但切記數字一定要加上 %</strong></p>
</li>
<li><p><strong>如果沒有 100% 或是 to，網頁會自動幫我們算出結果</strong></p>
</li>
<li><p><strong>後者蓋前者設定，比如兩個相同的 50% 會吃後面的設定，這和 CSS 一模依樣</strong></p>
</li>
</ul>
<h4 id="更多設定"><a href="#更多設定" class="headerlink" title="更多設定"></a>更多設定</h4><p>上面有提到除了 <code>animation-name</code> 及 <code>animation-duration</code> 還有更多的設定，在 <strong><a href="https://www.w3schools.com/cssref/css3_pr_animation.asp">W3C</a></strong> 的介紹含上面兩個有這幾個：</p>
<ul>
<li>animation-name</li>
<li>animation-duration</li>
<li>animation-delay</li>
<li>animation-iteration-count</li>
<li>animation-timing-function</li>
<li>animation-direction</li>
<li>animation-fill-mode</li>
<li>animation-play-state</li>
</ul>
<blockquote>
<p><em>有興趣可以參考 <strong><a href="https://www.w3schools.com/cssref/css3_pr_animation.asp">W3C</a></strong> 的用法介紹，更多詳細動畫這邊就不做介紹，有篇文章這邊狠力推，筆者剛開始學動畫就是參考<a href="https://www.oxxostudio.tw/articles/201803/css-animation.html">這篇文章</a>。</em></p>
</blockquote>
<h3 id="自動派"><a href="#自動派" class="headerlink" title="自動派"></a>自動派</h3><p>上面有提到雖然我們可以手動設定，但是有許多人會覺得這一堆 <code>@keyframes</code> 超亂的啊！而且我想要一制性、效率性，沒問題這邊就先介紹一個筆者很常使用的套件，而且也是目前全世界最多人使用的動畫套件！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200525/animateCSSWebSite.gif" alt="tada!"></p>
<blockquote>
<p><em>其實筆者中間有一段時間沒有用，沒發現官網改版了。</em></p>
</blockquote>
<p>如果你只想要你的東西就是單純跑動畫就好，甚至你能不用懂動畫的基礎貨概念，因為開頭就是擺明要教你不寫一行 <strong>JS</strong> 達到動畫效果了，所以這邊直接上範例：</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="2020春季網頁切版直播班 - 第七週作業範例 - Animate.css" src="https://codepen.io/rexhung0302/embed/mdegmVd?height=265&theme-id=dark&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/mdegmVd'>2020春季網頁切版直播班 - 第七週作業範例 - Animate.css</a> by ZeHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<p>首先你必須引入 <strong><a href="https://animate.style/">animate.css</a></strong>，看你要用 <code>CDN</code> 或是 <code>npm install</code> 都可以，然後前置步驟做完之後，接著在你要使用動畫的地方，加上 <code>Class Name</code>，切記一定要有 <code>animate__animated</code>，接下來再加上 <code>animate__你想家的動畫名稱</code>，後者可以加上你想家的動畫名稱，例如 <code>animate__fadeIn</code>、<code>animate__bounceInDown</code>…等等，是不是很簡單啊。</p>
<p>這個套件其實還能再加上動畫持續幾秒，延遲多久播放，這些其實都可以調整，手幹有的設定套件其實都能在設定，有興趣也可以在詳細參考<a href="https://animate.style/">官方文件</a>。</p>
<h3 id="我全都要？"><a href="#我全都要？" class="headerlink" title="我全都要？"></a>我全都要？</h3><p>雖然上方提到有手動設定也有自動設定，但你可能這時候會想：</p>
<p>Ｑ：我加上去動畫就自己開始跑了呀，有時候我想要畫面滑動到特定的地方在播放，我總不可能去算使用者多久滑到那個地方，然後延遲吧？</p>
<p>Ａ：當然是的，所以這時候你就必須全都要了！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200525/NickYoung.jpg" alt="哪泥？"></p>
<p>雖然上方提到一行 <strong>JS</strong> 都不用寫，但其實還是至少要寫幾行套件設定啦！(<del>這不算吧</del></p>
<p>這邊先介紹另一個套件 <strong><a href="https://michalsnik.github.io/aos/">AOS.js</a></strong>，其實這個套件和<br><strong><a href="https://animate.style/">animate.css</a></strong> 差不多，引入套件後，在想要加上動畫得元素加上 <code>data-aos=&quot;動畫名稱&quot;</code> 就可以了。</p>
<p>但是差別是什麼呢？<strong><a href="https://michalsnik.github.io/aos/">AOS.js</a></strong> 並不會在網頁一載入就跑動畫，而是會偵測你的網頁滑動到該播放動畫的元素那的時候才會播放，這也是為什麼這個套件要多引入一個 <strong>.js</strong> 檔(雖然提到不用寫任何一行 <strong>JS</strong> 但是這個套件必須初始化，所以必須在 <strong>JS</strong> 加上 <code>AOS.init();</code>，僅此一行)。</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="2020春季網頁切版直播班 - 第七週作業範例 - AOS" src="https://codepen.io/rexhung0302/embed/qBOwmjw?height=265&theme-id=dark&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/qBOwmjw'>2020春季網頁切版直播班 - 第七週作業範例 - AOS</a> by ZeHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<p>知道了怎麼用之後，這個套件也可以加上手幹的那些設定，加上的方法也是在想跑動畫的元素上加上 <code>data-aos-offset</code>、<code>data-aos-duration</code>…等等，詳細可參考**<a href="https://github.com/michalsnik/aos#2-set-animation-using-data-aos-attribute">官方文件</a>**。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200525/aosAttributes.png" alt="詳細可參考官方指南"></p>
<p>這個套件大概的原理就是他會偵測你網頁的視窗底部，在接近你想加上動畫的元素時，會去抓 <strong>data</strong> 的 <strong>attribute</strong>，然後把裡面的動畫名稱加上 <code>Class Name</code> 裡。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200525/IWantAll.jpg" alt="我全都要"></p>
<p>講到這邊你大概就懂了，我全都要是要什麼東西，簡單說就是移到要播放動畫的地方，加上 <strong><a href="https://animate.style/">animate.css</a></strong> 的動畫，這個要怎麼辦到呢？前面有提到 <strong><a href="https://michalsnik.github.io/aos/">AOS.js</a></strong> 會在畫面移到特定的地方加上 <strong>data-attribute</strong> 的名稱，那我們把裡面替換成 <strong><a href="https://animate.style/">animate.css</a></strong> 的名稱就可以了，但是設定就必須還是要自己上去改。</p>
<p>關於怎麼合併這邊就直接示範一個範例：</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="2020春季網頁切版直播班 - 第七週作業範例 - AOS ft. Animate.css" src="https://codepen.io/rexhung0302/embed/GRpLmzr?height=265&theme-id=dark&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/GRpLmzr'>2020春季網頁切版直播班 - 第七週作業範例 - AOS ft. Animate.css</a> by ZeHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<p>其實 JS 也可以在設定一些諸如<strong>視窗距離多少觸發動畫</strong>，<strong>是否只觸發一次動畫</strong>…等等，詳細也可以在參考官方<a href="https://github.com/michalsnik/aos#1-initialize-aos">文件設定</a>。</p>
<hr>
<h3 id="練習心得"><a href="#練習心得" class="headerlink" title="練習心得"></a>練習心得</h3><p>其實本週其實可以套用前幾週的版面直接做練習，但因為自己初衷是想練習切版，所以還是切新的版面並且套上套件。</p>
<p>過程其實切版還算順利，只是最後套上套件碰到了個雷，因為套件跑動畫會先卡在邊邊(看得到的狀況，然後再跑動畫進來，所以當下有在 <code>body</code>，下了一個 <code>overflow-x: hidden;</code>，導致全部的動畫都隱藏了，連跑都沒有跑，還好同組的同學 <strong>Alex</strong> 幫忙發現解決了。</p>
<p>除此之外沒有太大的問題，就繼續往下週邁進了！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200525/homeworkExample.gif" alt="原諒這週沒有 RWD 設計稿所以沒有做 RWD"></p>
<hr>
<h3 id="小組任務"><a href="#小組任務" class="headerlink" title="小組任務"></a>小組任務</h3><h4 id="任務一：請每個小組討論成員，試著用本週教的視差效果，並套用在自己的版型上，彼此協助除錯，並提交到任務系統上。"><a href="#任務一：請每個小組討論成員，試著用本週教的視差效果，並套用在自己的版型上，彼此協助除錯，並提交到任務系統上。" class="headerlink" title="任務一：請每個小組討論成員，試著用本週教的視差效果，並套用在自己的版型上，彼此協助除錯，並提交到任務系統上。"></a>任務一：請每個小組討論成員，試著用本週教的視差效果，並套用在自己的版型上，彼此協助除錯，並提交到任務系統上。</h4><hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>記得在切第一週的版型就有看見同學使用 <strong><a href="https://michalsnik.github.io/aos/">AOS.js</a></strong>，當下覺得挺酷的想等課程結束研究看看，沒想到一直到這週就提到了。一直以來切版常常使用動畫，因為自己覺得動畫對使用者體驗提升許多，但是過多的動畫又會困擾使用者，所以真的要斟酌呢！</p>
<p>在做這週時想到之前 The F2E 也有做過動畫遊戲，雖然當時沒有做完，但是至少還能跑，當時是使用 <a href="https://github.com/photonstorm/phaser">phaser.js</a> 遊戲引擎(phaser3)，當時關卡主是 Mike，有興趣可以參考他的部落格文章 <a href="https://medium.com/i-am-mike/phaser-js-%E7%9A%842d%E9%81%8A%E6%88%B2%E9%96%8B%E7%99%BC%E5%85%A5%E9%96%80-part-1-df1b587927ef">Phaser.js 的2D遊戲開發入門 part-1</a> 真的挺有趣的，這邊提供一下半完成品。</p>
<p><a href="https://rexhung0302.github.io/The-F2E-Challenge/NinetyChallengeGame/index">The F2E 第五週 - NinetyChallengeGame 90秒遊戲 Demo</a></p>
<hr>
<h2 id="Demo-成果程式碼"><a href="#Demo-成果程式碼" class="headerlink" title="Demo &amp; 成果程式碼"></a>Demo &amp; 成果程式碼</h2><p>Source Code：<a href="https://github.com/RexHung0302/Hexschool-web-layout-training/tree/master/Week_7">點我</a></p>
<p>Demo：<a href="https://rexhung0302.github.io/Hexschool-web-layout-training/Week_7/dist/index.html">點我</a></p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><p><a href="https://www.oxxostudio.tw/articles/201803/css-animation.html">完整解析 CSS 動畫 ( CSS Animation )</a></p>
</li>
<li><p><a href="https://codepen.io/liao/pen/MWaZEEd">校長的範例程式碼</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>前端</category>
        <category>Hexschool-Web-Layout-Training[六角網頁切版直播班]</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>HexSchool</tag>
        <tag>Web-Layout-Training</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hexschool Web Layout Training] — Week_8 CSS 模組化管理</title>
    <url>/2020/06/05/20200605/</url>
    <content><![CDATA[<p><img src="/images/others/loading.gif" data-original="/images/20200605/week_8_classLogo.png" alt="第八週的最後練習"></p>
<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>為期八週的訓練本週是最後一次課程，這週除了複習過去七週的重點外，這週的重點也放在如何更好的管理 <strong>CSS</strong>。</p>
<p>這週也會將 <strong>BS</strong> 利用的更淋漓盡致。</p>
<span id="more"></span>

<p>最後一週也是使用 <strong>Gulp</strong>，如果你還沒用過或是想知道怎麼從 0 開始建立一個 <strong>Gulp</strong> 歡迎參考我的上一篇文章，<a href="https://rexhung0302.github.io/2020/05/06/20200506/#more">[Tool Notes] — 關於Gulp</a>。</p>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><blockquote>
<p>*本篇文章將會以三個角度來紀錄， <strong>課程心得(上課後的心得整理)</strong>、<strong>練習心得(做完作業後的心得整理))</strong> 及 <strong>小組任務(每週會有一項小組任務，寫完後的心得)</strong>。*</p>
</blockquote>
<p>每週的練習挑戰和地下城有點像，都有自己必須練習到的地方；本週需要練習的目標有至少兩點以上的<a href="https://hackmd.io/@YmcMgo-NSKOqgTGAjl_5tg/HJpJk8ABU/%2FiE6mxohOS-ujKU398Ewk1w">練習菜單</a>，及額外的一項打字練習。</p>
<ol>
<li><p>語意命名</p>
</li>
<li><p><strong>幾乎全程使用 <a href="https://docs.emmet.io/cheat-sheet/">emmet</a> 開發</strong></p>
</li>
<li><p><strong><a href="http://keybr.com/">英打速度</a></strong> 練習</p>
</li>
</ol>
<h4 id="關卡目標"><a href="#關卡目標" class="headerlink" title="關卡目標"></a>關卡目標</h4><ol>
<li>最終練習</li>
</ol>
<hr>
<h3 id="課程心得"><a href="#課程心得" class="headerlink" title="課程心得"></a>課程心得</h3><p>這週課程前半段複習了前七週的內容，另外六角校長為了讓大家更了解如何管理好 <strong>CSS</strong> 在上課時也提到了 <strong>OOCSS、BEM</strong>…等等。</p>
<p>之前在上六角 <strong>SASS</strong> 課程時自己有寫了一篇文章，有興趣可以看看那篇文章，我只能說，至今為止，幫助很大！如果你還不懂關於 <strong>CSS</strong> 的規範更應該要看看 <a href="https://rexhung0302.github.io/2019/05/30/20190530/">[CSS Notes] - CSS模組化</a>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200605/oocss_bem_blog.png" alt="有興趣可以參考"></p>
<p>另外大部分時間應該都是在講解一些 <strong>CSS</strong> 拆分及學生的程式碼拆分分享，第八週就是複習的一週，也是最後一週了。</p>
<hr>
<h3 id="練習心得"><a href="#練習心得" class="headerlink" title="練習心得"></a>練習心得</h3><p>其實本週上次講到很多，但還是像前面說的，本週著重在複習前幾週的成果，所以這週就是最後實戰演練了。</p>
<p>本週其實想挑戰在 <strong>SCSS</strong> 上不用任何一頁 <strong>pages</strong>，想把所有的 <strong>CSS</strong> 都拆分為 <strong>元件(Components)</strong>，但說實在的，超級難啊！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200605/detail_example.png" alt="照片牆"></p>
<p>像是在某一頁需要一個照片牆，這個地方想把它變成元件其實沒這麼容易，而且設計稿看來看去就只有這個地方有用到。</p>
<p>雖然排版可以使用 <strong>BS</strong> 的格線系統搞定，但是這種需要 <strong>RWD</strong> 變化的版型，使用格線系統常常就會爆版…</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200605/member_example.png" alt="照片牆"></p>
<p>還有使用者頭像這部分，其實最上方的 <strong>Header</strong> 已經弄成模板了，這時候就會猶豫關於頭像照片的 <strong>CSS</strong> 我應該放在 <strong>Layout</strong> 的 <strong>header.scss</strong> 裡面，還是放在 <strong>components</strong> 裡面呢？</p>
<p>其實上了八週課程，幾乎每週都在思考怎麼排版外，也在思考怎麼分類 <strong>CSS</strong>，但其實寫程式就是這樣，沒有最好的解答，只有最適合你的方式，如果你寫的分類的 <strong>CSS</strong> 是讓你幾個月後回來看一幕瞭然，且其他人接手也可以快速進入狀況，那我覺得就是及格的了！</p>
<blockquote>
<p><em>因為我們常常過度設計化，也就是可能只有一個地方在用的 <strong>CSS</strong> 也拆開來，我想這個還是我必須要克服的點。</em></p>
</blockquote>
<hr>
<h3 id="小組任務"><a href="#小組任務" class="headerlink" title="小組任務"></a>小組任務</h3><h4 id="任務一：請每個小組討論成員，挑選其中此連結的-SCSS-結構來進行討論其優缺點"><a href="#任務一：請每個小組討論成員，挑選其中此連結的-SCSS-結構來進行討論其優缺點" class="headerlink" title="任務一：請每個小組討論成員，挑選其中此連結的 SCSS 結構來進行討論其優缺點"></a>任務一：請每個小組討論成員，挑選其中此<a href="https://www.notion.so/66979b4a96f24a4cbbf14fd802ed59be?v=5bef73ef36c444b5817fdb8b0b1522fe">連結</a>的 SCSS 結構來進行討論其優缺點</h4><h4 id="任務二：討論第八週版型該怎麼做"><a href="#任務二：討論第八週版型該怎麼做" class="headerlink" title="任務二：討論第八週版型該怎麼做"></a>任務二：討論第八週版型該怎麼做</h4><hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>雖然這週心得看起來爆炸少，但其實每天都切的快爆炸，上週結束後禮拜一開工幾乎是天天切版，很多地方真的是要動手做才會發現精髓，這次的直播課程收益真的良多，更多的心得就留到下一篇總結吧！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200605/week_8.png" alt="成品"></p>
<p>這邊真的要給設計師一個最高敬意，幾乎每週都是用心設計過，不是胡亂設計的，最近工作幾乎都是客戶要我們切版搭設計，光是設計就搞得一個頭兩個大，難怪很多人常常說，設計的美感是天生的，很好我沒有Ｑ，我還是乖乖切版！</p>
<hr>
<h2 id="Demo-成果程式碼"><a href="#Demo-成果程式碼" class="headerlink" title="Demo &amp; 成果程式碼"></a>Demo &amp; 成果程式碼</h2><p>Source Code：<a href="https://github.com/RexHung0302/Hexschool-web-layout-training/tree/master/Week_8">點我</a></p>
<p>Demo：<a href="https://rexhung0302.github.io/Hexschool-web-layout-training/Week_8/dist/index.html">點我</a></p>
<blockquote>
<p><em>關於設計稿有版權問題，所以這系列文章的連結都已經拿掉囉，需要的可以參考我的成果版面，再進行練習。</em></p>
</blockquote>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li>無</li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>前端</category>
        <category>Hexschool-Web-Layout-Training[六角網頁切版直播班]</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>HexSchool</tag>
        <tag>Web-Layout-Training</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hexschool Web Layout Training] — 八週總結</title>
    <url>/2020/06/06/20200606/</url>
    <content><![CDATA[<p><img src="/images/others/loading.gif" data-original="/images/20200606/class_logo_gif.gif" alt="2020春季網頁切版直播班"></p>
<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>為期八週的切版直播班結束了，但真正的挑戰才正要開始。</p>
<p>如果你跟我一樣，不是在切版就是在前往切版的路上，但是想加強自己的切版能力，所以正在思考要不要購買課程，那就可以考慮看看這篇心得文。</p>
<span id="more"></span>

<p>如果已經聽過 <strong><a href="https://www.hexschool.com/">六角學院</a></strong> 且購買過他們的課程，也可以看看這篇文章，說不定你會成為我的下一屆學<del>弟</del>妹？！</p>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><ol>
<li><p><a href="#%E6%88%91%E7%82%BA%E4%BB%80%E9%BA%BC%E5%A0%B1%E5%90%8D%E9%80%99%E5%A0%82%E8%AA%B2%EF%BC%9F">我為什麼報名這堂課？</a></p>
</li>
<li><p><a href="#%E5%9C%A8%E9%80%99%E5%A0%82%E8%AA%B2%E6%88%91%E7%8D%B2%E5%BE%97%E4%BB%80%E9%BA%BC%EF%BC%9F">在這堂課我獲得什麼？</a></p>
</li>
<li><p><a href="#%E7%B8%BD%E7%B5%90">總結</a></p>
</li>
</ol>
<hr>
<h3 id="我為什麼報名這堂課？"><a href="#我為什麼報名這堂課？" class="headerlink" title="我為什麼報名這堂課？"></a>我為什麼報名這堂課？</h3><p>雖然第一週已經提過為什麼會參加，但總結不免還是要在回顧一次自己這八週的過程。</p>
<h4 id="專案時程"><a href="#專案時程" class="headerlink" title="專案時程"></a>專案時程</h4><p>沒錯！就是專案時程；先大致描述一下自己，目前筆者正在某一間專門做 <strong>LINE CRM(顧客管理)</strong> 的公司，做一些關於 <strong>LINE</strong> 上可以看到某一些官方帳號或是私人企業的活動，以及 <strong>LINE 機器人、推播、LINE 後台</strong>…等等，大概就是跟 <strong>LINE</strong> 有關係的都會做到。</p>
<p>為什麼提到這個呢？其實我們有自己的後台供顧客使用沒有錯，但其實客戶都會想要 <strong>客製化</strong>，所以常常在某些節日，抑或是企業的行銷申請到一大筆經費要搞活動的時候，就是我們 <strong><del>發大財</del>倒大楣</strong> 的時候。</p>
<p>這時候除了工程師自己的工作時程要拿捏好之外，<strong>PM(註1)</strong> 也一樣重要！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200606/pm.png" alt="PM大概分為這幾種，詳細介紹可看註解"></p>
<p>會提到這個是筆者個人覺得 <strong>PM</strong> 並沒有真的把時間安排得很好，且大部分都是客戶說什麼功能，就接什麼功能，然後再丟給工程師請工程師盡量能做到，由於筆者還很菜，而且是的我是奴工，不敢打倒資本主義的 <strong>高強</strong>，所以只能盡量去做了。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200606/freeMan.png" alt="取至 Youtuber &#39;反正我很閒&#39;"></p>
<p>廢話說太多，下面我們會繼續說；因為有前因，所以後果就是筆者必須加強自己的切版能力，我想提升自己的切版能力後，總能一個打十個吧？</p>
<h4 id="誤打誤撞"><a href="#誤打誤撞" class="headerlink" title="誤打誤撞"></a>誤打誤撞</h4><p>就這麼恰巧，六角學院就推播了一則訊息來，又是剛好關於切版，所以想了幾分鐘後就報名了，這幾分鐘想什麼呢？是關於 <strong>實體</strong> 或是 <strong>線上課程</strong> 的差別嗎？錯！<del>是想我的荷包君夠不夠力</del>；關於 <strong>實體</strong> 或 <strong>線上課程</strong> 的差別後面會提到。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200412/line_class_message.png" alt="限量就是邪惡 一秒開啟菜市場大嬸模式"></p>
<blockquote>
<p>*註1: <strong>PM</strong>最常指的職位大致上可分為兩種，<strong>專案經理(Project Manager)</strong> 和 <strong>產品經理(Product Manager)</strong>，前者為規劃整個大致計畫流程、時間、架構，更重要的就是協調 <strong>產品經理(Product Manager)</strong> 去做任務的職位；後者大概就是接受前者任務然後負責追進度的！有興趣可以參考<a href="https://technews.tw/2020/05/17/what-is-pm/">這 5 種角色都叫 PM！專案經理、產品經理，差在哪？</a>*</p>
</blockquote>
<hr>
<h3 id="在這堂課我獲得什麼？"><a href="#在這堂課我獲得什麼？" class="headerlink" title="在這堂課我獲得什麼？"></a>在這堂課我獲得什麼？</h3><p>這堂課程其實滿特別，以往都是 <strong>Udemy</strong> 購買課程，然後獲得影片，在隨自己的進度去看，然後往往都沒看完，或是看一兩片就沒然後了…</p>
<p>這堂課開頭就寫明是直播，而且上限只收 <strong>200</strong> 個人，因為每週一堂課，且校長每週都會出作業，然後可以透過他們的後台系統提交，所以為了改程式碼的品質，就收 <strong>200</strong> 為主。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200606/slack.png" alt="校長幾乎每天都在"></p>
<p>在課程開始前校長就請大家先自我介紹然後幫大家分組，且請大家加入專屬的 <strong>Slack</strong>，所以大家除了共用頻道外，還有各個小組的頻道，每週除了個人作業外，還有小組作業，所以才會分組，目的除了解任務，最主要我覺得還是透過彼此加油打氣讓自己更有動力往前進！</p>
<p>分組的原則基本上是藉由自我介紹來分組，會將差不多性質的同學歸再一起，比如說 <strong>設計師、學生、轉職者</strong>…等等。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200606/group.gif" alt="分組活動"></p>
<p>這次筆者被分配到 <strong>鞋鋼鍊金2組</strong>，其實剛開始筆者覺得應該是要被分配到 <strong>軟工盾坦組(適合以前有做過程式工作，或是現職程式領域的勇者)</strong>，但自己分到的這組同學都太給力了，最後就不小心達成了一次作業率繳交第一的成績。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200606/group.png" alt="分組活動"></p>
<p>分組結束就是每週五的上課，然後從八點開始一路到十點半，有時候會超過，雖然我們是消費者心態，超過就是爽，賺到了，但其實你也知道 <strong>關於注意力的研究顯示，人能維持專注的時間約在10到18分鐘，過了18分鐘後，人的身體因為能量耗盡…ballaballa(詳細可參考 <a href="https://www.businessweekly.com.tw/careers/blog/21935">每次開會都落落長？美研究：最多●人、最長●分鐘，最能保持專注</a>)</strong>，所以後面常常上課上到出神，但還好課程跟大部分線上課程一樣都還是可以參考重播影片。</p>
<p>而且上課同學都很熱心，甚至還有自發性的 <strong>義工團</strong>，他們 <strong>替重播影片加上重點時間</strong>、<strong>寫課程範例</strong>、<strong>提供能力內的指導</strong>…等等，根本就是 <strong>上班族福音</strong>！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200606/video.png" alt="貼心！"></p>
<p>除了上方提到的 <strong>分組、重播影片</strong> 外，這次六角學院還準備了很特別的 <strong>BOSS系統</strong>，每週提交作業都能對 <strong>BOSS</strong> 造成傷害，算是挺有意思的！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200606/BOSS.png" alt="強大的BOSS"></p>
<p>講完一些廢話要進入廢話重點了，就是課程本身，由於這次接版直播班是從０開始的，所以課程很多地方都是從基礎開始說，不怕銜接不上，因為筆者也想把基礎打好，所以這次課程對我來說很剛好！</p>
<p>上課除了老師單方面的講解外，隨時都能發問。雖然講解者(校長)本身可能會因為被頻道文字洗掉問題，但都隨時可以在 <strong>Slack</strong> 上對校長或是助教發問。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200606/talk.png" alt="動力來源之一(誤)"></p>
<blockquote>
<p>偷偷說助教真的人超好啊，而且直播也講解的淺顯易懂！</p>
</blockquote>
<p>此外作業批改的時間也都算是很迅速，幾乎都是在提交後的最晚三四天內會收到回饋，而且也不是隨便看一看，是真的有用心在回覆，我都擔心校長及助教的肝了…</p>
<p>最後要提的大概就是最狂的 <strong>Code Review</strong> 升級版 <strong>Video Code Review</strong> 了！校長除了看你的程式碼外，還鼓勵學生錄下自己切版的影片過程給他，然後他會給你更多建議。雖然通常老王賣瓜都會自誇，但誠如校長所說，還真沒見過課程老師會願意用那麼多時間，甚至假日的時間都在批改且觀看學生的程式碼，光這點就值得滿分了。</p>
<blockquote>
<p><em>你說！老師都這麼用心了，你還有什麼藉口不努力認真？</em></p>
</blockquote>
<h4 id="業配？"><a href="#業配？" class="headerlink" title="業配？"></a>業配？</h4><p>前面講了一堆好處，你可能會以為我在業配，雖然我也很想，但筆者為人秉持的原則是實話實說，所以這邊也要來說說筆者認為的幾個缺點(希望不會被黑名單</p>
<p>線上課程除了大家都知道的比起實體課程會較沒推動力，容易懶惰外，這點其實還算可以放心。</p>
<p>前幾週校長有提到每週上課都需要簽到，如果沒有簽到校長會請專員或是親自打電話萊督促你上課，但我想既然你都來上課了，沒有點自制力，最大問題還是自己。</p>
<p>因為筆者自己能力不夠別人好，所以常常覺得是不是會落後別人，所以每週課程結束就會休息一天然後接著做作業，以前幾週來看幾乎都是可以完成的，且難度適中。</p>
<p>不過這邊說好了要說缺點，大致上就是課程或許算是比較趕，所以大概在第三週加入 <strong>RWD</strong> 後突然難度倍增，可能許多人會切到有點心灰意冷，但其實校長希望大家都能慢慢來，觀念正確最重要，所以交作業期限並非一個禮拜為限。</p>
<p>而 <strong>BOSS系統</strong> 我覺得似乎真的是比較娛樂性，和分組一樣，組員們並沒有真的到非常熱絡，大概就是每週討論一次，此外筆者認為小組跟 <strong>BOSS</strong> 也許能有更多的互動，比方說 <strong>支線任務</strong>，<br>雖然 <strong>BOSS</strong> 並非上課重點。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200606/mession.png" alt="任務系統"></p>
<p>以上大概就是筆者覺得的缺點，但似乎也不算什麼缺點，筆者依舊認為上課最主要還是自己的態度為主，如果自己都不鞭策自己，那別人也幫不了你。</p>
<hr>
<h3 id="線上課程值得嗎？"><a href="#線上課程值得嗎？" class="headerlink" title="線上課程值得嗎？"></a>線上課程值得嗎？</h3><p>上面談完了優缺點之後，就該思考線上課程值不值得，筆者認為<strong>線上</strong> 及 <strong>實體</strong> 肯定都各有優缺點，但如果今天你的情況符合以下幾點，那你就可以不用考慮可以直接拿出錢包了：</p>
<ol>
<li><p><strong>較無法抽出固定時間</strong></p>
</li>
<li><p><strong>需要有品質保證，不是隨便的三流教師來上課的課程</strong></p>
</li>
<li><p><strong>想要擁有一大批一起努力的同溫層同伴們</strong></p>
</li>
<li><p><strong>錢包受得了</strong></p>
</li>
</ol>
<p>最後一點肯定要解釋一下，不是課程貴，而是你買了一堂後你會欲罷不能想再買下一堂，這大概就是 <strong>六角學院</strong> 的魔力吧！不信你試試看。</p>
<p>我不敢說 <strong>六角學院</strong> 的課程跟其他課程比起來一定是最好的，但我能保證在 <strong>用心、態度、師資</strong>…等等 你都不用擔心。</p>
<blockquote>
<p><em>完蛋了更像業配了…</em></p>
</blockquote>
<p>上面有提到筆者通常會在課後休息一天在開始動工，這也是最近筆者一直想到的，<strong>工作、學習、放鬆</strong>，這三件事情就應該要剛好像是 <code>width: calc(100% / 3);</code> 那樣剛好各佔 <strong>1&#x2F;3</strong> 等份，這樣生活才能達到平衡。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200606/life.png" alt="生活三角"></p>
<blockquote>
<p><em>有好的學習才能應付工作，有好的工作結果才能夠好好放鬆生活，千萬不要讓任何一邊比重超過，你的生活會慢慢出問題。</em></p>
</blockquote>
<p>因為好多工程師同事及朋友都因為工作而失去動力，筆者認為最理想情況就是工作及興趣合二為一，現實狀況或許很難，但相較從興趣去找尋理想的工作，筆者認為更適合從工作中尋找興趣，帶給你的不只會是成就感，也會是滿滿的經驗，甚至可能會成為你的武器，而你的生活也會過得更快樂，不是一部工作機器。</p>
<hr>
<h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>我想很多人比較喜歡看總結，所以這邊就簡單的來總結一下這們課程的八週心得。</p>
<ol>
<li><p>門檻低好入門。</p>
</li>
<li><p>講解清晰易懂，老師助教有問必答。</p>
</li>
<li><p>不脫離主題之外，課程設計有趣及多元化。</p>
</li>
<li><p>有一大批的熱情六角同學隨時陪你奮鬥，這條路上不孤單。</p>
</li>
<li><p><strong><del>校長課程大放送！</del></strong></p>
</li>
</ol>
<p>第五點其實不是每個課程都有啦，剛好這次的直播課程結尾校長為了讓各位更有前進的動力，所以推出了很多完成幾項作品會有什麼獎勵，其中不乏更多的免費課程影片或課程折價，甚至可以加入菁英頻道，或許之後的每一部關於這個 <strong>直播班(第二屆、第三屆…)</strong> 的加碼 <strong>DLC</strong> 影片🤫。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200606/reward.png" alt="獎品大放送"></p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>上方總結提到的就是個人簡短課程心得，接下來筆者會繼續在前端的路上邁進，可能偶爾偷偷摸個後端，但還是希望大家除了在變強的道路上一起加油外，切勿忘了生活的比重，好好的工作，也好好的陪伴家人！致正在努力的你&#x2F;妳。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200606/reward_2.png" alt="實體獎品"></p>
<blockquote>
<p><em>連實體獎品都有了，真的超級用心！</em></p>
</blockquote>
<hr>
<h2 id="Demo-成果程式碼"><a href="#Demo-成果程式碼" class="headerlink" title="Demo &amp; 成果程式碼"></a>Demo &amp; 成果程式碼</h2><p>八週的 Source Code：<a href="https://github.com/RexHung0302/Hexschool-web-layout-training">點我</a></p>
<blockquote>
<p><strong>Demo</strong> 也可從 <strong>Source Code</strong> 進入觀看</p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20200606/final.png" alt="八週作品"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20200606/final_2.png" alt="也有 RWD 可以到 DEMO 拉小觀看"></p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><p><a href="https://www.hexschool.com/">六角學院</a></p>
</li>
<li><p><a href="chrome-extension://klbibkeccnjlkjkiokjodocebajanakg/suspended.html#ttl=%E6%AF%8F%E6%AC%A1%E9%96%8B%E6%9C%83%E9%83%BD%E8%90%BD%E8%90%BD%E9%95%B7%EF%BC%9F%E7%BE%8E%E7%A0%94%E7%A9%B6%EF%BC%9A%E6%9C%80%E5%A4%9A%E2%97%8F%E4%BA%BA%E3%80%81%E6%9C%80%E9%95%B7%E2%97%8F%E5%88%86%E9%90%98%EF%BC%8C%E6%9C%80%E8%83%BD%E4%BF%9D%E6%8C%81%E5%B0%88%E6%B3%A8%EF%BC%8DSmartM%E4%BA%BA%E6%89%8D%E5%9F%B9%E8%A8%93%E7%B6%B2%EF%BD%9C%E5%95%86%E5%91%A8&pos=0&uri=https://www.businessweekly.com.tw/careers/blog/21935">每次開會都落落長？美研究：最多●人、最長●分鐘，最能保持專注</a></p>
</li>
<li><p><a href="https://technews.tw/2020/05/17/what-is-pm/">這 5 種角色都叫 PM！專案經理、產品經理，差在哪？</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>前端</category>
        <category>Hexschool-Web-Layout-Training[六角網頁切版直播班]</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>HexSchool</tag>
        <tag>Web-Layout-Training</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hexschool JS60 Training] — 60天 JavaScript 學徒試煉 Day31-60</title>
    <url>/2020/07/29/20200729/</url>
    <content><![CDATA[<p><img src="/images/others/loading.gif" data-original="/images/20200607/JS60.png" alt="60天特訓"></p>
<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>結束八週切版直播版，接著 <strong>六角學院</strong> 開了一門關於 <strong>JavaScript(下稱JS)</strong> 的新課程。</p>
<p>雖然筆者沒有報名參加，但是 <strong>六角學院</strong> 為了銜接上課程舉辦了為期 <strong>60天的 JS 學徒試煉</strong>。</p>
<p>這篇文章將紀錄 <strong>60天的練習</strong>，自己也會出一些新的題目，有興趣的朋友們也可以試著解題，或是在下方留言一起討論。</p>
<p>這篇文章將會記錄第 <strong>31 天 - 60 天</strong> 的練習。</p>
<span id="more"></span>

<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p>每天早上校長會出一題關於 <strong>JS</strong> 的題目，這邊將會記錄下來自己的解題過程，自己也可能會提出新的題目，有解出題目答案或是不了解也可以在下方留言一起討論，如果題目出得不好也請各路大神手下留情。</p>
<ul>
<li><a href="#Day31">Day-31</a></li>
<li><a href="#Day32">Day-32</a></li>
<li><a href="#Day33">Day-33</a></li>
<li><a href="#Day34">Day-34</a></li>
<li><a href="#Day35">Day-35</a></li>
<li><a href="#Day36">Day-36</a></li>
<li><a href="#Day37">Day-37</a></li>
<li><a href="#Day38">Day-38</a></li>
<li><a href="#Day39">Day-39</a></li>
<li><a href="#Day40">Day-40</a></li>
<li><a href="#Day41">Day-41</a></li>
<li><a href="#Day42">Day-42</a></li>
<li><a href="#Day43">Day-43</a></li>
<li><a href="#Day44">Day-44</a></li>
<li><a href="#Day45">Day-45</a></li>
<li><a href="#Day46">Day-46</a></li>
<li><a href="#Day47">Day-47</a></li>
<li><a href="#Day48">Day-48</a></li>
<li><a href="#Day49">Day-49</a></li>
<li><a href="#Day50">Day-50</a></li>
<li><a href="#Day51">Day-51</a></li>
<li><a href="#Day52">Day-52</a></li>
<li><a href="#Day53">Day-53 ~ Day-60</a></li>
</ul>
<hr>
<h2 id="每日題目"><a href="#每日題目" class="headerlink" title="每日題目"></a>每日題目</h2><h3 id="Day31"><a href="#Day31" class="headerlink" title="Day31"></a>Day31</h3><p>第三十一天六角的題目為：</p>
<p>今天為感謝日，必須在 <strong>Slack</strong> 上觀看一個同學的部落格，並且寫上心得。</p>
<p>第三十一天六角的題目解答為：</p>
<p>雖然之前有碰過 <strong>JS</strong> 但是其實很多地方沒有很熟悉，真的開始做題目才發現很多地方自己並不是很了解。像是昨日的 <strong>C3.js</strong> 就很生手，還好同學有寫一篇 <a href="https://hsuchihting.github.io/javascript/20200715/3292510004/">提姆寫程式(TimCodingBlog) - JS 筆記 - C3.js 基本認識</a>，這讓我想到之前開始寫部落格的初衷，記錄自己的成長過程，並且幫助其他人，就像六角校長說的「<strong>永遠都會有比你弱的人</strong>」，可能剛好那個人也正在跟妳找一樣的問題點，一個人的進步肯定會慢過一群人一起進步！</p>
<blockquote>
<p>解題關鍵：如同賈伯斯說的「<strong>Stay hungry. Stay foolish</strong>」。</p>
</blockquote>
<h3 id="Day32"><a href="#Day32" class="headerlink" title="Day32"></a>Day32</h3><p>第三十二天六角的題目為：</p>
<p>結合之前練習的列表渲染，把三十天的圖表一起渲染到畫面上吧！</p>
<p>第三十二天六角的題目解答為：</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="JS學徒特訓班 - 第三十二天練習" src="https://codepen.io/rexhung0302/embed/rNxoEed?height=265&theme-id=dark&default-tab=js,result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/rNxoEed'>JS學徒特訓班 - 第三十二天練習</a> by RexHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<blockquote>
<p>解題關鍵：今日也算是複習日！</p>
</blockquote>
<h3 id="Day33"><a href="#Day33" class="headerlink" title="Day33"></a>Day33</h3><p>第三十三天六角的題目為：</p>
<p>今日需要將之前拿到的 <a href="https://raw.githubusercontent.com/hexschool/hexschoolNewbieJS/master/data.json">API</a> 改為<a href="https://c3js.org/samples/chart_pie.html">圓餅圖</a>！</p>
<p>第三十三天六角的題目解答為：</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="JS學徒特訓班 - 第三十三天練習" src="https://codepen.io/rexhung0302/embed/xxZMOXm?height=265&theme-id=dark&default-tab=js,result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/xxZMOXm'>JS學徒特訓班 - 第三十三天練習</a> by RexHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<blockquote>
<p>解題關鍵：今天一樣照著官方指南手，有些小地方要注意，像是之前用到的 <a href="#Axis(%E8%BB%B8)">Axis(軸)</a> 這裡就不能用，然後 <strong>types</strong> 也會變成 <strong>type</strong>，這就是用套件要注意的地方，必須跟著對方的方式走。而 <strong>圓餅圖</strong> 也可以加入 <code>onclick()</code>、<code>onmouseover()</code>、<code>onmouseout()</code>，<strong>C3.js</strong> 真的很強大呀！ </p>
</blockquote>
<h3 id="Day34"><a href="#Day34" class="headerlink" title="Day34"></a>Day34</h3><p>第三十四天六角的題目為：</p>
<p>今日一樣需要將之前拿到的 <a href="https://raw.githubusercontent.com/hexschool/hexschoolNewbieJS/master/data.json">API</a> 處理後判斷名稱大於六個字及小於的人，然後用圓餅圖表示出來。</p>
<p>第三十四天六角的題目解答為：</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="JS學徒特訓班 - 第三十四天練習" src="https://codepen.io/rexhung0302/embed/dyGarva?height=265&theme-id=dark&default-tab=js,result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/dyGarva'>JS學徒特訓班 - 第三十四天練習</a> by RexHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<blockquote>
<p>解題關鍵：因為名稱會有 <strong>中文</strong> 及 <strong>英文</strong>，這邊有兩種方法，一種為使用 <code>String.prototype.charCodeAt()</code>，參考文章為 <a href="https://blog.csdn.net/qq_43437571/article/details/106088271">https://blog.csdn.net/qq_43437571&#x2F;article&#x2F;details&#x2F;106088271</a>，判斷字元是否超過 <strong>255</strong>，缺點為需要跑迴圈每個字拆開；另外有種方法比較簡單，為 <strong>正則表達式</strong>，不需要拆開判斷，只需要用 <code>replace</code> 即可，參考文章為 <a href="https://blog.xuite.net/revia.yeh/projects/9591895-%E5%88%A4%E6%96%B7%E4%B8%AD%E8%8B%B1%E6%96%87%E5%AD%97%E4%B8%B2%E7%9A%84%E9%95%B7%E5%BA%A6">判斷中英文字串的長度</a>，方法如下<a href="#%E8%A8%BB1">註1</a>。</p>
</blockquote>
<h4 id="註1"><a href="#註1" class="headerlink" title="註1"></a>註1</h4><p>判斷中英文方法為下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getlengthb</span>(<span class="params">str</span>)&#123;</span><br><span class="line">     <span class="keyword">return</span> str.<span class="title function_">replace</span>(<span class="regexp">/[^\x00-\xff]/g</span>,<span class="string">&quot;**&quot;</span>).<span class="property">length</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Day35"><a href="#Day35" class="headerlink" title="Day35"></a>Day35</h3><p>第三十五天六角的題目為：</p>
<p>今日需要將之前拿到的 <a href="https://raw.githubusercontent.com/hexschool/hexschoolNewbieJS/master/data.json">API</a> 處理之後帶入圖表之中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;chart&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;chart2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/c3/0.7.18/c3.min.css&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha512-cznfNokevSG7QPA5dZepud8taylLdvgr0lDqw/FEZIhluFsSwyvS81CMnRdrNSKwbsmc43LtRd2/WMQV+Z85AQ==&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/d3/5.16.0/d3.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha512-FHsFVKQ/T1KWJDGSbrUhTJyS1ph3eRrxI228ND0EGaEp6v4a/vGwPWd3Dtd/+9cI7ccofZvl/wulICEurHN1pg==&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/c3/0.7.18/c3.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha512-bW79RVtvrrTS2QzmDsJeh62Nt4b/RjYlYvi2iEmkXPhzzbXMx69JT/zHgiGcL1Tk5nkLMTF6xkEUuynTkdC9PQ==&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> chart = c3.<span class="title function_">generate</span>(&#123;</span><br><span class="line">  <span class="attr">bindto</span>: <span class="string">&#x27;#chart&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="comment">// iris data from R</span></span><br><span class="line">        <span class="attr">columns</span>: [</span><br><span class="line">            [<span class="string">&#x27;完課率0~20%&#x27;</span>, <span class="number">70</span>],</span><br><span class="line">            [<span class="string">&#x27;完課率21~49%&#x27;</span>, <span class="number">50</span>],</span><br><span class="line">          [<span class="string">&#x27;完課率50%以上&#x27;</span>, <span class="number">30</span>],</span><br><span class="line">        ],</span><br><span class="line">        type : <span class="string">&#x27;pie&#x27;</span>,</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> chart2 = c3.<span class="title function_">generate</span>(&#123;</span><br><span class="line">  <span class="attr">bindto</span>: <span class="string">&#x27;#chart2&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">columns</span>: [</span><br><span class="line">            [<span class="string">&#x27;完課率0~20%&#x27;</span>, <span class="number">70</span>],</span><br><span class="line">            [<span class="string">&#x27;完課率21~49%&#x27;</span>, <span class="number">50</span>],</span><br><span class="line">          [<span class="string">&#x27;完課率50%以上&#x27;</span>, <span class="number">50</span>],</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">bar</span>: &#123;</span><br><span class="line">        <span class="attr">width</span>: &#123;</span><br><span class="line">            <span class="attr">ratio</span>: <span class="number">0.5</span> <span class="comment">// this makes bar width 50% of length between ticks</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// or</span></span><br><span class="line">        <span class="comment">//width: 100 // this makes bar width 100px</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>第三十五天六角的題目解答為：</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="JS學徒特訓班 - 第三十五天練習" src="https://codepen.io/rexhung0302/embed/XWXGgPq?height=265&theme-id=dark&default-tab=js,result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/XWXGgPq'>JS學徒特訓班 - 第三十五天練習</a> by RexHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<blockquote>
<p>解題關鍵：這邊一樣取得 <a href="https://raw.githubusercontent.com/hexschool/hexschoolNewbieJS/master/data.json">API</a> 之後跑迴圈處理資料，在帶入圖表之中。</p>
</blockquote>
<h3 id="Day36"><a href="#Day36" class="headerlink" title="Day36"></a>Day36</h3><p>第三十六天六角的題目為：</p>
<p>今日必須將原本第 <a href="#Day20">Day-20</a> 的內容改為字串模板，如果原本就已經使用的話就找一樣 <strong>ES6</strong> 沒學過或用過的東西來學習。</p>
<p>第三十六天六角的題目解答為：</p>
<p>這次學習的為 <strong>fetch</strong>，以前都是使用 <strong>axios</strong> 直接打 <strong>API</strong>，但沒想到 <strong>ES6</strong> 提供了這個方法，但其實這個用法還是有缺點的，比如說會把 400、500 都當成成功的請求，沒辦法監測請求的進度，但原生的 <strong>XHR</strong> 是可以的。</p>
<blockquote>
<p>解題關鍵：ES6 雖然語法糖很多，但其實實際瞭解又是另一回事，實際能用的上又再度是另一回事，不管 <strong>ES6 ES7 ES8</strong> 都是要不段的精益求精。</p>
</blockquote>
<h3 id="Day37"><a href="#Day37" class="headerlink" title="Day37"></a>Day37</h3><p>第三十七天六角的題目為：</p>
<p>在往後將會更多的使用 <code>let</code>、<code>const</code>，並且盡少使用 <code>var</code>，今天將會複習一下關於這三個的差異。</p>
<p>第三十七天六角的題目解答為：</p>
<p>其實剛學 <strong>JS</strong> 的時候，就有朋友丟 <strong>ES6</strong> 給我看過，想當然自己當初是超級小菜雞，根本什麼都不懂，所以又過了一陣子(經過<strong>六角勇者地下城</strong>的洗禮)才又回來摸一下 <strong>ES6</strong>。這時候對 <strong>JS</strong> 已經有一些概念了，所以有些地方就明白為什麼不用 <code>var</code>。</p>
<p>在 <strong>ES6</strong> 之前其實 <strong>JS</strong> 並沒有 <strong>區塊(Block)</strong> 的概念，所以常常會有全域變數被污染的事情發生，比方說下面例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;王小明&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...掠過千百行 JS</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&#x27;王大錘&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// &#x27;王大錘&#x27;</span></span><br></pre></td></tr></table></figure>

<p>雖然 <code>var</code> 會被全域污染，但要記得 <code>var</code> 在 <code>function</code> 的區域也是一層一層的(<strong>function scope</strong>)，下面再畫一張圖好理解：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200607/Day37.png" alt="關於 var 的奧秘"></p>
<p>圖上可以很清楚看到有 <strong>三個紅色的 var</strong>，<code>var</code> 在 <code>function</code> 的區域也是一層一層的(<strong>function scope</strong>)，所以三個 <code>console.log()</code> 分別為 <strong>1.王大錘 2.王小明 3.陳小王</strong>。</p>
<p>上述舉了一個簡單的例子，可能剛開始我們定義好 <strong>全域變數</strong>，但在我們寫了幾百幾千行 <strong>JS</strong> 之後可能早已經忘了取過什麼變數了(沒有使用 <strong>前端開發工具</strong>、<strong>前端框架</strong> 的情況下單支 <strong>JS</strong> 都會露露長)，然後可能中途某個 <strong>function</strong> 你就這麼剛好的重複使用了這個變數，這時候全域變數就會被污染。</p>
<p>然而 <code>ES6</code> 的 <code>let</code> 出現拯救了這個問題(雖然同時也會有缺點，後面會提到)，<code>let</code> 屬於 <strong>區塊(Block)</strong>，它並不會依附在 <strong>window</strong> 上，所以下述情況會發生：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name_one = <span class="string">&#x27;王小明&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name_one); <span class="comment">// &#x27;王小明&#x27;</span></span><br><span class="line"><span class="keyword">let</span> name_two = <span class="string">&#x27;王大錘&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name_two); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>再來 <code>const</code> 比較簡單，和 <code>let</code> 一樣都是屬於區塊內宣告，不會污染到全域，但 <code>const</code> 最大的用處就是在你只能宣告一次，然後不能更改裡面得值，這個會常用在 <code>const api_url = &#39;https://xxx/xxx/&#39;</code>、<code>const win_score = &#39;60&#39;</code>…等等，一旦宣告後面不能再改變，嘗試複寫會出現 <strong>Uncaught TypeError: Assignment to constant variable.</strong>。</p>
<p>最後的最後要來提一下 <code>let</code> 和 <code>const</code> 的缺點，這個缺點可是讓我吃了幾次虧…就是 <strong>舊手機不支援</strong> 啦！但還好透過 <strong>Gulp</strong> 或是 <strong>Babel</strong> 編譯後可以拯救，如果你不知道怎麼拯救，可以看這篇文章 <a href="https://rexhung0302.github.io/2020/03/21/20200321/">[Tool Notes] — 關於Webpack #2 - Babel？</a>，當時也是採了許多次坑，然後開始研究 <code>Babel</code>，亦或是可以參考這篇 <a href="https://rexhung0302.github.io/2020/05/06/20200506/">[Tool Notes] — 關於Gulp</a>。</p>
<blockquote>
<p>解題關鍵：<strong>子曰：「學而不思則罔，思而不學則殆。」</strong>，在每次的採坑每次的學習之後還是需要重複思考下次該如何應對，熟能生巧，是寫程式的不二法門！</p>
</blockquote>
<h3 id="Day38"><a href="#Day38" class="headerlink" title="Day38"></a>Day38</h3><p>第三十八天六角的題目為：</p>
<p>試著解開 <code>let</code> 與 <code>const</code> 的相關題目。</p>
<ol>
<li>請問下面會出現的 console 是？</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//ReferenceError</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>會出現 <code>ReferenceError</code> 而不是 <code>undefined</code>，這邊可以看看這篇文章 <a href="https://blog.techbridge.cc/2018/11/10/javascript-hoisting/">我知道你懂 hoisting，可是你了解到多深？</a></p>
</blockquote>
<ol start="2">
<li>以下是否會正常執行？若不會，會顯示什麼紅字錯誤？</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">a=<span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> c = <span class="number">3</span>;</span><br><span class="line">c=<span class="number">4</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>此為熱門面試題目</li>
</ol>
<p>請問 var、let、const 的區別是？</p>
<p>第三十八天六角的題目解答為：</p>
<ol>
<li><p><code>Uncaught ReferenceError: a is not defined</code></p>
</li>
<li></li>
<li><p>會正常執行、不會有紅字錯誤。</p>
</li>
<li><p>不能正常執行，有重複宣告、會出現 <code>Uncaught SyntaxError: Identifier &#39;b&#39; has already been declared</code>。</p>
</li>
<li><p>不能正常執行，<code>const</code> 只能宣告一次，並且無法在改值、會出現 <code>Uncaught TypeError: Assignment to constant variable.</code>。</p>
</li>
</ol>
<blockquote>
<p>解題關鍵：當現今瀏覽器支援度越來越高的時候，盡量棄用 <code>var</code>，如果不知道怎麼分別，記得一個原則，要在最外層 <code>window</code> 宣告的變數，就用 <code>var</code>， <strong>區塊(Block)</strong> 內的就改用 <code>let</code> 避免全域污染，而只會拿來宣告不會改值的，就一定要用 <code>const</code>，避免不知情的狀況下被改值了，以下會有個簡單範例(如範例有誤，還請不吝社指出，感激不盡)。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;一中夜市&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> open_time = <span class="string">&#x27;17:00&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> end_time = <span class="string">&#x27;24:00&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">storeDetail</span>(<span class="params">store</span>) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;title&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">`&lt;span&gt;「<span class="subst">$&#123;name&#125;</span>」有許多的攤販，營業時間大部分為 <span class="subst">$&#123;open_time&#125;</span> - <span class="subst">$&#123;end_time&#125;</span>。&lt;/span&gt;`</span>;</span><br><span class="line">  store.<span class="title function_">forEach</span>(<span class="function">(<span class="params">i, k</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> temp;</span><br><span class="line">    temp = <span class="string">`&lt;li&gt;攤販 <span class="subst">$&#123; k + <span class="number">1</span> &#125;</span> 為 <span class="subst">$&#123;i&#125;</span>&lt;/li&gt;`</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;ul&#x27;</span>).<span class="title function_">insertAdjacentHTML</span>(<span class="string">&#x27;beforeend&#x27;</span>, temp);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Day39"><a href="#Day39" class="headerlink" title="Day39"></a>Day39</h3><p>第三十九天六角的題目為：</p>
<p>假使你已經會箭頭函式，請分享 <strong>箭頭函式(arrow function)</strong> 會如何影響到 <strong>This</strong>。</p>
<p>第三十九天六角的題目解答為：</p>
<p>因為之前在上 <strong>JS核心篇</strong> 有寫到一篇關於 <strong>This</strong> 的文章，這次趁補充 <strong>ES6 箭頭函式(arrow function)</strong> 的相關知識回去補足它了。</p>
<p>文章在此處 <a href="https://rexhung0302.github.io/2019/10/28/20191028/">[JavaScript Notes] — 淺談 JavaScript #4</a>，有興趣也可以參考該系列其他篇章，如有誤還請各位手下留情。</p>
<h3 id="Day40"><a href="#Day40" class="headerlink" title="Day40"></a>Day40</h3><p>第四十天六角的題目為：</p>
<p>改寫之前第 <strong>Day20</strong> 及 <strong>Day35</strong> 的程式碼，需改為 <strong>ES6</strong> 寫法。</p>
<p>第四十天六角的題目解答為：</p>
<p>之前已經使用 <strong>ES6</strong> 寫法，所以這邊就再度複習一次囉。</p>
<p>傳送門：<a href="https://codepen.io/rexhung0302/pen/RwrjeqX">20關</a>、<a href="https://codepen.io/rexhung0302/pen/XWXGgPq">35關</a></p>
<h3 id="Day41"><a href="#Day41" class="headerlink" title="Day41"></a>Day41</h3><p>第四十一天六角的題目為：</p>
<p><code>new Date()</code> 時間處理</p>
<p>第四十一天六角的題目解答為：</p>
<p>我們最常使用的建立時間物件應該就屬 <code>new Date()</code> 莫屬，而裡面也可以帶上參數，像是 <code>new Date(value)</code>。</p>
<p>關於時間一文可參考我的第一篇部落格文章 <a href="https://rexhung0302.github.io/2019/03/05/20190305/">[Hero Of UnderGround 地下城] — 4F World Clock 各國時區</a>。</p>
<h3 id="Day42"><a href="#Day42" class="headerlink" title="Day42"></a>Day42</h3><p>第四十二天六角的題目為：</p>
<p>請用你學會的語法，取出今日時間，並依序組出以下字串</p>
<p>假設今天時間為 8&#x2F;5，則需透過 <code>new Date()</code> 處理後，印出以下資料</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 目前時間是 2020/8/5 14:20 </span><br><span class="line">// 2020/08/05</span><br><span class="line">// 2020-08-05</span><br><span class="line">// 今天是禮拜五</span><br><span class="line">// 今天是八月五日，時間為 14:20</span><br></pre></td></tr></table></figure>

<p>第四十二天六角的題目解答為：</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="JS學徒特訓班 - 第四十二天練習" src="https://codepen.io/rexhung0302/embed/KKzpWbY?height=265&theme-id=dark&default-tab=js,result" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/KKzpWbY'>JS學徒特訓班 - 第四十二天練習</a> by RexHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<p>這邊起手式一樣為 <code>new Date()</code> 然後再利用各種 <strong>API</strong> 去取的時間，但要記得幾個小陷阱，比如 <strong>月份會從 0 開始</strong>，時間因為地區會有所不同…等等。</p>
<blockquote>
<p>善用字串模板可以將小於 10 的分鐘或秒數加上一個 0，會更美觀。</p>
</blockquote>
<h3 id="Day43"><a href="#Day43" class="headerlink" title="Day43"></a>Day43</h3><p>第四十三天六角的題目為：</p>
<p>學習使用 <strong>Github Page</strong></p>
<p>第四十三天六角的題目解答為：</p>
<p>之前專案都是傳 <strong>Github</strong> 這邊不再贅述。</p>
<h3 id="Day44"><a href="#Day44" class="headerlink" title="Day44"></a>Day44</h3><p>第四十四天六角的題目為：</p>
<p>了解 window.location 類別的功能，例如轉址、取得網址參數等等，並分享你學的東西與範例程式碼。</p>
<p>第四十四天六角的題目解答為：</p>
<p><a href="https://rexhung0302.github.io/2020/08/11/20200811/#more">[JavaScript Notes] — 關於 Url 轉址及 取得參數</a></p>
<h3 id="Day45"><a href="#Day45" class="headerlink" title="Day45"></a>Day45</h3><h3 id="Day46"><a href="#Day46" class="headerlink" title="Day46"></a>Day46</h3><p>第四十五及四十六天六角的題目為：</p>
<p>45 天題目 - 以下有兩顆按鈕，請使用 <strong>JavaScript</strong> 語法，操控點擊後，能夠轉址到對應網站去</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;google&quot;</span>&gt;</span>連到 Google<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;yahoo&quot;</span>&gt;</span>連到 Yahoo<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>46-1 天題目 - 以下有兩顆按鈕，是部落格推薦連結，請抓取 <strong>data-id</strong> 的值後進行轉址：</p>
<p>點擊 Tom 時，網址為 <a href="https://www.hexschool.com/?recommend=tom">https://www.hexschool.com/?recommend=tom</a></p>
<p>點擊 John 時，網址為 <a href="https://www.hexschool.com/?recommend=John">https://www.hexschool.com/?recommend=John</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button class=&quot;google_2&quot; data-id=&quot;tom&quot;&gt;Tom 推薦六角學院&lt;/button&gt;</span><br><span class="line">&lt;button class=&quot;yahoo_2&quot; data-id=&quot;John&quot;&gt;John 推薦六角學院&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<p>46-2 天題目 - 如果網址規則是<a href="https://www.hexschool.com/?recommend=%22%E5%80%BC%22%EF%BC%8C%E8%A9%B2%E5%A6%82%E4%BD%95%E5%8F%96%E5%87%BA">https://www.hexschool.com/?recommend=&quot;值&quot;，該如何取出</a> recommend 的值？</p>
<p>第四十五天及四十六天六角的題目解答為：</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="JS學徒特訓班 - 第四十五、四十六天練習" src="https://codepen.io/rexhung0302/embed/dyMGyVQ?height=265&theme-id=dark&default-tab=js,result" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/dyMGyVQ'>JS學徒特訓班 - 第四十五、四十六天練習</a> by RexHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<blockquote>
<p>解題關鍵：雖然 <strong>Codepen</strong> 抓不到網址，還是暫時用 <strong>Codepen</strong> 練習。四十五天的題目跟四十六天其實很相像，插在一個要另外傳參數，而我們秉持的原則就是會想兩個以上類似的 <strong>function</strong> 就把他們合再一起。而四十六天第二個題目在前一天的文章有提到 <a href="https://rexhung0302.github.io/2020/08/11/20200811/#more">[JavaScript Notes] — 關於 Url 轉址及 取得參數</a>。</p>
</blockquote>
<h3 id="Day47"><a href="#Day47" class="headerlink" title="Day47"></a>Day47</h3><h3 id="Day48"><a href="#Day48" class="headerlink" title="Day48"></a>Day48</h3><p>第四十七及四十八天六角的題目為：</p>
<p>使用六角提供的 <a href="https://github.com/hexschool/nodejs_ajax_tutorial#%E8%A8%BB%E5%86%8A">API</a> 練習 <strong>AJAX POST</strong>，並且使用三個範例分別為 <strong>xmlhttprequest、Fetch、axios</strong>，做出 <strong>註冊</strong> 及 <strong>登入</strong> 的版面。</p>
<p>第四十七及四十八天六角的題目解答為：</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="JS學徒特訓班 - 第四十七、四十八天練習" src="https://codepen.io/rexhung0302/embed/oNxxZXJ?height=265&theme-id=dark&default-tab=js,result" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/oNxxZXJ'>JS學徒特訓班 - 第四十七、四十八天練習</a> by RexHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<p>之前打 <strong>API</strong> 都是使用 <strong>axios</strong> 居多，趁著這次練習熟悉一下 <strong>xmlhttprequest、Fetch</strong>。</p>
<p>首先為 <strong>xmlhttprequest</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>(); <span class="comment">// 起手式為 先新增一個 **xmlhttprequest** 方法 </span></span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;https://hexschool-tutorial.herokuapp.com/api/signup&quot;</span>, <span class="literal">true</span>); <span class="comment">// 然後在開啟一個實例</span></span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>); <span class="comment">// 接著要設定我們要送什麼個是</span></span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="string">`email=<span class="subst">$&#123;email&#125;</span>&amp;password=<span class="subst">$&#123;password&#125;</span>`</span>);  <span class="comment">// 我們要送出什麼</span></span><br><span class="line"></span><br><span class="line">xhr.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; </span><br><span class="line">  <span class="comment">// ... 做什麼</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>)); <span class="comment">// 這邊可以在查看一次剛剛宣告的 xhr 可以拿到一些資訊</span></span><br><span class="line">&#125; <span class="comment">// 這邊為傳送結束後要做什麼事情</span></span><br></pre></td></tr></table></figure>

<p>再來為 <strong>Fetch</strong>(範例取自 <a href="https://developer.mozilla.org/zh-TW/docs/Web/API/Fetch_API/Using_Fetch">MDN</a>)：</p>
<p>這個要簡單可以用簡單的方法，也可以使用自定義的方法去打 <strong>API</strong>，一般來說最簡單的方法為：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://example.com/movies.json&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">myJson</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(myJson);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>上面這個為簡單的 <strong>get</strong> 傳法，接著如果需要自定義會建議把設定包為一個 <strong>function</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先定義方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">postData</span>(<span class="params">url, data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fetch</span>(url, &#123;</span><br><span class="line">    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data), <span class="comment">// must match &#x27;Content-Type&#x27; header</span></span><br><span class="line">    <span class="attr">cache</span>: <span class="string">&#x27;no-cache&#x27;</span>, <span class="comment">// *default, no-cache, reload, force-cache, only-if-cached</span></span><br><span class="line">    <span class="attr">credentials</span>: <span class="string">&#x27;same-origin&#x27;</span>, <span class="comment">// include, same-origin, *omit</span></span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/4.0 MDN Example&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>, <span class="comment">// *GET, POST, PUT, DELETE, etc.</span></span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;cors&#x27;</span>, <span class="comment">// no-cors, cors, *same-origin</span></span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;follow&#x27;</span>, <span class="comment">// manual, *follow, error</span></span><br><span class="line">    <span class="attr">referrer</span>: <span class="string">&#x27;no-referrer&#x27;</span>, <span class="comment">// *client, no-referrer</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>()) <span class="comment">// 輸出成 json，這樣呼叫那邊就能拿到回傳的資訊</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接著呼叫方法</span></span><br><span class="line"><span class="title function_">postData</span>(<span class="string">&#x27;http://example.com/answer&#x27;</span>, &#123;<span class="attr">answer</span>: <span class="number">42</span>&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data)) <span class="comment">// JSON from `response.json()` call</span></span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(error))</span><br></pre></td></tr></table></figure>

<p>這邊要注意，雖然直接使用 <strong>fetch</strong> 像是上方最後的 <code>postData()</code> 禮最後的 <strong>response</strong> 可以拿到回傳結果，但是僅能拿到 <strong><a href="https://developer.mozilla.org/zh-TW/docs/Web/HTTP/Status">Status Code</a></strong>，你不能知道回傳什麼。</p>
<p>例如這次的作業，回傳雖然 <strong>200</strong> 是成功，但可能會回傳 <strong>該帳號已被註冊</strong>，所以必須等 <code>response.json()</code> 之後再去看最後拿到什麼。</p>
<blockquote>
<p>解題關鍵：練習裡三種方法都有示範，可以使用看看，不過現在有 <strong>axios</strong> 這麼方便的東西，其實有機會我們還是該好好了解一下底層的做法是什麼，因為你可能在實務上不太會有機會碰到了。</p>
</blockquote>
<h3 id="Day49"><a href="#Day49" class="headerlink" title="Day49"></a>Day49</h3><h3 id="Day50"><a href="#Day50" class="headerlink" title="Day50"></a>Day50</h3><p>第四十九及五十天六角的題目為：</p>
<p>修改題目的 <strong>API</strong> 設定，因為沒有帶入 <strong>Token</strong> 所以無法打成功，這邊需要到 <strong><a href="https://challenge.thef2e.com/news/17">The F2E</a></strong> 申請一組 <strong>Token</strong>。</p>
<p>第四十九及五十天六角的題目解答為：</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="JS學徒特訓班 - 第四十九、五十天練習" src="https://codepen.io/rexhung0302/embed/MWyeKWJ?height=265&theme-id=dark&default-tab=js,result" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/MWyeKWJ'>JS學徒特訓班 - 第四十九、五十天練習</a> by RexHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<p>看到 <strong><a href="https://challenge.thef2e.com/news/17">The F2E</a></strong> 真的好懷念，去年最後一關時車禍了，所以未完賽Ｑ。</p>
<p>這次打 <strong>API</strong> 需要帶入 <strong>Token</strong>，因為這次使用 <strong>axios</strong> 來打 <strong>API</strong>，所以使用 <strong>axios</strong> 配置。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;https://example.com&#x27;</span>; <span class="comment">// 打 API 網址</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">common</span>[<span class="string">&#x27;Authorization&#x27;</span>] = <span class="string">`<span class="subst">$&#123;token&#125;</span>`</span>; <span class="comment">// 塞 從F2E拿到的 Token</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">post</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>; <span class="comment">// 傳送的格式</span></span><br></pre></td></tr></table></figure>

<p>其實後端需要檢查什麼，可以再另外在前端這邊塞入，這是一種保護的機制，不會讓別人隨意打 <strong>API</strong>。</p>
<h3 id="Day51"><a href="#Day51" class="headerlink" title="Day51"></a>Day51</h3><h3 id="Day52"><a href="#Day52" class="headerlink" title="Day52"></a>Day52</h3><p>第五十一天及五十二天六角的題目為：</p>
<ul>
<li><p>任務一：這頁面需要使用到 <strong>GitHub Pages</strong>，並設計兩頁，一頁是 <strong>index.html</strong> 顯示所有房型，每個房型都會帶 <strong>a</strong> 連結，連結會帶參數，參數請帶每個房型的 <strong>id</strong>。</p>
</li>
<li><p>任務二：當點擊連結進入到 <strong>room.html</strong> 後，依照取得的 id 資料，去接 [GET] 單一房型細節，並在該頁顯示該房型細節。例如有無提供各種 <strong>room service</strong>、訂房紀錄等等。</p>
</li>
</ul>
<p>簡單說就是使用 <strong><a href="https://challenge.thef2e.com/news/17">六角學院＆The F2E API</a></strong> 串接，拿取所有房型後，再設計一個頁面可以顯示所點擊房型的詳細資訊。</p>
<p>第五十一天及五十二天六角的題目解答為：</p>
<p>先上 <strong><a href="https://rexhung0302.github.io/Hexschool-ajax-room-practice/index.html">DEMO</a></strong> 及 <strong><a href="https://github.com/RexHung0302/Hexschool-ajax-room-practice">Source Code</a></strong></p>
<p>首先這次使用 <strong>Gulp</strong> 來切頁面，如果還不清楚 <strong>Gulp</strong> 是蝦咪，可以參考筆者之前這篇 <strong><a href="https://rexhung0302.github.io/2020/05/06/20200506/">[Tool Notes] — 關於Gulp</a></strong>，對於前端開發可以省很多力氣，少做許多要重複做的事情，總之推推推！</p>
<p>接著簡短說一下這次的做法：</p>
<ol>
<li><p>最一開始還是要提醒一下，因為這次的 <strong>API</strong> 會檢查 <strong>Token</strong>，所以我們必須拿到可以通過檢查的 <strong>Token</strong>，然後再將 <strong>Token</strong> 塞在 <strong>Headers</strong> 裡面，詳細可參考 <strong><a href="https://rexhung0302.github.io/2020/07/29/20200729/#Day50">49及50天</a></strong>。</p>
</li>
<li><p>第一頁 index.html 先把所有房型拿出來並渲染到畫面，這應該沒有太大問題，和 <strong><a href="https://rexhung0302.github.io/2020/07/29/20200729/#Day50">49及50天</a></strong> 一樣，只是在每一個房型點擊跳頁時，需要帶參數在網址上。</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">linkRoomHandler</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">location</span> = <span class="string">`./room.html?roomId=<span class="subst">$&#123;id&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><em>題外話：最近公司剛好在做 <strong>LINE</strong> 的案子，有些資訊剛好需要存在使用者這邊，如果不想要一直去拿資料，刷新網頁也還想保留資料，就可以使用 <strong>LocalStorage</strong>，且情況需求，這次筆者還發現了 <strong>LocalStorage</strong> 雖然是永久儲存直到使用者手動清除或資料清除才會消失，但是我們可以透過給 <strong>LocalStorage</strong> 存進時間，讓資料自動刪除，有興趣可參考 <strong><a href="https://www.itread01.com/content/1542131109.html">localStorage設定過期時間</a></strong></em></p>
</blockquote>
<ol start="2">
<li>在下一頁剛開始就必須判斷有無帶職進來，這邊因為我們已經確網址帶過來的 <strong>Key</strong> 會是什麼名稱，所以可以使用下列的函式去判斷有無拿到值：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getUrlVal</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> query = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>.<span class="title function_">substring</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> vars = query.<span class="title function_">split</span>(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; vars.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> pair = vars[i].<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(pair[<span class="number">0</span>] == val) &#123;</span><br><span class="line">            <span class="keyword">return</span> pair[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getUrlVal</span>(<span class="string">&#x27;roomId&#x27;</span>); <span class="comment">// 沒有東西會回傳 false</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>接著就可以拿 <strong>roomId</strong> 去打 <strong>API</strong> 拿資料啦！然後就是渲染畫面了。</p>
</li>
<li><p>因為半夜才能做每日練習，這次小偷懶沒有做預約功能，之後再補上。</p>
</li>
</ol>
<blockquote>
<p><em>題外話：這次作業必須使用 <strong>GitHub Page</strong> 上傳，如果你有使用打包套件，覺得每次改完都要手動去 <strong>Build</strong> 什麼的很麻煩，可以參考筆者的這篇文章 <a href="https://rexhung0302.github.io/2020/08/04/20200804/">[Git Notes] — 快速部署 Vue Cli 靜態資源至 GitHub Pages</a>。</em></p>
</blockquote>
<h3 id="Day53"><a href="#Day53" class="headerlink" title="Day53"></a>Day53</h3><h3 id="Day60"><a href="#Day60" class="headerlink" title="Day60"></a>Day60</h3><p>第五十三天開始到六十天六角的題目為：</p>
<p>完成訂房網站的 <strong>API</strong> 串接，包含 <strong>瀏覽房型、預約功能、查看預約功能</strong>。</p>
<p>第五十三天開始到六十天六角的題目解答為：</p>
<p>這陣子公司案子太忙一直邊做邊修，原本想手刻日曆，但最後沒時間只好找套件套上。</p>
<p><a href="https://github.com/RexHung0302/Hexschool-ajax-room-practice">Source Code</a></p>
<p><a href="https://rexhung0302.github.io/Hexschool-ajax-room-practice/index.html">Demo</a></p>
<blockquote>
<p>解題關鍵：這題其實在之前 <strong>The F2E</strong> 挑戰有做過，不過當時沒有串接 <strong>API</strong>，這次算是補上串接 <strong>API</strong> 功能，幾乎都是切版及打 <strong>AJAX</strong>，時間套件使用<br><a href="https://www.daterangepicker.com/">Date Range Picker</a>，有興趣可以參考 <a href="https://medium.com/@miahsuwork/date-range-picker-%E6%97%A5%E6%9C%9F%E5%8D%80%E9%96%93%E9%81%B8%E6%93%87%E5%99%A8-bd0a7244df3a">[Date Range Picker]日期區間選擇器</a>。</p>
</blockquote>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>目前會每天依序的練習，如果有解開題目答案或是不了解也可以在下方留言呦！如果題目出得不好也請各路大神手下留情。</p>
]]></content>
      <categories>
        <category>Code</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
        <tag>HexSchool</tag>
      </tags>
  </entry>
  <entry>
    <title>[Git Note] — 快速部署 Vue Cli 靜態資源至 GitHub Pages</title>
    <url>/2020/08/04/20200804/</url>
    <content><![CDATA[<p><img src="/images/others/loading.gif" data-original="/images/20200804/github_pages.png" alt="Github Pages"></p>
<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>相信有在用 <strong><a href="https://github.com/">全球最大男性交友平台</a></strong> 的人一定都有使用過 <strong><a href="https://pages.github.com/">Github Pages</a></strong>，如果沒有用過簡單說就是可以幫你把靜態資源，例如 <strong>index.html</strong> 的文檔轉換成靜態網頁，然後會有一串可以預覽的網址給使用者或是其他人直接看內容，不用再 <strong>clone</strong> 下來才能看，最大的優點為免費，有點類似於後端的 <a href="https://www.heroku.com/">Heroku</a>。</p>
<p>而這篇文章要告訴你，如果是用前端框架 <strong>Vue Build</strong> 出來的靜態資源該怎麼一鍵部署上 <strong><a href="https://github.com/">Github</a></strong>。</p>
<span id="more"></span>

<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p>其實之前一直都想研究，但是每次都偷懶，結果最近在上 <strong>Node.js</strong> 的課程時助教還是建議我要學習如何把 <strong>靜態資源</strong> 跟 <strong>Source Code</strong> 分開。</p>
<p>為什麼要分開呢？因為 <strong>Vue</strong> 建立出來的靜態資源會放在 <strong>dist</strong> 資料夾內，而 <strong>Github</strong> 產生給你的靜態資源網址你必須在後面自己加上 <code>/dist/index.html</code> 之外，還必須新增 <strong>vue.config.js</strong> 告訴 <strong>Vue</strong> 你現在的 <strong>publicPath</strong> 是哪裡，不然就會發生 <strong>CSS、JS</strong> 抓不到的情況！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200804/error.png" alt="標準的路徑錯誤"></p>
<hr>
<h3 id="長話短說"><a href="#長話短說" class="headerlink" title="長話短說"></a>長話短說</h3><blockquote>
<p>如果已經會新增 <strong>Repositories</strong> 可以跳至下一個步驟查看暴力解法，或是跳至下下一個步驟查看推薦的解法。</p>
</blockquote>
<p>這邊先示範怎麼擁有 <strong>靜態資源的網址</strong> 並分享給其他人看，關於怎麼建立 <strong>Repositories</strong> 這邊就不在敘述，有興趣可以參考 <a href="https://gitbook.tw/chapters/using-git/init-repository.html">高老師 - 新增、初始 Repository</a>。</p>
<p>一切就緒後就到該 <strong>Repository</strong>，比如這個專案 <a href="https://github.com/RexHung0302/Hexschool-firebase-bmi-practice">RexHung0302&#x2F;Hexschool-firebase-bmi-practice</a>，然後找到上面一排功能選項點選 <code>Settings</code>，進入設定頁面後往下拉找到標題為 <strong>GitHub Pages</strong> 的地方，會發現這邊目前的 <strong>Source</strong> 是 <strong>None</strong>，拉開他，然後選擇你的分支，如果你只有自己在做這個專案，並且很懶，沒有把 <strong>靜態資源</strong> 跟 <strong>Source Code</strong> 分開，那你大慨就只有 <strong>master</strong> 這個主要分支，不要猶豫選擇吧。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200804/github_pages_example.png" alt="標準的路徑錯誤"></p>
<p>接著就會出現預覽的網址，如下圖：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200804/url_example.png" alt="靜態頁面網址"></p>
<h3 id="暴力解決"><a href="#暴力解決" class="headerlink" title="暴力解決"></a>暴力解決</h3><p>這邊先舉例如果不靠一鍵部署的話，我們該怎麼解決關於 <strong>Vue Build</strong> 出來，靜態資源路徑問題。</p>
<p>參照 <a href="https://cli.vuejs.org/zh/guide/deployment.html#%E5%B9%B3%E5%8F%B0%E6%8C%87%E5%8D%97">Vue 官方指南</a>，你必須在 <strong>vue.config.js</strong> 中设置正确的 <strong>publicPath</strong>，如果按照我們 <a href="https://github.com/RexHung0302/Hexschool-firebase-bmi-practice">這個專案</a> 我們必須新增 <strong>vue.config.js</strong> 這隻檔案，內容為下方設定：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">publicPath</span>: <span class="string">&#x27;/Hexschool-firebase-bmi-practice/dist/&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前方為 <strong>Repository</strong> 的名稱，然後緊接著 <strong>dist</strong> 資料夾，這樣 <strong>Github</strong> 就會把這邊當成根目錄，所以在你 <strong>build</strong> 完之後，有用到網址為 <code>./</code> 開頭的，都會從 <code>https://github.com/RexHung0302/Hexschool-firebase-bmi-practice/dist/</code> 這個地方找起，不然會從 <code>https://github.com/RexHung0302/Hexschool-firebase-bmi-practice</code> 這個地方找起，會錯誤。</p>
<p>然後按照剛剛第一個步驟產生的網址，後面再加上相對應的路徑去找你的 <strong>靜態資源 index.html</strong>，例如 <code>https://github.com/RexHung0302/Hexschool-firebase-bmi-practice/dist/index.html</code>。</p>
<h3 id="推薦解法"><a href="#推薦解法" class="headerlink" title="推薦解法"></a>推薦解法</h3><p>這邊就是推薦的做法，不只不用再去想怎麼設定 <strong>vue.config.js</strong>，之後只需要靠一個按鍵便可以自動部署。</p>
<p>首先在你的根目錄創建 <code>deploy.sh</code>，然後內容貼上下列程式碼：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env sh</span><br><span class="line"></span><br><span class="line"># 發生錯誤時執行終止指令</span><br><span class="line">set -e</span><br><span class="line"></span><br><span class="line"># 打包編譯</span><br><span class="line">npm run build</span><br><span class="line"></span><br><span class="line"># 移動到打包資料夾下，若你有調整的話打包後的資料夾請務必調整</span><br><span class="line">cd dist</span><br><span class="line"></span><br><span class="line"># 部署到自定義網域</span><br><span class="line"># echo &#x27;www.example.com&#x27; &gt; CNAME</span><br><span class="line"></span><br><span class="line">git init</span><br><span class="line">git add -A</span><br><span class="line">git commit -m &#x27;deploy&#x27;</span><br><span class="line"></span><br><span class="line"># 部署到 https://&lt;USERNAME&gt;.github.io</span><br><span class="line"># git push -f git@github.com:RexHung0302/Hexschool-firebase-bmi-practice.git master:gh-pages</span><br><span class="line"># 除此之外，也可以改走 HTTPS 模式</span><br><span class="line">git push -f https://github.com/RexHung0302/Hexschool-firebase-bmi-practice.git master:gh-pages</span><br><span class="line"></span><br><span class="line">cd -</span><br></pre></td></tr></table></figure>

<blockquote>
<p>以上範例參考助教 <strong>Ray</strong> 的 <a href="https://hsiangfeng.github.io/vue/20200214/1055437216/">一個指令快速部署 Vue Cli 到 GitHub Pages</a> 文章。</p>
</blockquote>
<p>接著輸入 <code>sh deploy.sh</code>，你就會發現多了一個分支 <strong>gh-pages</strong> 並且 <strong>靜態資源</strong> 都被推上去了。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200804/switch_branch.png" alt="切換分支"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20200804/gh-pages_branch.png" alt="成功上傳"></p>
<blockquote>
<p><em><strong>Linux</strong> 系統下可以直接使用 <code>sh</code> 指令，所以 <strong>MacOS</strong> 用戶可以直接使用指令，但如果你是 <strong>Window</strong> 必須在安裝 <strong><a href="https://gitforwindows.org/">Git Bash</a></strong>。</em></p>
</blockquote>
<h3 id="人生的-But！"><a href="#人生的-But！" class="headerlink" title="人生的 But！"></a>人生的 But！</h3><p>人生總是有許多意外，更不用說 <strong>Coding</strong> 時了，在你要使用 <code>sh deploy.sh</code> 指令時可能會出現以下的錯誤訊息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Warning: Permanently added the RSA host key for IP address &#x27;140.82.113.4&#x27; to the list of known hosts.</span><br><span class="line">git@github.com: Permission denied (publickey).</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure>

<p>這是什麼呢？其中有兩個問題，一個是你必須將 <strong>IP address ‘140.82.113.4’</strong> 加入你的 <code>/etc/hosts</code> 內：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo vim /etc/hosts</span><br><span class="line"></span><br><span class="line">// 新增 IP address</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20200804/hosts.png" alt="切換分支"></p>
<blockquote>
<p><em>相關問題可參考 <a href="https://blog.csdn.net/zhoucheng05_13/article/details/52831703">Github遇到Permanently added the RSA host key for IP address ‘192.30.252.128’ to the list of known host</a>。</em></p>
</blockquote>
<p>這樣就解決第一個問題了，那第二個問題呢，這個比較麻煩一點，這是關於 <strong>權限問題</strong>，有可能是你並沒有新增 <strong>ssh key</strong> 在 <strong>Github</strong> 的 <strong>ssh key setting</strong> 裡，所以這邊我們要先去看看你有沒有新增過 <strong>public key</strong>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd ~/.ssh/</span><br><span class="line"></span><br><span class="line">$ ls</span><br></pre></td></tr></table></figure>

<p>如果有 <code>id_rsa</code> 及 <code>id_rsa.pub</code> 可跳過新增步驟，如果沒有就輸入 <code>ssh-keygen</code>，這時候他會問你名稱要叫什麼，直接 <strong>enter</strong> 即可，如果輸入名稱，最後產出來的檔案會變成 <code>name</code> 及 <code>name.pub</code>，新增結束後，再輸入 <code>cat id_rsa.pub</code> 並複製內容，詳細流程為下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen</span><br><span class="line"></span><br><span class="line">$ cat id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>複製結束後到 <strong>Github</strong> 點選右上角頭像，然後選擇 <strong>Settings</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200804/setting.png" alt="Settings"></p>
<p>接著選擇左邊的 <strong>SSH and GPG keys</strong> 然後點選右上方的 <strong>New SSH key</strong>，接著輸入自己好辨識這個 key 的 title，提醒自己而已，無其他用處。然後貼上剛剛複製的 <strong>ssh key</strong>，點擊 <strong>Add SSH key</strong>，完成！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200804/ssh_keys_example.png" alt="SSH and GPG keys"></p>
<p>最後再試一次 <code>sh deploy.sh</code> 如果還有權限問題就改為輸入 <code>sudo sh deploy.sh</code>。</p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>這次拖助教的福，終於下定決心好好研究一番，之後就會盡量把 <strong>靜態資源</strong> 跟 <strong>Source Code</strong> 分開，專案看起來會更乾淨一些！</p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><p><a href="https://hsiangfeng.github.io/vue/20200214/1055437216/">一個指令快速部署 Vue Cli 到 GitHub Pages</a></p>
</li>
<li><p><a href="https://www.itread01.com/content/1544294526.html">Git clone專案時報錯Permission denied (publickey).的解決方案</a></p>
</li>
<li><p><a href="https://blog.jaycetyle.com/2018/02/github-ssh/">Git 版本控制筆記 - 使用 github 及 ssh 金鑰設定</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
        <tag>Git</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hexschool JS60 Training] — 60天 JavaScript 學徒試煉 Day1-30</title>
    <url>/2020/06/07/20200607/</url>
    <content><![CDATA[<p><img src="/images/others/loading.gif" data-original="/images/20200607/JS60.png" alt="60天特訓"></p>
<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>結束八週切版直播版，接著 <strong>六角學院</strong> 開了一門關於 <strong>JavaScript(下稱JS)</strong> 的新課程。</p>
<p>雖然筆者沒有報名參加，但是 <strong>六角學院</strong> 為了銜接上課程舉辦了為期 <strong>60天的 JS 學徒試煉</strong>。</p>
<p>這篇文章將紀錄 <strong>60天的練習</strong>，自己也會出一些新的題目，有興趣的朋友們也可以試著解題，或是在下方留言一起討論。</p>
<p>這篇文章將會記錄第 <strong>1 天 - 30 天</strong> 的練習。</p>
<span id="more"></span>

<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p>每天早上校長會出一題關於 <strong>JS</strong> 的題目，這邊將會記錄下來自己的解題過程，自己也可能會提出新的題目，有解出題目答案或是不了解也可以在下方留言一起討論，如果題目出得不好也請各路大神手下留情。</p>
<ul>
<li><a href="#Day1">Day1</a></li>
<li><a href="#Day2">Day2</a></li>
<li><a href="#Day3">Day3</a></li>
<li><a href="#Day4">Day4</a></li>
<li><a href="#Day5">Day5</a></li>
<li><a href="#Day6">Day6</a></li>
<li><a href="#Day7">Day7</a></li>
<li><a href="#Day8">Day8</a></li>
<li><a href="#Day9">Day9</a></li>
<li><a href="#Day10">Day10</a></li>
<li><a href="#Day11">Day11</a></li>
<li><a href="#Day11-2">Day11-2</a></li>
<li><a href="#Day12">Day-12</a></li>
<li><a href="#Day13">Day-13</a></li>
<li><a href="#Day14">Day-14</a></li>
<li><a href="#Day15">Day-15</a></li>
<li><a href="#Day16">Day-16</a></li>
<li><a href="#Day16-2">Day-16-2</a></li>
<li><a href="#Day17">Day-17</a></li>
<li><a href="#Day18">Day-18</a></li>
<li><a href="#Day19">Day-19</a></li>
<li><a href="#Day20">Day-20</a></li>
<li><a href="#Day21">Day-21</a></li>
<li><a href="#Day22">Day-22</a></li>
<li><a href="#Day23">Day-23</a></li>
<li><a href="#Day24">Day-24</a></li>
<li><a href="#Day25">Day-25</a></li>
<li><a href="#Day26">Day-26</a></li>
<li><a href="#Day27">Day-27</a></li>
<li><a href="#Day28">Day-28</a></li>
<li><a href="#Day29">Day-29</a></li>
<li><a href="#Day30">Day-30</a></li>
</ul>
<hr>
<h2 id="每日題目"><a href="#每日題目" class="headerlink" title="每日題目"></a>每日題目</h2><h3 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h3><p>第一天是關於 <strong>JS</strong> 宣告的練習。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200607/Day1.png" alt="第一天的練習"></p>
<blockquote>
<p>解題關鍵：由於 <code>var</code> 在創造階段會先被提升到頂部，所以通常有經過宣告的變數在還沒賦值的情況下 <code>console.log</code> 都會拿到 <code>undefined</code>；有興趣了解基本原理可參考 <a href="https://rexhung0302.github.io/2019/10/09/20191009/">[JavaScript Notes] — 淺談 JavaScript #1</a>。</p>
</blockquote>
<h3 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h3><p>第二天六角的題目：</p>
<p>請依照以下房型資訊，去定義各個變數名稱，變數務必要命名比較語意化且好懂。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200607/Day2.png" alt="第一天的練習"></p>
<p>第二天六角題目解答：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 採用小駝峰命名</span></span><br><span class="line"><span class="comment">// 2. 房間的設定都包在 singleRoom 裡, 這樣可以減少命名重複</span></span><br><span class="line"><span class="comment">// 如果有其他的房間設定, 就可以再包一個 例: var doubleRoom = &#123; ...略 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> singleRoom = &#123;</span><br><span class="line">    <span class="attr">peopleLimit</span>: <span class="number">1</span>,      <span class="comment">// (人數限制)Number</span></span><br><span class="line">    <span class="attr">bedSize</span>: <span class="string">&#x27;單人床&#x27;</span>,    <span class="comment">// (床型)String</span></span><br><span class="line">    <span class="attr">bathroomNum</span>: <span class="number">1</span>,      <span class="comment">// (廁所數量)Number</span></span><br><span class="line">    <span class="attr">feetSize</span>: <span class="number">18</span>,        <span class="comment">// (房間大小)Number</span></span><br><span class="line">    <span class="attr">sizeType</span>: <span class="string">&#x27;平方公尺&#x27;</span>, <span class="comment">// (房間大小單位)String</span></span><br><span class="line">    <span class="attr">description</span>: <span class="string">&#x27;Single Room is only...&#x27;</span>, <span class="comment">// (房間描述)String</span></span><br><span class="line">    <span class="attr">checkInTimeFrom</span>: <span class="string">&#x27;15:00&#x27;</span>,   <span class="comment">// (CheckIn時間, 起始時間)String</span></span><br><span class="line">    <span class="attr">checkInTimeTo</span>: <span class="string">&#x27;21:00&#x27;</span>,     <span class="comment">// (CheckIn時間, 結束時間)String</span></span><br><span class="line">    <span class="attr">checkOutTimeFrom</span>: <span class="string">&#x27;10:00&#x27;</span>,  <span class="comment">// (CheckOut時間, 起始時間)String</span></span><br><span class="line">    <span class="attr">checkOutTimeTo</span>: <span class="string">&#x27;21:00&#x27;</span>,    <span class="comment">// (CheckOut時間, 結束時間)String</span></span><br><span class="line">    <span class="attr">feature</span>: &#123;</span><br><span class="line">        <span class="attr">wifi</span>: <span class="literal">true</span>,             <span class="comment">// (無線網路)Boolean</span></span><br><span class="line">        <span class="attr">landlinePhone</span>: <span class="literal">true</span>,    <span class="comment">// (室內電話)Boolean</span></span><br><span class="line">        <span class="attr">breakfast</span>: <span class="literal">true</span>,        <span class="comment">// (早餐)Boolean</span></span><br><span class="line">        <span class="attr">airConditioning</span>: <span class="literal">true</span>,  <span class="comment">// (空調)Boolean</span></span><br><span class="line">        <span class="attr">miniBar</span>: <span class="literal">false</span>,         <span class="comment">// (酒吧))Boolean</span></span><br><span class="line">        <span class="attr">refrigerator</span>: <span class="literal">true</span>      <span class="comment">// (冰箱)Boolean</span></span><br><span class="line">    &#125;,  <span class="comment">// (房間特徵/設備)Object</span></span><br><span class="line">&#125;   <span class="comment">// (單人房)Object</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解題關鍵：變數命名務必好懂為主，且 <strong>第一個字元不允許是數字，不允許包含空格和其他標點符號</strong>！另外變數 <strong>名區分大小寫，允許包含字母、數字、美元符號($)和下劃線</strong>，但是通常開頭不會使用 <strong>美元符號($)和下劃線</strong>，第一個字以後也會盡量避免，所以通常推薦使用<a href="https://zh.wikipedia.org/zh-tw/%E9%A7%9D%E5%B3%B0%E5%BC%8F%E5%A4%A7%E5%B0%8F%E5%AF%AB">駝峰命名法</a>。</p>
</blockquote>
<p>第二天自己的題目為：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200607/Day2MyQuestion.png" alt="第二天自己的題目"></p>
<h3 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h3><p>第三天六角的題目為：</p>
<p>第一題 - 請依序告知以下 console.log 會顯示什麼值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(a));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(b));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">1</span>+<span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(c));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = <span class="number">1</span>+<span class="string">&quot;11&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(d))</span><br></pre></td></tr></table></figure>

<p>第二題 - 請依序告知以下 console.log 會顯示什麼值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">a = a+<span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(a))</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">3</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b*<span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>第三題 - 請依序告知以下 console.log 會顯示什麼值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">9</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a+<span class="number">9</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a+<span class="string">&#x27;9&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&quot;9&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b*b)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(b*b))</span><br></pre></td></tr></table></figure>

<p>第二天六角題目解答：</p>
<p>第一題解答</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(a)); <span class="comment">// Number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(b)); <span class="comment">// String</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">1</span>+<span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(c)); <span class="comment">// String</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = <span class="number">1</span>+<span class="string">&quot;11&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d)  <span class="comment">// 111</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(d)) <span class="comment">// String</span></span><br></pre></td></tr></table></figure>

<p>第二題解答</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">a = a+<span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// undefinedhello</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(a)) <span class="comment">// String</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">3</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b*<span class="string">&quot;hello&quot;</span>); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>

<p>第三題解答</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">9</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a+<span class="number">9</span>); <span class="comment">// 18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a+<span class="string">&#x27;9&#x27;</span>); <span class="comment">// 99</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&quot;9&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b*b) <span class="comment">// 81</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(b*b)) <span class="comment">// Number</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解題關鍵：注意型別轉換，通常 <strong>數字</strong> 及 <strong>字串</strong>，最容易發生轉換後的問題，還有小數點相加等於的問題，有興趣可參考 <a href="https://ithelp.ithome.com.tw/users/20065504/ironman">Kuro Hsu</a> 大大的 <a href="https://ithelp.ithome.com.tw/articles/10190873">重新認識 JavaScript: Day 03 變數與資料型別</a>。</p>
</blockquote>
<p>第三天自己的題目為：</p>
<p>請依序告知以下 console.log 會顯示什麼值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a*<span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&#x27;ba&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b+(+a)+a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span> (a*<span class="number">10</span>));</span><br></pre></td></tr></table></figure>

<p>解答為：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a*<span class="number">10</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> a); <span class="comment">// String</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&#x27;ba&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b+(+a)+a); <span class="comment">// baNaNa</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span> (a*<span class="number">10</span>)); <span class="comment">// Number</span></span><br></pre></td></tr></table></figure>

<p>這題上半部應該還算簡單，下半部是之前在某文章看到的有趣題目，<code>console.log</code> 出來會是香蕉😂。</p>
<p>比較陷阱大概是最下面的 <code>console.log(typeof (a*10));</code>，因為 <strong>JS</strong> 裡 <code>console.log(NaN)</code> 會出現 <strong>Number</strong>，如果真的要檢查  <strong>NaN</strong> 的型別，可以使用 <code>isNaN()</code>，詳細可參考**<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/isNaN">MDN</a>**。</p>
<h3 id="Day4"><a href="#Day4" class="headerlink" title="Day4"></a>Day4</h3><p>第四天六角的題目為：</p>
<p>第一題 - 請依序告知以下 console.log 會顯示什麼值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a&gt;<span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((a+b)&gt;<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> d = <span class="number">3</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c == d);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> e = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">var</span> f = <span class="number">5</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f &gt;= e);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f != e);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f == e);</span><br></pre></td></tr></table></figure>

<p>第二題(搭配型別自動轉型) - 請依序告知以下 console.log 會顯示什麼值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>; </span><br><span class="line"><span class="keyword">var</span> b=<span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a==<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a==b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> d = <span class="string">&quot;3&quot;</span>;</span><br><span class="line"><span class="comment">// 請解釋為什麼</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((c*d)&gt;=<span class="number">5</span>);</span><br></pre></td></tr></table></figure>

<p>第三題(嚴謹模式) - 請依序告知以下 console.log 會顯示什麼值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a==<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a==b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a===b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a!==b);</span><br></pre></td></tr></table></figure>

<p>第四天六角題目解答：</p>
<p>第一題解答</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a&gt;<span class="number">0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((a+b)&gt;<span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> d = <span class="number">3</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c == d); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> e = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">var</span> f = <span class="number">5</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f &gt;= e); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f != e); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f == e); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>第二題解答</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>; </span><br><span class="line"><span class="keyword">var</span> b=<span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a==<span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a==b); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> d = <span class="string">&quot;3&quot;</span>;</span><br><span class="line"><span class="comment">// Q:請解釋為什麼</span></span><br><span class="line"><span class="comment">// A:c*d 已經轉型為 Number, 6 大於等於 5 是對的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((c*d)&gt;=<span class="number">5</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>第三題解答</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a==<span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a==b); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a===b); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a!==b); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解題關鍵：需要再度注意型別轉換，某些情況下需要先轉型後在做計算，或是轉型後在做比對，而兩個 <strong>“&#x3D;”</strong> 和三個是不同的，這是需要特別注意的，另外再複習一下昨日的關鍵，<code>NaN</code> 是 <code>Number</code>，如果真的要檢查需要使用 <code>isNaN()</code>，但通常會了避免出現 <code>NaN</code> 在計算前會先透過 <code>number()</code> 或是 <code>parseInt()</code> 去把字串轉為數字，只是為了保險起見還是需要確保傳進來的值都是 <code>Number</code> 才是最重要的！</p>
</blockquote>
<h3 id="Day5"><a href="#Day5" class="headerlink" title="Day5"></a>Day5</h3><p>第五天六角的題目為：</p>
<p>第一題 - 顧客 Bob 向店員詢價</p>
<p>顧客 Bob：「請問我要買 4 個漢堡，30 份薯條，總共多少？」</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定義薯條跟漢堡的金額(金額不可更改)</span></span><br><span class="line"><span class="keyword">var</span> hamburgerPrice = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">var</span> friesPrice = <span class="number">40</span>;</span><br><span class="line"><span class="keyword">var</span> bobTotal;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 請將 Code 寫在這,運算內容賦予到 bobTotal,</span></span><br><span class="line"><span class="comment">// 並要利用到 hamburgerPrice、friesPrice</span></span><br><span class="line"><span class="comment">// 算出 Bob 的提問。</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&quot;Bob 您好,您詢問的金額總計為&quot;</span>+bobTotal+<span class="string">&quot;元&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>第二題 - 錢包剩下多少錢</p>
<p>mark 錢包裡有 200 元，買了一個漢堡，三個薯條，他還剩下多少錢？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定義薯條跟漢堡的金額(金額不可更改)</span></span><br><span class="line"><span class="keyword">var</span> hamburgerPrice = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">var</span> friesPrice = <span class="number">40</span>;</span><br><span class="line"><span class="keyword">var</span> markWallet = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">var</span> markTotal;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 請將 Code 寫在這，運算内容賦予到 markTotal,</span></span><br><span class="line"><span class="comment">// 並要利用到 markWallet、hamburgerPrice、friesPrice</span></span><br><span class="line"><span class="comment">// 算出 mark 購買後剩餘的金額。</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;馬克買完東西後,錢包剩下&#x27;</span>+markTotal +<span class="string">&#x27;元&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>第三題 - 錢包剩下多少錢</p>
<p>顧客 Mary 身上有 5000 元，想要買 10 份漢堡、10 份薯條，因為他有會員卡，所以可以打九折優惠，請問他還剩下多少錢？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定義薯條跟漢堡的金額(金額不可更改)</span></span><br><span class="line"><span class="keyword">var</span> hamburgerPrice = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">var</span> friesPrice = <span class="number">40</span>;</span><br><span class="line"><span class="keyword">var</span> sale = <span class="number">0.9</span>;</span><br><span class="line"><span class="keyword">var</span> maryWallet = <span class="number">5000</span></span><br><span class="line"><span class="keyword">var</span> maryTotal;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 請將 Code寫在這，運算內容賦予到 maryTotal ,</span></span><br><span class="line"><span class="comment">// 並要利用到hamburgerPrice、friesPrice、sale、maryWallet</span></span><br><span class="line"><span class="comment">// 算出 maryTotal 剩下的錢。</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&#x27;Mary 買完東西後,錢包剩下&#x27;</span>+ maryTotal +<span class="string">&#x27;元&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>第五天六角題目解答：</p>
<p>第一題</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">bobTotal = (<span class="number">4</span> * hamburgerPrice) + (<span class="number">30</span> * friesPrice); <span class="comment">// 1400</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&quot;Bob 您好,您詢問的金額總計為 1400 元&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>第二題</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">markTotal = markWallet - (hamburgerPrice + (<span class="number">3</span> * friesPrice)); <span class="comment">// 30</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;馬克買完東西後,錢包剩下 30 元&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>第三題</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">maryTotal = maryWallet - ((<span class="number">10</span> * hamburgerPrice) + (<span class="number">10</span> * friesPrice)) * sale; <span class="comment">// 4190</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&#x27;Mary 買完東西後,錢包剩下 4190 元&#x27;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>解題關鍵：本日需要注意加減乘除的運算權重，如果同樣權重的但是有區分先後，建議用括號刮起來，如果不確定，可以向本日筆者解題一樣，<strong>把需要一起先算的地方，先一起括號起來</strong>！</p>
</blockquote>
<h3 id="Day6"><a href="#Day6" class="headerlink" title="Day6"></a>Day6</h3><p>第六天六角的題目為：</p>
<p>第一題 - 布林與比較運算子練習</p>
<p>成為 VIP 會員的條件，只要購買滿 200 元，就可無條件成為會員，Bob 買了 2 個漢堡，2 個 薯條，是否有滿足條件？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">VIPTotal</span> = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">var</span> hamburgerPrice = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">var</span> friesPrice = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">var</span> isVIP;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 請透過比較運算子，將比較結果寫在isVip 上</span></span><br><span class="line"><span class="comment">// 請利用 VIPTotal、hamburgerPrice、friesPrice 的變數進行比較</span></span><br><span class="line"><span class="comment">// isVIP 的型別必須為布林值(true or false)</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Bob的 VIP 條件為&quot;</span>+isVIP)</span><br></pre></td></tr></table></figure>

<p>第二題 - 三心二意的老闆希望用邏輯運算子 &amp;&amp;</p>
<p>老闆發現大家都只買薯條衝 VIP 資格，導致大家都不買漢堡，老闆好生氣，他認為他的美味蟹堡是全美最好吃的，小杰也不知道他的自信從哪裡來的。</p>
<p>所以他跟小杰說，從今天起，VIP 條件必須同時符合以下兩點，才能成為 VIP 資格。</p>
<ol>
<li>一次消費滿 200 元</li>
<li>一定要買 1 個漢堡</li>
</ol>
<p>這時又來了兩位顧客，Mary 與 Mark，來看看他們有沒有符合條件吧！</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此變數不可更改</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">VIPTotal</span> = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">var</span> hamburgerPrice = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">var</span> friesprice = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">var</span> markHamburgerNum = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> markfriesNum = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">var</span> markIsVIP;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如上面新增的變數，馬克買了2個漢堡，與4個薯條</span></span><br><span class="line"><span class="comment">// 請同時運用比較運算子與邏輯運算子，將比較結果寫在 markIsVIP 上</span></span><br><span class="line"><span class="comment">// markIsVIP 的型別必須為布林值(true or false)</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mark的 VIP 條件為&quot;</span>+ markIsVIP)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> maryHamburgerNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> maryfriesNum = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> maryIsVIP;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如上面新增的變數，Mary買了0個漢堡，與10個薯條</span></span><br><span class="line"><span class="comment">// 請同時運用比較運算子與邏輯運算子，將比較結果寫在 markIsVIP 上</span></span><br><span class="line"><span class="comment">// maryIsVIP 的型別必須為布林值(true or false)</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mary的 VIP 條件為&quot;</span>+ maryIsVIP)</span><br></pre></td></tr></table></figure>

<p>第三題 - Mary 很生氣，他覺得現在的 VIP 資格吃人夠夠，希望用 || 邏輯運算子</p>
<p>Mary 說：「老闆我好歹是忠實老客戶欸，我買了你八年的薯條，而且遠遠超過 200 元，竟然還不算我是 VIP，你有沒有搞錯！」</p>
<p>老闆怕了，他很擔心會上台灣的老天鵝娛樂被當作笑柄，所以他立馬將 VIP 條件改成，只要符合以下任一點消費條件，就能成為 VIP 資格。</p>
<ol>
<li>一次消費滿 200 元</li>
<li>一定要買 1 個漢堡</li>
</ol>
<p>我們再看看 Mary 有沒有符合條件吧！</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">VIPTotal</span> = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">var</span> hamburgerPrice = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">var</span> friesPrice = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">var</span> maryHamburgerNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> maryfriesNum = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> maryIsVIP;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如上面新增的變數，Mary買了0個漢堡,與10個薯條</span></span><br><span class="line"><span class="comment">// 請同時運用比較運算子與邏輯運算子，將比較結果寫在 markIsVIP 上</span></span><br><span class="line"><span class="comment">// maryIsVIP 的型別必須為布林值(true or false)</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mary的 VIP 條件為&quot;</span>+ maryIsVIP)</span><br></pre></td></tr></table></figure>

<p>第六天六角題目解答：</p>
<p>第一題</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">isVIP = (( <span class="number">2</span> * hamburgerPrice ) + ( <span class="number">2</span> * friesprice )) &gt;= <span class="number">200</span> ? <span class="string">&#x27;true&#x27;</span> : <span class="string">&#x27;false&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Bob的 VIP 條件為&quot;</span>+isVIP) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>第二題</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">markIsVIP = (( markHamburgerNum * hamburgerPrice ) + ( markfriesNum * friesprice )) &gt;= <span class="number">200</span> &amp;&amp; markHamburgerNum &gt;= <span class="number">1</span> ? <span class="string">&#x27;true&#x27;</span> : <span class="string">&#x27;false&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mark的 VIP 條件為&quot;</span>+ markIsVIP) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">maryIsVIP = (( maryHamburgerNum * hamburgerPrice ) + ( maryfriesNum * friesprice )) &gt;= <span class="number">200</span> &amp;&amp; markHamburgerNum &gt;= <span class="number">1</span> ? <span class="string">&#x27;true&#x27;</span> : <span class="string">&#x27;false&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mary的 VIP 條件為&quot;</span>+ maryIsVIP) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>第三題</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">maryIsVIP = (( maryHamburgerNum * hamburgerPrice ) + ( maryfriesNum * friesPrice )) &gt;= <span class="title class_">VIPTotal</span> || markHamburgerNum &gt;= <span class="number">1</span> ? <span class="string">&#x27;true&#x27;</span> : <span class="string">&#x27;false&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mary的 VIP 條件為&quot;</span>+ maryIsVIP) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解題關鍵：善用三元運算子可以大幅縮減程式碼，只要記得公式就是 <code>條件 ? 值1(如果前方條件成立) : 值2(如果前方條件不成立)</code>，當然也可以一直串接下去，比如 <code>條件1 ? 值1(如果前方條件成立) : 條件2(當前方條件1不成立時觸發) ? 值2(如果前方條件2成立) : 值3(如果前方條件2不成立)</code>，用這種方式可以省去很多 <code>if-else</code>，但是在閱讀上可能要花點時間，所以要慎用！(因為本週講義有用到三元運算子，所以有刻意使用，其實後方的判斷都可以不用加上去)</p>
</blockquote>
<h3 id="Day7"><a href="#Day7" class="headerlink" title="Day7"></a>Day7</h3><p>第七天六角的題目為：</p>
<p>第一題 - if 的練習</p>
<p>老闆說現在要來驗收 if 成果，<br>成為 VIP 會員的條件，只要購買滿 200 元，<br>現在 會員 A 購買了 350 元，請用 if 判斷是否要給他 VIP 卡。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">VIPTotal</span> = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">var</span> memberPrice = <span class="number">350</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 請透過 if 來設計回覆，如果對方滿足門檻</span></span><br><span class="line"><span class="comment">// 就回覆 console.log(&quot;您好，您有達到 VIP 門檻。這裡給您 VIP 會員卡(遞上&quot;)</span></span><br></pre></td></tr></table></figure>

<p>第二題 - if else 的練習</p>
<p>又有人來申請 VIP 活動了！<br>成為 VIP 會員的條件，只要購買滿 200 元，就可無條件成為會員，Mark 買了 2 個漢堡，2 個 薯條，是否有滿足條件？</p>
<p>這次要記得用 if，以及注意你的語氣啊~ (小杰覺得人生好難</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">VIPTotal</span> = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">var</span> hamburgerPrice = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">var</span> friesPrice = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 請透過 if else 來去設計對方是否有達到條件，有或沒有都需要回覆對方</span></span><br><span class="line"><span class="comment">// 如果有，請顯示 console.log(&quot;尊敬的客戶您好，您有達到 VIP 條件&quot;)</span></span><br><span class="line"><span class="comment">// 如果沒有達到條件，便用 else 顯示 console.log(&quot;尊敬的客戶您好，您還差 xx 元，才有符合 VIP 條件哦~&quot;)</span></span><br></pre></td></tr></table></figure>

<p>第三題 - if、else if、else 練習</p>
<p>工作一整天，小杰累到懷疑人生，累歸累，但還是得吃東西，小杰吃東西有自己的 SOP，來幫幫小杰看看他該吃什麼食物。</p>
<ul>
<li>小杰都用飢餓度 1~100 來計算，100 就是代表最飢餓，數值皆為整數，不會有小數點</li>
<li>小杰飢餓度 0~20 時，都吃飯糰</li>
<li>小杰飢餓度在 21~40 時，都吃肉燥飯+貢丸湯</li>
<li>小杰飢餓度在 41~60 時，都吃麥當勞</li>
<li>小杰飢餓度在 61~100 時，都吃 99 元火鍋吃到飽</li>
<li>今天小杰的飢餓度是 53，請引導小杰去指定地點用餐</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> hungryNum = <span class="number">53</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(條件式)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 請用 if、else if 去判斷主人公該吃什麼</span></span><br><span class="line"><span class="comment">// 各區塊回覆內容請顯示 console.log(&quot;主人公因為飢餓度在&quot;+hungryNum+&quot;，所以他決定去吃麥當勞&quot;)</span></span><br></pre></td></tr></table></figure>

<p>第七天六角題目解答：</p>
<p>第一題</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(memberPrice &gt;= <span class="title class_">VIPTotal</span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;您好，您有達到 VIP 門檻。這裡給您 VIP 會員卡(遞上&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二題</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">MarkTotal</span> = (<span class="number">2</span> * hamburgerPrice) + (<span class="number">2</span> * friesPrice); <span class="comment">// 馬克實際購買金額</span></span><br><span class="line"><span class="keyword">var</span> shortage; <span class="comment">// 放短少金額</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title class_">MarkTotal</span> &gt;= <span class="title class_">VIPTotal</span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;尊敬的客戶您好，您有達到 VIP 條件&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 計算短少金額</span></span><br><span class="line">  shortage = <span class="title class_">VIPTotal</span> - <span class="title class_">MarkTotal</span>;</span><br><span class="line">  	</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;尊敬的客戶您好，您還差 &quot;</span> + shortage + <span class="string">&quot; 元，才有符合 VIP 條件哦~&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第三題</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(hungryNum &gt;= <span class="number">0</span> &amp;&amp; hungryNum &lt;= <span class="number">20</span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;主人公因為飢餓度在&quot;</span>+hungryNum+<span class="string">&quot;，所以他決定去吃 飯糰&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (hungryNum &gt;= <span class="number">21</span> &amp;&amp; hungryNum &lt;= <span class="number">40</span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;主人公因為飢餓度在&quot;</span>+hungryNum+<span class="string">&quot;，所以他決定去吃 肉燥飯+貢丸湯&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (hungryNum &gt;= <span class="number">41</span> &amp;&amp; hungryNum &lt;= <span class="number">60</span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;主人公因為飢餓度在&quot;</span>+hungryNum+<span class="string">&quot;，所以他決定去吃 麥當勞&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (hungryNum &gt;= <span class="number">61</span> &amp;&amp; hungryNum &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;主人公因為飢餓度在&quot;</span>+hungryNum+<span class="string">&quot;，所以他決定去吃 99 元火鍋吃到飽&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>解題關鍵：本日重點為 if、else、else if…，和昨日一樣，如果善用三元運算子其實可以省很多程式碼，但是有時候精確的寫出整行程式碼，也是算比較保險不容易出錯的方式哦！</p>
</blockquote>
<h3 id="Day8"><a href="#Day8" class="headerlink" title="Day8"></a>Day8</h3><p>第八天六角的題目為：</p>
<p>第一題 - 老闆考考你指派運算子</p>
<p>老闆：「我其實很懷疑你是不是真的會了，我考考你！」<br>老闆：「剛好今天是發薪日，先發給你薪資 23500 元(遞給小杰」<br>小杰：「謝謝腦闆，但你怎麼把我的薪資告訴大家了…」<br>老闆：「這不是重點，以下兩步驟動作請寫成程式」<br>老闆：「步驟一：因為你遲到一次，我要扣你 1000 元(取走小杰手上的 1000 元」<br>老闆：「步驟二：然後你又偷吃 Pizza，我要再扣你 2500 元 (再次取走」<br>小杰：「不是啊！那明明是小黑吃…」<br>老闆：「這不是重點，快點算！算出你還剩下多少錢！」</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> salary = <span class="number">23500</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 請依照上面的武功秘笈Codepen，依序實現兩步驟,算出小杰被扣了多少錢</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;小杰目前還剩下&quot;</span>+salary+<span class="string">&quot;元&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>第二題 - if + 指派運算子</p>
<p>老闆：「好了，現在我要告訴你贈品條件！」</p>
<ul>
<li>目前小杰手上有 3 個贈品</li>
<li>消費滿 100 元就送對方贈品</li>
</ul>
<p>而現在來了兩個客人，並依序有消費，請問現在他還剩下多少個贈品？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> giftNum = <span class="number">3</span>; <span class="comment">// 贈品數量</span></span><br><span class="line"><span class="keyword">var</span> customerA = <span class="number">150</span>;<span class="comment">// 顧客 A 消費金額</span></span><br><span class="line"><span class="keyword">var</span> customerB = <span class="number">99</span>; <span class="comment">// 顧客 B 消費金額</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(客戶A條件)&#123;&#125;</span><br><span class="line"><span class="keyword">if</span>(客戶B條件)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;目前贈品剩下&quot;</span>+giftNum+<span class="string">&quot;個&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>第三題 - if+指派運算子</p>
<p>老闆：「我現在補齊給你總計 50 個贈品！」<br>老闆：「然後我覺得現在贈品門檻太高了，我決定大放送，只要滿 50 元就送一個！以此類推，他買 500 元就送 10 個贈品！」<br>小杰：「老闆你今天這麼慷慨，那我的薪…」<br>老闆：「別廢話，客人來了快點！他買完後告訴我贈品還夠不夠！」</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> giftNum = <span class="number">50</span>; <span class="comment">// 贈品數量</span></span><br><span class="line"><span class="keyword">var</span> friesPrice = <span class="number">30</span>; <span class="comment">// 薯條單價</span></span><br><span class="line"><span class="keyword">var</span> hamburgerPrice = <span class="number">50</span>; <span class="comment">// 漢堡單價</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下是題目</span></span><br><span class="line"><span class="comment">// mary 買了 10 份薯條，10 份漢堡</span></span><br><span class="line"><span class="comment">// 請計算完贈品規則後,善用指派運算子去計算目前剩下的贈品有幾個</span></span><br><span class="line"><span class="comment">// 並用下面的 if 回報給老聞</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>()&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;老聞!贈品還夠!剩下&quot;</span>+giftNum+<span class="string">&quot;個~&quot;</span> );</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;老聞贈品賣光啦~&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第八天六角題目解答：</p>
<p>第一題</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">salary = salary - <span class="number">1000</span> - <span class="number">2500</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;小杰目前還剩下&quot;</span>+salary+<span class="string">&quot;元&quot;</span>); <span class="comment">// 20000</span></span><br></pre></td></tr></table></figure>

<p>第二題</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(customerA &gt; <span class="number">100</span>)&#123;</span><br><span class="line">	giftNum -= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(customerB &gt; <span class="number">100</span>)&#123;</span><br><span class="line">	giftNum -= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;目前贈品剩下&quot;</span>+giftNum+<span class="string">&quot;個&quot;</span>); <span class="comment">// 2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第三題</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> maryTotal = <span class="number">10</span> * friesPrice + <span class="number">10</span> * hamburgerPrice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(maryTotal &gt; <span class="number">50</span> &amp;&amp; giftNum &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">  giftNum -= maryTotal / <span class="number">50</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;老聞!贈品還夠!剩下&quot;</span>+giftNum+<span class="string">&quot;個~&quot;</span> ); <span class="comment">// 34</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;老聞贈品賣光啦~&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>解題關鍵：本日重點為運算子，<code>A = A - B</code> 可縮寫為 <code>A -= B</code>，和三元運算子一樣善用縮寫即可大幅縮寫程式碼。</p>
</blockquote>
<h3 id="Day9"><a href="#Day9" class="headerlink" title="Day9"></a>Day9</h3><p>第九天六角的題目為：</p>
<p>第一題 - 變數型別之呼吸</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">a+=<span class="number">1</span>;</span><br><span class="line">a+=<span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">5</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a+b);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> d = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c*d);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> e = <span class="number">8</span> + <span class="number">2</span> * <span class="string">&quot;9&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> g = <span class="string">&quot;2&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> h = <span class="number">3</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(f+g+h));</span><br></pre></td></tr></table></figure>

<p>第二題 - 運算子之呼吸</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> total = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">var</span> isVip = <span class="literal">true</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(total&gt;=<span class="number">200</span> &amp;&amp; isVip);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">false</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( a &amp;&amp; b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( a || b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> d = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> e = <span class="number">30</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c==<span class="number">10</span> &amp;&amp; d&gt;=<span class="number">5</span> &amp;&amp; e !== <span class="number">20</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c==<span class="number">10</span> || d&gt;=<span class="number">5</span> || e !== <span class="number">20</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c==<span class="number">5</span> || d&gt;=<span class="number">40</span> || e !== <span class="number">30</span>);</span><br></pre></td></tr></table></figure>

<p>第三題 - 運算子之呼吸</p>
<p>請告知以下 console.log，哪些會印出？<br>如果你很閒，試試看最後一題改下布林值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> maryIsVIP = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(maryIsVIP)&#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;哇貴婦餒！&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;你一定搞錯了，叫你們店長出來！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> momSwim = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> girlfriendSwim = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(momSwim &amp;&amp; girlfriendSwim)&#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;都不救，因為他們都會游泳&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;小杰大喊：「你們誰不會游泳啊？？」&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(girlfriendSwim)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;那你自己游上來！&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我先問我阿母會不會游泳！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(momSwim)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;媽妳先自己游上來！&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;媽我去救你！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第九天六角題目解答：</p>
<p>第一題</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">a+=<span class="number">1</span>; <span class="comment">// 2</span></span><br><span class="line">a+=<span class="number">5</span>; <span class="comment">// 7</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">5</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a+b); <span class="comment">// 12</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> d = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c*d); <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> e = <span class="number">8</span> + <span class="number">2</span> * <span class="string">&quot;9&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e); <span class="comment">// 26</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> g = <span class="string">&quot;2&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> h = <span class="number">3</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(f+g+h)); <span class="comment">// String</span></span><br></pre></td></tr></table></figure>

<p>第二題</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> total = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">var</span> isVip = <span class="literal">true</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(total&gt;=<span class="number">200</span> &amp;&amp; isVip); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">false</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( a &amp;&amp; b); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( a || b); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> d = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> e = <span class="number">30</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c==<span class="number">10</span> &amp;&amp; d&gt;=<span class="number">5</span> &amp;&amp; e !== <span class="number">20</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c==<span class="number">10</span> || d&gt;=<span class="number">5</span> || e !== <span class="number">20</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c==<span class="number">5</span> || d&gt;=<span class="number">40</span> || e !== <span class="number">30</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>第三題</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> maryIsVIP = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(maryIsVIP)&#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;哇貴婦餒！&quot;</span>); <span class="comment">// 印出</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;你一定搞錯了，叫你們店長出來！&quot;</span>); <span class="comment">// 當 maryIsVIP === flase 印出</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> momSwim = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> girlfriendSwim = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(momSwim &amp;&amp; girlfriendSwim)&#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;都不救，因為他們都會游泳&quot;</span>); <span class="comment">// 當 momSwim === true 且 girlfriendSwim === true 印出</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;小杰大喊：「你們誰不會游泳啊？？」&quot;</span>); <span class="comment">// 印出</span></span><br><span class="line">    <span class="keyword">if</span>(girlfriendSwim)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;那你自己游上來！&quot;</span>); <span class="comment">// 印出, 但可能會有生命危險</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我先問我阿母會不會游泳！&quot;</span>); <span class="comment">// 當 girlfriendSwim === false 印出</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(momSwim)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;媽妳先自己游上來！&quot;</span>); <span class="comment">// 當 momSwim === true 印出</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;媽我去救你！&quot;</span>); <span class="comment">// 印出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>解題關鍵：關於 <code>true</code> 跟 <code>false</code> 還有 <strong>運算子</strong> 的複習。</p>
</blockquote>
<h3 id="Day10"><a href="#Day10" class="headerlink" title="Day10"></a>Day10</h3><p>第十天六角的題目為：</p>
<p>第一題 - 客戶詢價函式，來更多個客人也不怕</p>
<p>請改設計一個詢價用的函式，並新增三個參數，依序為客戶姓名、薯條數量，漢堡數量。<br>同時來了三個客戶，請執行三次函式回報結果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定義薯條跟漢堡的金額(金額不可更改)</span></span><br><span class="line"><span class="keyword">var</span> hamburgerPrice = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">var</span> friesPrice = <span class="number">40</span>;</span><br><span class="line"><span class="keyword">var</span> bobTotal;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 請將Code寫在這,運算內容賦予到 bobTotal,</span></span><br><span class="line"><span class="comment">// 並要利用到 hamburgerPrice、friesPrice</span></span><br><span class="line"><span class="comment">// 算出 Bob 的提問。</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Bob 您好,您詢問的金額總計為&quot;</span>+bobTotal+<span class="string">&quot;元&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>第二題 - 好多客戶都在問小杰，他們錢包剩下多少錢，小杰表示無言</p>
<p>下面截圖，請改設計一個查詢客戶錢包餘額用的函式，並新增四個參數，依序為客戶姓名、客戶錢包總額、薯條數量，漢堡數量。</p>
<p>同時來了三個客戶，請執行三次函式回報結果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定義薯條跟漢堡的金額(金額不可更改)</span></span><br><span class="line"><span class="keyword">var</span> hamburgerPrice = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">var</span> friesPrice = <span class="number">40</span>;</span><br><span class="line"><span class="keyword">var</span> markWallet = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">var</span> markTotal;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 請將Code寫在這,運算內容賦予到markTotal,</span></span><br><span class="line"><span class="comment">// 並要利用到 markWallet hamburgerPrice friesPrice</span></span><br><span class="line"><span class="comment">// 算出 mark購買後剩餘的金額。</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;馬克買完東西後,錢包剩下&#x27;</span>+markTotal +<span class="string">&#x27;元&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>第三題 - 好多人都擁有九折優惠券</p>
<p>這一題，換您來設計函式與參數看看。</p>
<p>突然間同時來了三個客戶，請執行三次函式回報結果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定義薯條跟漢堡的金額(金額不可更改)</span></span><br><span class="line"><span class="keyword">var</span> hamburgerPrice = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">var</span> friesPrice = <span class="number">40</span>;</span><br><span class="line"><span class="keyword">var</span> sale = <span class="number">0.9</span>;</span><br><span class="line"><span class="keyword">var</span> maryWallet = <span class="number">5000</span></span><br><span class="line"><span class="keyword">var</span> maryTotal;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 請將Code寫在這,運算內容賦予到 maryTotal,</span></span><br><span class="line"><span class="comment">// 並要利用到hamburgerPrice friesPrice sale maryWallet</span></span><br><span class="line"><span class="comment">// 算出 maryTotal 剩下的錢。</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&#x27;Mary買完東西後,錢包剩下&#x27;</span>+ maryTotal +<span class="string">&#x27;元&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>第十天六角題目解答：</p>
<p>第一題</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">countTotal</span>(<span class="params">customerName, hamburgerNum, friesNum</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;customerName&#125;</span> 您好,您詢問的金額總計為 <span class="subst">$&#123;hamburgerNum * hamburgerPrice + friesNum * friesPrice&#125;</span> 元`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">countTotal</span>(<span class="title class_">Bob</span>, <span class="number">10</span>, <span class="number">5</span>)); <span class="comment">// Bob 您好,您詢問的金額總計為 700 元</span></span><br></pre></td></tr></table></figure>

<p>第二題</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> hamburgerPrice = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">var</span> friesPrice = <span class="number">40</span>;</span><br><span class="line"><span class="keyword">var</span> markWallet = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">var</span> markTotal; <span class="comment">// 馬克花費</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 錢包工廠</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deposit</span>(<span class="params">baseMoney</span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> base = baseMoney || <span class="number">0</span>; <span class="comment">// 錢包金額</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 計算花費</span></span><br><span class="line">    <span class="attr">spendMoney</span>: <span class="keyword">function</span>(<span class="params">spendMoney</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> base -= spendMoney;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 返回錢包金額</span></span><br><span class="line">    <span class="attr">countTotal</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> base;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 創建一個新的馬克錢包</span></span><br><span class="line"><span class="keyword">var</span> markDeposit = <span class="title function_">deposit</span>(markWallet); <span class="comment">// 馬克專屬的錢包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 計算總花費</span></span><br><span class="line">markTotal = <span class="number">1</span> * hamburgerPrice + <span class="number">2</span> * friesPrice; <span class="comment">// 130</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`馬克買完東西後,錢包剩下 <span class="subst">$&#123;markDeposit.spendMoney(markTotal)&#125;</span> 元`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 馬克再次花費</span></span><br><span class="line">markTotal = <span class="number">1</span> * hamburgerPrice; <span class="comment">// 50</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`馬克再次買完東西後,錢包剩下 <span class="subst">$&#123;markDeposit.spendMoney(markTotal)&#125;</span> 元`</span>);</span><br></pre></td></tr></table></figure>

<p>第三題</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> hamburgerPrice = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">var</span> friesPrice = <span class="number">40</span>;</span><br><span class="line"><span class="keyword">var</span> sale = <span class="number">0.9</span>;</span><br><span class="line"><span class="keyword">var</span> maryWallet = <span class="number">5000</span>; 		<span class="comment">// 瑪麗 錢包</span></span><br><span class="line"><span class="keyword">var</span> bobSpendTotal = <span class="number">10000</span>;  <span class="comment">// bob 錢包</span></span><br><span class="line"><span class="keyword">var</span> xiaojieWallet = <span class="number">10</span>; 	<span class="comment">// 小杰 錢包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> maryTotal; 		<span class="comment">// 瑪麗 花費</span></span><br><span class="line"><span class="keyword">var</span> bobTotal; 		<span class="comment">// Bob 花費</span></span><br><span class="line"><span class="keyword">var</span> xiaojieTotal;	<span class="comment">// 小杰 花費</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 錢包工廠</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deposit</span>(<span class="params">baseMoney</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> base = baseMoney || <span class="number">0</span>; <span class="comment">// 錢包金額</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 計算花費</span></span><br><span class="line">    <span class="attr">spendMoney</span>: <span class="keyword">function</span>(<span class="params">spendMoney</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> base -= spendMoney;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 返回錢包金額</span></span><br><span class="line">    <span class="attr">countTotal</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> base;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 創建一個新的錢包</span></span><br><span class="line"><span class="keyword">var</span> maryDeposit = <span class="title function_">deposit</span>(maryWallet); 		 <span class="comment">// 瑪麗 專屬的錢包</span></span><br><span class="line"><span class="keyword">var</span> bobDeposit = <span class="title function_">deposit</span>(bobSpendTotal); 	 <span class="comment">// bob 專屬的錢包</span></span><br><span class="line"><span class="keyword">var</span> xiaojieDeposit = <span class="title function_">deposit</span>(xiaojieWallet); <span class="comment">// 小杰 專屬的錢包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 計算 瑪麗 總花費</span></span><br><span class="line">maryTotal = (<span class="number">1</span> * hamburgerPrice + <span class="number">2</span> * friesPrice) * sale;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`瑪麗買完東西後,錢包剩下 <span class="subst">$&#123;maryDeposit.spendMoney(maryTotal)&#125;</span> 元`</span>); <span class="comment">// 4883</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 計算 bob 總花費</span></span><br><span class="line">bobTotal = (<span class="number">5</span> * hamburgerPrice + <span class="number">20</span> * friesPrice) * sale;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`bob買完東西後,錢包剩下 <span class="subst">$&#123;bobDeposit.spendMoney(bobTotal)&#125;</span> 元`</span>); <span class="comment">// 9055</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 計算 小杰 總花費</span></span><br><span class="line">xiaojieTotal = <span class="number">1</span> * hamburgerPrice * sale;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`小杰買完東西後,錢包剩下 <span class="subst">$&#123;xiaojieDeposit.spendMoney(xiaojieTotal)&#125;</span> 元`</span>); <span class="comment">// -35</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解題關鍵：第十天因為要練習 <strong>Function</strong>，突然想到之前有練習過 <a href="https://rexhung0302.github.io/2019/10/15/20191015/#%E5%87%BD%E5%BC%8F%E5%B0%8F%E8%A3%9C%E5%85%85"><strong>閉包</strong> 及 <strong>工廠</strong></a> 就剛好拿來練習了，好處是錢包可以一直往下扣，而且外面的變數如果都會用到往內移到 <strong>Function</strong> 內的話，跑完 <strong>Function</strong> 就會釋放記憶體，只會暫存錢包計算後的金額！本次為練習，關於 <strong>閉包</strong> 及 <strong>工廠</strong> 還有許多可以改進的地方，還請各路大神手下留情。</p>
</blockquote>
<h3 id="Day11"><a href="#Day11" class="headerlink" title="Day11"></a>Day11</h3><p>第十一天六角的題目為：</p>
<p>第一題 - 老闆想要隨時扣你的薪水</p>
<p>老闆：「今天是發薪日，先發給你薪資 23500 元(遞給小杰」<br>老闆：「以下三步驟動作請寫成程式」<br>老闆：「步驟一：昨天你上廁所太久了，我要扣你 1000 元」<br>老闆：「步驟二：小黑說不喜歡你煮的狗食，我要再扣你 3500 元 (再次取走」<br>老闆：「步驟三：我今天心情不太好，扣個 500 元意思一下」<br>小杰：「屁啦！心情不太好關我啥事！」<br>老闆：「這不是重點，快點算！將之前的寫法換成函式，並增加一個參數，讓我方便何時扣你多少都沒問題」<br>老闆：「最後你寫的函式，要執行三次，每次都要回報你的總薪水剩下多少。」</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> salary = <span class="number">23500</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//請依照上面的武功秘笈Codepen,依序實現兩步驟,算出小杰被扣了多少錢</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;小杰目前還剩下&quot;</span>+salary+<span class="string">&quot;元&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>第二題 - if + 指派運算子</p>
<p>老闆：「好了，現在我要告訴你贈品條件！」</p>
<p>目前小杰手上有 3 個贈品<br>消費滿 100 元就送對方贈品<br>下為第八關程式碼，請依照以下邏輯進行改寫：</p>
<p>現在來了三個客人，並依序有消費，A顧客消費 150、B 顧客消費 99、C 顧客消費 110。<br>請設計一個函式，裡面代入一個參數為顧客消費金額，確認該客戶是否符合贈品條件，若符合就讓 giftNum 變數減少數量。<br>並依序執行三次函式，每次函式皆會 return 目前贈品數量剩下多少。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 贈品數量 var giftNum = 3;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> customerA = <span class="number">150</span>; <span class="comment">// 顧客 A 消費金額</span></span><br><span class="line"><span class="keyword">var</span> customerB = <span class="number">99</span>;  <span class="comment">// 顧客 B 消費金額</span></span><br><span class="line"><span class="keyword">var</span> customerC = <span class="number">110</span>; <span class="comment">// 顧客 C 消費金額</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(客戶A條件)&#123;&#125;</span><br><span class="line"><span class="keyword">if</span>(客戶B條件)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;目前贈品剩下&quot;</span>+giftNum+<span class="string">&quot;個&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>第三題 - if+指派運算子</p>
<p>老闆：「我現在補齊給你總計 200 個贈品！」<br>老闆：「然後我覺得現在贈品門檻太高了，我決定大放送，只要滿 50 元就送一個！以此類推，他買 500 元就送 10 個贈品！」<br>小杰：「老闆你竟然利用我的特休，我跟你沒完啦。」<br>老闆：「別廢話，客人來了快點！他買完後告訴我贈品還夠不夠！」</p>
<p>下為第八關程式碼，giftNum 已改為 200 份，請依照以下邏輯進行改寫：</p>
<p>請用函式改寫，同時來了三組客人，請用你寫的函式連續執行三次，來幫助顧客是否有符合贈品條件。<br>另外每次執行函式時，都必須告訴老闆一次目前贈品數量。<br>第一組客人：Mary 買了 10 份薯條，10 份漢堡<br>第二組客人：Bob 買了 1 份薯條<br>第三組客人：Tim 買了 20 份薯條，15 份漢堡</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> giftNum = <span class="number">200</span>;       <span class="comment">// 贈品數量</span></span><br><span class="line"><span class="keyword">var</span> friesPrice = <span class="number">30</span>;     <span class="comment">// 薯條單價</span></span><br><span class="line"><span class="keyword">var</span> hamburgerPrice = <span class="number">50</span>; <span class="comment">// 漢堡單價</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下是題目</span></span><br><span class="line"><span class="comment">// mary買了10份薯條,10份漢堡</span></span><br><span class="line"><span class="comment">// 請計算完贈品規則後,善用指派運算子去計算目前剩下的贈品有幾個</span></span><br><span class="line"><span class="comment">// 並用下面的 if 回報給老閱</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>()&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;老閱!贈品還夠!剩下&quot;</span>+giftNum+<span class="string">&quot;個~&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;老闖贈品賣光啦~&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第十一天六角題目解答：</p>
<p>第一題</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> salary = <span class="number">23500</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">payCutHandler</span>(<span class="params">reduceMoney</span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`小杰目前還剩下<span class="subst">$&#123;salary -= reduceMoney&#125;</span>元`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 昨天你上廁所太久了，我要扣你 1000 元</span></span><br><span class="line"><span class="title function_">payCutHandler</span>(<span class="number">1000</span>);</span><br><span class="line"><span class="comment">// 小黑說不喜歡你煮的狗食，我要再扣你 3500 元</span></span><br><span class="line"><span class="title function_">payCutHandler</span>(<span class="number">3500</span>);</span><br><span class="line"><span class="comment">// 我今天心情不太好，扣個 500 元意思一下</span></span><br><span class="line"><span class="title function_">payCutHandler</span>(<span class="number">500</span>);</span><br></pre></td></tr></table></figure>

<p>第二題</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> giftNum = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> customerA = <span class="number">150</span>; <span class="comment">// 顧客 A 消費金額</span></span><br><span class="line"><span class="keyword">var</span> customerB = <span class="number">99</span>;  <span class="comment">// 顧客 B 消費金額</span></span><br><span class="line"><span class="keyword">var</span> customerC = <span class="number">110</span>; <span class="comment">// 顧客 C 消費金額</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sendGift</span>(<span class="params">spendMoney</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(spendMoney &gt;= <span class="number">100</span> &amp;&amp; giftNum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`目前贈品剩下<span class="subst">$&#123;giftNum -= <span class="number">1</span>&#125;</span>個`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (giftNum &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">  	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`目前贈品不夠囉`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`您的消費金額不夠！`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sendGift</span>(customerA); <span class="comment">// 目前贈品剩下2個</span></span><br><span class="line"><span class="title function_">sendGift</span>(customerB); <span class="comment">// 您的消費金額不夠！</span></span><br><span class="line"><span class="title function_">sendGift</span>(customerC); <span class="comment">// 目前贈品剩下1個</span></span><br></pre></td></tr></table></figure>

<p>第三題</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> giftNum = <span class="number">200</span>;       <span class="comment">// 贈品數量</span></span><br><span class="line"><span class="keyword">var</span> friesPrice = <span class="number">30</span>;     <span class="comment">// 薯條單價</span></span><br><span class="line"><span class="keyword">var</span> hamburgerPrice = <span class="number">50</span>; <span class="comment">// 漢堡單價</span></span><br><span class="line"><span class="keyword">var</span> sendGiftDoorsill = <span class="number">50</span>; <span class="comment">// 贈品門檻</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下是題目</span></span><br><span class="line"><span class="comment">// mary買了10份薯條,10份漢堡</span></span><br><span class="line"><span class="comment">// 請計算完贈品規則後,善用指派運算子去計算目前剩下的贈品有幾個</span></span><br><span class="line"><span class="comment">// 並用下面的 if 回報給老閱</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sendGift</span>(<span class="params">friesNum, hamburgerNum</span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> spendTotal = friesPrice * friesNum + hamburgerPrice * hamburgerNum;</span><br><span class="line">  	<span class="keyword">var</span> sendGiftNum = <span class="title class_">Math</span>.<span class="title function_">floor</span>(spendTotal/sendGiftDoorsill);</span><br><span class="line">  	giftNum -= sendGiftNum;</span><br><span class="line">  	<span class="keyword">if</span>(giftNum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`老闆！贈品還夠！剩下<span class="subst">$&#123;giftNum&#125;</span>個~`</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`老闆贈品賣光啦~`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sendGift</span>(<span class="number">10</span>, <span class="number">10</span>); <span class="comment">// 老闆！贈品還夠！剩下184個~</span></span><br><span class="line"><span class="title function_">sendGift</span>(<span class="number">1</span>); <span class="comment">// 老闆！贈品還夠！剩下184個~</span></span><br><span class="line"><span class="title function_">sendGift</span>(<span class="number">20</span>, <span class="number">15</span>); <span class="comment">// 老闆！贈品還夠！剩下157個~</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解題關鍵：今天也是練習 <strong>Function</strong> 練習應用。</p>
</blockquote>
<h3 id="Day11-2"><a href="#Day11-2" class="headerlink" title="Day11-2"></a>Day11-2</h3><p>第十一天六角直播的額外題目為：</p>
<p>整理 <strong>OPENDATA</strong> 資料，並且篩選出自己要的陣列，另外筆者也補上了手動輸入後塞選的功能(<strong>前端老毛病</strong>)，資料來源為 <strong><a href="https://opendata.taichung.gov.tw/dataset/3b71843c-1a9f-11e8-8f43-00155d021202">台中政府資料開放平臺</a></strong>，這次練習的題目為 <strong>iBike車站</strong> 且項目為下：</p>
<ol>
<li><p>列出 <strong>iBike</strong> 的車站總數</p>
<blockquote>
<p>因為 <strong>CodePen</strong> 不能塞太多 <strong>JS</strong> 內容，所以資料內容有刪減過</p>
</blockquote>
</li>
<li><p>列出 <strong>iBike</strong> 的所有車站名稱</p>
</li>
<li><p>列出關於 <strong>公園</strong> 相關的所有車站名稱</p>
</li>
<li><p>使用者輸入 <strong>input</strong> 後可以自動篩選(<strong>前端老毛病</strong>)</p>
</li>
</ol>
<blockquote>
<p>此次練習為整理 <strong>JSON</strong> 資料，並沒有 <strong>API</strong> 串接，所以 <strong>JSON</strong> 是直接複製過來的！</p>
</blockquote>
<p>第十一天六角直播的額外題目解答：</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="JS學徒特訓班 - OPEN Data 整理練習" src="https://codepen.io/rexhung0302/embed/jOWVQPr?height=265&theme-id=dark&default-tab=js,result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/jOWVQPr'>JS學徒特訓班 - OPEN Data 整理練習</a> by ZeHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<blockquote>
<p>解題關鍵：善用 <code>array.forEach()</code> 及 <code>include()</code> 還有 <code>innerHTML</code> 等等功能，即可整理成自己想要的陣列，另外推薦一個觀念，盡量不要直接去改變最一開始拿到的資料，把自己需要的篩選出來後放到新的陣列，舊的就維持原本的樣子就好！</p>
</blockquote>
<h3 id="Day12"><a href="#Day12" class="headerlink" title="Day12"></a>Day12</h3><p>第十二天六角的題目為：</p>
<p><strong>HTML</strong> 與 <strong>CSS</strong> 面板都壞掉了，你只能編輯 <strong>JS</strong> 面板，來去尋找線索</p>
<blockquote>
<p>今天只有一題題目，有興趣的朋友可以試試哦！</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;key&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  區塊一  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;keyItem keyItem1&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://hexschool.github.io/JSTraining/stage12/4.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  區塊二  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;keyItem keyItem2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://hexschool.github.io/JSTraining/stage12/2.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 區塊三 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;keyItem keyItem3&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 區塊四 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;keyItem keyItem4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 區塊一，路徑放錯了，得用 setAttribute 換 src 屬性，換成 1.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 區塊二，唯一有放對，不需更改</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 區塊三，請用 innerHTML，指定 keyItem3，讓他插入 3.png 圖片</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 區塊四，只能用 style 插入 background 4.png</span></span><br></pre></td></tr></table></figure>

<p>第十二天六角題目解答：</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="JS學徒特訓班 - 第十二天練習" src="https://codepen.io/rexhung0302/embed/xxZgReX?height=265&theme-id=dark&default-tab=js,result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/xxZgReX'>JS學徒特訓班 - 第十二天練習</a> by RexHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 區塊一，路徑放錯了，得用 setAttribute 換 src 屬性，換成 1.png</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.keyItem1 img&#x27;</span>).<span class="title function_">setAttribute</span>(<span class="string">&#x27;src&#x27;</span>, <span class="string">&#x27;https://hexschool.github.io/JSTraining/stage12/1.png&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 區塊二，唯一有放對，不需更改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 區塊三，請用 innerHTML，指定 keyItem3，讓他插入 3.png 圖片</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.keyItem3&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;img src=&quot;https://hexschool.github.io/JSTraining/stage12/3.png&quot; alt=&quot;3.png&quot; /&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 區塊四，只能用 style 插入 background 4.png</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.keyItem4&#x27;</span>).<span class="property">style</span>.<span class="property">backgroundImage</span> = <span class="string">&quot;url(&#x27;https://hexschool.github.io/JSTraining/stage12/4.png&#x27;)&quot;</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>解題關鍵：今天是針對 <strong>DOM</strong> 的練習操作！</p>
</blockquote>
<h3 id="Day13"><a href="#Day13" class="headerlink" title="Day13"></a>Day13</h3><p>第十三天六角的題目為：</p>
<p>幫助小杰修好體重機！</p>
<p>以下為 BMI 計算方式：</p>
<ol>
<li>BMI 計算為：體重(公斤) &#x2F; 身高的平方(單位為公尺)</li>
</ol>
<ul>
<li>例如 150 公分 50 kg &#x3D; 50&#x2F;(1.5*1.5) &#x3D; 22.2 BMI 指數</li>
</ul>
<ol start="2">
<li>BMI 數值狀態如下</li>
</ol>
<ul>
<li>體重過輕：BMI ＜ 18.5</li>
<li>正常：18.5≦BMI＜24</li>
<li>過重：24≦BMI＜27</li>
<li>輕度肥胖：27≦BMI＜30</li>
<li>中度肥胖：30≦BMI＜35</li>
<li>重度肥胖：BMI≧35</li>
</ul>
<blockquote>
<p>今天只有一題題目，有興趣的朋友可以試試哦！</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">calculationBMI</span>(<span class="params">height,kg</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> bmi = kg/(height/<span class="number">100</span>*height/<span class="number">100</span>)</span><br><span class="line">  <span class="keyword">if</span>(bmi&gt;<span class="number">20</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;過胖！但能吃就是福，維持現況也沒什麼不好的~&quot;</span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;你很瘦~ㄕㄡˋ~~&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">calculationBMI</span>(<span class="number">178</span>,<span class="number">70</span>));</span><br></pre></td></tr></table></figure>

<p>第十三天六角題目解答：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">calculationBMI</span>(<span class="params">height,kg</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> bmi = kg / (height/<span class="number">100</span> * height/<span class="number">100</span>);</span><br><span class="line">  <span class="keyword">return</span> bmi &gt;= <span class="number">35</span> ? <span class="string">&#x27;重度肥胖&#x27;</span> : bmi &gt;= <span class="number">30</span> ? <span class="string">&#x27;中度肥胖&#x27;</span> : bmi &gt;= <span class="number">27</span> ? <span class="string">&#x27;輕度肥胖&#x27;</span> : bmi &gt;= <span class="number">24</span> ? <span class="string">&#x27;過重&#x27;</span> : bmi &gt;= <span class="number">18.5</span> ? <span class="string">&#x27;正常&#x27;</span> : bmi &gt; <span class="number">0</span> ? <span class="string">&#x27;體重過輕&#x27;</span> : <span class="string">&#x27;壞掉啦&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">calculationBMI</span>(<span class="number">178</span>,<span class="number">70</span>)); <span class="comment">// 小杰 =&gt; 正常</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">calculationBMI</span>(<span class="number">158</span>,<span class="number">40</span>)); <span class="comment">// 小杰女友 =&gt; 體重過輕</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">calculationBMI</span>(<span class="number">160</span>,<span class="number">90</span>)); <span class="comment">// 小杰好友 =&gt; 重度肥胖</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">calculationBMI</span>(<span class="number">0</span>,<span class="number">0</span>)); <span class="comment">// 小杰的錢包 =&gt; 壞掉啦</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解題關鍵：<strong>三元運算子</strong> 雖然有助於幫助縮短程式碼，但也要小心使用！</p>
</blockquote>
<h3 id="Day-14"><a href="#Day-14" class="headerlink" title="Day 14"></a>Day 14</h3><p>第十四天六角的題目為：</p>
<p>再次幫助小杰修好體重機！</p>
<p>以下為 BMI 計算方式：</p>
<ol>
<li>BMI 計算為：體重(公斤) &#x2F; 身高的平方(單位為公尺)</li>
</ol>
<ul>
<li>例如 150 公分 50 kg &#x3D; 50&#x2F;(1.5*1.5) &#x3D; 22.2 BMI 指數</li>
</ul>
<ol start="2">
<li>BMI 數值狀態如下</li>
</ol>
<ul>
<li>體重過輕：BMI ＜ 18.5</li>
<li>正常：18.5≦BMI＜24</li>
<li>過重：24≦BMI＜27</li>
<li>輕度肥胖：27≦BMI＜30</li>
<li>中度肥胖：30≦BMI＜35</li>
<li>重度肥胖：BMI≧35</li>
</ul>
<blockquote>
<p>今天只有一題題目，有興趣的朋友可以試試哦！(這次要做輸入框可以輸入)</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;height input&quot;</span> <span class="attr">id</span>=<span class="string">&quot;js_height_input&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;請輸入您的身高(公分)&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;kg input&quot;</span> <span class="attr">id</span>=<span class="string">&quot;js_kg_input&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;請輸入您的體重(公斤)&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;send&quot;</span> <span class="attr">value</span>=<span class="string">&quot;計算&quot;</span> <span class="attr">id</span>=<span class="string">&quot;js_send_btn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;total&quot;</span>&gt;</span>您的 BMI 指數為 </span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;BMI&quot;</span> <span class="attr">id</span>=<span class="string">&quot;js_bmi_span&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">span</span>&gt;</span>，</span><br><span class="line">  狀態是 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;status&quot;</span> <span class="attr">id</span>=<span class="string">&quot;js_status_span&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第十四天六角題目解答：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 監聽按鈕</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#js_send_btn&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> height = <span class="built_in">parseInt</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#js_height_input&#x27;</span>).<span class="property">value</span>);</span><br><span class="line">  <span class="keyword">let</span> kg = <span class="built_in">parseInt</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#js_kg_input&#x27;</span>).<span class="property">value</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 輸入框不是數字就 Return;</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">isNaN</span>(height) === <span class="literal">true</span> || <span class="built_in">isNaN</span>(kg) === <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">// 替換文字</span></span><br><span class="line">    <span class="title function_">innerHandler</span>();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// Bmi 計算及結果</span></span><br><span class="line">  <span class="keyword">let</span> bmi = kg / (height/<span class="number">100</span> * height/<span class="number">100</span>);</span><br><span class="line">  <span class="keyword">let</span> result = bmi &gt;= <span class="number">35</span> ? <span class="string">&#x27;重度肥胖&#x27;</span> : bmi &gt;= <span class="number">30</span> ? <span class="string">&#x27;中度肥胖&#x27;</span> : bmi &gt;= <span class="number">27</span> ? <span class="string">&#x27;輕度肥胖&#x27;</span> : bmi &gt;= <span class="number">24</span> ? <span class="string">&#x27;過重&#x27;</span> : bmi &gt;= <span class="number">18.5</span> ? <span class="string">&#x27;正常&#x27;</span> : bmi &gt; <span class="number">0</span> ? <span class="string">&#x27;體重過輕&#x27;</span> : <span class="string">&#x27;壞掉啦&#x27;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(height, kg, bmi, result);</span><br><span class="line">  <span class="comment">// 替換文字</span></span><br><span class="line">  <span class="title function_">innerHandler</span>(bmi, result);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 監聽輸入框</span></span><br><span class="line"><span class="keyword">let</span> inputEle = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;input&quot;</span>);</span><br><span class="line"></span><br><span class="line">inputEle.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">elem</span>) &#123;</span><br><span class="line">    elem.<span class="title function_">addEventListener</span>(<span class="string">&quot;keyup&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">innerHandler</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 替換文字</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">innerHandler</span>(<span class="params">bmi = <span class="string">&#x27;-&#x27;</span>, result = <span class="string">&#x27;-&#x27;</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(bmi, result);</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#js_bmi_span&#x27;</span>).<span class="property">innerHTML</span> = bmi;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#js_status_span&#x27;</span>).<span class="property">innerHTML</span> = result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<iframe height="265" style="width: 100%;" scrolling="no" title="JS學徒特訓班 - 第十四天練習" src="https://codepen.io/rexhung0302/embed/oNbZMNo?height=265&theme-id=dark&default-tab=js,result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/oNbZMNo'>JS學徒特訓班 - 第十四天練習</a> by RexHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<blockquote>
<p>解題關鍵：練習監聽事件，另外要替多個物件加上監聽必須先使用 <strong>querySelectorAll</strong> 選好 <strong>DOM</strong> 後再跑 <strong>forEach</strong> 一個一個加上去。</p>
</blockquote>
<h3 id="Day15"><a href="#Day15" class="headerlink" title="Day15"></a>Day15</h3><p>第十五天六角的題目為：</p>
<p>改寫 <strong>Code</strong>，但這次 HTML 面板壞掉了，你唯一可以改的面板只有 CSS 與 JS 面板。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.blue</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.orange</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> height = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.height&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> kg = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.kg&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> send = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.send&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> bmiDOM = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.BMI&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> statusDOM = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.status&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">BMIData</span> = &#123;</span><br><span class="line">    <span class="string">&quot;overThin&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">class</span>:<span class="string">&quot;blue&quot;</span>,</span><br><span class="line">        <span class="attr">statusText</span>:<span class="string">&quot;體重過輕&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;normal&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">class</span>:<span class="string">&quot;orange&quot;</span>,</span><br><span class="line">        <span class="attr">statusText</span>: <span class="string">&quot;正常&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculationBMI</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> thisHeight = <span class="built_in">parseInt</span>(height.<span class="property">value</span>);</span><br><span class="line">    <span class="keyword">var</span> thisKg = <span class="built_in">parseInt</span>(kg.<span class="property">value</span>);</span><br><span class="line">    <span class="keyword">var</span> bmi = thisKg / (thisHeight / <span class="number">100</span> * thisHeight / <span class="number">100</span>)</span><br><span class="line">    <span class="keyword">if</span> (bmi &gt; <span class="number">20</span>) &#123;</span><br><span class="line">        <span class="title function_">render</span>(<span class="string">&quot;normal&quot;</span>,bmi)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">render</span>(<span class="string">&quot;overThin&quot;</span>,bmi);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">status,bmiText</span>)&#123;</span><br><span class="line">    bmiDOM.<span class="property">textContent</span> = bmiText;</span><br><span class="line">    statusDOM.<span class="property">textContent</span> = <span class="title class_">BMIData</span>[status].<span class="property">statusText</span>;</span><br><span class="line">    statusDOM.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="title class_">BMIData</span>[status].<span class="property">class</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">send.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line">    <span class="title function_">calculationBMI</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>第十五天六角題目解答：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.blue</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.green</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pink</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.orange</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.purple</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: purple;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.red</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> height = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.height&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> kg = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.kg&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> send = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.send&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> bmiDOM = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.BMI&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> statusDOM = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.status&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">BMIData</span> = &#123;</span><br><span class="line">  <span class="string">&#x27;overThin&#x27;</span>:&#123;</span><br><span class="line">    <span class="attr">text</span>:<span class="string">&quot;體重過輕&quot;</span>,</span><br><span class="line">    <span class="attr">class</span>:<span class="string">&quot;blue&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;normal&#x27;</span>:&#123;</span><br><span class="line">    <span class="attr">text</span>:<span class="string">&quot;正常&quot;</span>,</span><br><span class="line">    <span class="attr">class</span>:<span class="string">&quot;green&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;overweight&#x27;</span>:&#123;</span><br><span class="line">    <span class="attr">text</span>:<span class="string">&quot;過重&quot;</span>,</span><br><span class="line">    <span class="attr">class</span>:<span class="string">&quot;pink&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;mildObesity&#x27;</span>:&#123;</span><br><span class="line">    <span class="attr">text</span>:<span class="string">&quot;輕度肥胖&quot;</span>,</span><br><span class="line">    <span class="attr">class</span>:<span class="string">&quot;orange&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;moderateObesity&#x27;</span>:&#123;</span><br><span class="line">    <span class="attr">text</span>:<span class="string">&quot;中度肥胖&quot;</span>,</span><br><span class="line">    <span class="attr">class</span>:<span class="string">&quot;purple&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;severeObesity&#x27;</span>:&#123;</span><br><span class="line">    <span class="attr">text</span>:<span class="string">&quot;重度肥胖&quot;</span>,</span><br><span class="line">    <span class="attr">class</span>:<span class="string">&quot;red&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;broken&#x27;</span>:&#123;</span><br><span class="line">    <span class="attr">text</span>:<span class="string">&quot;壞掉了&quot;</span>,</span><br><span class="line">    <span class="attr">class</span>:<span class="string">&quot;black&quot;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 監聽輸入框</span></span><br><span class="line"><span class="keyword">var</span> inputEle = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;input&quot;</span>);</span><br><span class="line"></span><br><span class="line">inputEle.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">elem</span>) &#123;</span><br><span class="line">    elem.<span class="title function_">addEventListener</span>(<span class="string">&quot;keyup&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 替換文字及樣式</span></span><br><span class="line">      <span class="title function_">render</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 計算體重</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculationBMI</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> thisHeight = <span class="built_in">parseInt</span>(height.<span class="property">value</span>);</span><br><span class="line">    <span class="keyword">let</span> thisKg = <span class="built_in">parseInt</span>(kg.<span class="property">value</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 輸入框不是數字就 Return;</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isNaN</span>(thisHeight) === <span class="literal">true</span> || <span class="built_in">isNaN</span>(thisKg) === <span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="comment">// 警告並替換文字</span></span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;請輸入數字&#x27;</span>);</span><br><span class="line">      <span class="title function_">render</span>();</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">let</span> bmi = thisKg / (thisHeight / <span class="number">100</span> * thisHeight / <span class="number">100</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span>(bmi === <span class="title class_">Infinity</span>) &#123;</span><br><span class="line">      <span class="comment">// 警告並替換文字</span></span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;請避免輸入結果為無窮大的數值&#x27;</span>);</span><br><span class="line">      <span class="title function_">render</span>();</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    bmi &gt;= <span class="number">35</span> ? <span class="title function_">render</span>(bmi, <span class="string">&#x27;severeObesity&#x27;</span>) : bmi &gt;= <span class="number">30</span> ? <span class="title function_">render</span>(bmi, <span class="string">&#x27;moderateObesity&#x27;</span>) : bmi &gt;= <span class="number">27</span> ? <span class="title function_">render</span>(bmi, <span class="string">&#x27;mildObesity&#x27;</span>) : bmi &gt;= <span class="number">24</span> ? <span class="title function_">render</span>(bmi, <span class="string">&#x27;overweight&#x27;</span>) : bmi &gt;= <span class="number">18.5</span> ? <span class="title function_">render</span>(bmi, <span class="string">&#x27;normal&#x27;</span>) : bmi &gt; <span class="number">0</span> ? <span class="title function_">render</span>(bmi, <span class="string">&#x27;overThin&#x27;</span>) : <span class="title function_">render</span>(<span class="number">0</span>, <span class="string">&#x27;broken&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 替換文字及樣式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">bmiText = <span class="string">&#x27;-&#x27;</span>, status = <span class="string">&#x27;-&#x27;</span></span>)&#123;</span><br><span class="line">    bmiDOM.<span class="property">textContent</span> = bmiText;</span><br><span class="line">    statusDOM.<span class="property">innerHTML</span> = <span class="title class_">BMIData</span>[status] !== <span class="literal">undefined</span> ? <span class="title class_">BMIData</span>[status].<span class="property">text</span> : <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">    <span class="title class_">BMIData</span>[status] !== <span class="literal">undefined</span> ? statusDOM.<span class="property">classList</span> = <span class="string">`status <span class="subst">$&#123;BMIData[status].<span class="keyword">class</span>&#125;</span>`</span> : statusDOM.<span class="property">classList</span> = <span class="string">&#x27;status&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">send.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line">    <span class="title function_">calculationBMI</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<iframe height="265" style="width: 100%;" scrolling="no" title="JS學徒特訓班 - 第十五天練習" src="https://codepen.io/rexhung0302/embed/YzwVvaN?height=265&theme-id=dark&default-tab=js,result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/YzwVvaN'>JS學徒特訓班 - 第十五天練習</a> by RexHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<blockquote>
<p>解題關鍵：今天的練習重點為 <strong>關注點分離</strong>！</p>
</blockquote>
<h3 id="Day16"><a href="#Day16" class="headerlink" title="Day16"></a>Day16</h3><p>第十六天六角的題目為：</p>
<p>練習 <strong>forEach</strong> 塞入字串至 <strong>HTML</strong>，之後將整合前幾天練習。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.list&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> data = [];</span><br><span class="line">data.<span class="title function_">push</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;廖洧杰&quot;</span>,</span><br><span class="line">    <span class="string">&quot;height&quot;</span>:<span class="number">178</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">data.<span class="title function_">push</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;小乖&quot;</span>,</span><br><span class="line">    <span class="string">&quot;height&quot;</span>:<span class="number">120</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">data.<span class="title function_">push</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;小麗&quot;</span>,</span><br><span class="line">    <span class="string">&quot;height&quot;</span>:<span class="number">140</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">data.<span class="title function_">push</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;小新&quot;</span>,</span><br><span class="line">    <span class="string">&quot;height&quot;</span>:<span class="number">80</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">data.<span class="title function_">push</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;小華&quot;</span>,</span><br><span class="line">    <span class="string">&quot;height&quot;</span>:<span class="number">50</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">data.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> content = <span class="string">&#x27;&lt;li&gt;&#x27;</span>+item.<span class="property">name</span>+<span class="string">&quot;你的身高是&quot;</span>+item.<span class="property">height</span>+<span class="string">&#x27;&lt;/li&gt;&#x27;</span></span><br><span class="line">  str+=content;</span><br><span class="line">  list.<span class="property">innerHTML</span> = str;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>第十六天六角的解答為：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.list&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> data = [];</span><br><span class="line">data.<span class="title function_">push</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;廖洧杰&quot;</span>,</span><br><span class="line">    <span class="string">&quot;height&quot;</span>:<span class="number">178</span>,</span><br><span class="line">    <span class="string">&quot;kg&quot;</span>: <span class="number">70</span>,</span><br><span class="line">    <span class="string">&quot;bmi&quot;</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="string">&quot;status&quot;</span>: <span class="string">&#x27;正常&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">data.<span class="title function_">push</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;小乖&quot;</span>,</span><br><span class="line">    <span class="string">&quot;height&quot;</span>:<span class="number">120</span>,</span><br><span class="line">    <span class="string">&quot;kg&quot;</span>: <span class="number">15</span>,</span><br><span class="line">    <span class="string">&quot;bmi&quot;</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">&quot;status&quot;</span>: <span class="string">&#x27;體重過輕&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">data.<span class="title function_">push</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;小麗&quot;</span>,</span><br><span class="line">    <span class="string">&quot;height&quot;</span>:<span class="number">140</span>,</span><br><span class="line">    <span class="string">&quot;kg&quot;</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="string">&quot;bmi&quot;</span>: <span class="number">31</span>,</span><br><span class="line">    <span class="string">&quot;status&quot;</span>: <span class="string">&#x27;中度肥胖&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">data.<span class="title function_">push</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;小新&quot;</span>,</span><br><span class="line">    <span class="string">&quot;height&quot;</span>:<span class="number">80</span>,</span><br><span class="line">    <span class="string">&quot;kg&quot;</span>: <span class="number">80</span>,</span><br><span class="line">    <span class="string">&quot;bmi&quot;</span>: <span class="number">125</span>,</span><br><span class="line">    <span class="string">&quot;status&quot;</span>: <span class="string">&#x27;重度肥胖&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">data.<span class="title function_">push</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;小華&quot;</span>,</span><br><span class="line">    <span class="string">&quot;height&quot;</span>:<span class="number">50</span>,</span><br><span class="line">    <span class="string">&quot;kg&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;bmi&quot;</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="string">&quot;status&quot;</span>: <span class="string">&#x27;體重過輕&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">data.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> content = <span class="string">`&lt;li&gt;<span class="subst">$&#123;item.name&#125;</span>的身高為 <span class="subst">$&#123;item.height&#125;</span> 公分，體重是 <span class="subst">$&#123;item.kg&#125;</span> 公斤，BMI 數據為 <span class="subst">$&#123;item.bmi&#125;</span>，狀態為<span class="subst">$&#123;item.status&#125;</span>&lt;li&gt;`</span></span><br><span class="line">  str += content;</span><br><span class="line">  list.<span class="property">innerHTML</span> = str;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<iframe height="265" style="width: 100%;" scrolling="no" title="JS學徒特訓班 - 第十五天練習" src="https://codepen.io/rexhung0302/embed/XWXRvra?height=265&theme-id=dark&default-tab=js,result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/XWXRvra'>JS學徒特訓班 - 第十五天練習</a> by RexHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<blockquote>
<p>解題關鍵：今天的練習重點為 <strong>forEach</strong> 及 <strong>字串模板</strong>！</p>
</blockquote>
<h3 id="Day16-2"><a href="#Day16-2" class="headerlink" title="Day16-2"></a>Day16-2</h3><p>第十六天六角直播的額外題目為：</p>
<p>使用 <strong>AXIOS</strong> 取得資料，並且整理近畫面，這次使用上次 <a href="#Day11-2">Day11-2</a> 的練習做更改，把資料來源改為使用 <strong>AXIOS</strong> 取得。</p>
<p>第十一天六角直播的額外題目解答：</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="JS學徒特訓班 - OPEN Data ft.AXIOS 整理練習" src="https://codepen.io/rexhung0302/embed/mdVMzJb?height=265&theme-id=dark&default-tab=js,result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/mdVMzJb'>JS學徒特訓班 - OPEN Data ft.AXIOS 整理練習</a> by RexHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<p>現在打 <strong>API</strong> 使用 <strong>AXIOS</strong> 真的方便許多，但是最近在工作上使用必須去多做一層中介層，再打 <strong>API</strong> 的同時就必須要先檢查 <strong>Token</strong>，這時候就會知道自己對 <strong>AJAX</strong> 其實不熟練，這邊會再精進學習！</p>
<h3 id="Day17"><a href="#Day17" class="headerlink" title="Day17"></a>Day17</h3><p>第十七天六角的題目為：</p>
<p>請查看下列程式碼後思考並回覆：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.list&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> data = [];</span><br><span class="line"></span><br><span class="line">data.<span class="title function_">push</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;廖消杰&quot;</span>,</span><br><span class="line">    <span class="string">&quot;height&quot;</span>:<span class="number">178</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">data.<span class="title function_">push</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;小乖&quot;</span>,</span><br><span class="line">    <span class="string">&quot;height&quot;</span>:<span class="number">120</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">data.<span class="title function_">push</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;小麗&quot;</span>,</span><br><span class="line">    <span class="string">&quot;height&quot;</span>:<span class="number">140</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">data.<span class="title function_">push</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;小新&quot;</span>,</span><br><span class="line">    <span class="string">&quot;height&quot;</span>:<span class="number">80</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">data.<span class="title function_">push</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;小華&quot;</span>,</span><br><span class="line">    <span class="string">&quot;height&quot;</span>:<span class="number">50</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> content = <span class="string">&#x27;&lt;li&gt;&#x27;</span>+item.<span class="property">name</span>+<span class="string">&quot;你的身高是&quot;</span>+item.<span class="property">height</span>+<span class="string">&#x27;&lt;/li&gt;&#x27;</span></span><br><span class="line">  str += content;</span><br><span class="line">  list.<span class="property">innerHTML</span> = str;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol>
<li>str 放 forEach 外頭跟裡面的差異</li>
<li>innerHTML 放 forEach 外頭跟裡面的差異</li>
<li>innerHTML 當要寫內容進去時，會不會將裡面內容給覆蓋掉？</li>
</ol>
<p>第十七天六角的題目解答為：</p>
<ol>
<li>如果放外頭不會每次都清掉，因為我們的目的是為了把字串暫時放在 <strong>str</strong> 這個變數，然後印到 <strong>HTML</strong> 上，如果放外面，會一直累加上去，這不是我們要的。</li>
<li><strong>forEach</strong> 會去跑一個 <strong>Array</strong> 迴圈，如果把 <strong>innerHTML</strong> 放外面只會跑一次，放回圈內才會在遍歷迴圈時每次都跑到。</li>
<li>會！如果不想要覆蓋就要使用 <strong>append</strong>。</li>
</ol>
<h3 id="Day18"><a href="#Day18" class="headerlink" title="Day18"></a>Day18</h3><p>第十八天六角的題目為：</p>
<p>挑戰者們不要忘了，JS 始終要搭配妳寫好的 CSS 來進行渲染，護理師好像已經看膩了小杰爛到不行的陽春版本，寫了一個 .list2 版本，請依照他的 CSS 樣式邏輯，將 data 陣列裡面的資料，依序渲染到 .list2 裡面的 li 來顯示。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-card&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>小華<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>你的身高是178<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-card&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>小美<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>你的身高是133<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.list2</span>&#123;</span><br><span class="line">  <span class="attribute">list-style</span>:none;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-card</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: blue;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.list&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> data = [];</span><br><span class="line">data.<span class="title function_">push</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;廖洧杰&quot;</span>,</span><br><span class="line">    <span class="string">&quot;height&quot;</span>:<span class="number">178</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">data.<span class="title function_">push</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;小乖&quot;</span>,</span><br><span class="line">    <span class="string">&quot;height&quot;</span>:<span class="number">120</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">data.<span class="title function_">push</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;小麗&quot;</span>,</span><br><span class="line">    <span class="string">&quot;height&quot;</span>:<span class="number">140</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">data.<span class="title function_">push</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;小新&quot;</span>,</span><br><span class="line">    <span class="string">&quot;height&quot;</span>:<span class="number">80</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">data.<span class="title function_">push</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;小華&quot;</span>,</span><br><span class="line">    <span class="string">&quot;height&quot;</span>:<span class="number">50</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">data.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> content = <span class="string">&#x27;&lt;li&gt;&#x27;</span>+item.<span class="property">name</span>+<span class="string">&quot;你的身高是&quot;</span>+item.<span class="property">height</span>+<span class="string">&#x27;&lt;/li&gt;&#x27;</span></span><br><span class="line">  str+=content;</span><br><span class="line"> </span><br><span class="line">&#125;)</span><br><span class="line"> list.<span class="property">innerHTML</span> = str;</span><br></pre></td></tr></table></figure>

<p>第十八天六角的題目解答為：</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="JS學徒特訓班 - 第十八天練習" src="https://codepen.io/rexhung0302/embed/gOPGeMm?height=265&theme-id=dark&default-tab=js,result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/gOPGeMm'>JS學徒特訓班 - 第十八天練習</a> by RexHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<blockquote>
<p>解題關鍵：今天的練習重點為 <strong>字串模板</strong> 及變數應該放 <strong>function</strong> 外面還是裡面，這必須考量到你的變數是要每次在使用前都要回覆最初樣貌，還是要拿來累加上去。</p>
</blockquote>
<h3 id="Day19"><a href="#Day19" class="headerlink" title="Day19"></a>Day19</h3><p>第十九天六角的題目為：</p>
<p>參考同學的<a href="https://codepen.io/liao/pen/mdVwLPv?editors=1011">程式碼</a>並解釋下列三個問題。</p>
<ol>
<li>arrayBMIrecord 的陣列用途是什麼？</li>
<li>請描述 calculateBMI 函式做了什麼事情</li>
<li>請描述 render 函式做了什麼事情</li>
</ol>
<p>第十九天六角的題目解答為：</p>
<ol>
<li>arrayBMIrecord 的陣列用途是什麼？<br>  A: 用來放計算使用者輸入資料後使用者的身高體重BMI等等</li>
<li>請描述 calculateBMI 函式做了什麼事情<br>  A: 定義一個新的物件 userRecord 紀錄使用者的資料並把計算後的 BMI 放入，最後放到 arrayBMIrecord 陣列後並渲染到畫面上</li>
<li>請描述 render 函式做了什麼事情<br>  A: 將陣列內的資料組成 HTML 字串並渲染到畫面上</li>
</ol>
<blockquote>
<p>解題關鍵：今日為複習。</p>
</blockquote>
<h3 id="Day20"><a href="#Day20" class="headerlink" title="Day20"></a>Day20</h3><p>第二十天六角的題目為：</p>
<p>試著練習把之前的 <strong>計算</strong> 及 <strong>樣式</strong> 及 <strong>字串模板插入</strong>…等等 整合練習。</p>
<p>第二十天六角的題目解答為：</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="JS學徒特訓班 - 第二十天練習" src="https://codepen.io/rexhung0302/embed/RwrjeqX?height=265&theme-id=dark&default-tab=js,result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/RwrjeqX'>JS學徒特訓班 - 第二十天練習</a> by RexHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<blockquote>
<p>解題關鍵：今天算是總複習。</p>
</blockquote>
<h3 id="Day21"><a href="#Day21" class="headerlink" title="Day21"></a>Day21</h3><p>第二十一天六角的題目為：</p>
<p>將所有紀錄的 <strong>BMI</strong> 計算出平均值並且 <strong>Render</strong> 到畫面上。</p>
<p>第二十一天六角的題目解答為：</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="JS學徒特訓班 - 第二十一天練習" src="https://codepen.io/rexhung0302/embed/QWyQBPq?height=265&theme-id=dark&default-tab=js,result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/QWyQBPq'>JS學徒特訓班 - 第二十一天練習</a> by RexHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<blockquote>
<p>解題關鍵：今日練習了平均值的計算 <code>Array.prototype.reduce()</code>，這個用法會將陣列所有數字將起來，詳情可見 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce">MDN</a>。</p>
</blockquote>
<h3 id="Day22"><a href="#Day22" class="headerlink" title="Day22"></a>Day22</h3><p>第二十二天六角的題目為：</p>
<p>紀錄渲染到畫面上為上到下，因為原本的題目是把紀錄存到一個變數陣列裡，然後透過 <code>innerHTML</code> 渲染到畫面上，但因為自己做法不同，所以這邊其實只動了一個地方。</p>
<p>第二十二天六角的題目解答為：</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="JS學徒特訓班 - 第二十二天練習" src="https://codepen.io/rexhung0302/embed/ExPENXg?height=265&theme-id=dark&default-tab=js,result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/ExPENXg'>JS學徒特訓班 - 第二十二天練習</a> by RexHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<p>原本的做法需要先把陣列透過 <code>reverse()</code> 或是 <code>unshift()</code> 去反轉陣列，然後在渲染到畫面上。因為我原本的做法是直接把文字渲染到畫面上，並無需再透過陣列去存放，所以只改了 <code>record_dom.insertAdjacentHTML(&#39;beforeend&#39;, html);</code> 這段，把 <code>beforeend</code> 改為 <code>afterbegin</code> 前為 <strong>在 element 裡面，最後一個子元素之後</strong> 後者為 <strong>在 element 裡面，第一個子元素之前</strong>。</p>
<blockquote>
<p>解題關鍵：關於原本的 <code>reverse()</code> 及 <code>unshift()</code>，雖然都是反轉，但其實在大資料處理上效能相差甚多，在網路上不乏可見許多人相比的文章，比如 <a href="https://www.itread01.com/p/1083434.html">Array的push與unshift方法效能比較分析Script</a>。大概的概念就是，前者是 <strong>元素放進去後再一次反轉</strong>，後者為 <strong>元素放進第一個後，每一個元素一個一個往後移動</strong>，在大多數的比較下，兩者的秒數相差都有<strong>十幾倍以上</strong>，所以這邊選擇使用 <code>push()</code> 後再 <code>reverse()</code></p>
</blockquote>
<h3 id="Day23"><a href="#Day23" class="headerlink" title="Day23"></a>Day23</h3><p>第二十三天六角的題目為：</p>
<p>須將變數 <code>title</code> 的值塞入陣列 <code>monthMoney</code> 第一個位置。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> monthMoney = [ <span class="number">500000</span>, <span class="number">1300000</span>,<span class="number">2000000</span>];</span><br><span class="line"><span class="keyword">var</span> title = <span class="string">&#x27;總公司每月討債業績&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>第二十三天六角的題目解答為：</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="JS學徒特訓班 - 第二十三天練習" src="https://codepen.io/rexhung0302/embed/gOPzrGe?height=265&theme-id=dark&default-tab=html,result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/gOPzrGe'>JS學徒特訓班 - 第二十三天練習</a> by RexHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<blockquote>
<p>解題關鍵：因為本次不需要反轉陣列，所以不需要用到 <code>reverse()</code>，只需要使用 <code>unshiift()</code>，這個用法類似於 <code>push()</code>，只是是將數值塞入順序第一位。</p>
</blockquote>
<h3 id="Day24"><a href="#Day24" class="headerlink" title="Day24"></a>Day24</h3><p>第二十四天六角的題目為：</p>
<p>使用 <code>forEach()</code> 將 <strong>newMonthMoney</strong> 陣列的值依序放到 <strong>monthMoney</strong> 的後方。 </p>
<p>第二十四天六角的題目解答為：</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="JS學徒特訓班 - 第二十四天練習" src="https://codepen.io/rexhung0302/embed/xxZjLvx?height=265&theme-id=dark&default-tab=html,result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/xxZjLvx'>JS學徒特訓班 - 第二十四天練習</a> by RexHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<blockquote>
<p>解題關鍵：使用 <code>forEach()</code> 可以依序對陣列內的值進行操作！</p>
</blockquote>
<h3 id="Day25"><a href="#Day25" class="headerlink" title="Day25"></a>Day25</h3><p>第二十五天六角的題目為：</p>
<p>將陣列 <strong>serverData</strong> 內的物件重新排列，需要改為 <code>data = [[&quot;總公司每月討債業務&quot;,500000, 1300000,2000000,300000,500000],[&quot;黑道大哥業績&quot;,30000,100000,300000,50000,100000]]</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> serverData = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;總公司每月討債業務&quot;</span>,</span><br><span class="line">    <span class="string">&quot;seasonOneData&quot;</span>:[<span class="number">500000</span>, <span class="number">1300000</span>],</span><br><span class="line">    <span class="string">&quot;seasonTwoData&quot;</span>:[<span class="number">2000000</span>,<span class="number">300000</span>,<span class="number">500000</span>]</span><br><span class="line"></span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;黑道大哥業績&quot;</span>,</span><br><span class="line">    <span class="string">&quot;seasonOneData&quot;</span>:[<span class="number">30000</span>,<span class="number">100000</span>],</span><br><span class="line">    <span class="string">&quot;seasonTwoData&quot;</span>:[<span class="number">300000</span>,<span class="number">50000</span>,<span class="number">100000</span>]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> data=[];</span><br></pre></td></tr></table></figure>

<p>第二十五天六角的題目解答為：</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="JS學徒特訓班 - 第二十五天練習" src="https://codepen.io/rexhung0302/embed/abdKzLQ?height=265&theme-id=dark&default-tab=js,result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/abdKzLQ'>JS學徒特訓班 - 第二十五天練習</a> by RexHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<blockquote>
<p>解題關鍵：又到了快樂星期五，今天用了一直很想嘗試的解構，看來要再多練習呢！</p>
</blockquote>
<h3 id="Day26"><a href="#Day26" class="headerlink" title="Day26"></a>Day26</h3><p>第二十六天六角的題目為：</p>
<p>練習 <strong>AJAX</strong> 取得資料並渲染到畫面上。</p>
<p>第二十六天六角的題目解答為：</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="JS學徒特訓班 - 二十六天練習" src="https://codepen.io/rexhung0302/embed/xxZJLpJ?height=265&theme-id=dark&default-tab=js,result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/xxZJLpJ'>JS學徒特訓班 - 二十六天練習</a> by RexHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<blockquote>
<p>解題關鍵：之後題目又會回到 <strong>AJAX</strong> 了，今日為複習。</p>
</blockquote>
<h3 id="Day27"><a href="#Day27" class="headerlink" title="Day27"></a>Day27</h3><p>第二十七天六角的題目為：</p>
<p>參考下列三個網站學習不熟或沒用過的寫法。</p>
<ul>
<li><a href="https://w3c.hexschool.com/blog/6594e4ff">Cheatsheet for Array Methods - JavaScript 陣列方法大全</a></li>
<li><a href="https://www.oxxostudio.tw/articles/201908/js-array.html">JavaScript Array 陣列操作方法大全 ( 含 ES6 )</a></li>
<li><a href="https://wcc723.github.io/javascript/2017/06/29/es6-native-array/">JavaScript 陣列處理方法 [filter(), find(), forEach(), map(), every(), some(), reduce()]</a></li>
</ul>
<p>第二十七天六角的題目解答為：</p>
<p>這邊自己挑了兩個沒用過的用法來學習，分別是 <code>copyWithin()</code> 及 <code>Array.from()</code>，前者可將陣列內指定的位置替換掉，並且複製內列內指定的區間值覆蓋上去，舉例來說有個陣列為 <code>[1, 2, 3, 4, 5]</code> 用前者方法可以將陣列內容的 <strong>4, 5</strong> 替換為 <strong>1, 2</strong>；後者為 <code>Array.forEach()</code> 的 <code>Object</code> 版本。</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="JS學徒特訓班 - 第二十七天練習" src="https://codepen.io/rexhung0302/embed/XWXBLNJ?height=265&theme-id=dark&default-tab=js,result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/XWXBLNJ'>JS學徒特訓班 - 第二十七天練習</a> by RexHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<blockquote>
<p>解題關鍵：在資料處理中就是 <strong>JavaScript</strong> 的精華了，如果能更熟悉一些用法，可以避免掉很多多餘的程式碼。</p>
</blockquote>
<h3 id="Day28"><a href="#Day28" class="headerlink" title="Day28"></a>Day28</h3><p>第二十八天六角的題目為：</p>
<p>取得 <strong>API</strong> 後在使用 <code>sort()</code> 去排序。</p>
<p>第二十八天六角的題目解答為：</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="JS學徒特訓班 - 第二十八天練習" src="https://codepen.io/rexhung0302/embed/zYrJpLp?height=265&theme-id=dark&default-tab=js,result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/zYrJpLp'>JS學徒特訓班 - 第二十八天練習</a> by RexHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<blockquote>
<p>解題關鍵：取得資料後使用 <code>sort()</code> 排序可從小排到大或是從大排到小。</p>
</blockquote>
<h3 id="Day29"><a href="#Day29" class="headerlink" title="Day29"></a>Day29</h3><p>第二十九天六角的題目為：</p>
<p>繼昨天的串接 <strong>API</strong> 之後排序，今日需要加上 <strong>Select</strong> 並且按造使用者選擇的選項去排序，<strong>HTML</strong> 範例為：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;id&quot;</span>&gt;</span>依照 id 編號排序(由1開始從上往下)<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;process&quot;</span>&gt;</span>依照完課率排序(由最高到最低)<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 以下為編號排序範例</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>編號 ID 1 為廖洧杰，他的完成進度為 5 %<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>編號 ID 2 為王小明，他的完成進度為 33 %<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 以下為完課率排序範例</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>編號 ID 2 為王小明，他的完成進度為 33 %<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>編號 ID 1 為廖洧杰，他的完成進度為 5 %<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第二十九天六角的題目解答為：</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="JS學徒特訓班 - 第二十九天練習" src="https://codepen.io/rexhung0302/embed/GRoYqbd?height=265&theme-id=dark&default-tab=js,result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/GRoYqbd'>JS學徒特訓班 - 第二十九天練習</a> by RexHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<blockquote>
<p>解題關鍵：使用監聽事件 <code>DOM.addEventListener()</code> 後傳值進 <code>render()</code> 的 <strong>function</strong>，這邊傳送 <strong>Select</strong> 底下 <strong>Option</strong> 的 <strong>Value</strong>，這樣可以直接在 render 的時候直接去對到列內的 <strong>key</strong>，所以之後有新增想排序的選項，可以在 <strong>option</strong> 那邊先把 <strong>value</strong> 定義好。</p>
</blockquote>
<h3 id="Day30"><a href="#Day30" class="headerlink" title="Day30"></a>Day30</h3><p>第三十天六角的題目為：</p>
<p>依照昨天的 <strong>API</strong> 取的列表後，經過 <code>sort()</code> 之後的陣列必需轉為圖表。</p>
<p>第三十天六角的題目解答為：</p>
<p>這次會用到 <strong><a href="https://c3js.org/examples.html">c3.js</a></strong>，這是一個開源的圖表套件，代表可以免費使用且方便上手，只是用別人的套件最大的問題就是格式必須按照對方的排法，因為之前是用 <strong>d3.js</strong> 但也僅止於用 <strong>excel</strong> 的地方。</p>
<p>在開始我們必須引入 <strong>CSS</strong> 及 <strong>JS</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/c3/0.7.18/c3.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/c3/0.7.18/c3.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>完成後的起手勢跟 <strong>canvas</strong> 很像，必須先在 <strong>html</strong> 上選擇你要放表的地方：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;chart&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>接著按照最基本的 <strong><a href="https://c3js.org/samples/simple_multiple.html">c3 line</a></strong> 教學，初始化圖表：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> chart = c3.<span class="title function_">generate</span>(&#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">columns</span>: [</span><br><span class="line">            [<span class="string">&#x27;data1&#x27;</span>, <span class="number">30</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">400</span>, <span class="number">150</span>, <span class="number">250</span>],</span><br><span class="line">            [<span class="string">&#x27;data2&#x27;</span>, <span class="number">50</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">40</span>, <span class="number">15</span>, <span class="number">25</span>]</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>接著就能看見圖表了，但你可能還會想配置一些額外的設定，比方說 <strong>X 及 Y 軸的文字</strong>、<strong>顏色</strong>、<strong>圖表樣式</strong>…等等。</p>
<h4 id="Axis-軸"><a href="#Axis-軸" class="headerlink" title="Axis(軸)"></a>Axis(軸)</h4><p>關於配製方法幾乎都是在 <code>c3.generate</code> 裡面 <code>data</code> 的下方一個一個補上去，像是現在要舉例的 <strong><a href="https://c3js.org/samples/categorized.html">Axis(軸)</a></strong> 就向下方的寫法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> chart = c3.<span class="title function_">generate</span>(&#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">columns</span>: [</span><br><span class="line">            [<span class="string">&#x27;data1&#x27;</span>, <span class="number">30</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">400</span>, <span class="number">150</span>, <span class="number">250</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">250</span>]</span><br><span class="line">            <span class="comment">// 可配置多個</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">axis</span>: &#123;</span><br><span class="line">        <span class="attr">x</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">            <span class="attr">categories</span>: [<span class="string">&#x27;小杰&#x27;</span>, <span class="string">&#x27;老闆&#x27;</span>, <span class="string">&#x27;黑道大哥&#x27;</span>, <span class="string">&#x27;護理師&#x27;</span>, <span class="string">&#x27;禿頭俠&#x27;</span>, <span class="string">&#x27;路人甲&#x27;</span>, <span class="string">&#x27;路人乙&#x27;</span>, <span class="string">&#x27;路人丙&#x27;</span>, <span class="string">&#x27;你&#x27;</span>],</span><br><span class="line">            <span class="attr">label</span>: &#123;</span><br><span class="line">              <span class="attr">text</span>: <span class="string">&#x27;參賽者姓名&#x27;</span>,</span><br><span class="line">              <span class="attr">position</span>: <span class="string">&quot;outer-center&quot;</span></span><br><span class="line">              <span class="comment">// inner-right : default</span></span><br><span class="line">              <span class="comment">// inner-center</span></span><br><span class="line">              <span class="comment">// inner-left</span></span><br><span class="line">              <span class="comment">// outer-right</span></span><br><span class="line">              <span class="comment">// outer-center</span></span><br><span class="line">              <span class="comment">// outer-left</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">y</span>: &#123;</span><br><span class="line">            <span class="attr">label</span>: &#123;</span><br><span class="line">                <span class="attr">text</span>: <span class="string">&#x27;完課率(%)&#x27;</span>,</span><br><span class="line">                <span class="attr">position</span>: <span class="string">&#x27;outer-middle&#x27;</span></span><br><span class="line">                <span class="comment">// inner-top : default</span></span><br><span class="line">                <span class="comment">// inner-middle</span></span><br><span class="line">                <span class="comment">// inner-bottom</span></span><br><span class="line">                <span class="comment">// outer-top</span></span><br><span class="line">                <span class="comment">// outer-middle</span></span><br><span class="line">                <span class="comment">// outer-bottom</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>相關配置其實都還是可以在官方指南找到，這邊就淺入淺出吧！</p>
</blockquote>
<iframe height="265" style="width: 100%;" scrolling="no" title="JS學徒特訓班 - 第三十天練習" src="https://codepen.io/rexhung0302/embed/GRoYzbq?height=265&theme-id=dark&default-tab=js,result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/rexhung0302/pen/GRoYzbq'>JS學徒特訓班 - 第三十天練習</a> by RexHung
  (<a href='https://codepen.io/rexhung0302'>@rexhung0302</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<blockquote>
<p>解題關鍵：其實套件使用還是要看當初作者怎麼訂製，然後使用，主要需要注意的地方還是在資料處理部分，該怎麼塞，怎麼重複使用同一個 <strong>function</strong> 不寫多餘的 <strong>Code</strong>，這才是最重要的地方，有關圖表更多介紹可以參考這位大神的部落格 <a href="https://hsuchihting.github.io/javascript/20200715/3292510004/">提姆寫程式(TimCodingBlog) - JS 筆記 - C3.js 基本認識</a>。</p>
</blockquote>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>目前會每天依序的練習，如果有解開題目答案或是不了解也可以在下方留言呦！如果題目出得不好也請各路大神手下留情。</p>
]]></content>
      <categories>
        <category>Code</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
        <tag>HexSchool</tag>
      </tags>
  </entry>
  <entry>
    <title>[NodeJS Become A Full Stack Developer] — 從0開始 NodeJS 小試身手</title>
    <url>/2020/08/06/20200806/</url>
    <content><![CDATA[<p><img src="/images/others/loading.gif" data-original="/images/20200806/nodejs-logo.png" alt="NodeJS"></p>
<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>接觸程式近一年半多，常常想一虧後端的樣貌，想知道整個程式流程是怎麼跑的，甚至想要試試看寫出從前到後的 <strong>Side Project</strong>，如果你也對後端有點興趣，就跟著筆者一起往下學習吧！這是筆者接觸的 <strong>第一個後端語言</strong>，所以不會有太過艱深的研究或是內容。</p>
<span id="more"></span>

<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p><img src="/images/others/loading.gif" data-original="/images/20200806/hexschoolNodeJSLogo.jpg" alt="六角學院課程"></p>
<p>沒有錯！這次也是照著六角學院線上課程 <a href="https://www.hexschool.com/courses/nodejs.html">NodeJS 前後端開發實戰</a> 學習筆記，好處是隨時想進行就進行學習，缺點也顯而易見就是太懶惰可能會讓課程擺著生灰塵(有興趣參考 線上課程 vs 直播課程 <a href="https://rexhung0302.github.io/2020/06/06/20200606/">八週總結心得</a> )，鑑於以往筆記過長，這系列會使用簡短且重點筆記。</p>
<hr>
<h2 id="簡短介紹"><a href="#簡短介紹" class="headerlink" title="簡短介紹"></a>簡短介紹</h2><p><strong>Node.js® is a JavaScript runtime built on Chrome’s V8 JavaScript engine.</strong></p>
<p><strong>Node.js</strong> 使用了 <strong>V8</strong> 引擎，而它是一個能夠執行 <strong>JS</strong> 的環境，而 <strong>V8</strong> 專案也是開源的，有興趣可以參考<a href="https://chromium.googlesource.com/v8/v8">此處</a>。</p>
<p>而 <strong>Node.js</strong> 的出現，使得原本在前端已經被廣泛的運用，甚至可以只靠 <strong>JS</strong> 就從前端寫到透端；由於很多前端工程師在接觸 <strong>前端三寶(HTML、CSS、JS)</strong> 之後，往往想一虧後端都會不知所措，甚至需要重新適應一個後端語言，因為 <strong>Node.js</strong> 讓前端可以輕鬆的就入門。</p>
<hr>
<h3 id="初試啼聲"><a href="#初試啼聲" class="headerlink" title="初試啼聲"></a>初試啼聲</h3><h4 id="如何開始"><a href="#如何開始" class="headerlink" title="如何開始"></a>如何開始</h4><p>一開始我們可以上 <strong>Node.js</strong> 的 <a href="https://nodejs.org/en/">官方網站</a> 下載，這邊會有兩個版本，左邊代表比較穩定的版本，通常建議新手或是不熟的人先下載這個，而右邊那個則是最新版本，如果想試試新功能，可以選擇這一個，下載安裝完後打開中關機輸入以下指令即可查看是否安裝成功及版本號：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node --version</span><br></pre></td></tr></table></figure>

<blockquote>
<p>點選下方的 <a href="https://nodejs.org/en/about/releases/">Long Term Support (LTS) schedule.</a> 可以看到個版本的時間軸，比方說預期什麼版本預期維護到什麼時候。</p>
</blockquote>
<h4 id="簡單上手"><a href="#簡單上手" class="headerlink" title="簡單上手"></a>簡單上手</h4><p>在終端機輸入 <code>node</code>，即會進入 <code>node</code> 的環境，在這裡面可以寫任何的 <strong>JS</strong>，但我們通常不會這樣子做，我們會寫在檔案上，再交由 <strong>NodeJS</strong> 去執行，所以你可以試著創立一個 <code>app.js</code>，然後在裡面輸入下面內容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello NodeJS!!&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>隨後打開終端機輸入 <code>node app.js</code>(記得要在同一層！)，就會出現 <code>Hello NodeJS!!</code>。</p>
<hr>
<h3 id="模組介紹"><a href="#模組介紹" class="headerlink" title="模組介紹"></a>模組介紹</h3><p>原生的 <strong>NodeJS</strong> 其實裡面幫我們包含了很多東西，可以想像成 <strong>JS</strong> 有很多原生用法，比方說原生的 <strong>JS</strong> 可以直接使用 <code>console.log()</code> 或是 <code>new Date()</code>，可以參考 <a href="https://github.com/nodejs/node/tree/master/lib">node git lib</a>。</p>
<h4 id="全域物件"><a href="#全域物件" class="headerlink" title="全域物件"></a>全域物件</h4><p>值得先提的是關於全域這件事情，在 <strong>JS</strong> 裡面最外層是 <strong>window</strong>，而 <strong>NodeJS</strong> 因為下面可能會有好幾個 <strong>JS</strong> ，所以最外層則是 <strong>global</strong>，如果你在檔案 A 想要檔案 Ｂ 吃得到這個變數，就必須要用 <strong>global</strong>，如下圖：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200806/globalVSwindow.png" alt="環境介紹"></p>
<h4 id="檔案橋樑"><a href="#檔案橋樑" class="headerlink" title="檔案橋樑"></a>檔案橋樑</h4><p>那如何讓檔案能相互溝通了，就必須依靠 <code>require()</code> 及 <code>module.exports</code> 或 <code>exports</code>，當一隻檔案要讓另一隻檔案引入的時候必須要先指定這隻檔案要輸出什麼東西，比如下方(B.js)：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myName = <span class="string">&#x27;王小明&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">name</span> = myName;</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myName = <span class="string">&#x27;王小明&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: myName</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>基本上都會推薦第二種寫法，簡單明瞭，而且主要的重點是，<code>這兩種方法絕對不可以共用</code>，如果共用後面的會把前面的覆蓋過去。</p>
</blockquote>
<p>那需要引用的檔案就更簡單了，只需要使用 <code>require()</code> 即可，如下(A.js)：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nameInfo = <span class="built_in">require</span>(<span class="string">&#x27;./B.js&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nameInfo.<span class="property">name</span>); <span class="comment">// 王小明</span></span><br></pre></td></tr></table></figure>

<h4 id="又是一把釣竿"><a href="#又是一把釣竿" class="headerlink" title="又是一把釣竿"></a>又是一把釣竿</h4><p>那我們該怎麼入門使用 <strong>Node.js</strong> 呢？上面提到，原生的 <strong>Node.js</strong> 就有提供幾種 <strong>API</strong> 可以使用，首先到官方網站的 <strong><a href="https://nodejs.org/en/docs/">Documentation</a></strong>，然後找到適合自己的版本，這邊拿 <code>v12.16.1</code> 來舉例，滑到下面找到該版本的指南 <strong><a href="https://nodejs.org/docs/latest-v12.x/api/">Node.js 12.x</a></strong> 點進去。</p>
<p>這時候會發現左邊有很多 <strong>API</strong>，這些都是原生的方法，裡面也紀錄了該怎麼使用，這邊先舉經典的 <strong>HTTP</strong> 為例吧！</p>
<p>一樣新增一支 <strong>App.js</strong>，所有要應用到的方法起手式都是上面提到的 <code>require()</code>，先載入進來，才能使用，所以照下面程式碼寫：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span>(<span class="params">request, response</span>)&#123;</span><br><span class="line">  <span class="comment">// request -&gt; 請求來源相關資料</span></span><br><span class="line">  <span class="comment">// response -&gt; 伺服器(Node.js 這邊)回覆相關資料</span></span><br><span class="line">  response.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/plan&quot;</span> &#125;);</span><br><span class="line">  response.<span class="title function_">write</span>(<span class="string">&#x27;Hello Node.js!!&#x27;</span>);</span><br><span class="line">  response.<span class="title function_">end</span>();</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">8080</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>接著打開終端機，在跟 <strong>App.js</strong> 同一層的情況下輸入 <code>node app.js</code>，然後打開網頁輸入 <code>http://127.0.0.1:8080</code>，就會看到 <strong>Hello Node.js!!</strong>。</p>
</blockquote>
<h4 id="整體流程"><a href="#整體流程" class="headerlink" title="整體流程"></a>整體流程</h4><p>在上面 <code>createServer()</code> 裡面的 <code>request</code> 可以取得不少使用者的資訊，比方說 <strong>request.url</strong>，而這時候就可以透過 <strong>url</strong> 去實作 <strong>router</strong> 的分配，到這邊有沒有感覺已經踏上後端之路了呢？</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200806/how_backend_work.png" alt="後端流程"></p>
<blockquote>
<p>上圖省略了去資料庫拿資料及資料呈現是交由前端或是後端 <strong>SSR(Server-Side Rendering)</strong>，但整個 <strong>要求(request)</strong> 跟 <strong>回應(response)</strong> 差不多是這麼一回事。</p>
</blockquote>
<h4 id="關於路徑"><a href="#關於路徑" class="headerlink" title="關於路徑"></a>關於路徑</h4><p>上面提到 <strong>router</strong>，而在我們使用後端語言常常會使用到路徑，常見的 <strong>Node.js</strong> 路徑有幾個常用的東西，像是 <code>__dirname(資料夾路徑)</code> 或 <code>__filename(檔案路徑)</code>，這兩個在 <a href="https://ithelp.ithome.com.tw/articles/10200007">VSCode 除錯模式</a>可以看見，</p>
<p>這邊就會提到關於 <strong>Node.js</strong> 就提供了另一個很有用的 <strong>API</strong> -&gt; <strong><a href="https://nodejs.org/api/path.html">path</a></strong>，使用方式跟上面起手式一樣，並示範幾個基本的方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 讀取目錄路徑</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">dirname</span>(<span class="string">&#x27;/a/b/c.js&#x27;</span>)); <span class="comment">// /a/b</span></span><br><span class="line"><span class="comment">// 路徑合併</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;c.js&#x27;</span>)); <span class="comment">// /User/xxx/Desktop/c.js</span></span><br><span class="line"><span class="comment">// 讀取檔案名稱</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">basename</span>(<span class="string">&#x27;/a/b/c.js&#x27;</span>)); <span class="comment">// c.js</span></span><br><span class="line"><span class="comment">// 讀取檔案副檔名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">basename</span>(<span class="string">&#x27;/a/b/c.js&#x27;</span>)); <span class="comment">// .js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 讀取所有資訊 包含路徑 檔案名稱 副檔名 檔案名稱(不包含副檔名) - 組合包</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">parse</span>(<span class="string">&#x27;/a/b/c.js&#x27;</span>)); <span class="comment">// 回傳 Object &#123; root: &#x27;/&#x27;, dir: &#x27;/a/b&#x27;, base: &#x27;c.js&#x27;, ext: &#x27;.js&#x27;, name: &#x27;c&#x27; &#125;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意！上方的資訊只是把你輸入的路徑分析出來，如果後方輸入不存在的檔案，也是會有結果的，如下圖。</p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20200806/example.png" alt="不存在的檔案"></p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>這邊只是簡短的紀錄並介紹 <strong>Node.js</strong>，而 <strong>Node.js</strong> 其實強大且豐富，不是三言兩語就能介紹完畢，由於原生的方法沒辦法滿足所有情況，所以在開源的情況下，大家又會各自開發功能並且發布出去，使得 <strong>Node.js</strong> 越來越豐富，類似於前端的套件，前端只需要 <strong>CDN</strong> 就可以使用，而後端一定要 <strong>npm install</strong>(關於 <strong>npm</strong> 介紹可參考 <a href="https://rexhung0302.github.io/2019/06/18/20190618/">[Tool Notes] — 關於Webpack #1 - 第一次就上手</a>) 後並且使用起手式 <strong>require</strong> 才能使用；你可能會想，每次建立後端都這麼麻煩嗎？後面我們將會繼續提到如何快速建立後端環境、如何應用。</p>
<blockquote>
<p>對於後端矇懞懂懂的我如果有誤還請各位手下留情，所有的比較資料來源幾乎都是從課程上得知或上網爬文學習。</p>
</blockquote>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><p><a href="https://chromium.googlesource.com/v8/v8">V8 Git</a></p>
</li>
<li><p><a href="https://nodejs.org/en/">NodeJS</a></p>
</li>
<li><p><a href="https://ithelp.ithome.com.tw/articles/10200007">Day 4 - 一周目- 用VSCode debug 模式，玩玩 ES6 常用語法</a></p>
</li>
<li><p><a href="https://rexhung0302.github.io/2019/06/18/20190618/">[Tool Notes] — 關於Webpack #1 - 第一次就上手</a></p>
</li>
<li><p><a href="https://rexhung0302.github.io/2020/06/06/20200606/">[Hexschool Web Layout Training] — 八週總結</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Back-end</category>
        <category>NodeJS</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>Back-end</tag>
        <tag>NodeJS</tag>
      </tags>
  </entry>
  <entry>
    <title>[Tool Note] — Google Firebase DB 怎麼用(前端串接)？</title>
    <url>/2020/08/09/20200809/</url>
    <content><![CDATA[<p><img src="/images/others/loading.gif" data-original="/images/20200809/firebase_logo.png" alt="Firebase"></p>
<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>在之前 <a href="https://www.hexschool.com/2019/06/14/2019-06-14-the_f2e/">The F2E - 第二屆 前端 &amp; UI 修練精神時光屋</a> 只會切版時候的筆者，在其中一關 <a href="https://github.com/RexHung0302/The-F2E-Challenge/tree/master/chatroom">第七週 - ChatRoom 匿名聊天室</a> 第一次聽到了 <strong>Firebase</strong> 這個玩意兒，沒想到將近快一年之後才真正去學習，藉著這次開始學習 <strong>Node.js</strong> 課程，趁著記憶猶新，趕快再來一篇筆記，還不會的朋友也歡迎一起上車。</p>
<span id="more"></span>

<p>本篇文章一樣不會過於允長及深入，會教基本的 <strong>CRUD</strong>，有興趣的前端仔不會後端也可以靠這個做出一個小全端 <strong>Side Project</strong>。</p>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p><img src="/images/others/loading.gif" data-original="/images/20200809/sample.gif" alt="各種服務"></p>
<p>如果還沒聽過 <strong>Firebase</strong> 的話這邊簡短介紹一下。<strong>Firebase</strong> 是 <strong>後端服務平台(Backend as a Services，BaaS)</strong>，在筆者開始學習的時候已經改過版本，現在也提供了免費的 <strong>數據分析、雲端訊息推播、通知系統、備份、Log 報告…等等</strong>(看購買的課程影片上的 <strong>Firebase</strong> 似乎已經是幾年前了)。</p>
<p>而 <strong>Firebase</strong> 並非剛開始就是 <strong>Google</strong> 的，<strong>2011年</strong> 成立一直到了 <strong>2014年10月</strong> 才被 <strong>Google</strong> 收購；而這次我們會介紹 <strong>Firebase</strong> 的 <strong>Database</strong>！</p>
<hr>
<h3 id="使用指南"><a href="#使用指南" class="headerlink" title="使用指南"></a>使用指南</h3><h4 id="踏出第一步"><a href="#踏出第一步" class="headerlink" title="踏出第一步"></a>踏出第一步</h4><p>首先上 <strong><a href="https://firebase.google.com/">Firebase 網站</a></strong>，然後點選 <strong>Get Started</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200809/step1.png" alt="step1"></p>
<p>然後新增一個專案，並且取一個專案名稱。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200809/step2.png" alt="step2"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20200809/step3.png" alt="step3"></p>
<p>接著可以選擇是否要使用 <strong><a href="https://analytics.google.com/analytics/web/?hl=zh-TW">Google Analytics (分析)</a></strong>，這邊可以選擇不開啟。</p>
<blockquote>
<p>之後會寫一篇文章來介紹 <strong>GA</strong> 及 <strong>GTM</strong>，剛好最近專案有碰到，這是一個很強大的 <strong>分析、行銷</strong> 工具(註1)。</p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20200809/step4.gif" alt="step4"></p>
<h4 id="接通管線"><a href="#接通管線" class="headerlink" title="接通管線"></a>接通管線</h4><p><img src="/images/others/loading.gif" data-original="/images/20200809/step5.png" alt="step5"></p>
<p>接著點選 <code>&lt;/&gt;</code> 這個符號，然後註冊一個網頁應用程式，下方的代管選項可以不必勾選，所謂的代管可以參考 <a href="https://andy6804tw.github.io/2018/01/29/firebase-hosting-deploy/">Firebase Hosting 靜態網站部署</a>，有點類似於 <strong>Github Page</strong> 的概念。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200809/step6.png" alt="step6"></p>
<p>接著完成後就會出現一大串 <strong>JS Code</strong>，這時候可以先保存下來，我們將會做一個簡單的教學。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200809/step7.png" alt="step7"></p>
<blockquote>
<p>之後找不到 <strong>Firebase SDK</strong> 的話，可以至 <strong>Firebase</strong> 網頁，點選左邊 <strong>專案總覽</strong> 旁的 <strong>齒輪</strong>，然後再點選 <strong>專案設定</strong>，接著畫面滑到底就會有 <strong>Firebase SDK snippet</strong>。</p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20200809/Firebase_SDK_snippet.png" alt="Firebase SDK"></p>
<blockquote>
<p>註1：<em>2020&#x2F;09&#x2F;13 寫了一篇 <strong><a href="https://rexhung0302.github.io/2020/09/13/20200913/">[Tool Notes] — Google Analytics(GA) 及 Google Tag Manager(GTM) 怎麼用？</a></strong> 對行銷或統計甚至對 <strong>GA、GTM</strong> 有興趣都可以參考。</em></p>
</blockquote>
<hr>
<h3 id="筆者帶進門"><a href="#筆者帶進門" class="headerlink" title="筆者帶進門"></a>筆者帶進門</h3><h4 id="建立線上資料庫"><a href="#建立線上資料庫" class="headerlink" title="建立線上資料庫"></a>建立線上資料庫</h4><p>再來我們新增一個專案，然後新增一支 <strong>index.html</strong>，檔案，然後在 <strong>head</strong> 處引入剛剛複製的那些代碼。 </p>
<p>這邊有個地方很重要，在那串代碼裡面有一行寫著 <code>&lt;!-- TODO: Add SDKs for Firebase products that you want to use https://firebase.google.com/docs/web/setup#available-libraries --&gt;</code>，這個意思是提醒使用者在 <strong>Firebase</strong> 眾多的功能當中你需要用到什麼功能就要分別去引入，這邊是使用 <strong>Database</strong> 的功能所以我們加上這行 <code>&lt;script src=&quot;https://www.gstatic.com/firebasejs/7.17.1/firebase-database.js&quot;&gt;&lt;/script&gt;</code> 就可以使用 <strong>firebase-database</strong> 的功能啦！</p>
<p>接下來讓我們回到 <strong>Firebase</strong> 的網頁，點選左邊的 <strong>Database</strong> 進入後滑到下方，在標題顯示 <code>您也可以選用「Realtime Database」</code> 的地方，選擇建立一個新的 <strong>Realtime Database</strong> 資料庫。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200809/create_db.png" alt="create_db"></p>
<blockquote>
<p>因為跟著影片學習做筆記的原因，會先使用 <strong>Realtime Database</strong> 當作資料庫。</p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20200809/mode_example.gif" alt="mode_example"></p>
<p>打開後會有兩種模式可以選擇，可以稍微參考一下，然後我們選擇第一種，因為我們還會再作修改，不過這邊可以先有一個觀念，這個 <strong>即時資料庫安全性規則</strong> 是可以透過客製化設定的，比方說 <strong>誰能改、誰能閱讀、開放修改到何時…等等</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200809/clear_DB.png" alt="clear_DB"></p>
<p>之後進入資料庫會發現一片空白，但有你剛剛專案的名稱，緊接著就來說明如何操作資料庫吧！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200809/ready.png" alt="小夫 我的資料要近來囉！"></p>
<hr>
<h3 id="像極了套件"><a href="#像極了套件" class="headerlink" title="像極了套件"></a>像極了套件</h3><h4 id="自訂規則"><a href="#自訂規則" class="headerlink" title="自訂規則"></a>自訂規則</h4><p>如果我們平常會使用的套件，人家怎麼定義，我們就如何使用，因為往往作者已經幫我們省去麻煩的設定，而我們只需要使用作者定義好的方法，就可以達到我們想要的效果！</p>
<p>在我們講解如何操作資料庫的時候必須要更改一下我們資料庫的設定，剛剛提及的 <strong>即時資料庫安全性規則</strong> 便是我們第一件要處理的事情。</p>
<p>在我們進入 <strong>Firebase</strong> 的 <strong>Database</strong> 後，可以看到上方有一個 <strong>規則</strong> 進入後會看到以下程式碼：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;rules&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;.read&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;.write&quot;</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>為了讓我們好測試及修改，這邊全部改為 <strong>true</strong>，如下方程式碼，然後點選跳出來的 <strong>發布</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;rules&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;.read&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;.write&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20200809/rule.png" alt="修改規則"></p>
<h4 id="ref-、set"><a href="#ref-、set" class="headerlink" title="ref()、set()"></a>ref()、set()</h4><p>與此時，你已經能操作資料庫了，只是你可能還不知道怎麼新增資料進去資料庫，讓我們一步一步慢慢來！</p>
<p>再來我們跳回剛剛新增的 <strong>index.html</strong>，然後在引入的那些程式碼後面再加上 <code>firebase.database().ref().set(&#39;Hello Firebase!&#39;);</code>，緊接著打開 <strong>index.html</strong> 你會發現什麼事情都沒發生，這時候再跳回去 <strong>Firebase</strong> 的 <strong>Database</strong>，會發現剛剛 <code>set()</code> 裡的 <strong>Hello Firebase!</strong> 跑到資料庫了！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200809/new_data.png" alt="新資料"></p>
<p>到這邊你會發現剛剛那一行的一些神奇之處 <code>firebase.database()</code> 即是使用 <strong>database</strong> 的意思，而 <code>ref()</code> 則是你指定的路徑，有點類似資料庫名稱，最後是 <code>set()</code>，這個毫無疑問就是新增，由於沒有指定路徑，所以會直接把所有東西都洗掉，然後加上我們指定的文字！</p>
<h4 id="on-、once"><a href="#on-、once" class="headerlink" title="on()、once()"></a>on()、once()</h4><p>如果我們可以新增資料進去資料庫，也該有方法可以拿資料出來了吧？這兩個語法 <code>on()</code>、<code>once()</code> 就是會把資料從資料庫拿出來，差別在於前方的是類似即時更新，後方只會去資料庫拿一次，所以當我們在做聊天室的時候，寫上一個 <code>firebase.database().ref().on()</code> 就會方便許多，不用一直再去跟資料庫要，只要有更新即會觸發後續事件。</p>
<p>這兩個語法裡面都是接上 <code>function()</code>，以下為範例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">firebase.<span class="title function_">database</span>().<span class="title function_">ref</span>().<span class="title function_">once</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item.<span class="title function_">val</span>());</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="push-、child-、remove-、child"><a href="#push-、child-、remove-、child" class="headerlink" title="push()、child()、remove()、child()"></a>push()、child()、remove()、child()</h4><p>前方我們有提到 <code>set()</code>，但你可能有時候只是想把東西丟進去不要洗掉全部的資料，這時候就要使用 <code>push()</code>，而每一個 <code>push()</code> 也會產生一個亂碼的 <code>Key</code>。</p>
<p>而有新增就會有刪除，在我們把資料 <code>on()</code> 或 <code>once()</code> 出來的時候，我們可以順便在 <strong>DOM</strong> 上塞上 <strong>data-key&#x3D;”xxxx”</strong> 之後我們需要刪除，就需要帶特定 <strong>key</strong> 進去，下方為範例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">firebase.<span class="title function_">database</span>().<span class="title function_">ref</span>().<span class="title function_">child</span>(key).<span class="title function_">remove</span>();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>切記，怎麼新增，資料庫就會怎麼排列，建議在 <code>ref()</code> 就規劃好資料庫怎麼放。</p>
</blockquote>
<h4 id="orderByChild-、forEach"><a href="#orderByChild-、forEach" class="headerlink" title="orderByChild()、forEach()"></a>orderByChild()、forEach()</h4><p>當我們從資料庫拿資料出來多少會想排列，比方說從高到低，或從低到高，這時候就必須使用 <code>orderByChild()</code> 了，範例碼如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">firebase.<span class="title function_">database</span>().<span class="title function_">ref</span>().<span class="title function_">orderByChild</span>(<span class="string">&#x27;weight&#x27;</span>).<span class="title function_">once</span>();</span><br></pre></td></tr></table></figure>

<p>而會提到 <code>forEach()</code> 是因為 <code>orderByChild()</code> 過濾出來的資料，必須在用 <code>forEach()</code> 取出每一個內容。</p>
<hr>
<h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><p>這邊附上一個使用 <strong>Google Firebase</strong> 的小專案，是六角學院的小作業，使用 <strong>Side Project</strong> 新增刪除自己的 <strong>BMI</strong>，有興趣可以自行 <strong>Clone</strong> 下來研究。</p>
<p>這個作樂使用 <a href="https://dwatow.github.io/2019/01-26-node-with-env-first/">Dotenv(讀取環境變數的套件)</a> 所以可以放心的 <strong>Clone</strong> 下來，並且修改完成之後上傳到自己的 <strong>GiuHub</strong>。</p>
<p>Demo: <a href="https://rexhung0302.github.io/Hexschool-firebase-bmi-practice/index.html">傳送門</a></p>
<p>Source Code: <a href="https://github.com/RexHung0302/Hexschool-firebase-bmi-practice">傳送門</a></p>
<blockquote>
<p><em>題外話：此作業有使用一鍵指令快數部署靜態資源至 GitHub，有興趣可參考 <a href="https://rexhung0302.github.io/2020/08/04/20200804/">[Git Notes] — 快速部署 Vue Cli 靜態資源至 GitHub Pages</a>。</em></p>
</blockquote>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>其實還有更多的方法沒有寫上來，但基本的操作流程就是這樣，想好好的用好一個套件或是服務，那就是 <strong>document</strong> 讀熟就對啦！</p>
<blockquote>
<p>看來下次要做到聊天室就不怕沒資料庫了。</p>
</blockquote>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><p><a href="http://dog0416.blogspot.com/2018/06/firebase-firebase.html">[Firebase] Firebase 介紹與建立專案</a></p>
</li>
<li><p><a href="https://andy6804tw.github.io/2018/01/29/firebase-hosting-deploy/">Firebase Hosting 靜態網站部署</a></p>
</li>
<li><p><a href="https://dwatow.github.io/2019/01-26-node-with-env-first/">《Chris 技術筆記》- Node.js 使用 .env 加上環境變數</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Back-end</category>
        <category>DB</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
        <tag>Back-end</tag>
        <tag>DB</tag>
      </tags>
  </entry>
  <entry>
    <title>[JavaScript Note] — 關於 Url 轉址及 取得參數</title>
    <url>/2020/08/11/20200811/</url>
    <content><![CDATA[<p><img src="/images/others/loading.gif" data-original="/images/20200811/logo.png" alt="Window Location"></p>
<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>在 <a href="https://rexhung0302.github.io/2020/07/29/20200729/">[Hexschool JS60 Training] — 60天 JavaScript 學徒試煉 Day31-60</a> 第四十三天拿到一則題目，研究 <strong>window.location</strong> 及 <strong>轉址</strong> 或 <strong>如何取得網址參數</strong>。</p>
<p>想到早前也一直想筆記這個東西，雖然現在大多數都是用框架在做前端，但不免還是會碰到只有 <strong>HTML</strong> 或是 <strong>PHP</strong> 要送 <strong>Formdata</strong> 及 <strong>轉頁帶參數</strong> 這種情況，這次就好好來筆記一下吧。</p>
<span id="more"></span>

<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p><img src="/images/others/loading.gif" data-original="/images/20200811/url.png" alt="網址"></p>
<p>講到 <strong>Url</strong> 就要先解釋我們常看到的那一串是什麼，下面我們會先簡短解釋一下，然後在開始介紹如何取得網址參數。</p>
<hr>
<h3 id="那一串長長的是什麼？"><a href="#那一串長長的是什麼？" class="headerlink" title="那一串長長的是什麼？"></a>那一串長長的是什麼？</h3><h4 id="超文本傳輸安全協定-Hypertext-Transfer-Protocol-Secure"><a href="#超文本傳輸安全協定-Hypertext-Transfer-Protocol-Secure" class="headerlink" title="超文本傳輸安全協定(Hypertext Transfer Protocol Secure)"></a>超文本傳輸安全協定(Hypertext Transfer Protocol Secure)</h4><p>首先我們拿 <strong>Google</strong> 常常搜尋的時候的網址來看，最前面的 <strong>https</strong> 就是 <strong>超文本傳輸安全協定(Hypertext Transfer Protocol Secure)</strong>，有時候我們會看到 <strong>http</strong> 及 <strong>https</strong> 差別在於後者多了 <strong>SSL&#x2F;TLS</strong> 來加密封包資料；另外還有 <strong>ftp(檔案傳輸協定)</strong>、<strong>mailto(電子郵件位址)</strong>。</p>
<h4 id="Sub-Domin-子網域"><a href="#Sub-Domin-子網域" class="headerlink" title="Sub Domin(子網域)"></a>Sub Domin(子網域)</h4><p>接著就是 <strong>Sub Domin(子網域)</strong> 又稱 <strong>次網域</strong>，這是一個你申請的 <strong>網域</strong> 的 <strong>延伸網域</strong>，什麼意思呢？先讓我們看看下面幾個網址：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www.google.com</span><br><span class="line">mail.google.com</span><br><span class="line">firebase.google.com</span><br></pre></td></tr></table></figure>

<p>後方的 <code>google.com</code> 就是我們申請的網域，現在購買網址其實很方便，比方說 <strong>GoDaddy</strong>、<strong>tisnet</strong>…其實上 <strong>Google</strong> 搜尋網域購買就會有一大把，那網域前方 <strong>www、mail、firebase</strong> 的 <strong>Sub Domin</strong> 是什麼呢？</p>
<p>簡單說，想像你會有一個網址指向你家，你家可能會有 <strong>台北的家、台中的家、高雄的家</strong>，你怎麼指引他們進去呢？就是透過 <strong>Sub Domin(子網域)</strong>，比方說 <code>bathroom.myhome.com</code> 或 <code>livingroom.myhome.com</code>。</p>
<h4 id="path-路徑"><a href="#path-路徑" class="headerlink" title="path(路徑)"></a>path(路徑)</h4><p>緊接著就是路徑，像是我們進入後台頁面，會想要 <strong>新增、編輯</strong> 頁面，這時候網址可能就會是 <code>https://taichunghouse.myhome.com/create</code> 或 <code>https://taichunghouse.myhome.com/edit</code>，而路徑可以好幾層。</p>
<p>有時候我們後台可能會做報表，就會出現 <code>https://taichunghouse.myhome.com/report/create</code> 這種路徑。</p>
<h4 id="Parameter-參數"><a href="#Parameter-參數" class="headerlink" title="Parameter(參數)"></a>Parameter(參數)</h4><p>關於參數就是今天的主題了，在我們轉址的時候，或是把網頁導向後端某一些頁面，我們會想要帶一些資訊，如果我們沒有透過打 <strong>API</strong> 的方式先把資訊送過去，那這時候就只能靠 <strong>Parameter(參數)</strong> 來傳送參數，而參數也是可以帶很多個，帶的方法也很簡單：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.google.com/search?q=HelloWorld</span><br></pre></td></tr></table></figure>

<p>只要在剛剛介紹的那一串 <code>超文本傳輸安全協定(Hypertext Transfer Protocol Secure)+Sub Domin(子網域)+path(路徑)</code> 後面帶上問號(?)然後就可以開始帶 <strong>Parameter(參數)</strong> 了，帶的方式就是 <code>key=value</code>，當然我們的參數也可以帶很多個，中間就是用 <strong>分隔符號(&amp;)</strong> 區隔開來：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.google.com/search?q=HelloWorld&amp;t=20200811</span><br></pre></td></tr></table></figure>


<p>緊接著就是到目的地的頁面去解析網址帶過來的資訊。</p>
<hr>
<h3 id="怎麼拿到那一串"><a href="#怎麼拿到那一串" class="headerlink" title="怎麼拿到那一串"></a>怎麼拿到那一串</h3><p>前面我們成功的帶入了一串資訊要傳給目的地，那我們該如何拿到呢？</p>
<p>有好幾種做法，參照 <strong><a href="https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams">MDN</a></strong> 上的說明，就有 <code>URLSearchParams()</code> 及 <code>URL()</code>，或是原生的 <code>window.location.search</code>。</p>
<h4 id="URL"><a href="#URL" class="headerlink" title="URL()"></a>URL()</h4><p>先說說這個做法，只要把需要解析的網址帶進去即可：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> search_url = <span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;https://www.google.com/search?q=HelloWorld&amp;t=20200811&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>緊接著我們就可以使用關於 <strong>URL()</strong> 的 <strong>API</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 取得完整網址</span></span><br><span class="line">search_url.<span class="property">href</span>; <span class="comment">// https://www.google.com/search?q=HelloWorld&amp;t=20200811</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 取得完整網域名稱(包含子網域)</span></span><br><span class="line">search_url.<span class="property">hostname</span>; <span class="comment">// www.google.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 取得路徑</span></span><br><span class="line">search_url.<span class="property">pathname</span>; <span class="comment">// /search(如果有多個可能會顯示 /report/create )</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 取得通訊協定</span></span><br><span class="line">search_url.<span class="property">protocol</span>; <span class="comment">// https</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 取得參數</span></span><br><span class="line">search_url.<span class="property">search</span>; <span class="comment">// q=HelloWorld&amp;t=20200811</span></span><br></pre></td></tr></table></figure>

<h4 id="URLSearchParams"><a href="#URLSearchParams" class="headerlink" title="URLSearchParams()"></a>URLSearchParams()</h4><p>然而我們這時候取到參數後並不會馬上用，我們也許會把它整理成一個陣列，或是個別分開使用，到這邊就可以使用 <code>URLSearchParams()</code> 了，這個 API 可以方便的 <strong>拿取、刪除、或是分別使用</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">search_url.<span class="property">searchParams</span>.<span class="title function_">toString</span>(); <span class="comment">// search%3Fq=HelloWorld&amp;t=20200811</span></span><br></pre></td></tr></table></figure>

<p>這時候會發現前面的 <strong>問號(?)</strong> 不見了，照著 <strong><a href="https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams">MDN</a></strong> 的方法，這時候就可以使用 <code>for (const [key, value] of mySearchParams.entries) &#123;&#125;</code> 的方式取出 <strong>key</strong> 及 <strong>value</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> params = search_url.<span class="property">searchParams</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> pair <span class="keyword">of</span> params.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(pair);</span><br><span class="line">&#125; <span class="comment">// [&quot;q&quot;, &quot;HelloWorld&quot;], [&quot;t&quot;, &quot;20200811&quot;]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>關於 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Set/entries">Set.prototype.entries()</a> 可以參考 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Set/entries">MDN</a>。</p>
</blockquote>
<p>這樣就會把每一個 <strong>key</strong> 跟 <strong>value</strong> 拆開了。</p>
<h4 id="window-location-search"><a href="#window-location-search" class="headerlink" title="window.location.search"></a>window.location.search</h4><p>這個方法比較慢一點，但能確保 <strong>IE</strong> 也能支援。</p>
<p>使用 <code>const query = window.location.search.substring(1)</code> 可以取得網址 <strong>問號(?)</strong> 後的參數，接著一樣跑迴圈可以取的 <strong>key</strong> 及 <strong>value</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getUrlVal</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> query = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>.<span class="title function_">substring</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> vars = query.<span class="title function_">split</span>(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; vars.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> pair = vars[i].<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(pair[<span class="number">0</span>] == val) &#123;</span><br><span class="line">            <span class="keyword">return</span> pair[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上的方法可以直接取的指定 <strong>key</strong> 的 <strong>value</strong>。</p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>關於傳參數這件事情，讓我想到之前有人提到前端就是開源的，所以再傳姪的時候要記得不要傳送機密訊息呀，比方說 <strong>password</strong>！</p>
<p>最近又接觸了幾個案子，沒有使用 <strong>SPA</strong>，換頁傳姪只能靠 <strong>Parameter</strong>，或是 <strong>LocalStorage</strong>，比較晚接觸網頁的菜鳥我，真的無法想像以前的先進們怎麼做多頁面的大型網站的Ｑ。</p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><p><a href="https://pjchender.blogspot.com/2018/08/js-javascript-url-parameters.html">[JS] 使用 JavaScript 解析網址與處理網址中的參數（URL Parameters）</a></p>
</li>
<li><p><a href="https://codingdailyblog.wordpress.com/2017/08/20/js-url-searchparams-get-%E6%8A%93%E5%8F%96%E7%B6%B2%E5%9D%80%E4%B8%ADget%E5%8F%83%E6%95%B8/">[JS] URL.searchParams.get() 抓取網址中GET參數</a></p>
</li>
<li><p><a href="https://codingdailyblog.wordpress.com/2017/08/20/js-url-searchparams-get-%E6%8A%93%E5%8F%96%E7%B6%B2%E5%9D%80%E4%B8%ADget%E5%8F%83%E6%95%B8/">[JS] URL.searchParams.get() 抓取網址中GET參數</a></p>
</li>
<li><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams">MDN</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>[NodeJS Become A Full Stack Developer] — Express、Router 及 EJS 入門淺談</title>
    <url>/2020/09/14/20200914/</url>
    <content><![CDATA[<p><img src="/images/others/loading.gif" data-original="/images/20200914/express_logo.jpg" alt="Express"></p>
<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>今天會提到關於 <strong>Nodejs</strong> 的 <strong>Template</strong>，如果你在前端有使用過 <strong>Pug(Jade)</strong>，會比較好理解一些，如果沒用過也沒關係，跟著這篇一起練習吧。</p>
<span id="more"></span>

<p><strong>Nodejs</strong> 的 <strong>Template</strong> 有許多種，這邊示範的為 <strong>EJS</strong>。</p>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p><img src="/images/others/loading.gif" data-original="/images/20200914/EJS_logo.png" alt="EJS Template"></p>
<p>在前面的文章 <strong><a href="https://rexhung0302.github.io/2020/08/06/20200806/">[NodeJS Become A Full Stack Developer] — 從0開始 NodeJS 小試身手</a></strong> 我們開啟了全端之路，在入門如何安裝及使用 <strong>Nodejs</strong> 之後這篇文章就要簡短講解如何快速建立後端環境，並且規劃簡單的架構及使用模板建立多頁面。</p>
<hr>
<h3 id="老樣子"><a href="#老樣子" class="headerlink" title="老樣子"></a>老樣子</h3><p>按照慣例文章開頭還是要講一下什麼是 <strong>Express</strong>。</p>
<p>跟前端一樣，<strong>Nodejs</strong> 也有三個比較流行的框架，分別為 <strong>Express、Koa</strong> 及 <strong>Hapi</strong>，但你可能會有點疑問，我安裝了這些框架但他們好像沒有幫我弄好環境？</p>
<p>沒有錯，這些框架和前端那些框架有些異曲同工之妙，這三個框架提供了一些更方便的 <strong>API</strong> 可以使用，但環境必須要自行建立，如果你不想要手動建立環境的話別擔心，可以考慮研究一下 <strong><a href="https://github.com/expressjs/generator">Express Generator</a>(註1)</strong>，但這邊推薦新手先自行從 0 開始建立環境才能比較了解為什麼 <strong><a href="https://github.com/expressjs/generator">Express Generator</a></strong> 要幫我把環境這樣放。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200914/three_logo.png" alt="Nodejs 框架三劍客"></p>
<p>關於三個框架的好壞這邊稍微提一下(不是專業的分析，有誤還請各路大神見諒)，詳細可參考 <strong><a href="https://kknews.cc/zh-tw/tech/gj9rkay.html">如何正確選擇Node框架：Express、Koa還是Hapi</a></strong>：</p>
<ol>
<li><a href="https://github.com/expressjs/express">Express</a></li>
</ol>
<ul>
<li><p>優點：三個框架內最小且靈活的框架、學習曲線較低、可客制程度高、可擴展性高</p>
</li>
<li><p>缺點：需要大量的手動建置，且框架對於組織需要非常明確。</p>
</li>
</ul>
<ol start="2">
<li><a href="https://github.com/koajs/koa">Koa</a></li>
</ol>
<ul>
<li><p>優點：由 <strong>Express</strong> 原班人馬開發，在 <strong>koa2</strong> 開始使用了 <strong>async&#x2F;await</strong>，在非同步控制上，代碼可讀性更高、性能好。</p>
</li>
<li><p>缺點：<strong>Koa</strong> 的社群相對較小(現在似乎不一定了)、和 <strong>Express</strong> 的插件不相容。</p>
</li>
</ul>
<ol start="3">
<li><a href="https://github.com/hapijs/hapi">Hapi</a></li>
</ol>
<ul>
<li><p>優點：<strong>issues</strong> 數量少，維護與關注狀態都非常好、對於路由配置更加詳細。</p>
</li>
<li><p>缺點：配置上結構較複雜。</p>
</li>
</ul>
<blockquote>
<p>註1：<em>之後會再寫一篇如何使用 <strong><a href="https://github.com/expressjs/generator">Express Generator</a></strong> 快速建立 <strong>Nodejs</strong> 專案。</em></p>
</blockquote>
<hr>
<h3 id="起手式一"><a href="#起手式一" class="headerlink" title="起手式一"></a>起手式一</h3><p>首先建立一個新專案資料夾，然後進入這個專案資料夾：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mkdir express-example</span><br><span class="line"></span><br><span class="line">$ cd express-example</span><br><span class="line"></span><br><span class="line">$ npm init/init -y // 加上 -y 快速建立</span><br><span class="line"></span><br><span class="line">$ npm i express -S // 安裝 express</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20200914/package_example.png" alt="目前的資料夾"></p>
<p>到目前為止在專案資料夾應該會出現 <strong>node_modules package.json package-lock.json</strong>(註2)。</p>
<blockquote>
<p>註2：<em>關於 <strong>node_modules package.json package-lock.json</strong> 前面文章提到過很多次，這邊再稍微講一下，<strong>node_modules</strong> 是放各種套件的地方，<strong>package.json</strong> 則是紀錄你這個專案使用了什麼套件，所以之後把專案上傳可以不用上傳 <strong>node_modules</strong> 只需要讓下一個人拿到 <strong>package.json</strong> 即可安裝你之前安裝過的所有套件，最後 <strong>package-lock.json</strong> 則是紀錄套件使用的版本號。</em></p>
</blockquote>
<hr>
<h3 id="起手式二"><a href="#起手式二" class="headerlink" title="起手式二"></a>起手式二</h3><p>裝好之後在專案底下建立 <strong>app.js</strong> 並且輸入以下內容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">request, response</span>) &#123;</span><br><span class="line">  response.<span class="title function_">send</span>(<span class="string">&#x27;Hello Express!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Example Nodejs Express listening on port 3000!&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>之後在終端機輸入 <code>node app.js</code> 就可以看見終端機的訊息：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200914/example_nodejs_express_start.png" alt="成功跑在 3000 port"></p>
<p>接著在網址上輸入 <code>http://localhost:3000/</code> 就會出現下面的訊息：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200914/success_on_web.png" alt="成功啟動"></p>
<h4 id="起手式二-補充"><a href="#起手式二-補充" class="headerlink" title="起手式二 - 補充"></a>起手式二 - 補充</h4><p>上面我們可以成功在網頁上顯示 <strong>Hello Express!</strong> 聰明的你一定想得到是透過 <code>response.send()</code> 這個方法，這邊就要講解關於 <code>request</code> 及 <code>response</code>。</p>
<p><code>request</code> 為 從使用者那邊發送過來的請求，<code>response</code> 為服務器這端發送回去的回應，我們可以透過 <code>request</code> 拿到一些使用者的請求及資訊，比方說 <code>request.route</code>、<code>req.param(&#39;key&#39;)</code> 及 <code>req.body.xxx</code> 等等。</p>
<p>這邊試著將 <strong>app.js</strong> 的程式碼改為以下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">request, response</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(request);</span><br><span class="line">  response.<span class="title function_">send</span>(<span class="string">&#x27;Hello Express!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Example Nodejs Express listening on port 3000!&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>你會看見 <code>request</code> 有許多資訊可以拿取：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200914/req_info.png" alt="許多資訊"></p>
<blockquote>
<p><em>後面會再提到如何顯示 <strong>HTML</strong> 在頁面上。</em></p>
</blockquote>
<hr>
<h3 id="規劃及準備"><a href="#規劃及準備" class="headerlink" title="規劃及準備"></a>規劃及準備</h3><p>前面了解到基本路由的概念，這時候我們就要開始規劃怎麼更改我們的專案架構，可以想像我們之後會有很多路由，我們可以把路由另外放一個資料夾，然後再透過 <strong>app.js</strong> 引入進來。</p>
<p>先在專案建立資料夾 <strong>routes(放路徑)</strong> 然後在資料夾內在建立 <strong>index.js</strong>。</p>
<p>這時候你的架構會長這樣：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200914/framework_example.png" alt="目前的架構"></p>
<p>接著打開 <code>/routes/index.js</code> 之後把內容改為以下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /routes/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">request, response</span>)&#123;</span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">&#x27;Hello Express!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/detail&#x27;</span>, <span class="keyword">function</span>(<span class="params">request, response</span>)&#123;</span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">&#x27;This is detail page!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure>

<p>然後把 <strong>app.js</strong> 改寫為以下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> indexRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routes/index&#x27;</span>); <span class="comment">// 引入 index 的所有路由</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/&#x27;</span>, indexRouter);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Example Nodejs Express listening on port 3000!&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>這樣我們就把 index 的路由都統一放到 <code>/routes/index.js</code> 去管理了，如果還不太明白，我們再多建立一個 <strong>router</strong>，一樣在 <code>/routes</code> 底下建立一個 <code>user.js</code>，然後內容改為以下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /routes/user.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">request, response</span>)&#123;</span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">&#x27;Hello User!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/user-edit&#x27;</span>, <span class="keyword">function</span>(<span class="params">request, response</span>)&#123;</span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">&#x27;This is user-edit page!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure>

<p>接著一樣在 <strong>app.js</strong> 引入路由：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> indexRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routes/index&#x27;</span>); <span class="comment">// 引入 index 的所有路由</span></span><br><span class="line"><span class="keyword">var</span> userRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routes/user&#x27;</span>); <span class="comment">// 引入 user 的所有路由</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/&#x27;</span>, indexRouter);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/user&#x27;</span>, userRouter);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Example Nodejs Express listening on port 3000!&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>緊接著在終端機輸入 <code>node app.js</code> 啟動網頁，分別輸入網址 <code>http://localhost:3000/</code>、<code>http://localhost:3000/detail</code>、<code>http://localhost:3000/user</code> 及 <code>http://localhost:3000/user/user-edit</code>：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200914/router_info.png" alt="架構概念"></p>
<p>懶人包：建立 <strong>routes</strong> 資料夾，每次要新增一個路由分類時，先到 <strong>routes</strong> 資料夾底下新增，例：<strong>user</strong>、<strong>member</strong> 或 <strong>login</strong> 等等，然後再到 <strong>app.js</strong> 分別引入，例：<code>var indexRouter = require(&#39;./routes/index&#39;);</code> 或 <code>var userRouter = require(&#39;./routes/user&#39;);</code> 然後在使用路由 <code>app.use(&#39;/&#39;, indexRouter);</code> 及 <code>app.use(&#39;/user&#39;, userRouter);</code>。</p>
<hr>
<h3 id="EJS"><a href="#EJS" class="headerlink" title="EJS"></a>EJS</h3><h4 id="快速導覽"><a href="#快速導覽" class="headerlink" title="快速導覽"></a>快速導覽</h4><p>學玩怎麼使用 <strong>router</strong> 之後這邊就要提到，後端寫好一支 <strong>API</strong> 可能是吐回一段文字，可能是直接渲染一個畫面，也可能是一段 <strong>JSON</strong>，前面我們使用的 <code>response.send(&#39;xxx&#39;);</code> 這個意思就是吐一段文字回去給瀏覽器，</p>
<p>這時候你肯定會想我寫了一個 <strong>HTML</strong> 想渲染給使用者看，我不就要寫 <code>response.send(&#39;&lt;h1&gt;我是標題&lt;/h1&gt;&#39;);</code>，其實不用這麼麻煩，這邊要介紹到的 <strong>EJS</strong> 就是方便你渲染及動態帶入參數。</p>
<p>另外 <strong>Template</strong> 的好處應該大家也都知道了，如果我今天有十支檔案都有 <strong>header</strong>，假如 <strong>header</strong> 有個地方要修改，不用十支都修改，只需要修改共用的 <strong>Template</strong> 即可。</p>
<h3 id="快速起手"><a href="#快速起手" class="headerlink" title="快速起手"></a>快速起手</h3><p>在開始動作之前我們先在終端機輸入 <code>npm i ejs-locals -S</code>(註3) 安裝 <code>EJS</code>。</p>
<p>接著在專案資料夾底下新增 <code>/views/index.ejs</code> 及 <code>/views/user.ejs</code> 然後把 <code>app.js</code> 改為下列內容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">// view engine setup</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;views&#x27;</span>));</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> indexRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routes/index&#x27;</span>); <span class="comment">// 引入 index 的所有路由</span></span><br><span class="line"><span class="keyword">var</span> userRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routes/user&#x27;</span>); <span class="comment">// 引入 user 的所有路由</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/&#x27;</span>, indexRouter);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/user&#x27;</span>, userRouter);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Example Nodejs Express listening on port 3000!&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>然後把 <code>/views/index.ejs</code> 的內容改為下列的內容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- /views/index.ejs --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    Hello Express By index.ejs.</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然後再回到 <code>/routes/index.js</code> 改為下列內容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /routes/index.ejs</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">request, response</span>)&#123;</span><br><span class="line">    response.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/detail&#x27;</span>, <span class="keyword">function</span>(<span class="params">request, response</span>)&#123;</span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">&#x27;This is detail page!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure>

<p>在上面我們把原本的 <code>response.send()</code> 改為 <code>response.render(&#39;index&#39;)</code> 意思就是把 <strong>views</strong> 底下的 <strong>index.ejs</strong> 渲染回去給瀏覽器，那為什麼 <strong>nodejs</strong> 會知道我們要選染哪一隻檔案回去呢？因為上面我們使用了下列的程式碼：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">// view engine setup</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;views&#x27;</span>));</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>上面的 <strong>path</strong> 就是 <strong>nodejs</strong> 原始的 <strong>API</strong>，而 <strong>__dirname</strong> 我們在前面的 <strong><a href="https://rexhung0302.github.io/2020/08/06/20200806/">[NodeJS Become A Full Stack Developer] — 從0開始 NodeJS 小試身手</a></strong> 有提到，這邊大概的意思就是當我使用 <code>response.render(&#39;index&#39;)</code> 的時候，會自動幫我抓路徑 <code>response.render(&#39;index&#39;) =&gt; response.render(&#39;目前路徑/views/index&#39;)</code>，最後一行則是把目前的 <strong>view</strong> 引擎設定為 <strong>ejs</strong>。</p>
<p>現在停止終端機的指令，重新輸入 <code>node app.js</code> 打開瀏覽器輸入 <code>http://localhost:3000/</code> 吧，會出現下面的畫面就代表成功了：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200914/ejs_example.png" alt="成功渲染"></p>
<blockquote>
<p>註3：<em>這邊建議安裝 <strong><a href="https://github.com/randometc/ejs-locals">ejs-locals</a></strong> 而非 <strong><a href="https://github.com/mde/ejs">ejs</a></strong> 因為前者多了更多的 <strong>API</strong> 可以使用</em></p>
</blockquote>
<h3 id="帶入參數"><a href="#帶入參數" class="headerlink" title="帶入參數"></a>帶入參數</h3><p>但是通常我們後端在渲染畫面的時候，必定會先去資料庫拿資料，在渲染畫面，而參數帶入的方法也很簡單，只需要在渲染的時候加進去即可，接著再去 <strong>ejs</strong> 顯示出來，找到 <code>/routes/user.js</code> 這隻檔案，並且改寫為下列內容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /routes/user.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">request, response</span>)&#123;</span><br><span class="line">    response.<span class="title function_">render</span>(<span class="string">&#x27;user&#x27;</span>,&#123;</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;大雄&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/user-edit&#x27;</span>, <span class="keyword">function</span>(<span class="params">request, response</span>)&#123;</span><br><span class="line">    <span class="comment">// 假設到資料庫拿到資料了</span></span><br><span class="line">    <span class="keyword">var</span> user_arr = [</span><br><span class="line">        &#123; <span class="attr">username</span>: <span class="string">&#x27;胖虎&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">username</span>: <span class="string">&#x27;小夫&#x27;</span>, <span class="attr">age</span>: <span class="number">22</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">username</span>: <span class="string">&#x27;靜香&#x27;</span>, <span class="attr">age</span>: <span class="number">16</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">username</span>: <span class="string">&#x27;多拉A夢&#x27;</span>, <span class="attr">age</span>: <span class="number">100</span> &#125;,</span><br><span class="line">    ]</span><br><span class="line">    response.<span class="title function_">render</span>(<span class="string">&#x27;user&#x27;</span>,&#123;</span><br><span class="line">        <span class="string">&#x27;user_arr&#x27;</span>: user_arr,</span><br><span class="line">        <span class="string">&#x27;show&#x27;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure>

<p>接著也把 <code>/views/user.ejs</code> 改寫一下吧：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- /views/user.ejs --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    Hello Express By index.ejs.</span><br><span class="line"></span><br><span class="line">    &lt;%= username %&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>聰明的你會立馬發現 <code>&lt;%= username %&gt;</code> 這個新寫法，其實這就是模板的原理，在要替換的地方使用變數，再透過更新資料去觸發畫面更動，這也是 <strong>Vue</strong> 的原理，像六角學院校長說的，並非魔術！</p>
<p>接下來重新啟動終端機輸入 <code>node app.js</code> 一樣打開瀏覽器輸入 <code>http://localhost:3000/user</code> 你會發現神奇的大雄被帶進來了，如下圖：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200914/ejs_user_example.png" alt="user頁面成功渲染"></p>
<h4 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h4><p>另外 <strong>ejs</strong> 可以跟 <strong>pug</strong> 一樣寫 <strong>js</strong> 在上面，所以我們也可以寫判斷，把 <code>/views/user.ejs</code> 改寫為下列內容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- /views/user.ejs --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    Hello Express By index.ejs.</span><br><span class="line"></span><br><span class="line">    &lt;% if(show)&#123; %&gt;</span><br><span class="line">        &lt;% for(var i = 0; i &lt; user_arr.length; i++) &#123; %&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>username： &lt;%= user_arr[i].username %&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>age： &lt;%= user_arr[i].age %&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>接著一樣重新啟動終端西，執行 <code>node app.js</code> 之後打開瀏覽器輸入 <code>http://localhost:3000/user/user-edit</code> 會出現下面的內容：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200914/ejs_user_edit_example.png" alt="user頁面成功渲染"></p>
<p>我們可以在參數使用 <strong>Boolean</strong> 然後在渲染時依靠 <strong>true&#x2F;false</strong> 去決定是否顯示內容，也可以用迴圈的方式把資料給渲染出來，這和我們使用 <strong>JS</strong> 來渲染畫面到 <strong>HTML</strong> 是大同小異的。</p>
<blockquote>
<p><em>關於更多的 <strong>ejs</strong> 用法可以參考 <strong><a href="https://ejs.co/#docs">ejs docs</a></strong></em></p>
</blockquote>
<hr>
<h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><p>這邊附上簡單的 <strong>express-example</strong>，裡面包含簡單的 <strong>routes</strong> 拆分 及 <strong>ejs</strong> 的模板使用。</p>
<p>另外有補上簡單的靜態資源引入，用法很簡單，只需要在 <strong>app.js</strong> 加上一行 <code>app.use(express.static(&#39;public&#39;));</code> 即可，接著在需要引入的地方只需要直接把路由從 <strong>public</strong> 接著打下去即可，因為預設會去找 <strong>public</strong> 這個資料夾，例：<code>&lt;img src=&quot;/images/soGood.jpeg&quot;&gt;</code>。</p>
<p>GitHub: <a href="https://github.com/RexHung0302/express-example">傳送門</a></p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>這篇文章原本想簡短介紹 <strong>EJS</strong>，但因為提到了 Router 不得不在最後把文章標題從 <strong>Express 及 EJS 入門淺談</strong> 改為 <strong>Express、Router 及 EJS 入門淺談</strong>，原本想長話短說，不知不覺又越寫越長，不過到這邊也大致對 nodejs 的環境有些許了解了，之後的篇章將會繼續講解如何使用 <strong>nodejs</strong> 的 <strong>Cookie</strong> 及 <strong>Session</strong>。</p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><p><a href="https://hsiangfeng.github.io/nodejs/20190701/3739361538/">全端勇士之路 Node.js 基礎學習-Express EJS 撰寫篇</a></p>
</li>
<li><p><a href="https://blog.fundebug.com/2019/05/10/express-koa-hapi/">如何选择正确的Node框架：Express，Koa还是Hapi？</a></p>
</li>
<li><p><a href="https://medium.com/@rorast.power.game/%E5%9F%BA%E6%96%BCnodejs%E7%9A%84koa2%E5%9F%BA%E6%9C%AC%E6%95%99%E5%AD%B8-67d1ce0bb59a">基於Nodejs的Koa2基本教學</a></p>
</li>
<li><p><a href="https://rexhung0302.github.io/2020/08/06/20200806/">[NodeJS Become A Full Stack Developer] — 從0開始 NodeJS 小試身手</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Back-end</category>
        <category>NodeJS</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>Back-end</tag>
        <tag>NodeJS</tag>
        <tag>Express</tag>
      </tags>
  </entry>
  <entry>
    <title>[Tool Note] — Google Analytics(GA) 及 Google Tag Manager(GTM) 怎麼用？</title>
    <url>/2020/09/13/20200913/</url>
    <content><![CDATA[<p><img src="/images/others/loading.gif" data-original="/images/20200913/GA_logo.png" alt="GA"></p>
<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>前陣子拖工作專案之福，碰到了 <a href="https://analytics.google.com/analytics/web/#/">Google Analytics(以下簡稱GA)</a>，相信有碰到行銷的人應該或多或少都會聽過這個，本篇將會淺談 <strong>GA</strong> 及 <strong>GTM</strong> 可以做什麼，及如何設定。</p>
<span id="more"></span>

<p>本篇將會使用 <strong>Vue Cli</strong> 來做示範，並且搭配 <a href="https://github.com/mib200/vue-gtm">vue-gtm</a> 使用，如果是普通的 <strong>HTML</strong> 也可以輕易上手，沒毛病！</p>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p><img src="/images/others/loading.gif" data-original="/images/20200913/marketing.png" alt="關於行銷"></p>
<p><strong>GA</strong> 是用於 <strong>行銷、宣傳、分析</strong> 的利器，如果你正需要知道 <strong>GA</strong> 怎麼設定，以及如何查看報表設定等等，可以參考此篇，不過這邊只會淺談，不會過度深入研究。</p>
<p><strong>GTM</strong> 是用來設定 觸發事件、條件、一些相關設定，緊接著會把相關參數傳送給第三方服務，例如 <strong>GA</strong>。</p>
<blockquote>
<p><strong>老樣子本篇文章使用於筆記，有錯誤的地方還請各路大神在下方留言並且給予指教，非常感謝。</strong></p>
</blockquote>
<hr>
<h3 id="關於GA"><a href="#關於GA" class="headerlink" title="關於GA"></a>關於GA</h3><p>如果你在專案上曾經有過，怎麼樣才能使我的東西更有效地推廣，或是有疑慮我的使用者到底都怎麼來，怎麼去？亦或是工作上老闆曾對你說，為什麼我們的網站總是感覺很難推廣開來呢？這時候你可以考慮 <strong>GA</strong> 了！</p>
<p>GA 是數據分析工具，相信掛上 <strong>Google</strong> 你大概也可以想像得到普及程度及資訊獲取容易程度；另外使用 Google 搜尋引擎的人數應該也不需要筆者提供數據了，可能現在大家都離不開 <strong>餵狗(Google)</strong> 了，所以在數據的準確度上也可以放心的使用。</p>
<blockquote>
<p><em>在這邊我們介紹的將會是 <strong>GA</strong> 的免費版本，和付費版本差異在於免費的延誤值在 <strong>3-48小時</strong>，付費版本則確保資訊延誤值在 <strong>4小時</strong> 內，另外需要注意的是如果網站流量超過 <strong>一千萬</strong>，將會被強迫升級至付費版本。</em></p>
</blockquote>
<hr>
<h3 id="GA的好處"><a href="#GA的好處" class="headerlink" title="GA的好處"></a>GA的好處</h3><p>如果你曾經使用過其他的數據分析軟體，可能會想 <strong>GA</strong> 和其他的數據軟體有什麼差異，在 <strong>GA</strong> 上預設是 <strong>30分鐘</strong> 統計一次，所以不會造成數據重複(失真)的情況。</p>
<p>在分析上可以了解：</p>
<ol>
<li><p>使用者怎麼進入網站</p>
</li>
<li><p>流量分析、如何開發使用者、活躍使用者的變化、使用者習慣分析、使用者造訪使用的工具</p>
</li>
</ol>
<hr>
<h3 id="關於GTM"><a href="#關於GTM" class="headerlink" title="關於GTM"></a>關於GTM</h3><p><img src="/images/others/loading.gif" data-original="/images/20200913/GTM_logo.png" alt="GTM"></p>
<p>上面說了 <strong>GA</strong> 這邊也要簡短的介紹一下 <strong>Google Tag Manager(以下簡稱GTM)</strong>，這是一個類似中介站的東西，需要事先在 <strong>GTM</strong> 設定好相關的參數及觸發方法等等，然後再將這些資訊傳送到第三方服務，比方說 <strong>Google AdWords、FB Pixel、Bing</strong> 和 上方提到的 <strong>GA</strong>。</p>
<blockquote>
<p><strong>GTM</strong> 介紹很簡短吧，本篇將會簡短介紹如何設定 <strong>GTM</strong>。</p>
</blockquote>
<hr>
<h3 id="前菜不用了"><a href="#前菜不用了" class="headerlink" title="前菜不用了"></a>前菜不用了</h3><p>前面說了這麼多，這邊要教你如何進入 <strong>GA</strong> 及 <strong>GTM</strong> 的世界才是本篇的重點，本次我們將透過 <strong>Vue Cli</strong> 來實作一個分析專案。</p>
<p>如果你是使用 HTML ，可以再申請 <strong>GTM</strong> 及 <strong>GA</strong> 之後到 <strong>GTM</strong> 的管理後台，點擊右上角的 10個英文數字組合的代碼，在跳出視窗之後按照上面的方法埋入 <strong>GTM</strong> 代碼。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200913/GTM_step1.png" alt="點擊 GTM 右上角的代號"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20200913/GTM_step2.png" alt="按照彈窗的指示"></p>
<p>之後再按照本篇下方的 <strong>GA</strong> <a href="#%E4%BA%8B%E5%89%8D%E6%BA%96%E5%82%99">設定教學</a> 即可。</p>
<hr>
<h3 id="Vue-專案分析之路"><a href="#Vue-專案分析之路" class="headerlink" title="Vue 專案分析之路"></a>Vue 專案分析之路</h3><p>如果還不知道怎麼建立 <strong>Vue</strong> 專案可以參考 <a href="https://rexhung0302.github.io/2019/03/26/20190325/">[Vue Notes] — Vue-Cli #1 初次見面</a>。</p>
<blockquote>
<p><em>由於當初有消息 <strong>Vue3</strong> 即將釋出，所以只寫了一篇就停止了，之後等 <strong>Vue3</strong> 正式釋出會再繼續研究。</em></p>
</blockquote>
<p>安裝好 <strong>Vue-cli</strong> 之後就緊接著安裝我們需要用到的 <a href="https://github.com/mib200/vue-gtm">vue-gtm</a>，輸入 <code>npm i vue-gtm -S</code>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200913/install-gtm.gif" alt="按照彈窗的指示"></p>
<blockquote>
<p>*如果您已經會設定 <strong>GTM</strong>，可以跳至 <strong><a href="#%E9%A0%90%E8%A6%BD%E8%A8%AD%E5%AE%9A">預覽設定</a></strong>。*</p>
</blockquote>
<hr>
<h3 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h3><p>在我們安裝好套件或使用 <strong>HTML</strong> 掛載好 <strong>GTM</strong> 追蹤碼之後，緊接著要來設定 <strong>GTM</strong>，這兩者之間的關係可以透過下圖來解釋。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200913/GTM_GA_Content.png" alt="流程介紹"></p>
<p>我們先到 <strong>GTM</strong> 建立一個帳戶，如下圖：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200913/GTM-apply-step1.png" alt="申請步驟1"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20200913/GTM-apply-step2.png" alt="申請步驟2"></p>
<p>在上面申請的內容，分別為 <strong>帳戶(Account)、容器(Container)</strong>，這兩個可以用下圖來簡單說明：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200913/GTM_info.png" alt="GTM簡單介紹"></p>
<p>一個帳戶底下可以有好幾個容器，而容器通常會對應一個網址，接著在每個容器裡面會放進相關的觸發條件，最後再把觸發的結果相關參數傳送至第三方服務，比如 <strong>GA</strong>。</p>
<hr>
<h3 id="開始設定"><a href="#開始設定" class="headerlink" title="開始設定"></a>開始設定</h3><p>大致了解運作流程後我們就開始設定吧，這邊我們先設定使用者瀏覽的事件，先到 <strong>GTM</strong> 左方的 <strong>觸發條件</strong>，新增一個 <strong>自訂事件</strong>，我們先取名為 <strong>click-event</strong>，並且選擇部分 <strong>自訂事件</strong>，要剛好 <strong>有事件發生且這些條件全都符合時，啟用這個觸發條件</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200913/click_event.png" alt="第一個自訂事件"></p>
<p>接著先到 <strong>GA</strong> 去<a href="https://analytics.google.com/analytics/web/?authuser=0#provision/SignUp/">申請</a>一個分析，填完內容及同意事項後會出現 <strong>追蹤ID</strong> 保存下來！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200913/GA_apply.png" alt="建立新的GA"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20200913/GA_info.png" alt="複製追蹤ID"></p>
<p>然後到 <strong>GTM</strong> 左方的變數新增一個變數，變數類型選擇 <strong>Google Analytics(分析)設定</strong>，然後填上剛剛的追蹤編號，這樣就可以和 <strong>GA</strong> 連結了。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200913/GA_triggerID.png" alt="新增變數"></p>
<p>然後在順便新增一個 <strong>變數類型</strong> 為 <strong>資料層變數</strong> 的 <strong>userID</strong>，這將會是我們在專案觸發條件之後傳送進來的Key，可以先把這邊的變數想像成 <strong>JavaScript</strong> 的 <strong>全域變數</strong>，而這邊就是宣告一個 <code>var userID;</code>。</p>
<p>最後再選擇 <strong>GTM</strong> 左方的 <strong>代碼</strong>，然後新增一個 <strong>Google Analytics(分析)設定：通用 Analytics(分析)</strong>，追蹤類型選擇 <strong>事件</strong>，然後再分別填上 <strong>類別、動作、標籤、值</strong>，剛剛我們設定的變數就在這邊起作用了，我們可以直接帶入變數的 <strong>Key</strong>，點擊像 <strong>積木的Icon</strong> 後如下圖：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200913/GA_variable.png" alt="帶入變數"></p>
<p>關於上面提到的 <strong>類別、動作、標籤、值</strong> 將會是在埋入 <strong>GTM</strong> 的地方會傳送過來的幾個值，如果想要傳送更多的變數，比如 <strong>userID</strong> 或是 <strong>url</strong> 等等，可能光靠上面幾個欄位放不下，這時候就可以勾選 <strong>在這個代碼啟用覆寫設定</strong>，然後填入剛剛拿到的 <strong>追蹤編號</strong>，之後打開下面的 <strong>更多設定</strong>，然後在打開 <strong>要設定的欄位</strong>，然後填入更多的變數。</p>
<hr>
<h3 id="預覽設定"><a href="#預覽設定" class="headerlink" title="預覽設定"></a>預覽設定</h3><p>到這時候其實可以先去看看我們的 <strong>GTM</strong> 有無掛載成功，如果你是使用普通的 <strong>HTMl</strong> 再貼上剛剛一開始提示的彈窗那些程式碼，應該就可以先預覽了，如果是 <strong>Vue-cli</strong> 可以接著使用下面的步驟。</p>
<p>在安裝完 <a href="https://github.com/mib200/vue-gtm">vue-gtm</a> 之後，按照 <strong>Document</strong> 的教學把套件掛進去專案裡。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200913/GTM_install_on_vue.png" alt="掛載GTM"></p>
<p>上面的步驟就像是在申請完 <strong>GTM</strong> 或是點擊 <strong>GTM</strong> 右上角的十個英文數字編號出現的彈窗，埋入代碼之後一樣的動作。</p>
<p>在做好的埋 <strong>Code</strong> 或是設定 <strong>vue-gtm</strong> 之後點擊 <strong>GTM</strong> 上方的預覽，再到你埋程式碼的網站，就會看見下方彈出 <strong>GTM</strong> 的預覽 <strong>Debug</strong> 視窗，就代表成功啦。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200913/GTM_debug_preview.png" alt="GTM的開發者工具"></p>
<hr>
<h3 id="觸發設定"><a href="#觸發設定" class="headerlink" title="觸發設定"></a>觸發設定</h3><p>確定我們有掛載成功之後，別急著把剛剛設定的那些 <strong>GTM</strong> 提交出去，我們一樣可以先透過預覽查看是否有把事件正確的傳送到 <strong>GTM</strong>。</p>
<p>先到程式碼那邊，埋下我們的事件，因為我們前面選擇自訂事件，所這邊在我們想觸發的地方埋下我們的事件。筆者這邊放了一個按鈕，在使用者點擊之後會發送事件到 <strong>GTM</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button-primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;sendGTMHandler()&quot;</span>&gt;</span>Send GTM Event<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">userID</span>: <span class="string">&#x27;ABC-123456&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">sendGTMHandler</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> vm = <span class="variable language_">this</span>;</span><br><span class="line">      vm.<span class="property">$gtm</span>.<span class="title function_">trackEvent</span>(&#123;</span><br><span class="line">        <span class="attr">event</span>: <span class="string">&#x27;click-event&#x27;</span>,</span><br><span class="line">        <span class="attr">category</span>: <span class="string">&#x27;點擊事件&#x27;</span>, <span class="comment">// 類別 字元(必填)</span></span><br><span class="line">        <span class="attr">action</span>: <span class="string">&#x27;click&#x27;</span>, <span class="comment">// 動作 字元(必填)</span></span><br><span class="line">        <span class="attr">label</span>: vm.<span class="property">userID</span>, <span class="comment">// 標籤 字元(選填)</span></span><br><span class="line">        <span class="attr">value</span>: <span class="literal">null</span>, <span class="comment">// 標籤 數字(選填)</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>透過套件的使用方法發送為上方的方法，如果你是使用前面提到的彈窗的內容埋進程式碼裡面，可以使用下面的方法，詳細可參考 <a href="https://developers.google.com/analytics/devguides/collection/analyticsjs/events?hl=zh-cn">Google Analytics Document</a>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//當使用者觸發 會發送 類別:導覽清單 ,動作:點擊 ,標籤:註冊會員 , 價值:200</span></span><br><span class="line"><span class="title function_">ga</span>(<span class="string">&#x27;send&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">hitType</span>: <span class="string">&#x27;click-event&#x27;</span>,</span><br><span class="line">  <span class="attr">eventCategory</span>: <span class="string">&#x27;點擊事件&#x27;</span>, <span class="comment">// 類別 字元(必填)</span></span><br><span class="line">  <span class="attr">eventAction</span>: <span class="string">&#x27;click&#x27;</span>, <span class="comment">// 動作 字元(必填)</span></span><br><span class="line">  <span class="attr">eventLabel</span>: vm.<span class="property">userID</span> <span class="comment">// 標籤 字元(選填)</span></span><br><span class="line">  <span class="attr">eventValue</span>: <span class="literal">null</span> <span class="comment">// 標籤 數字(選填)</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 簡化寫法</span></span><br><span class="line"><span class="title function_">ga</span>(<span class="string">&#x27;send&#x27;</span>, <span class="string">&#x27;click-event&#x27;</span>, <span class="string">&#x27;點擊事件&#x27;</span>, <span class="string">&#x27;click&#x27;</span>, vm.<span class="property">userID</span>);</span><br></pre></td></tr></table></figure>

<p>之後去點擊看看你的按鈕吧，會發現 Debug 視窗出現一個新的事件，如果打開後你的事件出現在 <strong>Tags Fired</strong> 代表是成功的，如果是出現在 <strong>Tags Not Fired</strong> 代表是失敗的，點擊 <strong>Tags Fired</strong> 成功的事件進入後也會發現事件名稱旁邊會出現一個成功的小勾勾。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200913/GTM_debug_event_send.png" alt="GTM的開發者工具"></p>
<hr>
<h3 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h3><p>最後我們來到 <strong>GA</strong>，因為剛剛有綁定 <strong>資料層 Data Layer</strong>，因為有填寫追蹤編號，所以在 <strong>GA</strong> 這邊會出現現在有什麼事件，以及有幾個人在線上等等，相關的數據統計都可以在這邊找到。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20200913/GA_event_success.png" alt="成功追蹤事件了"></p>
<blockquote>
<p><em>請別介意畫面有一邊黑色的，因為電腦截圖出現 <strong>Bug</strong> 所以卡住了。</em></p>
</blockquote>
<hr>
<h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><p>這邊也會放上範例，但是使用者還是必須自己去申請 <strong>GTM</strong> 及 <strong>GA</strong> 了，但可以直接把專案的 <code>main.js</code> <strong>vue-gtm id</strong> 改為自己的。</p>
<p>GitHub: <a href="https://github.com/RexHung0302/GA-GTM-example">傳送門</a></p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>其實 <strong>GTM</strong> 及 <strong>GA</strong> 還有很多可以設定，這邊先大致介紹一下如何入門使用，更多的可以再慢慢摸索，拖工作的福，這次摸了好久也有一些概念了，希望能幫到其他人，也順便筆記一下，之後自己忘記還能回來爬文。</p>
<blockquote>
<p><em>如果你對 <strong>GTM</strong> 及 <strong>GA</strong> 有興趣也歡迎下面留言一起交流。</em></p>
</blockquote>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><p><a href="https://inboundmarketing.com.tw/websites-optimization/gtm%E6%95%99%E5%AD%B8-%E6%96%B0%E6%89%8B%E8%A7%80%E5%BF%B5%E7%AF%87.html">GTM教學-新手觀念篇，追蹤網站數據你只需Google Tag Manager代碼</a></p>
</li>
<li><p><a href="https://iandays.com/2018/04/25/gaevents/">Google analytics 事件追蹤、轉換目標設定教學 ga event</a></p>
</li>
<li><p><a href="https://shian.tw/article/55">GA 帳號申請、GA設定、GA驗證，3個步驟一次說明</a></p>
</li>
<li><p><a href="https://ga.awoo.com.tw/data-layer/">資料層 Data Layer, 存放各種訪客、網頁行為數據的地方</a></p>
</li>
<li><p><a href="https://github.com/mib200/vue-gtm">vue-gtm</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>Google</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
        <tag>Google</tag>
        <tag>Google Analytics</tag>
        <tag>GA</tag>
        <tag>Google Tag Manager</tag>
        <tag>GTM</tag>
      </tags>
  </entry>
  <entry>
    <title>[NodeJS Become A Full Stack Developer] — NodeJS ORM Sequelize Cli 串接資料庫</title>
    <url>/2020/11/09/20201109/</url>
    <content><![CDATA[<p><img src="/images/others/loading.gif" data-original="/images/20201109/MySQL_logo.png" alt="MySQL"></p>
<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>好久不見，在開始後端之路之後進度雖然緩慢，但發現一路上的確挺有趣的，經歷過了 <a href="https://rexhung0302.github.io/2020/08/06/20200806/">[NodeJS Become A Full Stack Developer] — 從0開始 NodeJS 小試身手</a> 透過 <strong>NodeJS</strong> 重頭開始認識後端，一直到 <a href="https://rexhung0302.github.io/2020/10/13/20201013/">[NodeJS Become A Full Stack Developer] — 菜雞必經之路 👉 實作一個 Todo List</a> 我們透過了三篇文章介紹如何轉職為全端勇者。</p>
<p>在今天這篇文章將來探討如何串接 <strong>MySQL(資料庫)</strong>，而非上次透過 <strong>Firebase</strong> 快速串接，這次將會是有趣的一篇文章(<del>才怪</del>)！</p>
<span id="more"></span>

<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p><img src="/images/others/loading.gif" data-original="/images/20201109/nodeToMysql.png" alt="Connect"></p>
<p>在前一章筆者實作了陽春版本的 <a href="https://express-todos-list.herokuapp.com/users/login">TODO List</a>，提到後端就不得不提資料庫，而在 <a href="https://express-todos-list.herokuapp.com/users/login">TODO List</a> 之中我們使用的是 <strong>Google Firebase</strong> 的資料庫，雖然都是資料庫但是和我們要使用的 <strong>MySQL</strong> 是不相同的。</p>
<p>本篇文章會談到幾個點：</p>
<ol>
<li><p>資料庫差異</p>
</li>
<li><p>何謂 ORM</p>
</li>
<li><p>如何串接資料庫</p>
</li>
<li><p>快速上手 Sequelize</p>
</li>
<li><p>完成人生第一個後端資料</p>
</li>
</ol>
<hr>
<h3 id="資料庫差異"><a href="#資料庫差異" class="headerlink" title="資料庫差異"></a>資料庫差異</h3><p><strong>『<a href="https://tw.alphacamp.co/blog/sql-nosql-database-dbms-introduction">SQL(Structured Query Language 結構化查詢語言) 是一種專門用來管理與查詢關聯式資料庫(Relational database)的程式語言</a>』</strong> 在某些網站都能看見對關於 <strong>SQL</strong> 的介紹文，這邊講太多太細的東西大家肯定也記不住，既然我們是幼幼班上手，就從好記得來。</p>
<h4 id="關聯式資料庫（Relational-database）"><a href="#關聯式資料庫（Relational-database）" class="headerlink" title="關聯式資料庫（Relational database）"></a>關聯式資料庫（Relational database）</h4><p>首先來說說 <strong>關聯式資料庫</strong> 的幾個特點：</p>
<ol>
<li><p>資料是一個或多個資料表方式存放</p>
</li>
<li><p>資料之間有關聯性</p>
</li>
<li><p>以 SQL 語言操作</p>
</li>
</ol>
<p><img src="/images/others/loading.gif" data-original="/images/20201109/relational_db.png" alt="關連式資料庫"></p>
<p>關連式資料庫會把每一個表格集合起來，而每一個表格裡面都是一筆一筆的資料，不同資料表可能會互相關聯著，比如 <strong>會員小明(Table -&gt; Users)訂購了(Table -&gt; Orders)一支Iphone 12 pro max(Table -&gt; Goods)</strong>，這之間的表格都互有關連，在前端發送出請求一直到後端時，後端可以透過 <strong>SQL(註1)</strong> 語法去將資料庫裡的資料進行收集、排序，亦或是新增刪除。</p>
<p><em>註1: SQL語法拿來在操作關聯式資料庫時使用，例如 <code>SELECT * FROM Users Where age=1</code>(將表格 Users 裡面，符合條件 age &#x3D; 1 的資料取出)</em></p>
<h4 id="非關聯式資料庫-NoSQL"><a href="#非關聯式資料庫-NoSQL" class="headerlink" title="非關聯式資料庫(NoSQL)"></a>非關聯式資料庫(NoSQL)</h4><p>照字面上的意思應該就能懂八十七層；因為現今網路應用程式流量越來越大幅成長，對於關聯式資料庫在存取大量資料時，會比較慢，你能想像在使用 <strong>Youtube</strong> 及 <strong>Facebook</strong> 時，跑個資料就跑好幾分鐘的感覺嗎？我想應該連幾秒都不太想等待吧！</p>
<p>而在需要快速取得資料的情況下人們開始做取捨，不需要即時同步且精準無誤的取得某些特定資料，所以 <strong>NoSQL</strong> 就這樣熱門了起來。</p>
<p><strong>NoSQL</strong> 的全名為 <strong>Not Only SQL</strong>，在 <strong>NoSQL</strong> 上並不支持 <strong>SQL</strong> 語法，且更關注於資料的變動，舉例來說 <strong>Youtube</strong> 的瀏覽數及訂閱數量在某些百萬級 <strong>Youtube</strong> 會是數萬甚至數十萬筆，這時候點開我們並不需要先去確認誰先訂閱，或是誰比較晚訂閱，只需要注重最後的結果，最後統計是多少的訂閱數量，這就是適合使用 <strong>NoSQL</strong> 達到的，相反的如果需要在乎於邏輯上，比如說電商網站，先刷卡、確定扣款後、商品才能寄出，這時候適合什麼應該很清楚了吧！</p>
<p>最後 <strong>NoSQL</strong> 有一個最特別的點，所有資料都會被用 <strong>JSON</strong> 方式存放起來，每一筆資料都是 <strong>Key:Value(name: ‘王小明’)</strong> 的方式，而這些資料則會被存放在 <strong>Documents</strong>，最後一堆一堆的 <strong>Documents</strong> 則會被放在 <strong>Collections</strong> 裡。</p>
<hr>
<h3 id="何謂-ORM"><a href="#何謂-ORM" class="headerlink" title="何謂 ORM"></a>何謂 ORM</h3><p>在開始講如何串接資料庫前這邊必須在提到 <strong>ORM</strong>，簡單來說在上方我們有提到 <strong>SQL</strong> 語法，而你會想這樣我不就要再多學一個語言嗎！</p>
<p>別擔心已經有人幫你想好了，俗話說的好，學會一個語言再去學另一個語言會很快，那如果我們學好一個語言再用這個語言的邏輯去學另一個語言，是不是又再縮短一半的時間了呢？</p>
<p>舉個例子來說，我們已經會 <strong>Javascript</strong> 了，我們在使用 <strong>Javascript</strong> 去學習 <strong>NodeJS</strong>，而我們認識了 <strong>NodeJS</strong> 了，再透過 <strong>Javascript</strong> 去學習 <strong>SQL</strong>，有沒有一種健達出奇蛋的感覺呢？買了一顆健達出奇蛋(<strong>Javascript</strong>)，滿足你三種願望(<strong>Vue、NodeJS、SQL</strong>)！</p>
<blockquote>
<p>我知道比喻很爛別揍我</p>
</blockquote>
<p>而 <strong>ORM</strong> 就是有開發者透過程式語言的物件去包裝 <strong>SQL</strong>，讓你可以透過你熟悉的程式語言(<strong>Javascript、PHP</strong>)去簡單呼叫層層包裝過的方法；只是有一點要特別注意，上方提到的 <strong>關聯式資料庫</strong> 及 <strong>非關聯式資料庫</strong>，前者透過 <strong>ORM</strong> 技術，後者透過 <strong>ODM</strong>。</p>
<p><em>例如： <code>UsersDB.findAll()</code> -&gt; <code>SELECT * FROM USERS;</code></em></p>
<hr>
<h3 id="如何串接資料庫"><a href="#如何串接資料庫" class="headerlink" title="如何串接資料庫"></a>如何串接資料庫</h3><p>終於到我們的重點了，這邊會先示範如何串接資料庫不透過 <strong>ORM</strong>，首先輸入下列內容到後端專案裡。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm i mysql2 -S</span><br></pre></td></tr></table></figure>

<p>接著在後端入口(app.js)，引用資料庫並且連接資料庫。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mysql      = <span class="built_in">require</span>(<span class="string">&#x27;mysql2&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> connection = mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">  host     : <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  user     : <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  password : <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">  database : <span class="string">&#x27;users&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">connection.<span class="title function_">connect</span>();</span><br><span class="line"> </span><br><span class="line">connection.<span class="title function_">query</span>(<span class="string">&#x27;SELECT * FROM users&#x27;</span>, <span class="keyword">function</span> (<span class="params">error, results, fields</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;The Users is: &#x27;</span>, results);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>完工！雖然這樣就能簡單的連上了，但東西都塞在入口檔案，和我們想要的 <strong>MVC</strong> 環境架構還有 <strong>87%</strong> 遠，而你也不會想要每次建立後端專案就手幹一次吧，所以接著們要提到本日重頭戲了。</p>
<hr>
<h3 id="快速上手-Sequelize"><a href="#快速上手-Sequelize" class="headerlink" title="快速上手 Sequelize"></a>快速上手 Sequelize</h3><h4 id="起手式"><a href="#起手式" class="headerlink" title="起手式"></a>起手式</h4><p><strong>Sequelize</strong> 就是剛剛上方提到的 <strong>ORM</strong>，而他也具備了幫我們初始化環境的功能，我們按照步驟來吧。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm i sequelize sequelize-cli mysql2 -S // 安裝相關套件</span><br><span class="line"></span><br><span class="line">$ npm i sequelize-cli -g // 全域安裝 ORM Cli</span><br></pre></td></tr></table></figure>

<p>雖然 <strong>sequelize</strong> 作為類似套件方式使用，安裝在專案裡面，但跟 <strong>Gulp</strong> 及 <strong>Vue-cli</strong> 一樣，我們可以透過 <strong>cli</strong> 來使用某些特定的功能；緊接著輸入下面的內容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sequelize init</span><br></pre></td></tr></table></figure>

<p>這時候你會看見專案裡面多個幾個資料夾，分別為</p>
<ul>
<li><p>config</p>
</li>
<li><p>models</p>
</li>
<li><p>migrations</p>
</li>
<li><p>seeders</p>
</li>
</ul>
<p>這時候這個套件已經幫我們把 <strong>MVC</strong> 分別分類出來了。</p>
<h4 id="環境介紹"><a href="#環境介紹" class="headerlink" title="環境介紹"></a>環境介紹</h4><p>筆者個人認為這個框架對新手算是友善的，因為你可以透過這個框架認識 <strong>MVC</strong> 架構如何分，也可以再透過這個框架去操作資料庫。</p>
<p>讓我們先看到 <strong>config</strong> 資料夾裡面的 <strong>config.json</strong>。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;development&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;root&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;database&quot;</span><span class="punctuation">:</span> <span class="string">&quot;database_development&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dialect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mysql&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;operatorsAliases&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;root&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;database&quot;</span><span class="punctuation">:</span> <span class="string">&quot;database_test&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dialect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mysql&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;operatorsAliases&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;production&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;root&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;database&quot;</span><span class="punctuation">:</span> <span class="string">&quot;database_production&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dialect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mysql&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;operatorsAliases&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>這邊便是我們要讓 Sequelize 知道在什麼情況下該與什麼資料庫連接，由最上開始分別為 <strong>開發、測試</strong> 及 <strong>正式</strong>，而我們目前只會先用到開發，所以我們先把最上面的 <strong>development</strong> 做點更動。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;development&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;root&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;database&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dialect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mysql&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;operatorsAliases&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// ...下略</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>然後我們再看到 <strong>model</strong> 資料夾下的 <strong>index.js</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Sequelize</span> = <span class="built_in">require</span>(<span class="string">&#x27;sequelize&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> basename = path.<span class="title function_">basename</span>(__filename);</span><br><span class="line"><span class="keyword">const</span> env = process.<span class="property">env</span>.<span class="property">NODE_ENV</span> || <span class="string">&#x27;development&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(__dirname + <span class="string">&#x27;/../config/config.json&#x27;</span>)[env];</span><br><span class="line"><span class="keyword">const</span> db = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sequelize;</span><br><span class="line"><span class="keyword">if</span> (config.<span class="property">use_env_variable</span>) &#123;</span><br><span class="line">  sequelize = <span class="keyword">new</span> <span class="title class_">Sequelize</span>(process.<span class="property">env</span>[config.<span class="property">use_env_variable</span>], config);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  sequelize = <span class="keyword">new</span> <span class="title class_">Sequelize</span>(config.<span class="property">database</span>, config.<span class="property">username</span>, config.<span class="property">password</span>, config);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fs</span><br><span class="line">  .<span class="title function_">readdirSync</span>(__dirname)</span><br><span class="line">  .<span class="title function_">filter</span>(<span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (file.<span class="title function_">indexOf</span>(<span class="string">&#x27;.&#x27;</span>) !== <span class="number">0</span>) &amp;&amp; (file !== basename) &amp;&amp; (file.<span class="title function_">slice</span>(-<span class="number">3</span>) === <span class="string">&#x27;.js&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">forEach</span>(<span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> model = sequelize[<span class="string">&#x27;import&#x27;</span>](path.<span class="title function_">join</span>(__dirname, file));</span><br><span class="line">    db[model.<span class="property">name</span>] = model;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(db).<span class="title function_">forEach</span>(<span class="function"><span class="params">modelName</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (db[modelName].<span class="property">associate</span>) &#123;</span><br><span class="line">    db[modelName].<span class="title function_">associate</span>(db);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">db.<span class="property">sequelize</span> = sequelize;</span><br><span class="line">db.<span class="property">Sequelize</span> = <span class="title class_">Sequelize</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = db;</span><br></pre></td></tr></table></figure>

<p>這邊大致上可以看過，如果有興趣可以在深入研究，基本上這邊就是在利用同目錄底下的其他 <strong>.js</strong> 檔案的 <strong>model.name</strong> 當作索引，接著放到 <strong>db</strong> 物件裡，執行時 <strong>model</strong> 的 <strong>define</strong> 將資料表與 <strong>js</strong> 對應上。</p>
<p>在簡單的說就是之後我們建立在 <strong>model</strong> 資料架內的任何 <strong>.js</strong> 檔案，都會建立好關聯，在需要呼叫 <strong>DB</strong> 的時候只需要使用 <code>const Users = require(&#39;./model&#39;).Users;</code> 或 <code>const Goods = require(&#39;./model&#39;).Goods;</code> 這樣就能呼叫了。</p>
<h4 id="小整理"><a href="#小整理" class="headerlink" title="小整理"></a>小整理</h4><p>介紹完前面兩個資料夾後，我們先整理一下：</p>
<ul>
<li><p>config - 設定什麼環境應該連接什麼資料庫的地方</p>
</li>
<li><p>models - 存放各個 DB 表格的地方，需要使用到可以直接透過 <code>const Users = require(&#39;./model&#39;).Users;</code> 方式呼叫</p>
</li>
</ul>
<h4 id="migrations"><a href="#migrations" class="headerlink" title="migrations"></a>migrations</h4><p>講到這個可能剛接觸後端是第一次看見，但如果有與後端合作過，可能會聽見後端請你跑類似 <code>php artisan migration</code> 的東西，你就會發現資料庫內的表格都神奇地被建立好了。</p>
<p>這邊我們需要先使用下面語法去產生我們的 <strong>DB</strong> 然後把要新增上資料庫的表格，先一併存放在 <strong>model</strong> 資料夾裡。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sequelize model:generate --name users --attributes mobile:string,email:string,birthday:time,sex:tinyint</span><br></pre></td></tr></table></figure>

<p>上方 <strong>–name</strong> 後方為表的名稱，而最後面的就是要建立的 <strong>key</strong> 及 <strong>value</strong> 的種類。</p>
<p>這樣就會在 <strong>model</strong> 資料夾內建立我們的第一個表，仔細看看 <code>models/users.js</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="title class_">Model</span></span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">&#x27;sequelize&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">sequelize, DataTypes</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">users</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Model</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Helper method for defining associations.</span></span><br><span class="line"><span class="comment">     * This method is not a part of Sequelize lifecycle.</span></span><br><span class="line"><span class="comment">     * The `models/index` file will call this method automatically.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">associate</span>(<span class="params">models</span>) &#123;</span><br><span class="line">      <span class="comment">// define association here</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  users.<span class="title function_">init</span>(&#123;</span><br><span class="line">    <span class="attr">mobile</span>: <span class="title class_">DataTypes</span>.<span class="property">STRING</span>,</span><br><span class="line">    <span class="attr">email</span>: <span class="title class_">DataTypes</span>.<span class="property">STRING</span>,</span><br><span class="line">    <span class="attr">birthday</span>: <span class="title class_">DataTypes</span>.<span class="property">TIME</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="title class_">DataTypes</span>.<span class="property">TINYINT</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    sequelize,</span><br><span class="line">    <span class="attr">modelName</span>: <span class="string">&#x27;users&#x27;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> users;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>然後 <strong>migration</strong> 資料夾也新增了一個檔案 <strong>2020XXXXXXXXXX-default-users</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UUIDV4</span> = <span class="built_in">require</span>(<span class="string">&#x27;uuid/v4&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">up</span>: <span class="title function_">async</span> (queryInterface, <span class="title class_">Sequelize</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> queryInterface.<span class="title function_">createTable</span>(<span class="string">&#x27;users&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">id</span>: &#123;</span><br><span class="line">        <span class="attr">allowNull</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">primaryKey</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">Sequelize</span>.<span class="property">UUID</span>,</span><br><span class="line">        <span class="attr">defaultValue</span>: <span class="title class_">UUIDV4</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">mobile</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">Sequelize</span>.<span class="property">STRING</span>,</span><br><span class="line">        <span class="attr">comment</span>: <span class="string">&#x27;手機號碼&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">email</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">Sequelize</span>.<span class="property">STRING</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">birthday</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">Sequelize</span>.<span class="property">DATE</span>,</span><br><span class="line">        <span class="attr">comment</span>: <span class="string">&#x27;生日&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">sex</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">Sequelize</span>.<span class="property">ENUM</span>,</span><br><span class="line">        <span class="attr">values</span>: [</span><br><span class="line">          <span class="string">&#x27;boy&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;girl&#x27;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">comment</span>: <span class="string">&#x27;性別為男=boy, 女=girl&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">createdAt</span>: &#123;</span><br><span class="line">        <span class="attr">allowNull</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">Sequelize</span>.<span class="property">DATE</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">updatedAt</span>: &#123;</span><br><span class="line">        <span class="attr">allowNull</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">Sequelize</span>.<span class="property">DATE</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">down</span>: <span class="title function_">async</span> (queryInterface, <span class="title class_">Sequelize</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> queryInterface.<span class="title function_">dropTable</span>(<span class="string">&#x27;users&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>先解釋為什麼會引入 <code>uuid/v4</code>，一般的主鍵都是 <strong>+1+1</strong> 往上疊加上去，而這邊我想要給使用者一串亂數，例如 <code>22a59k20-dff5-9285-1023-0u3a99ca6773</code>，好處是不容易被破解，但因為想塞入這種亂碼就必須藉助套件去產生亂碼，所以想使用這個記得要另外安裝 <strong><a href="https://github.com/uuidjs/uuid#readme">uuid</a></strong>，之後 <strong>users</strong> 的主鍵就能獲得獨一無二的亂碼。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm i uuid -S</span><br></pre></td></tr></table></figure>

<p>上方的 <strong>type</strong> 即為種類，像是單純 <strong>字串</strong> 、 <strong>Radio</strong> 或 <strong>日期</strong>，其中裡面還能設定 <strong>備註</strong> 等等，可以上 <a href="https://sequelize.org/master/identifiers.html">Sequelize</a> 的官網查看更詳細的種類。</p>
<p>介紹完之後就輸入 <code>sequelize db:migrate</code> 然後進入資料庫看看是不是有新增成功。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201109/table_after_migrate.png" alt="新增成功"></p>
<p>我們會發現多了一個 <strong>SequelizeMeta</strong> 及 <strong>users</strong>，前者就是用來紀錄你跑過多少個 <strong>migrate</strong> 的紀錄，後者為你剛剛上方設定的 <strong>Table</strong> 內容。</p>
<blockquote>
<p><em>如果新增錯誤，想要重新來過，可以在輸入 <code>sequelize db:migrate:undo</code></em> 就會跑回去上一個步驟了，執行的內容為 <code>migrations/2020XXXXXXXXXX-create-users.js</code> 內的 <code>function down()</code>。</p>
</blockquote>
<h4 id="seeders"><a href="#seeders" class="headerlink" title="seeders"></a>seeders</h4><p>說完建立 <strong>Table</strong> 當然就是要塞入預設假資料啦，不然每次開發你都要先手動填寫資料或是等到前端自己帶入資料才發現出問題就麻煩了。</p>
<p>而 <strong>seeders</strong> 的檔案也可以依靠指令產出來：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sequelize seed:generate --name default-users</span><br></pre></td></tr></table></figure>

<p>執行結束後會發現 <strong>seeders</strong> 的資料夾下多了一個檔案，就是剛剛上方指令命名的 <strong>2020XXXXXXXXXX-default-users.js</strong>，接著裡面就必須自己輸入了，但套件很貼心的還是有範例在上方：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">v4</span>: uuidv4 &#125; = <span class="built_in">require</span>(<span class="string">&#x27;uuid&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">up</span>: <span class="title function_">async</span> (queryInterface, <span class="title class_">Sequelize</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Add seed commands here.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Example:</span></span><br><span class="line"><span class="comment">     * await queryInterface.bulkInsert(&#x27;People&#x27;, [&#123;</span></span><br><span class="line"><span class="comment">     *   name: &#x27;John Doe&#x27;,</span></span><br><span class="line"><span class="comment">     *   isBetaMember: false</span></span><br><span class="line"><span class="comment">     * &#125;], &#123;&#125;);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">await</span> queryInterface.<span class="title function_">bulkInsert</span>(<span class="string">&#x27;users&#x27;</span>, [&#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="title function_">uuidv4</span>(),</span><br><span class="line">      <span class="attr">mobile</span>: <span class="string">&#x27;0900000000&#x27;</span>,</span><br><span class="line">      <span class="attr">email</span>: <span class="string">&#x27;test@admin.com&#x27;</span>,</span><br><span class="line">      <span class="attr">birthday</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;1995-08-08 08:08:08&#x27;</span>),</span><br><span class="line">      <span class="attr">sex</span>: <span class="string">&#x27;boy&#x27;</span>,</span><br><span class="line">      <span class="attr">createdAt</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">      <span class="attr">updatedAt</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="title function_">uuidv4</span>(),</span><br><span class="line">      <span class="attr">mobile</span>: <span class="string">&#x27;0911111111&#x27;</span>,</span><br><span class="line">      <span class="attr">email</span>: <span class="string">&#x27;test2@admin.com&#x27;</span>,</span><br><span class="line">      <span class="attr">birthday</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;1904-05-20 12:49:00&#x27;</span>),</span><br><span class="line">      <span class="attr">sex</span>: <span class="string">&#x27;girl&#x27;</span>,</span><br><span class="line">      <span class="attr">createdAt</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">      <span class="attr">updatedAt</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">    &#125;], &#123;&#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">down</span>: <span class="title function_">async</span> (queryInterface, <span class="title class_">Sequelize</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Add commands to revert seed here.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Example:</span></span><br><span class="line"><span class="comment">     * await queryInterface.bulkDelete(&#x27;People&#x27;, null, &#123;&#125;);</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">await</span> queryInterface.<span class="title function_">bulkDelete</span>(<span class="string">&#x27;users&#x27;</span>, <span class="literal">null</span>, &#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>和 <strong>migrate</strong> 一樣，我們必須透過指令來啟動它，輸入 <code>sequelize db:seed:all</code> 或是 <code>sequelize db:seed:users</code> 來指令要跑的種子即可塞入假資料，如果不想要預設資料了想清掉，就跑 <code>sequelize db:seed:undo:all</code> 就可以清掉所有的預設資料，或是指定目標清除預設資料 <code>sequelize db:seed:undo:users</code>。</p>
<h4 id="再度小整理"><a href="#再度小整理" class="headerlink" title="再度小整理"></a>再度小整理</h4><ul>
<li><p>config - 設定什麼環境應該連接什麼資料庫的地方</p>
</li>
<li><p>models - 存放各個 DB 表格的地方，需要使用到可以直接透過 <code>const Users = require(&#39;./model&#39;).Users;</code> 方式呼叫</p>
</li>
<li><p>migrations - 存放要初始化 Table 的資料夾</p>
</li>
<li><p>seeders - 存放對應 Table 的預設資料</p>
</li>
</ul>
<hr>
<h3 id="完成人生第一個後端資料"><a href="#完成人生第一個後端資料" class="headerlink" title="完成人生第一個後端資料"></a>完成人生第一個後端資料</h3><p>都完成後這時候可以到後端 <strong>routers</strong> 裡面，使用上方說的方式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">UsersDB</span> = <span class="built_in">require</span>(<span class="string">&#x27;../models&#x27;</span>).<span class="property">users</span>;</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  (<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> users = <span class="keyword">await</span> <span class="title class_">UsersDB</span>.<span class="title function_">findAll</span>();</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">json</span>(&#123;</span><br><span class="line">      <span class="attr">status</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">      users</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>執行結果為下，大功告成！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Executing (default): SELECT `id`, `mobile`, `email`, `birthday`, `sex`, `createdAt`, `updatedAt` FROM `users` AS `users`;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>這次是筆者第一次從 0 開始連接資料庫，然後寫上 <strong>migrate</strong> 及 <strong>seeders</strong>，不得不說真的是滿滿成就感，不過需要學習的地方還是好多，雖然上面提到使用 <strong>ORM</strong> 等於是用自己熟悉的語言再去學習另一個語言，且被包裝過比起原生的 <strong>SQL</strong> 語法方便許多，但其實不論如何，碰到新的語言都還是要重新適應，畢竟這都是人家包裝過的東西，你就必須跟著作者的思路走，跟著作者的方法走。</p>
<p>最近對於程式的怠惰感及厭倦感又有點上升了，但絕非討厭程式，我想就跟運動一樣吧，剛開始滿懷熱血，但是持續了一陣子之後就會開始疲勞，這時候無非就是要自己尋找出自己的興趣，讓這件事情不再是單調枯燥乏味，希望在幾個月之後回頭看自己，能再有所成長。</p>
<p>剩下幾個月 <strong>2020</strong> 就要結束了，雖然今年很鳥，很多遺憾的實情發生了，但既然還活在當下就要好好把握，趁這段時間好好衝刺充實自己，期許正在看文章的人或是幾個月後的自己，都還是能對程式滿懷動力，並且讓自己越來越好。</p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><p><a href="https://medium.com/@mengchiang000/nodejs-orm-tool-sequelize-2-cli%E7%AF%87-4d6c0789230e">Nodejs ORM tool: Sequelize(2) CLI篇</a></p>
</li>
<li><p><a href="https://dotblogs.com.tw/explooosion/2016/07/18/010601">Node.js - Express + MySQL</a></p>
</li>
<li><p><a href="https://tw.alphacamp.co/blog/mysql-and-mongodb-comparison">該用 MySQL 或 MongoDB？選擇資料庫前你該了解的事</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Back-end</category>
        <category>NodeJS</category>
        <category>MySQL</category>
        <category>ORM</category>
        <category>Sequelize</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>Back-end</tag>
        <tag>NodeJS</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>[NodeJS Become A Full Stack Developer] — 菜雞必經之路 👉 實作一個 Todo List</title>
    <url>/2020/10/13/20201013/</url>
    <content><![CDATA[<p><img src="/images/others/loading.gif" data-original="/images/20201013/todo_list_banner.png" alt="Todo List"></p>
<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>這一篇文章會快速介紹一下筆者在上 <strong><a href="https://www.hexschool.com/courses/nodejs.html">六角學院 - NodeJS 前後端開發實戰</a></strong> 課程時，章節練習的小作業，透過 <strong>Nodejs</strong> 及 <strong>Firebase</strong> 寫一個菜鳥都必須要練習過的題目 <strong>Todo List</strong>。</p>
<span id="more"></span>

<p>本次 <strong>Nodejs</strong> 的 <strong>Template</strong> 使用為 <strong>PUG(Jade)</strong>。</p>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p><img src="/images/others/loading.gif" data-original="/images/20201013/demo.gif" alt="Demo"></p>
<p>有興趣跟筆者一起從後端窺探可以參考前幾篇文章 <strong><a href="https://rexhung0302.github.io/2020/08/06/20200806/">[NodeJS Become A Full Stack Developer] — 從0開始 NodeJS 小試身手</a></strong> 及 <strong><a href="https://rexhung0302.github.io/2020/09/14/20200914/#more">[NodeJS Become A Full Stack Developer] — Express、Router 及 EJS 入門淺談</a></strong>。</p>
<p>本次作業練習將會使用 <strong>Express</strong> 及 <strong>Firebase</strong> 實作。</p>
<hr>
<h3 id="整體規劃"><a href="#整體規劃" class="headerlink" title="整體規劃"></a>整體規劃</h3><p>其實這次作業是希望我們做形象官網，但想了一下還是想從待辦清單下手，也可以串接 <strong>Firebase</strong> 的登入驗證，不需要在自己寫一個會員系統。</p>
<p>而這次路由也規劃拆成 <code>routes -&gt; controllers -&gt; models</code><strong>(MVC架構)</strong>，一方面好維護，一方面檔案也不會那麼亂，比較清爽。</p>
<p>在前篇文章 <strong><a href="https://rexhung0302.github.io/2020/09/14/20200914/#more">[NodeJS Become A Full Stack Developer] — Express、Router 及 EJS 入門淺談</a></strong> 有提到如何使用 <strong>Express</strong> 快速建立一個專案環境，但資料夾架構怎麼放就是看個人了，這邊筆者拆成自己比較容易理解且好處理的架構。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201013/framework.png" alt="大致架構"></p>
<p>由上至下大概為：</p>
<ol>
<li><p>config -&gt; 放第三方服務的設定</p>
</li>
<li><p>controllers -&gt; <strong>Models</strong> 及 <strong>Router</strong> 的橋樑</p>
</li>
<li><p>middleware -&gt; 中介層(可用來驗證…等等)</p>
</li>
<li><p>models -&gt; 與資料庫的橋樑</p>
</li>
<li><p>node_modules -&gt; 套件庫</p>
</li>
<li><p>public -&gt; 靜態資源放置區</p>
</li>
<li><p>routes -&gt; 路由</p>
</li>
<li><p>views -&gt; 靜態頁面</p>
</li>
<li><p>env -&gt; 環境變數</p>
</li>
</ol>
<blockquote>
<p><em>還有一些常見到的就不特別介紹了</em></p>
</blockquote>
<hr>
<h3 id="大致功能"><a href="#大致功能" class="headerlink" title="大致功能"></a>大致功能</h3><p>這次筆者做一個比較簡單的待辦事項，可以簡單新增編輯刪除，其實這些透過 <strong>Firebase</strong> 都可以很輕易地做到，而路由安排也是簡單的指定並渲染，其中有使用到 <a href="https://github.com/jaredhanson/connect-flash">connect-flash</a>，這是可以將一些資訊暫存在 <strong>session</strong>，好處是刷新後只會顯示一次，之後就會消失，不會再留存在我們的記憶體內，省空間！</p>
<p>使用方式也很簡單，路由需要用到的地方，只要使用以下方法即可：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 這個方法會將 &#x27;錯誤資訊&#x27; 暫時存放再 session</span></span><br><span class="line">req.<span class="title function_">flash</span>(<span class="string">&#x27;error&#x27;</span>, <span class="string">&#x27;錯誤資訊&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 透過這個方法可將剛剛暫存的資料拿出來，但也將會消失在暫存中</span></span><br><span class="line">req.<span class="title function_">flash</span>(<span class="string">&#x27;error&#x27;</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="模板題外話"><a href="#模板題外話" class="headerlink" title="模板題外話"></a>模板題外話</h3><p>此外這邊透過 <strong>pug</strong> 渲染，在之前前端使用 <strong>pug</strong> 時幾乎不會用到變數這功能，而這次接觸到了怎麼將變數渲染到頁面上，在後端透過下列方式將值放進變數裡：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /controllers/index.js 111行</span></span><br><span class="line">res.<span class="title function_">render</span>(<span class="string">&#x27;editTask&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;Edit Task&#x27;</span>,</span><br><span class="line">    <span class="attr">error</span>: req.<span class="title function_">flash</span>(<span class="string">&#x27;error&#x27;</span>),</span><br><span class="line">    <span class="attr">title_val</span>: title,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>接著在前端頁面使用下面的方式渲染出來：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//- /views/editTask.pug 36行</span><br><span class="line">input#email.form-control(</span><br><span class="line">    type=&#x27;text&#x27;, </span><br><span class="line">    name=&quot;title&quot;,</span><br><span class="line">    placeholder=&quot;Title&quot;,</span><br><span class="line">    autocomplete,</span><br><span class="line">    value=`$&#123;title_val ? title_val : &#x27;&#x27;&#125;`</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>而如果碰到陣列要渲染就透過下面的方式渲染：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//- /views/editTask.pug 13行</span><br><span class="line">if error</span><br><span class="line">    each val,index in error</span><br><span class="line">        .alert.alert-danger.alert-dismissible.fade.show.animate__animated.animate__shakeX(</span><br><span class="line">            role=&quot;alert&quot;</span><br><span class="line">        )</span><br><span class="line">            strong= val.msg</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="關於驗證"><a href="#關於驗證" class="headerlink" title="關於驗證"></a>關於驗證</h3><h4 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h4><p>這邊使用 <strong><a href="https://express-validator.github.io/docs/">express-validator-v6.6.1</a></strong> 作為驗證，一般驗證我們不止透過前端驗證，後端也需要驗證，而這邊使用這個套件也提供了很簡單的驗證方式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 安裝套件</span><br><span class="line">$ npm install express-validator</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入套件 </span></span><br><span class="line"><span class="keyword">const</span> &#123; check, body, cookie, header, param  &#125; = <span class="built_in">require</span>(<span class="string">&#x27;express-validator&#x27;</span>)</span><br><span class="line"><span class="comment">// 更多引入方法可查看 https://express-validator.github.io/docs/check-api.html</span></span><br></pre></td></tr></table></figure>

<p>套件提供了幾種在後端驗證資料的讀取方式：</p>
<ol>
<li>check([field, message])</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//- 驗證的欄位為 email</span><br><span class="line">input(type=&quot;email&quot;, name=&quot;email&quot;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>這個方法會從 <code>req.body、req.cookies、req.headers、req.param、req.query</code> 去尋找這個名稱的欄位資料，如果有重複的名稱，則都會驗證！</p>
</blockquote>
<ol start="2">
<li>check 剩下其他的驗證函示</li>
</ol>
<p>其他的驗證函示用法幾乎差不多，只是在尋找這個欄位的地方會不一樣，<code>body</code> 只會從 <code>req.body</code> 尋找、<code>header</code> 只會從 <code>req.headers</code> 尋找…等等</p>
<h4 id="簡單的功能"><a href="#簡單的功能" class="headerlink" title="簡單的功能"></a>簡單的功能</h4><p>其實我們最主要會用到的功能為 <code>notEmpty()</code>，檢查是否為空，而用法如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /routes/index.js 24行</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/editTask/:id&#x27;</span>, checkAuth.<span class="property">verifyAuth</span>, [</span><br><span class="line">    <span class="title function_">check</span>(<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;Title is required&#x27;</span>).<span class="title function_">notEmpty</span>(),</span><br><span class="line">    <span class="title function_">check</span>(<span class="string">&#x27;expiry&#x27;</span>, <span class="string">&#x27;Expiry is required&#x27;</span>).<span class="title function_">notEmpty</span>(),</span><br><span class="line">    <span class="title function_">check</span>(<span class="string">&#x27;content&#x27;</span>, <span class="string">&#x27;Content is required&#x27;</span>).<span class="title function_">notEmpty</span>(),</span><br><span class="line">], indexController.<span class="property">postEditTask</span>);</span><br></pre></td></tr></table></figure>

<p>上方會尋找各個欄位名稱為 <code>title</code>、<code>expiry</code> 及 <code>content</code> 的值，檢查是否為空，如果為空就返回提示文字，更多方法可查看 <a href="https://github.com/validatorjs/validator.js">validator.js</a>。</p>
<h4 id="回傳錯誤訊息"><a href="#回傳錯誤訊息" class="headerlink" title="回傳錯誤訊息"></a>回傳錯誤訊息</h4><p>而我們如何將錯誤訊息回傳呢？在我們驗證錯誤之後，可以在驗證的檔案最上方引入 <code>const &#123; validationResult &#125; = require(&#39;express-validator&#39;);</code>，接著向下方的方式即可拿到錯誤資訊：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /controllers/index.js 50行</span></span><br><span class="line"><span class="attr">postNewTask</span>: <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> errors = <span class="title function_">validationResult</span>(req);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這樣即可拿到錯誤資訊，如果是空的呢？就是沒有檢查到錯誤，接著透過上面提到的 <strong><a href="https://github.com/jaredhanson/connect-flash">connect-flash</a></strong> 將錯誤資訊放在暫存中：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /controllers/index.js 50行</span></span><br><span class="line"><span class="attr">postNewTask</span>: <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> errors = <span class="title function_">validationResult</span>(req);</span><br><span class="line">    <span class="keyword">const</span> &#123; title, expiry, content &#125; = req.<span class="property">body</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!errors.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">        <span class="comment">// 如果有錯誤</span></span><br><span class="line">        req.<span class="title function_">flash</span>(<span class="string">&#x27;error&#x27;</span>, errors.<span class="property">errors</span>);</span><br><span class="line">        req.<span class="title function_">flash</span>(<span class="string">&#x27;title_val&#x27;</span>, title);</span><br><span class="line">        req.<span class="title function_">flash</span>(<span class="string">&#x27;expiry_val&#x27;</span>, expiry);</span><br><span class="line">        req.<span class="title function_">flash</span>(<span class="string">&#x27;content_val&#x27;</span>, content);</span><br><span class="line">        res.<span class="title function_">redirect</span>(<span class="string">&#x27;/newTask&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(errors.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">        <span class="comment">// 如果沒錯誤 Do something...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上方可以看到筆者也在 <code>req.body</code> 拿出了相關資訊，因為我們可能會在某一個欄位輸入錯誤，但其他欄位可能是正確的，這時候就必須將原本的值帶回，提升使用者體驗！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201013/error_msg.png" alt="錯誤提示"></p>
<hr>
<h3 id="中介層"><a href="#中介層" class="headerlink" title="中介層"></a>中介層</h3><p>這次的練習也透過 <strong><a href="https://github.com/expressjs/session#readme">express-session</a></strong> 將登入權杖存在 <strong>session</strong> 並且前端無法透過開發者工具取得，另外也把登入後 <strong>Firebase</strong> 的相關資訊存在 <strong>session</strong>，方法如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js 5行</span></span><br><span class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>確保有引入套件後在使用下面的方法拿取 Token：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js 24行</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">  <span class="attr">secret</span>: <span class="string">&#x27;todo list&#x27;</span>,</span><br><span class="line">  <span class="attr">resave</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">rolling</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">saveUninitialized</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">cookie</span>: &#123;</span><br><span class="line">    <span class="attr">httpOnly</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">maxAge</span>: <span class="number">10</span>*<span class="number">10</span>*<span class="number">10000</span> <span class="comment">// 過期時間</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>

<p>接著在登入完成後將相關的資訊存在 session：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /controllers/user.js 32行</span></span><br><span class="line">req.<span class="property">session</span>.<span class="property">auth</span> = &#123;</span><br><span class="line">    <span class="attr">uid</span>: response.<span class="property">user</span>.<span class="property">uid</span>,</span><br><span class="line">    <span class="attr">email</span>: response.<span class="property">user</span>.<span class="property">email</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然後再寫一支中介層檔案，內容如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /middleware/auth.js 1行</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">verifyAuth</span>: <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!req.<span class="property">sessionID</span> || !req.<span class="property">session</span>.<span class="property">auth</span> || !req.<span class="property">session</span>.<span class="property">auth</span>.<span class="property">uid</span> || !req.<span class="property">session</span>.<span class="property">auth</span>.<span class="property">email</span>) &#123;</span><br><span class="line">      res.<span class="title function_">redirect</span>(<span class="string">&#x27;users/login&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這樣一來就能在想要驗證的路由上使用了，先在要使用的地方引入中介層檔案 <code>const checkAuth = require(&#39;../middleware/auth&#39;);</code>，接著即可使用：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201013/checkAuth.png" alt="中介層"></p>
<p>如果有通過驗證才會 <code>next()</code> 其他會倒回登入頁面！</p>
<hr>
<h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><p>按照慣例這邊附上實作好的 Demo：</p>
<p>GitHub: <a href="https://github.com/RexHung0302/node-todos">傳送門</a></p>
<p>Demo: <a href="https://express-todos-list.herokuapp.com/users/login">傳送門</a></p>
<blockquote>
<p><em>因為是使用 Heroku 免費方案，如果太久沒有人打開網頁，打開需要點時間喚醒，請見諒</em></p>
</blockquote>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>本篇其實沒有什麼技術成分在，但純分享一下自己小作業做出來的成果，我想還有許多需要改進，<strong><a href="https://www.hexschool.com/courses/nodejs.html">六角學院 - NodeJS 前後端開發實戰</a></strong> 課程也還沒完成，這邊要在繼續惡補了！</p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><a href="https://medium.com/%E9%BA%A5%E5%85%8B%E7%9A%84%E5%8D%8A%E8%B7%AF%E5%87%BA%E5%AE%B6%E7%AD%86%E8%A8%98/%E7%AD%86%E8%A8%98-%E6%8A%8A%E7%8E%A9-express-validator-%E5%9C%A8%E4%BC%BA%E6%9C%8D%E5%99%A8%E7%AB%AF%E5%81%9A%E8%A1%A8%E5%96%AE%E9%A9%97%E8%AD%89-797342aab2d3">[筆記] 把玩 express-validator 在伺服器端做表單驗證</a></li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Back-end</category>
        <category>NodeJS</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>Back-end</tag>
        <tag>NodeJS</tag>
        <tag>Express</tag>
      </tags>
  </entry>
  <entry>
    <title>[Shell Script Note] — 教你如何一鍵部署 env, 兩分鐘就學會</title>
    <url>/2020/12/12/20201212/</url>
    <content><![CDATA[<p><img src="/images/others/loading.gif" data-original="/images/20201212/shell-banner.png" alt="Shell Script?"></p>
<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p>寫了一陣子的程式碼，你有沒有曾經想過，有時候我們能像 <code>git pull</code>、<code>git push</code>…這樣輸入完指令就完成所有你預期內的步驟嗎？</p>
<p>這篇文章將帶你簡單入們一鍵指令，就可以完成你需要完成的任務。</p>
<span id="more"></span>

<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p><img src="/images/others/loading.gif" data-original="/images/20201212/env-preview.png" alt="ENV"></p>
<p>開始前先說說為何有寫這篇文章的動機；起因為筆者在工作上目前會有好幾個專案用到同一份專案的程式碼，簡單說就是好幾個不同家的廠商(A端)會打同一個專案的 API(Ｂ端)。</p>
<p>而在開發時我們本地只會留一個 B端 專案，上線才會一個專案(A端)配一個 API 專案(B端)，而在本地我們就是靠切換 API(B端)的 ENV 去切換目前需要用到哪個會用到的資訊，像是<strong>資料庫</strong>。</p>
<p>但這篇文章最主要還是作為自己的筆記使用，記錄下如何透過 <strong>Shell Script</strong> 去一鍵執行我需要的任務。</p>
<hr>
<h3 id="何謂-Shell-Script"><a href="#何謂-Shell-Script" class="headerlink" title="何謂 Shell Script"></a>何謂 Shell Script</h3><p><strong>Shell</strong> 是文字介面底下我們與系統溝通的一個工具介面，而 <strong>Script</strong> 即為腳本、劇本，就是針對 <strong>Shell</strong> 寫的腳本。</p>
<hr>
<h3 id="如何製作腳本並執行"><a href="#如何製作腳本並執行" class="headerlink" title="如何製作腳本並執行"></a>如何製作腳本並執行</h3><p>在我們一鍵部署前，還是必須先寫好任務內容，這邊會用筆者工作上的例子來舉例。</p>
<ol>
<li><p>先至隨便在一個你會記得的地方建立之後要一鍵啟動任務執行的 <strong>sh</strong> 檔案，<code>touch /你的路徑/update_api_env.sh</code>。</p>
</li>
<li><p>編輯這支 <strong>sh</strong> 檔案，<code>vim update_api_env.sh</code>。</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># 更改資料庫位置</span><br><span class="line">sed -i &#x27;&#x27; -e &quot;s/DB_DATABASE=.*/DB_DATABASE=$1_db/1&quot; /路徑1/.env</span><br><span class="line">sed -i &#x27;&#x27; -e &quot;s/DB_DATABASE=.*/DB_DATABASE=$1_db/1&quot; /路徑2/.env</span><br><span class="line">sed -i &#x27;&#x27; -e &quot;s/DB_DATABASE=.*/DB_DATABASE=$1_db/1&quot; /路徑3/.env</span><br></pre></td></tr></table></figure>

<p>在開頭的 <code>#!/bin/bash</code> 則為 <strong>Shell Script</strong> 的起手式。</p>
<ol start="3">
<li>在 <strong>Terminal</strong> 輸入 <code>vim ~/.zshrc</code> 或 <code>vim ~/.bashrc</code>，接著加入下面的自定義快捷鍵(關鍵字)。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 自定義快捷鍵</span><br><span class="line">alias upEnv=&#x27;sh /你的路徑/update_api_env.sh&#x27;;</span><br></pre></td></tr></table></figure>

<p>在這邊的自定義快捷鍵(關鍵字)也可加入許多自己平常會用到的指令，像是開頭提過的 <code>git pull</code>、<code>git push</code>…等等。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alias gis=&#x27;git status&#x27;;</span><br><span class="line">alias gia=&#x27;git add -A&#x27;;</span><br><span class="line">alias gic=&#x27;git commit&#x27;;</span><br><span class="line">alias gipl=&#x27;git pull origin&#x27;;</span><br><span class="line">alias giph=&#x27;git push origin&#x27;;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>關掉你的 <strong>Terminal</strong> 然後重新開啟。</p>
</li>
<li><p>輸入剛剛取的快捷鍵名稱(關鍵字) <code>upEnv xxx</code> 就會替換成功了。</p>
</li>
</ol>
<hr>
<h3 id="如何防呆"><a href="#如何防呆" class="headerlink" title="如何防呆"></a>如何防呆</h3><p>這時候如果我們只有輸入 <code>upEnv</code> 其實是會更改成功的，所以我們必須做一些防呆措施。</p>
<p>在我們提到的 <strong>Shell Script</strong> 其實也可以像我們寫 <strong>php</strong> 或是 <strong>JS</strong> 一樣寫一些判斷式，這邊提供一個範例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if [ ! -n &quot;$1&quot; ] ; then</span><br><span class="line">  echo &quot;Error: You need type keyword to change env!&quot;</span><br><span class="line">else</span><br><span class="line">  # DO something...</span><br><span class="line">  echo &quot;Success: Already changed -&gt; $1&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>這邊有幾個雷需要注意，<strong>Shell Script</strong> <strong>每個判斷</strong> 或 <strong>每個值</strong> 建議都留一個空白鍵跟下個值做區隔，不然容易報錯。</p>
<blockquote>
<p><em>$1 的意思為輸入指令時空白鍵後第一個參數，舉例來說在上面我們設定啟動這個執行檔的關鍵字為 <code>upEnv</code>，如果你輸入 <code>upEnv Hello World</code>，<strong>Hello</strong> 將會是第一個變數($1)，<strong>World</strong> 將會是第二個變數($2)，以此類推…</em></p>
</blockquote>
<hr>
<h3 id="加上絢麗的效果"><a href="#加上絢麗的效果" class="headerlink" title="加上絢麗的效果"></a>加上絢麗的效果</h3><p>這邊會看到 <strong>echo</strong> 出來的東西有點單調，就是單純的文字，如果有設定錯誤提醒，或許不夠明顯。</p>
<p>好在我們可以對 <strong>echo</strong> 設定顏色，加入的指令為：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo -e &quot;\033[30m文字字串\033[0m&quot;   --&gt; 黑色字</span><br><span class="line">echo -e &quot;\033[31m文字字串 \033[0m&quot;   --&gt; 紅色字</span><br><span class="line">echo -e &quot;\033[32m文字字串 \033[0m&quot;   --&gt; 綠色字</span><br><span class="line">echo -e &quot;\033[33m文字字串 \033[0m&quot;   --&gt; 黃色字</span><br><span class="line">echo -e &quot;\033[34m文字字串 \033[0m&quot;   --&gt; 藍色字</span><br><span class="line">echo -e &quot;\033[35m文字字串 \033[0m&quot;   --&gt; 紫色字</span><br><span class="line">echo -e &quot;\033[36m文字字串 \033[0m&quot;   --&gt; 天藍字</span><br><span class="line">echo -e &quot;\033[37m文字字串 \033[0m&quot;   --&gt; 白色字</span><br><span class="line"></span><br><span class="line">echo -e &quot;\033[40;37m文字字串\033[0m&quot;   --&gt; 黑底白字</span><br><span class="line">echo -e &quot;\033[41;37m文字字串\033[0m&quot;   --&gt; 紅底白字</span><br><span class="line">echo -e &quot;\033[42;37m文字字串\033[0m&quot;   --&gt; 綠底白字</span><br><span class="line">echo -e &quot;\033[43;37m文字字串\033[0m&quot;   --&gt; 黃底白字</span><br><span class="line">echo -e &quot;\033[44;37m文字字串\033[0m&quot;   --&gt; 藍底白字</span><br><span class="line">echo -e &quot;\033[45;37m文字字串\033[0m&quot;   --&gt; 紫底白字</span><br><span class="line">echo -e &quot;\033[46;37m文字字串\033[0m&quot;   --&gt; 天藍底白字</span><br><span class="line">echo -e &quot;\033[47;30m文字字串\033[0m&quot;   --&gt; 白底黑字</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20201212/echo-color-preview.png" alt="Echo Color"></p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>這邊文章簡短的介紹如何使用快捷鍵一鍵更換 <strong>ENV</strong>，這次在工作上托同事的福又學了一招，趁記憶猶新趕緊記錄下來，這會是一個實用的功能！</p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><p><a href="http://linux.vbird.org/linux_basic/0340bashshell-scripts.php#script_why">鳥哥的 Linux 私房菜 - 第十二章、學習 Shell Scripts</a></p>
</li>
<li><p><a href="https://775225.blogspot.com/2012/06/linuxecho.html">[Linux]改變echo顏色的指令</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>Shell Script</category>
        <category>Env</category>
        <category>env</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>Note</tag>
        <tag>Shell Script</tag>
      </tags>
  </entry>
  <entry>
    <title>[Life Note] - LINE TAIWAN TechPulse 2020</title>
    <url>/2020/12/19/20201219/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p><img src="/images/others/loading.gif" data-original="/images/20201219/LINE_TechPulse_2020.gif" alt="LINE TAIWAN TechPulse 2020"></p>
<p>一砸眼一年又過去了，繼上次 <strong><a href="https://rexhung0302.github.io/2019/12/04/20191204/">LINE TAIWAN TechPulse 2019</a></strong> - LINE 開發者大會結束後，又到了 <strong>2020</strong> 年的開發者大會了。</p>
<p>這次再來了解一下這一年 <strong>LINE</strong> 又做了什麼，以及之後的目標將放在哪裡吧！</p>
<span id="more"></span>

<p>這次的開發者大會是第五屆，這次場地移動到了 <strong>南港展覽館二館7樓</strong>，相對去年的 <strong>臺北和平籃球館</strong> 小了許多，可能也是考量到了疫情的關係，所以今年報名似乎不像去年有報都有獎；順帶一提，這次一起報名還有筆者的幾位同事跟主管，但最後同事都有中獎，主管沒有中，很意外，但還好 <strong>LINE</strong> 還是很貼心的有線上轉播。</p>
<blockquote>
<p><em>嚴重提醒：本篇也是以筆記及心得為主的文章，如果內容有誤，敬請不吝社指出也請多多海涵，感謝各路大神！另外圖片會有模糊問題因為當天臨時靠手機拍攝，且會傾斜是因為位置為隨機分配，筆者在側邊，還請各位大神見諒。</em></p>
</blockquote>
<hr>
<h3 id="本次重點"><a href="#本次重點" class="headerlink" title="本次重點"></a>本次重點</h3><p><img src="/images/others/loading.gif" data-original="/images/20201219/check_in.jpg" alt="今年報到方式改變"></p>
<p>往年的開發者大會都會有幾項重點，但幾乎都脫離不了 <strong>LINE</strong> 近年來想要達成的 『<strong>LINE is a AI company</strong>』；而今年剛開始進場的大看點就是報到方式的改變，今年改為 <strong>人臉辨識</strong>，在會議上 <strong>LINE</strong> 稱此項技術達成了<strong>一人一分鐘</strong>的入場速度，有效消化近千人的同時入場報到流程。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201219/ai_check_in.jpg" alt="人臉辨識系統"></p>
<blockquote>
<p><em><strong>然而筆者現場實際體驗，根本不用一分鐘，比手機解鎖速度還要快呢。</strong></em></p>
</blockquote>
<p>今年一樣分為 <strong>上半場</strong> 及 <strong>下半場</strong>，較特別的是下半場分為 <strong>A</strong> 及 <strong>B</strong> 兩廳分開進行，似乎一方面想要在有限時間內讓今年想報告的主題都有辦法講到，也有效的避免密閉空間內不同時讓那麼多人在同一個場所。</p>
<p>上半場為 <strong>LINE台灣公司總經理 - 陳立人(Roger Chen)</strong>、<strong>LINE台灣資深技術總監 - 陳鴻嘉(Marco Chen)</strong> 及 <strong>高層主管及員工</strong> 介紹 <strong>公司目前近況</strong> 和 <strong>未來目標</strong>，還有去年也有提過的 <strong>Clova</strong> 服務介紹 - <strong>Aaron Wu</strong> 及 補充說明的 <strong>Cid Chang</strong>，接著有 <strong>資深開發技術推廣工程師(LINE 技術專家&#x2F;技術傳教士)</strong> - <strong><a href="https://www.evanlin.com/">Evan Lin</a></strong>，最後還有 <strong>資料工程團隊經理 - Shawn Tsai</strong> 及 <strong>Penny Sun</strong> 講者，介紹 <strong>AI機器學習</strong>(<strong>Scaling Machine Learning</strong>) 如何進行 <strong>資料處理、機器學習 及 機器學習階段</strong>，最後還有 <strong>新星計畫 實習生的實習心得</strong>…等等，下午筆者挑了 <strong>B</strong> 廳，主要內容也是多為 <strong>LINE</strong> 的 <strong>技術應用</strong> 及 內部一些對於 <strong>有效提高工作效率</strong> 的方法。</p>
<p>-&gt; 簡單給個重點：</p>
<ol>
<li><p><strong>LINE這一年的進度及未來展望</strong></p>
</li>
<li><p><strong>我們的AI如何厲害</strong></p>
</li>
<li><p><strong>談一下我們LINE的5W1H(What、Why、Who、Where、When、How)</strong></p>
</li>
<li><p><strong>實習生的心路歷程(B廳)</strong></p>
</li>
</ol>
<p><img src="/images/others/loading.gif" data-original="/images/20201219/LINE_2020_start.jpg" alt="準備好就開始了"></p>
<hr>
<h3 id="報到"><a href="#報到" class="headerlink" title="報到"></a>報到</h3><p>在開始前還是要小抱怨一下 <strong>LINE</strong> 的報名流程，整體很順暢，只是申請有沒有中獎一直到了大會前幾天才公布，這對要請假的人非常的困擾呀！</p>
<p>而這次因為太晚公布所以筆者及同事就自行前往會場了，一路上其實天氣不大好，所幸是開車前往，所以沒有淋道太多雨(雖然這邊搭乘捷運也很方便)。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201219/car_view.jpg" alt="停車位其實滿多的"></p>
<p>到會場人臉辨識完成後，會發一張卡片，按照顏色入場入座。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201219/sign_in_card.jpg" alt="隨機分配的卡片"></p>
<blockquote>
<p><em><strong>再次讚賞這次的人臉辨識入場，現在很多場所都開始類似的裝置了，可能有人會擔心安全問題，下面會在提及。</strong></em></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20201219/sun.png" alt="同事之前讓我看這張圖 今天感同身受"></p>
<blockquote>
<p><em>圖片來源：<a href="https://www.ettoday.net/news/20201216/1877630.htm">ETtoday - 「12月日照時數」南北2縣市差75倍！這地區一天只能曬5分鐘陽光</a></em></p>
</blockquote>
<hr>
<h3 id="活動開始"><a href="#活動開始" class="headerlink" title="活動開始"></a>活動開始</h3><h4 id="上半場"><a href="#上半場" class="headerlink" title="上半場"></a>上半場</h4><h5 id="第一位-LINE台灣總經理-陳立人-Roger-Chen"><a href="#第一位-LINE台灣總經理-陳立人-Roger-Chen" class="headerlink" title="第一位(LINE台灣總經理 - 陳立人(Roger Chen))"></a>第一位(LINE台灣總經理 - 陳立人(Roger Chen))</h5><p>開場為重點 <strong>Key Note</strong>，整體大致上大家就知道接著會講什麼了，不意外今年也是圍繞著 <strong>AI</strong> 相關的主題。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201219/roger_key_note.jpg" alt="Key Note"></p>
<hr>
<h5 id="第二位-LINE台灣資深技術總監-陳鴻嘉"><a href="#第二位-LINE台灣資深技術總監-陳鴻嘉" class="headerlink" title="第二位(LINE台灣資深技術總監 - 陳鴻嘉)"></a>第二位(LINE台灣資深技術總監 - 陳鴻嘉)</h5><blockquote>
<p>因疫情來襲，造就了 <strong>新常態(New Normal)</strong> 的誕生，人們開啟了新的生活方式，了解 <strong>LINE</strong> 在新常態的時代下如何保持工作效率及因應疫情的衝擊下，解決大部分商家所面臨的危機，甚至轉為公司成功的推力。</p>
</blockquote>
<p>主要內容提到 <strong>人工智慧技術 Clova(NLU（自然語言理解）、Face（臉部辨識）、OCR（光學字元辨識）、STT（語音辨識）)</strong>、<strong>Verda Kubernetes Services, VKS（容器化平台服務）)</strong> 的重構及專案轉移。</p>
<p>2020目標繼續往年一直持續的 <strong>人工AI</strong> 發展。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201219/clova_key_note.jpg" alt="Clova 的四大相關技術"></p>
<p>去年有提到 <strong>LINE 2020</strong> 的目標為 - 『<strong>人工AI</strong> 發展 及 <strong>LINE Brain</strong>』，而今年 LINE 將 <strong>LINE Clova</strong> 和 <strong>LINE Brain</strong> 合二為一，稱之為 <strong>LINE Clova</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201219/new_line_clova.jpg" alt="2020年的 Clova"></p>
<p><strong>Clova</strong> 主要內容為下列四項：</p>
<ol>
<li><strong>NLU（自然語言理解）</strong></li>
</ol>
<p><img src="/images/others/loading.gif" data-original="/images/20201219/LINE_chatbox.jpg" alt="AI機器人"></p>
<p>提到疫情的衝擊下，人們開始在網路上使用最廣泛的方式就是使用通訊軟體，而商家們也紛紛開始使用聊天機器人，而以往人工的方式就是請一位小編，然而這樣需要花費一定的成本，所以各大平台及公司紛紛開始投入相關的 <strong>智慧AI聊天機器人</strong>。</p>
<p><strong>LINE</strong> 在這塊下足了不少功夫，<strong>NLU</strong> 是文字語言及語音相關應用的靈魂，簡單說及為 『<strong>如何讓電腦讀懂人類語言</strong>』。</p>
<blockquote>
<p><em>什麼是自然語言呢，舉個比較貼近生活的例子，可能你會跟老闆說：自然語言(最近我的狀況還不錯，到了公司學到了許多，也能獨自處理好多事情了)；換而言之 非自然語言 就是(<del>我要加薪</del>)(誤，詳細可參考<a href="https://zh.wikipedia.org/wiki/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E7%90%86%E8%A7%A3">此處</a></em>。</p>
</blockquote>
<ol start="2">
<li><strong>OCR（光學字元辨識）</strong></li>
</ol>
<p><img src="/images/others/loading.gif" data-original="/images/20201219/OCR_preview.png" alt="轉為文字 圖片來自 中央通訊社(https:&#x2F;&#x2F;www.cna.com.tw&#x2F;news&#x2F;ait&#x2F;201912240065.aspx)"></p>
<p>相信很多人都對這個功能有印象，這個功能就是仰賴 <strong>OCR（光學字元辨識）</strong> - 文字資料的圖像檔案進行分析辨識處理，詳細可參考<a href="https://zh.wikipedia.org/wiki/%E5%85%89%E5%AD%A6%E5%AD%97%E7%AC%A6%E8%AF%86%E5%88%AB">維基百科</a>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201219/eKYC.jpg" alt="eKYC"></p>
<p>經典的例子及為手機綁定信用卡時，會請你將卡片放置在畫面正中間掃描，然後卡片號碼就會很神奇的自動填入了。</p>
<p>而 <strong>LINE</strong> 也即將把這個技術融入到自家中，稱為 <strong>LINE eKYC</strong>，未來 <strong>LINE</strong> 需要綁定信用卡或是個人資料時會更方便，<strong>LINE</strong> 也考慮跟銀行合作使用線上開戶。</p>
<ol start="3">
<li><strong>Face（臉部辨識）</strong></li>
</ol>
<p><img src="/images/others/loading.gif" data-original="/images/20201219/face_preview.jpg" alt="eKYC"></p>
<p>這個技術在這次入場時已經有體驗到了，非常的快速便利，而上方提到關於這項技術有些人會擔心是否自己的照片就會被存在雲端或是資料庫內了，這可不避擔心(<del>反正個資已經不值錢了</del>，欸不是)，這邊先上幾張圖。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201219/clova_pace.jpg" alt="Clova Face"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20201219/clova_face_process.jpg" alt="Clova Face Function Process"></p>
<p>簡膽說重點是 <strong>LINE</strong> 並非儲存你整張相片，而是將你的特徵存到資料庫中，然後再掃描時拿出你這個人的特徵去比對，而特徵是會拆解在重組的，所以最後你只拿資料庫這個人的特徵是無法重新拼回你的臉蛋的。</p>
<p>當然我們會關心辨識率如何，對於辨識會有兩種錯誤，<strong>FRR(False Rejection Rate)應該辨識通過的卻沒通過</strong> 及 <strong>FAR(False Acceptance Rate )應該不能通過辨識的卻通過了</strong>，<strong>LINE</strong> 也給出了答案。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201219/FRR_FAR.jpg" alt="FRR FAR"></p>
<p>在講解這張技術時，筆者在想這個酷應用如果有 <strong>API</strong> 肯定很棒，畢竟大家都在用 <strong>LINE</strong>，之後我們只需要串接這個 <strong>API</strong> 並且請使用者加入官方帳號就可以做更多的應用，但目前可惜的是 <strong>LINE</strong> 先歡迎有意願的商家或是企業找他們詳談。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201219/face_join_us.jpg" alt="Join us for Face Function"></p>
<ol start="4">
<li><strong>STT（語音辨識）)</strong></li>
</ol>
<p><img src="/images/others/loading.gif" data-original="/images/20201219/LINE_ai_call.jpg" alt="AI Call"></p>
<p>相信文字客服在時代的進步對於某些人已經無法滿足，相較於冷冰冰的文字下，更多的人還是希望有聲音的回應，且說的往往比打字來的容易。</p>
<p>這項技術其實已經有在實際應用了，可參考日本的<a href="https://clova.line.me/line-aicall/">LINE Clova</a>。</p>
<p>以上四點為目前 <strong>Clova</strong> 的重點，而這幾項技術 <strong>LINE</strong> 使用了一張投影片 <strong>Demo</strong> 出了整合應用的情形。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201219/clova_demo.jpg" alt="Clova Demo"></p>
<p>內容為報帳機器人，使用者可使用 <strong>OCR（光學字元辨識）</strong> 技術免去輸入基本資料及相關文字的流程，以及使用 <strong>NLU（自然語言理解）</strong> 基礎的聊天機器人，未來可期還能加入 <strong>STT（語音辨識）)</strong> 及 <strong>Face（臉部辨識）</strong> 的 <strong>API</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201219/Varda_to_VKS.jpg" alt="VKS"></p>
<p>而 <strong>Verda Kubernetes Services, VKS（容器化平台服務）</strong> 則是由 <strong>LINE</strong> 總部建構，台灣重構後，在 <strong>2020第二季</strong> 已經將所有的專案及服務從原本的 <strong>Varda</strong> 搬移上去了。</p>
<p>接著就是在說 <strong>VKS</strong> 更快更棒更省錢(<del>如同某蘋果?!</del>)，當流量暴增的時候能自動平行擴增，乘載瞬間的流量，另外 <strong>VKS</strong> 擁有許多開源的生態系資源，</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201219/VKS_adoption.jpg" alt="沒騙你吧 更快更棒更省錢"></p>
<blockquote>
<p><em><strong>在這邊值得一提，<strong>LINE</strong> 預計即將開放可以使用生物辨識登入，類似銀行的登入，簡單說就是你可以期待使用 <strong>Face ID</strong> 登入 <strong>LINE</strong> 了，對於常常忘記密碼的人，不知道是一種福音還是毒藥呢(筆者常常用久了生物登入，突然要輸入密碼早已忘光光了)。</strong></em></p>
</blockquote>
<hr>
<h5 id="第三、四位-Aaron-Wu、Cid-Chang"><a href="#第三、四位-Aaron-Wu、Cid-Chang" class="headerlink" title="第三、四位(Aaron Wu、Cid Chang)"></a>第三、四位(Aaron Wu、Cid Chang)</h5><p><img src="/images/others/loading.gif" data-original="/images/20201219/key_note_clova.jpg" alt="總結 Clova"></p>
<p>兩位講者延續了前面的 <strong>LINE Clova</strong>，補充了一些係向及開發時遇到的問題還有怎麼解決。</p>
<hr>
<h5 id="第五位-資深開發技術推廣工程師-Evan-Lin"><a href="#第五位-資深開發技術推廣工程師-Evan-Lin" class="headerlink" title="第五位(資深開發技術推廣工程師 - Evan Lin)"></a>第五位(資深開發技術推廣工程師 - Evan Lin)</h5><blockquote>
<p>去年提到了 <strong>Clova Chatbot Builder</strong>，今年改提 <strong>API</strong> 實際應用。</p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20201219/Emoji_api.jpg" alt="顏文字 API"></p>
<p>講者一開始提到了新的 <strong>Emoji Webhook</strong> 和之前的有何不同，以及 <strong>Reply what Emoji user send</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201219/unsend_api.jpg" alt="為發送成功查詢 API"></p>
<p>還有是否有傳訊息成功的 <strong>API</strong>，讓你更好知道訊息是否有真的送出，而不是失敗了，接著還有幾隻 <strong>API</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201219/video_saw_api.jpg" alt="使用者是否查看影片 API"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20201219/share_target_api.jpg" alt="更棒的分享功能"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20201219/LIFF_APP_api.jpg" alt="LIFF優化"></p>
<p>最後投影片也寫出了<strong>2020年</strong>關於 <strong>LIFF</strong> 及 <strong>Message API</strong> 的 <strong>Summary</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201219/api_summary_1.jpg" alt="Message API Summary"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20201219/api_summary_2.jpg" alt="LIFF Summary"></p>
<p>結論：更優化的 <strong>API</strong> 及對於開發者或使用者更貼心的 <strong>API</strong>，比如打出 <strong>API</strong> 後可以檢查是否成功，還有持續進步的 <strong>LIFF</strong>。</p>
<hr>
<h4 id="第五位-資料工程團隊經理-Shawn-Tsai-及-Penny-Sun-講者"><a href="#第五位-資料工程團隊經理-Shawn-Tsai-及-Penny-Sun-講者" class="headerlink" title="第五位(資料工程團隊經理 - Shawn Tsai 及 Penny Sun 講者)"></a>第五位(資料工程團隊經理 - Shawn Tsai 及 Penny Sun 講者)</h4><p><img src="/images/others/loading.gif" data-original="/images/20201219/shawn_tsai.jpg" alt="Shawn Tsai"></p>
<p>這兩位講者主要發表了關於<strong>資料處理</strong>及<strong>機器學習</strong>的<strong>挑戰</strong>、<strong>遇到的問題</strong>及<strong>如何解決問題</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201219/scaling_data_preview.jpg" alt="資料處理的挑戰"></p>
<hr>
<h3 id="中場休息"><a href="#中場休息" class="headerlink" title="中場休息"></a>中場休息</h3><p>在中間休息時間 <strong>LINE</strong> 邀請我們到C廳參加集點活動，主要為拍四個關卡的關鍵圖片上傳即可獲得一點，在這四關分別介紹了四個主題：</p>
<ul>
<li><p><strong>行動支付精靈(LINE Pay)</strong> - 介紹了之後會推出的 <strong>My Card</strong>，之後可以和多個應用交互使用，像是集點或是對話還有信用卡功能…等等。</p>
</li>
<li><p><strong>技術新星人才計畫(LINE TECH FRESH)</strong> - 這個位置有實習生會分享他們的心得及經歷。</p>
</li>
<li><p><strong>LINE API 大神</strong> - 這個位置就有趣了，現場是一台扭蛋機，掃描 <strong>QRCode</strong> 後就會跳出加入官方帳號然後解題成功後就可以獲得一顆扭蛋。</p>
</li>
</ul>
<p><img src="/images/others/loading.gif" data-original="/images/20201219/gacha.jpg" alt="扭蛋機"></p>
<ul>
<li><strong>新創生力軍</strong> - 這個位子在講解如何透過 <strong>LINE</strong> 去借行動電源及<strong>印出自己的照片</strong>。</li>
</ul>
<p><img src="/images/others/loading.gif" data-original="/images/20201219/wow.jpg" alt="現場似乎還有記者"></p>
<p>對了，原本以為疫情的關係應該餐點是沒有了，結果還是很棒呢。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201219/food.jpg" alt="食物很棒 吃飽再度上路"></p>
<hr>
<h3 id="下半場"><a href="#下半場" class="headerlink" title="下半場"></a>下半場</h3><p>下半場筆者挑了B廳，但幾乎也是在延續上半場的內容，其中有位資深前端的主題為 <strong>How GitOps Helps Kubernetes Adoption</strong>，聽到資深前端讓我很興奮且期待內容，開頭該位講者也提到了不會提得太深，因為今天的目的並非深入探討，結果聽了半天都聽不懂，看來自己還是太菜了。最後為實習生收尾，提到在 <strong>LINE</strong> 實習的心得。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201219/LINE_pay_my_card.jpg" alt="LINE Pay My Card"></p>
<p>第一位講者先提到了上半場有提到的 <strong>My Card</strong>，這個功能尚未上線，但在現場我們搶先體驗了一波如何<strong>集點、兌換禮物</strong>…等等，類似目前<strong>全家APP</strong>正在做的事情，未來還會開放更多的商家去使用。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201219/my_card_service_oncept.jpg" alt="服務的整個概念"></p>
<p>而內容也提到有的商家沒有自己的顧客系統該怎麼辦呢？<strong>LINE</strong> 也即將提供一條龍服務，聽起來 <strong>LINE</strong> 似乎也在醞釀準備推出 <strong>LINE CRM</strong> 系統，雖然 <strong>LINE</strong> 已經提了好幾年會做 <strong>LINE CRM</strong>；看來只有做 <strong>LINE CRM</strong> 系統的公司要皮繃緊了。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201219/TechPulse.jpg" alt="當天的卡片"></p>
<p>這次搶先體驗的卡片也被 <strong>Demo</strong> 出來了，附近的聽者也紛紛再討論說這個很用得上，且 <strong>LINE</strong> 在最後介紹到未來<strong>甲商家的卡片可以和乙商家的卡片做異業結盟</strong>，在A商家消費，可以一起累積B商家的點數，也可以使用B商家的點數去兌換A商家的折價券，這個商業模式在現今很流行。</p>
<h4 id="簡單整理幾個重點："><a href="#簡單整理幾個重點：" class="headerlink" title="簡單整理幾個重點："></a>簡單整理幾個重點：</h4><ol>
<li><p>預計明年初推出 My Card</p>
</li>
<li><p>商家必須整合自己的 POST 系統，然後跟 LINE 申請卡片</p>
</li>
<li><p>安全的部分不用擔心，LINE 每年都再說自己的安全有多安全</p>
</li>
<li><p>目前顧客管理服務需要自己弄，之後 LINE 會推出一條龍服務</p>
</li>
</ol>
<p><img src="/images/others/loading.gif" data-original="/images/20201219/gitOps.jpg" alt="Denny Tsai - GitOps"></p>
<p>緊接著去年也是充滿乾貨的 <strong>前端工程部 - Denny Tsai</strong> 也跟我們分享了今年使用了哪些技術，遇到哪些問題，怎麼解決。</p>
<p>當然最後講者也說了，用什麼技術不代表我們只接受或只能使用這個技術，遇到能達成更好效率的工具或是技術也會改為使用；我想能這樣處處使用新技術的公司應該也不多了，一沒弄好，原本就很趕的專案時程又要 <strong>Delay</strong> 了。</p>
<blockquote>
<p><em><strong>順帶一提：前陣子同事才跟我提到 隕石式開發，看完真的是哭笑不得，在這種情況就別提使用新技術了，可以<a href="https://ithelp.ithome.com.tw/articles/10198394">點我</a>看文章。</strong></em></p>
</blockquote>
<p>B廳最後的最後沒有拍攝實習生的演講照片，全程聽下來只能說，哇，不要每個學歷都台字輩吧，我這個學店加非本科系該挖一個洞跳下去了。</p>
<p>開玩笑的，人生還是要不停的努力前進，寫 <strong>Code</strong> 就是公平的，人都是從<strong>0</strong>開始，且筆者認為用心程度及態度大於天生資質。</p>
<h4 id="簡單整理幾個重點：-1"><a href="#簡單整理幾個重點：-1" class="headerlink" title="簡單整理幾個重點："></a>簡單整理幾個重點：</h4><ol>
<li><p>Developer-friendly - 更友善的開發環境</p>
</li>
<li><p>Single Source of Truth - 單一來源(例如設定欓)</p>
</li>
<li><p>Minimal Direct Manipulations - 減少複雜操作</p>
</li>
<li><p>自動化 CI&#x2F;CD - AgroCD、Kustomization</p>
</li>
<li><p>LeSS 敏捷式開發- 敏捷思維</p>
</li>
</ol>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>今年參加開發者大會除了聽到了 <strong>LINE</strong> 分享自家技術外，其實原本比較期待的是聽到各家廠商或是開發者實際的作品還有心得，雖然會議上少了這些講者，但也是收穫不少，如果說明年還要不要參加，這是肯定的。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201219/see_you.jpg" alt="明年見 各位"></p>
<p>而今年期待的啤酒改為到C廳解題後集點兌換，整體應用了 <strong>My Card</strong> 滿有趣的，但想到去年的啤酒一瓶都捨不得喝，今年只有拿到一瓶，看來要先開去年的來喝了。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201219/beer.jpg" alt="荔枝啤酒"></p>
<p>結尾也一樣用今年的紀念品來結束這一回合，如果上述資訊有錯誤，還請各路大神見諒，今年也是小菜雞進大觀園，但這種會議常常收穫滿滿，聽完不由得要讚嘆現今的科技及技術真的是很厲害呀！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201219/finally.jpg" alt="好像縮水了"></p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><p>LINE - <a href="https://techpulse.line.me/">報名網站</a></p>
</li>
<li><p>自由時報 — <a href="https://3c.ltn.com.tw/news/42701">在台技術 3 大躍進！LINE 年度開發者大會正式登場</a></p>
</li>
<li><p>IN SIDE — <a href="https://www.inside.com.tw/article/21982-LINE-Clova-TECHPULSE-2020">LINE Clova 人工智慧應用確定登台，數位身分識別、智慧電話接聽服務導入應用</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>LINE</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>Other</tag>
        <tag>Life</tag>
        <tag>LINE</tag>
        <tag>TechPulse</tag>
      </tags>
  </entry>
  <entry>
    <title>[Third party service Note] - 第一次使用 AWS S3 上傳圖片就上手</title>
    <url>/2020/12/31/20201231/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p><img src="/images/others/loading.gif" data-original="/images/20201231/logo.png" alt="AWS S3"></p>
<p>今年最後一篇文章就獻給 <strong>AWS S3</strong>(下稱 <strong>S3</strong>) 了，這篇文章用來記錄如何將自己的圖片上傳至第三方儲存空間，並且可以取得瀏覽網址。</p>
<span id="more"></span>

<p>這篇對於 <strong>S3</strong> 不會有太深的介紹以及講解，主要用來介紹並且筆記，如果你也在思考自己的專案想要將圖片放在哪裡，是專案主機呢？還是 <strong>S3</strong>？這邊並不會做過多的討論以及比較，但如果你已經確定要將圖片放置在 <strong>S3</strong> 那就可以參考接下來的內容！</p>
<hr>
<h3 id="什麼是-AWS-Amazon-Simple-Storage-Service-S3"><a href="#什麼是-AWS-Amazon-Simple-Storage-Service-S3" class="headerlink" title="什麼是 AWS(Amazon Simple Storage Service) S3"></a>什麼是 AWS(Amazon Simple Storage Service) S3</h3><p><img src="/images/others/loading.gif" data-original="/images/20201231/cloud.png" alt="雲"></p>
<p>相信會看到這篇文章的，有 <strong>87%</strong> 大概都知道 <strong>S3</strong> 是什麼了，但這邊還是在稍微再提一下。</p>
<p><strong>S3</strong> 就是一個儲存服務，也是雲端服務，好處在於該設定以及安全性問題，<strong>AWS</strong> 都已經幫你想好了，你只需要上傳檔案，以及使用他們現有的 <strong>API</strong>，比如 **瀏覽檔案、刪除檔案…**等等，由 <strong>亞馬遜網路服務公司(Amazon Web Services)</strong> 推出的服務。</p>
<p>你可能會想單純檔案瀏覽上傳並下載其實我們放到 <strong>imgur.com</strong> 就好了呀，其實使用 <strong>S3</strong> 的好處還有在 <strong>存取權授</strong> 這邊，也是在 <strong>S3</strong> 上設定即可，也可以設定開發人員，透過指派的方式，可給予每個指派人員唯一金鑰去做存取動作。</p>
<hr>
<h3 id="加碼場-Multer"><a href="#加碼場-Multer" class="headerlink" title="加碼場 Multer"></a>加碼場 Multer</h3><p>由於我們會透過 <strong>form-data</strong> 從前端傳送圖片檔案到後端，再由後端上傳至 <strong>S3</strong>，在接收檔案以及查看檔案是否符合規格時，我們可以使用這個套件，方便我們做檢查及上傳的輔助橋樑。</p>
<blockquote>
<p>如果有興趣透過 <strong>Node.js</strong> 傳送圖片至 <strong>S3</strong> 的人可以先到 <strong><a href="https://github.com/expressjs/multer">Multer GitHub</a></strong> 瀏覽一下，如果沒興趣只想知道怎麼開通 <strong>S3</strong> 服務最後一節可以跳過。</p>
</blockquote>
<hr>
<h3 id="開始使用-S3-服務"><a href="#開始使用-S3-服務" class="headerlink" title="開始使用 S3 服務"></a>開始使用 S3 服務</h3><h4 id="S3-憑證"><a href="#S3-憑證" class="headerlink" title="S3 憑證"></a>S3 憑證</h4><p>如同 <strong>Google Analytics</strong> 一樣，<strong>S3</strong> 只是 <strong>AWS</strong> 的眾多服務之一，您必須先到 <strong><a href="https://aws.amazon.com/tw/free">AWS</a></strong> 去註冊帳號密碼。</p>
<p>註冊結束後進入 <strong><a href="https://ap-northeast-1.console.aws.amazon.com/console/home">AWS 管理控制台</a></strong>，</p>
<p>這和其他第三方服務一樣，您需要有 <strong>Token</strong> 這類的東西才能夠使用它們的服務，而 <strong>AWS</strong> 需要 <strong>訪問密鑰ID(Access ID)</strong> 和 <strong>私有訪問密鑰(Secret Access key)</strong> 您才能使用這項服務。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201231/console.png" alt="AWS 管理控制台"></p>
<p>點選 <strong>My Security Credentials</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201231/create_new_token.png" alt="創建新的訪問密鑰"></p>
<p>點選 <strong>訪問密鑰(訪問密鑰 ID 和秘密訪問密鑰)(Access keys(access key ID and secret access key))</strong> 之後緊接著點選 <strong>創建新的訪問密鑰(Create New Access Key)</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201231/store_result.png" alt="拿到新的 Access ID 及 Access Key"></p>
<p>跳出彈窗代表您已經建立成功，然後將您的 <strong>訪問密鑰ID(Access ID)</strong> 和 <strong>私有訪問密鑰(Secret Access key)</strong> 記下或是點選 <strong>下載密鑰文件(Download Key File)</strong> 下載 <strong>.csv</strong> 文件。</p>
<h4 id="新增一個-Bucket"><a href="#新增一個-Bucket" class="headerlink" title="新增一個 Bucket"></a>新增一個 Bucket</h4><p><img src="/images/others/loading.gif" data-original="/images/20201231/select_S3.png" alt="S3"></p>
<p>接下然我們要創建一個 <strong>S3</strong> 的 <strong>服務儲存桶</strong>，點選左上角的 <strong>Services</strong> 你會發現 <strong>AWS</strong> 的眾多服務，看到左邊第一排的 <strong>S3</strong> 點進去。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201231/s3_bucket.png" alt="點擊新增S3儲存桶"></p>
<p>然後點選新<strong>增儲存桶(Create New Bucket)</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201231/create_new_bucket.png" alt="地區選擇"></p>
<p>之後輸入 <strong>儲存桶(Bucket)</strong> 的名稱，然後地區建議選擇離你當下比較近的位子，像筆者住在台灣，所以就會選擇 <strong>亞太地區(東京)ap-northeast-1</strong> 或 <strong>亞太地區(新加坡)ap-southeast-1</strong> 其中之一，有道是越近越快。不過這邊不討論這個問題。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201231/cancel_prohibit_setting.gif" alt="阻止公有訪問設定"></p>
<p>然後下方的 <strong>阻止公有訪問設定</strong> 請一定要勾掉，不然之後圖片上傳完成後，如果想要訪問，就會出現下方的內容。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201231/access_denied.png" alt="Access 權限錯誤"></p>
<p>如果忘記勾選掉，之後進去儲存桶後也可以到 <strong>權限</strong> 去點選編輯然後勾掉。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201231/cancel_prohibit_way_2.png" alt="阻止公有訪問設定 權限設定"></p>
<p>因為我們只是要上傳圖片，並且讓所有人都能看見，所以這邊必須勾掉！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201231/upload_image.png" alt="上傳圖片"></p>
<p>最後就可以上傳圖片啦，上傳完成後就可以點擊圖片名稱，</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201231/preview_img.png" alt="預覽圖片"></p>
<blockquote>
<p><strong>儲存桶進入後還可以在資料夾，檔案就可以分類了。</strong></p>
</blockquote>
<p>到這邊就大功告成啦！如果有興趣如何透過 <strong>Node.js</strong> 接收檔案並上傳到 <strong>S3</strong> 可以接著繼續看，如果沒興趣也可以直接跳到結論囉。</p>
<hr>
<h3 id="Multer"><a href="#Multer" class="headerlink" title="Multer"></a>Multer</h3><p>開始前先介紹筆者的環境。</p>
<ul>
<li><p>node v-v12.16.1</p>
</li>
<li><p>express v-4.16.1</p>
</li>
</ul>
<p>先說說為什麼會用這個套件，因為在 <strong>Express 4.16</strong> 版本以前跟之後讀取 <strong>Form Data</strong> 的方式不太一樣，筆者上網爬文過後發現這個套件可以檢查檔案格式或是限制檔案大小，並且可以方便抓取檔案，所以就入坑了。</p>
<h4 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h4><p>首先必須安裝套件以及上傳圖片至 <strong>S3</strong> 必須使用的套件(關於 <strong>Node</strong> 環境如何建立可以參考我的另篇文章 <a href="https://rexhung0302.github.io/2020/09/14/20200914/">[NodeJS Become A Full Stack Developer] — Express、Router 及 EJS 入門淺談</a>，這邊先預設您已經安裝好且環境都設定好了)。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm i aws-sdk multer --save</span><br></pre></td></tr></table></figure>

<h4 id="抓取上傳檔案"><a href="#抓取上傳檔案" class="headerlink" title="抓取上傳檔案"></a>抓取上傳檔案</h4><p>其實官方教學已經寫得差不多，但這次我把抓取檔案的流程寫在 <strong>Middleware</strong>，一來方便管理，二來乾淨清爽。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201231/middleware.png" alt="中介層"></p>
<p>然後在裡面謝上相關程式碼：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&#x27;multer&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 圖片上傳</span></span><br><span class="line"><span class="keyword">const</span> profileUpload = <span class="title function_">multer</span>(&#123;</span><br><span class="line">  <span class="attr">limit</span>: &#123;</span><br><span class="line">    <span class="comment">// 限制上傳檔案的大小為 1MB</span></span><br><span class="line">    <span class="attr">fileSize</span>: <span class="number">1000000</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">fileFilter</span>(<span class="params">req, file, cb</span>) &#123;</span><br><span class="line">    <span class="comment">// 只接受三種圖片格式</span></span><br><span class="line">    <span class="keyword">if</span> (!file.<span class="property">originalname</span>.<span class="title function_">match</span>(<span class="regexp">/\.(jpg|jpeg|png)$/</span>)) &#123;</span><br><span class="line">      <span class="title function_">cb</span>(<span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">cb</span>(<span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  profileUpload</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><em>引入套件並且檢查檔案大小及格式。</em></p>
</blockquote>
<p>接著在路由加上您的仲介層：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; profileUpload &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../../../middleware/file&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fileController = <span class="built_in">require</span>(<span class="string">&#x27;../../../controllers/file&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fileSchema = <span class="built_in">require</span>(<span class="string">&#x27;./schema&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> apiBasePath = <span class="string">`/file`</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET users listing. */</span></span><br><span class="line">router</span><br><span class="line">  .<span class="title function_">post</span>(<span class="string">`<span class="subst">$&#123;apiBasePath&#125;</span>/upload-file`</span>,  profileUpload.<span class="title function_">single</span>(<span class="string">&#x27;profile_img&#x27;</span>), fileSchema.<span class="property">request</span>.<span class="property">uploadSchema</span>, fileController.<span class="property">upload</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure>

<p>這邊只要使用 <code>profileUpload.single(&#39;File Name or Form Data Key&#39;)</code> 就可以進入剛剛的仲介層然後檢查檔案，如果不想拆這麼細，其實也可以向官方介紹的一樣，寫在一起。</p>
<p>接著只要在想要讀取檔案的地方使用 <code>req.file</code> 就可以拿到相關資訊。</p>
<h4 id="上傳至-S3"><a href="#上傳至-S3" class="headerlink" title="上傳至 S3"></a>上傳至 S3</h4><p>重頭戲就是從 <strong>Node.js</strong> 上傳檔案至 <strong>S3</strong> 啦，先在我們需要上傳檔案的地方引入套件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">AWS</span> = <span class="built_in">require</span>(<span class="string">&#x27;aws-sdk&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把上面新增完 儲存桶(Bucket) 拿到的那個檔案裡面的 Access Key ID 及 Secret Access Key 填上</span></span><br><span class="line"><span class="keyword">const</span> s3 = <span class="keyword">new</span> <span class="variable constant_">AWS</span>.<span class="title function_">S3</span>(&#123;</span><br><span class="line">  <span class="attr">accessKeyId</span>: <span class="string">&#x27;xxx-xxx-xxx-xxx&#x27;</span>,</span><br><span class="line">  <span class="attr">secretAccessKey</span>: <span class="string">&#x27;xxx-xxx-xxx-xxx-xxx&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>然後按照官方的 <strong>API</strong> 文件，繼續下面的程式碼：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> params = &#123;</span><br><span class="line">  <span class="title class_">Bucket</span>: <span class="string">&#x27;test-bucket/user-image&#x27;</span>, <span class="comment">// 相簿位子</span></span><br><span class="line">  <span class="title class_">Key</span>: <span class="string">&#x27;test-1&#x27;</span>, <span class="comment">// 你希望儲存在 S3 上的檔案名稱</span></span><br><span class="line">  <span class="title class_">Body</span>: req.<span class="property">file</span>.<span class="property">buffer</span>, <span class="comment">// 檔案</span></span><br><span class="line">  <span class="attr">ACL</span>: <span class="string">&#x27;public-read&#x27;</span>, <span class="comment">// 檔案權限</span></span><br><span class="line">  <span class="title class_">ContentType</span>: req.<span class="property">file</span>.<span class="property">mimetype</span> <span class="comment">// 副檔名</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">s3.<span class="title function_">upload</span>(params, <span class="keyword">function</span>(<span class="params">err, data</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="variable language_">console</span>.<span class="title function_">log</span>(err, err.<span class="property">stack</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Bucket Created Successfully&#x27;</span>, data.<span class="property">Location</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>請記得關於 <strong>儲存桶(Bucket)</strong> 的資料夾呼叫還有使用方式，都是加上斜線，像上面的範例就是 <code>test-bucket</code> 這個 <strong>儲存桶(Bucket)</strong> 裡面的資料夾 <code>user-image</code>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20201231/success_upload_img.png" alt="上傳成功"></p>
<blockquote>
<p>上傳成功後如果 <code>console.log(data)</code> 可以看見更多資訊，只是 <strong>data.Location</strong> 就是我們要用來預覽的檔案，如果點選網址變成下載，請記得一定要檢查你的副檔名稱是不是正確的(Ex:.jpg|.jpeg|.png)。</p>
</blockquote>
<p>相關上傳、刪除、瀏覽的 API 可以參考 <a href="https://docs.aws.amazon.com/zh_tw/sdk-for-javascript/v2/developer-guide/s3-example-photo-album.html">從瀏覽器上傳相片至 Amazon S3</a>，這邊也有詳盡的介紹。</p>
<h4 id="本地新增刪除儲存桶"><a href="#本地新增刪除儲存桶" class="headerlink" title="本地新增刪除儲存桶"></a>本地新增刪除儲存桶</h4><p>如果您不想要線上建立 <strong>儲存桶(Bucket)</strong> 其實也可以本地建立，有興趣可以參考 <strong><a href="https://stackabuse.com/uploading-files-to-aws-s3-with-node-js/#creatingans3bucket">Uploading Files to AWS S3 with Node.js</a></strong> 的下半篇文章，或是參考官方的 <a href="https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#createBucket-property">API Document</a></p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>會有這篇文章的起因為筆者目前正在實踐開始寫程式兩年自己的目標計畫，完成前後端電商的 <strong>Side Project</strong>，但由於剛好親朋好友有個需求可以寫成 <strong>Side Project</strong> 就改成寫預約系統了，這次剛好有使用者上傳大頭貼的部分，就研究了一直聽同事在說的 <strong>S3</strong>(為什麼沒挑 <strong>GCP</strong> 呢，因為聽說 <strong>GCP</strong> 比較貴)。</p>
<p>而同事也有跟我說其實放專案本機即可，但秉持著<strong>碰到就研究是最好的學習</strong>，所以就一頭栽進去啦，其實整個過程挺好玩的，並沒有想像中複雜。</p>
<p>其實在寫這篇文章的時候已經 2021&#x2F;1&#x2F;1 了，但還是想說說這一年來的簡短感想，除了中途迷惘過一陣子，這段時間程式帶給我的不止是成就感也有更多的快樂，我想只要是工程師就面臨不了工作及生活上的分配以及取捨，我想這還是工程師要面臨最大的難題，所以筆者認為適時的補充知識(任何方面)及學習是不可或缺的，但當工作及學習已經融入你的生活當中，可能還是不太好的(<del>筆者得想法，請不要砲我</del>)，在 2020 我相信大家都深深的體會到時間多麽珍貴，以及珍惜的重要，有的時候放下你身邊的工作及忙碌的事情，好好的陪伴家人、朋友，有些東西失去了、沒了，就再也回不去了。</p>
<p>講起來好像滿感傷的，其實筆者這一年過的還是很開心，要謝的人很多很多，<strong>親人、愛人、朋友、上司、老闆</strong> 還有 <strong>家裡那兩條狗</strong>，願我們不止 2021 還有以後的每一年都會越來越好、越來越棒！</p>
<p>也再次謝謝已在程式碼打混多年的各位前輩們，還有剛接觸不久的你們，不管是哪一點也好，對這個世界以及人們都繼續推使他們更便利更進步，我想這也是我喜歡這個行業的原因之一，我想幫助更多的人，讓自己是付出的一端。</p>
<p><strong>揮別 2020 歡迎 2021。</strong></p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><p>AWS - <a href="https://docs.aws.amazon.com/zh_tw/sdk-for-javascript/v2/developer-guide/s3-example-photo-album.html">從瀏覽器上傳相片至 Amazon S3</a></p>
</li>
<li><p><a href="https://twitter.com/JanithKasun">Janith Kasun</a> — <a href="https://stackabuse.com/uploading-files-to-aws-s3-with-node-js/#creatingans3bucket">Uploading Files to AWS S3 with Node.js</a></p>
</li>
<li><p>Mike Huang — <a href="https://medium.com/%E9%BA%A5%E5%85%8B%E7%9A%84%E5%8D%8A%E8%B7%AF%E5%87%BA%E5%AE%B6%E7%AD%86%E8%A8%98/%E7%AD%86%E8%A8%98-%E4%BD%BF%E7%94%A8-multer-%E5%AF%A6%E4%BD%9C%E5%A4%A7%E9%A0%AD%E8%B2%BC%E4%B8%8A%E5%82%B3-ee5bf1683113">[筆記] 使用 Multer 實作大頭貼上傳(Part 1)</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>Third Party Service</category>
        <category>AWS</category>
        <category>S3</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Third party service</tag>
        <tag>AWS</tag>
        <tag>S3</tag>
      </tags>
  </entry>
  <entry>
    <title>[Third party service Note] - Vue + Node.js + Nginx + MySQL5.7, 第一次使用 VPS(Linode, DigitalOcean) 就可能會碰到的問題之如何簡單上手</title>
    <url>/2021/01/04/20210104/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p><img src="/images/others/loading.gif" data-original="/images/20210104/logo.png" alt="Linode"></p>
<p>先說這篇文章僅用於筆記，如果您剛好、恰巧有專案是 <strong>前端 VUE 後端 NODE</strong> 想佈上虛擬主機上，不管是給客戶看還是自己當作品用，都可以接著往下看，亦或許您會在文章中圖找到一樣的問題，還有我怎麼蹶誒的。</p>
<span id="more"></span>

<p>這邊也不會去探討哪台虛擬主機比較好，但我會跟你說說為什麼我從 <strong>DigitalOcean</strong> 跳到 <strong>Linode</strong> 使用。</p>
<hr>
<h3 id="當程式完成後的下一步"><a href="#當程式完成後的下一步" class="headerlink" title="當程式完成後的下一步"></a>當程式完成後的下一步</h3><p><img src="/images/others/loading.gif" data-original="/images/20210104/banner.png" alt="滿滿程式碼"></p>
<p>相信不管你學什麼前端，什麼後端，寫完程式碼後，下一步就是想要想辦法把作品呈現出來，雖然我們平常可以使用 GitHub+Heroku 其實就可以簡單呈現一個小作品，但缺點是 Heroku 太久沒動靜，需要一點時間喚醒，加上免費專案只能有五個。</p>
<p>基於上面的問題加上筆者最近剛好在幫家人做 <strong>Side Project</strong> 預約系統，目前已經到了完成一個小階段，需要呈現給家人看，最後決定使用虛擬主機來放置我的專案。</p>
<p>考量到以後可能還會有其他 <strong>Side Project</strong> 所以就挑選了便宜的主機來用。</p>
<blockquote>
<p><em>然後就開始採坑之旅了。</em></p>
</blockquote>
<hr>
<h3 id="主機筆者怎麼挑"><a href="#主機筆者怎麼挑" class="headerlink" title="主機筆者怎麼挑"></a>主機筆者怎麼挑</h3><p>因為本篇文章不是深入討論主機問題，所以筆者第一次挑選主機就是從 <strong>便宜、便宜、很便宜</strong> 這三個條件下去選擇，同事立馬推薦我 <strong><a href="https://www.digitalocean.com/">DigitalOcean</a></strong>，<strong>一個月最低五美金的方案</strong>筆者覺得還行，沒有多想就開下去了。</p>
<p>因為後端使用 <strong>Node.js</strong> 加上開發是用 <strong>MacOS</strong>，所以筆者挑 <strong>CentOS 7.6</strong>(不挑8是因為同事認為 7 比較穩定，加上工作環境也都是用 7 碰到問題容易解決)，而剛開始建立完機器虛擬主機會給你一個 <strong>IP Addresses</strong>，正常來說會是 <strong>IPv4</strong>。</p>
<blockquote>
<p><em>想知道 <strong>IPv4</strong> 和 <strong>IPv6</strong> 有什麼不同可以<a href="https://www.ithome.com.tw/tech/92046">點我</a> 查看 <strong>認識IPv4與IPv6的差異</strong></em></p>
</blockquote>
<p>順帶一提，通常在建立過程中，會讓你選擇之後登入主機需要使用密碼或是 <strong>SSH</strong>，筆者建議兩個都填比較安全；簡單講解一下前者就字面上的意思，使用密碼登入，而 <strong>SSH</strong> 則是會有一組 <strong>id_rsa</strong> 跟 <strong>id_rsa.pub</strong>，這兩組 <strong>Key</strong> 可以用來識別你的身份，進而達到免密碼登入。</p>
<blockquote>
<p><em>想知道 <strong>SSH</strong> 怎麼建立嗎？點我 查看 <a href="https://xenby.com/b/220-%E6%95%99%E5%AD%B8-%E7%94%A2%E7%94%9Fssh-key%E4%B8%A6%E4%B8%94%E9%80%8F%E9%81%8Ekey%E9%80%B2%E8%A1%8C%E5%85%8D%E5%AF%86%E7%A2%BC%E7%99%BB%E5%85%A5">[教學] 產生SSH Key並且透過KEY進行免密碼登入</a></em></p>
</blockquote>
<hr>
<h3 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h3><p>上面筆者偷懶認為大概大家會看到文章 <strong>87%</strong> 已經知道怎麼做了，這邊在簡單提一下該準備什麼東西。</p>
<ul>
<li><p>一組網域(推薦 <a href="https://dcc.godaddy.com/">GoDaddy</a> 註冊)</p>
</li>
<li><p>一顆炙熱的寫 Code 心</p>
</li>
</ul>
<p>為什麼要準備網域呢，待會這邊會用一張圖解釋一下，總之您可以先挑一個順眼的名稱註冊網域。</p>
<hr>
<h3 id="安裝環境"><a href="#安裝環境" class="headerlink" title="安裝環境"></a>安裝環境</h3><p>筆者再度簡單列出這次需要安裝的環境。</p>
<blockquote>
<p><strong>注意！因為每個人需要的不一樣，該裝的東西可能也會有些許差異，請自行斟酌。</strong></p>
</blockquote>
<p>請先進入到您自己得主機，通常會在終端機上輸入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 使用密碼登入</span><br><span class="line">$ ssh root@xxx.xxx.xx.xx</span><br><span class="line"></span><br><span class="line">// 使用 ssh 登入</span><br><span class="line">$ ssh -i ~/.ssh/id_rsa root@xxx.xxx.xx.xx</span><br></pre></td></tr></table></figure>

<blockquote>
<p><em>xxx.xxx.xx.xx 為您的主機 <strong>IPv4</strong> 位置，而使用 <strong>ssh</strong> 需要您自己指定到您的 <strong>ssh</strong> 檔案位置。</em></p>
</blockquote>
<h4 id="設定時區"><a href="#設定時區" class="headerlink" title="設定時區"></a>設定時區</h4><p>登入成功後，第一個需要做的不是安裝，是檢查自己的時區，因為錯誤的時區可能照成您的<strong>排程錯誤</strong>、<strong>資料庫資料時間錯誤</strong>…等等。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ date</span><br></pre></td></tr></table></figure>

<p>這時候如果出現時間錯誤，可以改為自己得時區：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 設定為亞洲台北</span><br><span class="line">$ sudo timedatectl set-timezone Asia/Taipei</span><br></pre></td></tr></table></figure>

<p>如何查看時區可以輸入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ timedatectl list-timezones</span><br></pre></td></tr></table></figure>

<p>設定結束後記得再次輸入 <code>date</code> 查看時間對不對。</p>
<h4 id="安裝-EPEL"><a href="#安裝-EPEL" class="headerlink" title="安裝 EPEL"></a>安裝 EPEL</h4><p>有許多套件只有 <strong>EPEL</strong> 中才有，所以這邊我們需要先安裝：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo yum install epel-release</span><br></pre></td></tr></table></figure>

<h4 id="更新套件"><a href="#更新套件" class="headerlink" title="更新套件"></a>更新套件</h4><p>安裝結束後我們需要更新一下我們所有的套件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo yum upgrade</span><br></pre></td></tr></table></figure>

<h4 id="安裝-Nginx"><a href="#安裝-Nginx" class="headerlink" title="安裝 Nginx"></a>安裝 Nginx</h4><p>這邊要講解為什麼要安裝 <strong>Nginx</strong>，但不會深入討論，有興趣可以參考 <a href="https://kknews.cc/zh-tw/code/avkxqnx.html">淺談Nginx之反向代理</a> 中介紹反向代理，亦或是 <a href="https://kknews.cc/zh-tw/code/oeaerko.html">深度詳解Nginx正向代理與反向代理？</a>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210104/dns.png" alt="DNS"></p>
<p>先看看上方這張圖，通常我們會在網路輸入一串網址，比如 <strong>fonts.google.com</strong> 或 <strong>translate.google.com</strong>，通常我們一個網域可能會有好幾個需要呈現的不同專案，就可以使用 <strong>主網域</strong> 及 <strong>子網域</strong> 來實現，很清楚我們可以看到 google 就是主網域，<strong>fonts</strong> 及 <strong>translate</strong> 就是子網域。</p>
<p>但你會想，一台主機一個 <strong>IPv4</strong> 會對應到一個子網域，那我是不是一個專案只能放一台機器呢？</p>
<p>其實我們靠 <strong>Nginx</strong> 就可以達到，輸入一串網址，網址子網域都對到同一個 <strong>IPv4</strong>，然後再依靠 <strong>Nginx</strong> 去找尋對應網域名稱的專案。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210104/how_nginx_work.png" alt="DNS"></p>
<p>找到對應專案的設定欓，會把設定檔裡面的 <strong>root</strong> 路徑的檔案顯示出來，這樣就能達成輸入什麼網址會顯示什麼內容出來了。</p>
<p>知道後廢話不多說我們開始安裝，使用 yum 裝 Nginx：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo yum install nginx</span><br></pre></td></tr></table></figure>

<p>啟動 <strong>Nginx</strong> 服務：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl start nginx</span><br></pre></td></tr></table></figure>

<p>接著檢查 <strong>nginx</strong> 是否正常：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl status nginx</span><br></pre></td></tr></table></figure>

<p>然後很重要記得，永久啟用 <strong>Nginx</strong> 服務，重新開機後可自動啟動：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl enable nginx</span><br></pre></td></tr></table></figure>

<p>這時候進入網頁輸入 <strong>IPv4</strong> 或是已經掛載上 <strong>Godady</strong> 的網域，應該就可以看到。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210104/nginx_default.png" alt="Nginx 預設頁面"></p>
<blockquote>
<p><em>PS: 如果進入網頁看到類似下面的網頁 <strong>無法連上這個網站</strong> 的話，有三種情況，第一個是有可能是你的防火牆沒打開，請記得打開防火牆，第二個是需要修改 <code>/etc/firewalld/firewalld.conf</code> 文件，最後則是需要輸入 <code>sudo firewall-cmd --permanent --add-service=https</code> 可能你沒開啟 <strong>https</strong> 服務</em></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20210104/cant_content_website.png" alt="無法連上這個網站"></p>
<p>第一種情況解決方式，輸入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo firewall-cmd --add-service=dns --permanent</span><br><span class="line"></span><br><span class="line">$ sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<p>之後就能成功了！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210104/firewall_open.png" alt="打開防火牆"></p>
<p>第二種情況解決放是，輸入 <code>systemctl status firewalld</code> 查看有無報錯，如果有問題會出現下圖情況：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210104/allowZoneDriftingErr.png" alt="防火牆出錯"></p>
<p>這種情形請輸入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vi /etc/firewalld/firewalld.conf</span><br><span class="line"></span><br><span class="line">// 在命令模式(不是輸入的時候，點擊ESC退出輸入模式)輸入 /AllowZoneDrifting 搜索</span><br><span class="line">// 接著將 AllowZoneDrifting=yes 改為 AllowZoneDrifting=no</span><br></pre></td></tr></table></figure>

<p>然後輸入 <code>systemctl restart firewalld</code> 重啟防火牆，接著在輸入 <code>systemctl status firewalld</code> 查看還有無錯誤訊息，沒有就是排解了！</p>
<p>第三種也是最後一種情況可能是你的 <strong>https</strong> 沒有開啟，先輸入 <code>sudo firewall-cmd --list-service</code> 檢查你開了哪些服務，如果只出現 <code>dhcpv6-client http ssh</code>，那就是你的 <strong>https</strong> 沒有開，裡面缺什麼就是什麼沒開，解決方式就是輸入 <code>sudo firewall-cmd --zone=public --permanent --add-service=https</code> 如果 <strong>http</strong> 沒有就是修改最後的 <strong>service</strong>，例如 <code>sudo firewall-cmd --zone=public --permanent --add-service=http</code> 這樣，輸入完記得重啟 <code>sudo firewall-cmd --reload</code> 緊接著再輸入一次 <code>sudo firewall-cmd --list-service</code> 查看是否有加入這項服務了！</p>
<h4 id="安裝-Git"><a href="#安裝-Git" class="headerlink" title="安裝 Git"></a>安裝 Git</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ yum install git</span><br></pre></td></tr></table></figure>

<p>先查看版本號，確認是否安裝成功：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git --version</span><br></pre></td></tr></table></figure>

<p>接著安裝結束後記得設定你的 <strong>git config</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name 你的名字</span><br><span class="line">$ git config --global user.email 你的信箱</span><br></pre></td></tr></table></figure>

<p>接著輸入 <code>git config --list</code> 查看是否設定成功，之後就成功安裝了。</p>
<h4 id="安裝-Node"><a href="#安裝-Node" class="headerlink" title="安裝 Node"></a>安裝 Node</h4><p>因為我們必須使用到 <strong>Node.js</strong> 以及 <strong>Npm</strong> 或 <strong>Yarn</strong> 功能，所以必須先安裝 <strong>Node</strong>，但由於筆者喜歡將機器上的版本改為跟本地一樣，所以我們這邊需要先安裝 <strong>nvm</strong>，可以當他是 <strong>Node</strong> 的版本管理器。</p>
<p>由於這邊我們會使用到 <strong>wget</strong> 區抓取套件，所以我們先安裝：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install wget</span><br></pre></td></tr></table></figure>

<p>接著輸入以下指令安裝：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.1/install.sh | bash</span><br></pre></td></tr></table></figure>

<p>然後記得登出在登入！接著輸入 <code>nvm --version</code> 就會拿到目前得版號。</p>
<p>緊接著安裝 <strong>Node</strong>，可以使用 <code>nvm ls-remote</code> 可以查看所有可以提供安裝的版本，挑選你喜歡或熟悉的版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nvm install v12.16.1</span><br></pre></td></tr></table></figure>

<p>安裝完成後輸入 <code>node -v</code> 查看是否安裝完成。</p>
<h4 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h4><p>因為有些人比較習慣使用 <strong>Yarn</strong>，這邊簡單說說怎麼安裝，有些教學會請您輸入 <code>sudo yum install yarn</code> 但會顯示沒有這個 <strong>package</strong>，所以這邊我們使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 請注意一定要 -g</span><br><span class="line">$ npm install yarn -g</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="設定-Nginx"><a href="#設定-Nginx" class="headerlink" title="設定 Nginx"></a>設定 Nginx</h3><p>這邊略過 <strong>clone</strong> 專案下來的過程，但還是筆記一下通常筆者會把專案放置在 <code>/var/www/</code> 下面。</p>
<p>如果你是自己安裝 <strong>Nginx</strong>，會發現沒有 <strong>default.config</strong> 這個檔案，因為我們接下來的每一個專案都會有一個 ***.conf** 去引導使用者在瀏覽網頁時，主機會去拿哪一個專案丟給使用者看，如我沒有的話，也沒關係，使用下面我的範例建立一個，在自己去更改專案路徑即可。</p>
<p>在創建之前，你可以先使用 <code>vi /etc/nginx/nginx.conf</code> 去查看立面是否有顯示 <code>include /etc/nginx/conf.d/*.conf</code> 沒有可以自己加上去，基本上之後設定檔不是放在這個地方，就是放在 <code>/etc/nginx/sites-available/</code> 或是 <code>/etc/nginx/sites-enabled/</code> 都可以。</p>
<blockquote>
<p><em>加上 <code>vi /etc/nginx/nginx.conf</code> 是為了能讓你專案的設定欓被吃到，不然還是會找不到你專案的位子。</em></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20210104/nginx_config.png" alt="include"></p>
<p>檢查完確定 <strong>nginx</strong> 的設定欓就可以開始動手建立自己專案的設定欓了(記得通常是一個專案一個設定欓)。</p>
<p>範例程式碼可以複製這邊，或是上 <a href="https://www.digitalocean.com/community/tools/nginx">Digitalocean NGINXConfig</a> 試著配置出一份，通常都大同小異，只是內部有一些細微更改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen   443 http2 ssl; ## listen for ipv4; this line is default and implied</span><br><span class="line">    #listen   [::]:80 default ipv6only=on; ## listen for ipv6</span><br><span class="line">    # Make site accessible from http://localhost/</span><br><span class="line">    server_name frontend.abc.com; # 前面說的對應的網域就是設定在這</span><br><span class="line"></span><br><span class="line">    root /var/www/frontend/dist; # 你要渲染出來檔案的位子，這邊是 Vue 所以吃 dist</span><br><span class="line">    index index.php index.html index.htm; # 這邊會去抓結尾符合的檔案</span><br><span class="line"></span><br><span class="line">    # ssl_certificate ＃等等補上; </span><br><span class="line">    # ssl_certificate_key ＃等等補上;</span><br><span class="line"></span><br><span class="line">    # Disable sendfile as per https://docs.vagrantup.com/v2/synced-folders/virtualbox.html</span><br><span class="line">    sendfile on;</span><br><span class="line">    client_max_body_size 10M;</span><br><span class="line"></span><br><span class="line">    error_log /var/log/nginx/error.log;</span><br><span class="line">    access_log /var/log/nginx/access.log;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        # proxy_pass http://127.0.0.1:1337; # 後端專案才需要使用，改為自己對應的 Port</span><br><span class="line">        # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 後端專案才需要使用</span><br><span class="line">        try_files $uri $uri/ /index.html; # Vue 如果使用 History 模式請一定要加這行</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 404 /404.html;</span><br><span class="line">    location = /404.html &#123;</span><br><span class="line">        root /var/www/errors;</span><br><span class="line">        internal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # pass the PHP scripts to FastCGI server listening on socket</span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        try_files $uri =404;</span><br><span class="line">        fastcgi_split_path_info ^(.+\.php)(/.+)$;</span><br><span class="line">        # fastcgi_pass unix:/var/run/php-fpm.sock;</span><br><span class="line">        fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">        fastcgi_param SCRIPT_NAME $fastcgi_script_name;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~* \.(jpg|jpeg|gif|png|css|js|ico|webp|tiff|ttf|svg)$ &#123;</span><br><span class="line">        expires           5d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # deny access to . files, for security</span><br><span class="line">    #</span><br><span class="line">    location ~ /\. &#123;</span><br><span class="line">        log_not_found off;</span><br><span class="line">        deny all;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ^~ /.well-known &#123;</span><br><span class="line">        allow all;</span><br><span class="line">        auth_basic off;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>這邊很重要！如果你是使用 <strong>Vue History</strong> 模式，請一定要在 <strong><code>location / &#123;</code></strong> 那邊裡面加上 <strong><code>try_files $uri $uri/ /index.html;</code></strong> 不然你會發現怎麼切換路由就會出錯了。</strong></p>
</blockquote>
<p>接著很重要，檢查 <strong>Nginx</strong> 是否正常：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl status nginx</span><br></pre></td></tr></table></figure>

<p>如果一切正常請重啟 <strong>Nginx</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl restart nginx</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="設定-SSL"><a href="#設定-SSL" class="headerlink" title="設定 SSL"></a>設定 SSL</h3><p>到這邊大致完成了，揭著我們必須讓我們的網址可以吃 <strong>443</strong>，也就是 <strong>https</strong>，有興趣可以參考 <a href="https://tw.alphacamp.co/blog/http-https-difference">一文搞懂 HTTP 和 HTTPS 是什麼？兩者有什麼差別</a>，簡單說最明顯的就是如果網站不是 <strong>443(https)</strong> 頁面左上角就會出現不安全。</p>
<p>而通常 <strong>SSL</strong> 是需要用買的，但這邊我們要當個免費仔(放心不是破解)，而免費缺點是三個月需要更新一次，但別擔心各路大神都幫我們想好了怎麼自動更新憑證。</p>
<p>由於我們是 <strong>CentOS 7</strong> 所以輸入下列程式碼安裝：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ yum install certbot</span><br></pre></td></tr></table></figure>

<p>然後我們需要產生 <strong>SSL</strong> 憑證：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ yum install python-certbot-nginx</span><br><span class="line">$ certbot --nginx</span><br></pre></td></tr></table></figure>

<p>通常如果您已經有設定 <strong>Nginx</strong> 的 <strong>Config</strong>，他會自動問您是否要選擇那一個網域，選擇後會幫您建立一個 <strong>SSL</strong> 憑證，而且 <strong>config</strong> 裡面也會自動幫您更新。</p>
<p>成功產生出來會出現以下的文字提示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Congratulations! You have successfully enabled &quot;憑證網址&quot;</span><br></pre></td></tr></table></figure>

<p>為了不讓明證過期，我們可以輸入 <code>vi /etc/crontab</code> 去修改這隻檔案，然後在裡面空白處輸入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># let&#x27;s encrypt</span><br><span class="line">0 */8 * * * root python -c &#x27;import random; import time; time.sleep(random.random() * 3600)&#x27; &amp;&amp; certbot renew &gt; /tmp/cert-bot_renew.log</span><br></pre></td></tr></table></figure>

<p>然後輸入 <code>service crond restart</code>，這樣就會 <strong>每天檢查三次(00:00 08:00 16:00)</strong>。</p>
<h4 id="建立-SSL-之前必需要做的事情"><a href="#建立-SSL-之前必需要做的事情" class="headerlink" title="建立 SSL 之前必需要做的事情"></a>建立 SSL 之前必需要做的事情</h4><p>因為我們輸入下列其中一個指令時，網址會檢查是否有對應到，所以必須先去 <strong>Godaddy</strong> 或是您買網域的地方，去把 <strong>DNS</strong> 設定好，這樣才能檢查通過，不然可是會失敗。</p>
<ol>
<li><p>certbot -&gt; 產生憑證(需要輸入資訊) </p>
</li>
<li><p>certbot –nginx (如果有 config 可以快速建立並且更新)</p>
</li>
</ol>
<hr>
<h3 id="安裝資料庫"><a href="#安裝資料庫" class="headerlink" title="安裝資料庫"></a>安裝資料庫</h3><p>如果你已經有在其他服務申請資料庫，這個步驟可以跳過，但如果你跟筆者一樣安裝在虛擬主機上，就可以照著以下步驟走。</p>
<p>首先確定你要安裝 <strong>MySQL 5.7</strong> 還是 <strong>MySQL 8.0</strong> 兩者差別可以參考 <strong><a href="https://www.ithome.com.tw/news/122581">MySQL 8.0正式版來了! 高負載讀寫效能是5.7版的2倍</a></strong>，這邊不過多討論。</p>
<ul>
<li>首先我們需要用到 <strong>yum-utils</strong> 套件，下面會用到 <strong>yum-config-manager</strong> 指令：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo yum install yum-utils -y</span><br></pre></td></tr></table></figure>

<ul>
<li>下載安裝相關套件：</li>
</ul>
<p>接著安裝套件，通常看到的教學文章會安裝指定版本號套件，下面這個會將幾個版本的套件包含進去</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo yum localinstall https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm -y</span><br></pre></td></tr></table></figure>

<ul>
<li>啟用要安裝的 <strong>MySQL 5.7</strong> 源：</li>
</ul>
<p>因為接下來我們需要安裝 <strong>5.7</strong> 版本，先將剛剛包含幾個本版進去的套件 <strong>MySQL 8.0</strong> 關閉，並啟用 <strong>5.7</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo yum-config-manager --disable mysql80-community</span><br><span class="line">$ sudo yum-config-manager --enable mysql57-community</span><br></pre></td></tr></table></figure>

<ul>
<li>檢查 <strong>MySQL Yum</strong> 源是否為 <strong>5.7</strong> 版本：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo yum repolist enabled | grep &quot;mysql.*-community.*&quot;</span><br><span class="line">// mysql-connectors-community/x86_64       MySQL Connectors Community           118</span><br><span class="line">// mysql-tools-community/x86_64            MySQL Tools Community                 95</span><br><span class="line">// mysql57-community/x86_64                MySQL 5.7 Community Server           364</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果是需要安裝 <strong>8.0</strong> 最後一個會看到 <strong>MySQL 8.0 Community Server</strong>。</p>
</blockquote>
<ul>
<li>安裝 <strong>MySQL</strong>，並啟用 <strong>MySQL</strong> 服務，然後加上每次重開機會啟動的設定，在檢查啟動狀態：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 安裝</span><br><span class="line">$ sudo yum install mysql-community-server -y</span><br><span class="line">// 啟用</span><br><span class="line">$ sudo systemctl start mysqld</span><br><span class="line">// 讓每次開機 MySQL 服務會自動被啟動</span><br><span class="line">$ sudo systemctl enable mysqld</span><br><span class="line">// 檢查啟動狀態</span><br><span class="line">$ sudo systemctl status mysqld</span><br><span class="line">// mysqld.service - MySQL Server</span><br><span class="line">//   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled)</span><br><span class="line">//   Active: active (running) since Tue 2019-09-10 20:37:18 CST; 48s ago</span><br><span class="line">//     Docs: man:mysqld(8)</span><br><span class="line">//           http://...略//</span><br><span class="line">// Main PID: 1825 (mysqld)</span><br><span class="line">//   CGroup: /system.slice/mysqld.service</span><br><span class="line">//           1825 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysql...</span><br><span class="line">//</span><br><span class="line">// Jan 04 22:30:33 centos7-cli.lab.example.com systemd[1]: Starting MySQL Server...</span><br><span class="line">// Jan 04 22:30:36 centos7-cli.lab.example.com systemd[1]: Started MySQL Server.</span><br></pre></td></tr></table></figure>

<ul>
<li>安裝完成後，現在的密碼會是一組暫時密碼，所以我們必須要更改成自己會記得的密碼，先輸入下列程式碼拿取暫時密碼，<strong>請記得要截圖留存下來，或是把最後那串密碼複製存下來，等等馬上會用到</strong>：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br><span class="line">2021-01-04T14:08:05.129641Z 1 [Note] A temporary password is generated for root@localhost: +ew=SLsfd1#H</span><br></pre></td></tr></table></figure>

<ul>
<li>更改密碼並且填寫相關設定：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo mysql_secure_installation</span><br><span class="line"></span><br><span class="line">// Securing the MySQL server deployment.</span><br><span class="line"></span><br><span class="line">// Enter password for user root: 這邊請輸入剛剛拿到的臨時密碼</span><br><span class="line"></span><br><span class="line">// The existing password for the user account root has expired. Please set a new password.</span><br><span class="line"></span><br><span class="line">// New password: 請輸入新密碼</span><br><span class="line"></span><br><span class="line">// Re-enter new password: 請再次輸入新密碼</span><br><span class="line">// The &#x27;validate_password&#x27; plugin is installed on the server.</span><br><span class="line">// The subsequent steps will run with the existing configuration</span><br><span class="line">// of the plugin.</span><br><span class="line">// Using existing password for root.</span><br><span class="line"></span><br><span class="line">//...下略</span><br></pre></td></tr></table></figure>

<blockquote>
<p><em>請注意： 密碼必須包含一個大寫字母、一個小寫字母、一個數字和一個特殊符號，長度至少為 8 個字元</em></p>
</blockquote>
<p>基本上後面開始都是一些問題，像是 <strong>是否移除 anonymous 匿名者帳號、禁止 root 從非本機登入、移除測試資料庫</strong>…等等，基本上全都填寫 <strong>Y(同意&#x2F;確定)</strong>。</p>
<ul>
<li>查看版本：</li>
</ul>
<p>這時候輸入指令查看是否安裝完成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo mysqld -V</span><br><span class="line">mysqld  Ver 5.7.32 for Linux on x86_64 (MySQL Community Server (GPL))</span><br></pre></td></tr></table></figure>

<ul>
<li>開啟 <strong>3306</strong> 防火牆</li>
</ul>
<p>資料庫預設都是吃 <strong>3306port</strong> 的，如果不打開會出現 <strong>Connection Refused</strong>，然後我們要設定一組可以遠端從其他地方登入的帳號，我們總不能每次都連上主機再去連進資料庫吧。</p>
<p>先查看防火牆是否開啟：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ firewall-cmd --query-port=3306/tcp</span><br><span class="line">// No 代表沒開啟</span><br></pre></td></tr></table></figure>

<p>開啟防火牆：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br></pre></td></tr></table></figure>

<p>如果要關閉可以輸入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ firewall-cmd --zone=public --remove-port=3306/tcp --permanent</span><br></pre></td></tr></table></figure>

<p>重新啟動防火牆：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<ul>
<li>登入資料庫：</li>
</ul>
<p>接著我們要去新增可以任意登入的用戶，我們先登入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mysql -u root -h localhost -p</span><br><span class="line">// Enter password: 接著輸入密碼</span><br></pre></td></tr></table></figure>

<p>然後新增可以遠端登入的帳號：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; grant all privileges on *.* to &#x27;使用者名稱&#x27;@&#x27;IP位置&#x27; identified by&#x27;要登入的密碼&#x27;;</span><br></pre></td></tr></table></figure>

<p>&#x2F;&#x2F; 如果想要任何地方都可以連線請在IP位置輸入 % 範例如下：<br><code>mysql&gt; grant all privileges on *.* to &#39;root&#39;@&#39;%&#39; identified by&#39;abc&#39;;</code></p>
<blockquote>
<p><em>上面 <em>.</em> 為權限，這個意思是可以訪問所有的資料庫及資料表。</em></p>
</blockquote>
<p>這樣就新增成功了，之後在任何地方都可以使用 <strong>root</strong> 登入。</p>
<p>使修改重新生效：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure>

<ul>
<li>試看看遠端連線吧！</li>
</ul>
<hr>
<h3 id="額外小坑"><a href="#額外小坑" class="headerlink" title="額外小坑"></a>額外小坑</h3><h4 id="出現-“permissions-are-too-open”-的錯誤"><a href="#出現-“permissions-are-too-open”-的錯誤" class="headerlink" title="出現 “permissions are too open” 的錯誤"></a>出現 “permissions are too open” 的錯誤</h4><p>這是您的 <strong>SSH</strong> 的權限問題，只需要輸入 <code>chmod 400 ~/.ssh/id_rsa</code> 或 <code>chmod 600 ~/.ssh/id_rsa</code> 即可解決</p>
<h4 id="VUE-的-Router-導致頁面出現-404"><a href="#VUE-的-Router-導致頁面出現-404" class="headerlink" title="VUE 的 Router 導致頁面出現 404"></a>VUE 的 Router 導致頁面出現 404</h4><p>由於我們在 Nginx 已經設定好路由就是吃到 <code>/var/www/frontend/dist</code> 的 <strong>index</strong>，如果被路由轉導後，可能會變成 <code>https://xxx.xxx/index/dashboard/edit/1</code> 之類的網址，這時候就會找不到對應該渲染的畫面。</p>
<p>解決方式其實很簡單，只需要在 Nginx 的設定欓修改一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 找到 location 並在裡面加上 try_files 這行即可</span><br><span class="line">location / &#123;</span><br><span class="line">  try_files $uri $uri/ /index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="頁面出現-502-Bad-Gateway"><a href="#頁面出現-502-Bad-Gateway" class="headerlink" title="頁面出現 502 Bad Gateway"></a>頁面出現 502 Bad Gateway</h4><p>查看 <strong>Nginx</strong> 的 <strong>Error config</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 詳細位置可先查看</span><br><span class="line">$ vi /etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line">// 接著找到 err 的位子</span><br><span class="line">$ vi /var/log/nginx/error.log</span><br></pre></td></tr></table></figure>

<p>裡面如果出現了 <strong>(13: Permission denied)</strong> 的關鍵字，代表你的那個專案的 Nginx 設定檔指定的 <strong>Port</strong> 是權限不足的。</p>
<p>這時候輸入 <code>semanage port --list</code> 找尋 <strong>http_port_t</strong> 可以看到後面有一串 port 號，如果沒有你的就代表需要自己新增上去。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ semanage port --add --type http_port_t --proto tcp &quot;你要新增的 Port 號&quot;</span><br></pre></td></tr></table></figure>

<p>然後再次輸入剛剛的 <code>semanage port --list</code> 就會看見了！</p>
<h4 id="Vue-Build-出現錯誤"><a href="#Vue-Build-出現錯誤" class="headerlink" title="Vue Build 出現錯誤"></a>Vue Build 出現錯誤</h4><p>如果在使用 <code>npm build</code> 或 <code>yarn build</code> 的時候出現類似下圖錯誤：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210104/node_err.png" alt="Node 錯誤"></p>
<p>代表你的 <strong>Node</strong> 版本有問題，筆者發生這問題是因為自己的 <strong>Node</strong> 版本太新了，舊的某些套件不支援，所以必須要改變版本或是更新套件，筆者安裝和自己本地一樣的舊版本就解決了。</p>
<p>如果使用 <strong>nvm</strong> 的話，可以先使用 <strong>Node -v</strong> 查看自己本地的版本，然後再使用 <strong>nvm ls-remote</strong> 查看可安裝版本，接著使用 <strong>nvm install 版本號</strong> 安裝指定版本，最後可以使用 <strong>nvm ls</strong> 查看目前可使用的版本！</p>
<p>使用 <strong>nvm</strong> 安裝得好處就不多說了，主要可以想成就是拿來管理 <strong>Node</strong> 版本的管理工具，推薦安裝一下。</p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>沒想到 <strong>2021</strong> 第一篇文章竟然是先記錄環境設定的筆記，其實原本打算先寫一篇完成全端後的心得文，也算是完成自己寫程式兩年的期許，完成電商的小里程碑。</p>
<p>雖然嘴裡常常在寫不出程式碼時不時的咒罵，但其實親身體會一次才是最好的學習，並且會有滿滿德成就感。</p>
<p>最後要說說，上面有提到為什麼後來改用 <strong>Linode</strong> 了，因為筆者在 DigitalOcean 第一次更改環境時，最後輸入了 <strong>Reboot</strong> 想重啟機器，但關掉之後就再也連不進去，連 <strong>Console</strong> 也不行，最後整個砍掉重新在建立一次。</p>
<p>就在今天弄了一天之後筆者在安裝 Mysql 的過程卡住了，索性關閉機器，再度重啟時，又出現了下面這張圖，網站的 <strong>Console</strong> 也不能開啟，一氣之下就改用其他家主機了。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210104/DigitalOcean_connect_err.png" alt="怎麼也連不上了"></p>
<p>這邊真的要再度感謝幫助我的各路大神，沒有你們我沒辦法走這麼遠，謝謝你們！</p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><p>蔡宗融個人網站 - <a href="https://www.ichiayi.com/wiki/tech/ssl_letsencrypt">https://www.ichiayi.com/wiki/tech/ssl_letsencrypt</a></p>
</li>
<li><p>GTW — <a href="https://blog.gtwang.org/linux/linode-centos-7-nginx-mysql-mariadb-php-7-installation-notes/">CentOS 7 安裝 Nginx、MySQL&#x2F;MariaDB、PHP7，架設 LEMP 網頁伺服器筆記</a></p>
</li>
<li><p>Stack Overflow — <a href="https://stackoverflow.com/questions/9270734/ssh-permissions-are-too-open-error">ssh “permissions are too open” error</a></p>
</li>
<li><p>Stack Overflow — <a href="https://stackoverflow.com/questions/52471007/how-to-handle-404-error-request-in-vuejs-spa-with-nginx-server">How to handle 404 error request in vuejs SPA with nginx server
</a></p>
</li>
<li><p>Codebug — <a href="https://t.codebug.vip/questions-1353623.htm">node.js:Nodejs Nginx錯誤：（13：權限被拒绝）連線到上遊時</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>Third Party Service</category>
        <category>Linode</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Third party service</tag>
        <tag>Linode</tag>
        <tag>DigitalOcean</tag>
      </tags>
  </entry>
  <entry>
    <title>[Vue Note] — 在 Vue 優雅的引入 SVG 幾種方式</title>
    <url>/2021/05/16/20210516/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p><img src="/images/others/loading.gif" data-original="/images/20210516/svg_logo.png" alt="SVG"></p>
<blockquote>
<p>先說 <strong>Vue3</strong> 可以參考本篇紀錄</p>
</blockquote>
<p>最近繼續在完成全端 <strong>Side Project</strong> 時剛好碰到需要引入 <strong>Icon</strong> 的情形，以往的專案都是使用 <a href="https://fontawesome.com/">Fontawesome</a> 的免費方案，但有時候需要使用到的 <strong>Icon</strong> 在上面找不到，需要再另外引入現成的 <strong>SVG</strong> 去使用，所以索性又乾脆直接研究一番怎麼直接引入 <strong>SVG</strong>，如果你也有相同目的也有興趣就往下看吧，這邊筆者會記錄幾種使用方式。</p>
<span id="more"></span>

<h3 id="SVG-可縮放向量圖形-Scalable-Vector-Graphics"><a href="#SVG-可縮放向量圖形-Scalable-Vector-Graphics" class="headerlink" title="SVG(可縮放向量圖形) - Scalable Vector Graphics"></a>SVG(可縮放向量圖形) - Scalable Vector Graphics</h3><p><em>- SVG 是一種圖型格式，SVG是一種基於可延伸標記式語言 XML(電腦所能理解的資訊符號，類似 HTML)，用於描述二維向量圖形的圖形格式。SVG 由 W3C 制定，是一個開放標準。</em></p>
<p>有興趣可以參考這篇文章 <a href="https://intersection.tw/%E8%A8%AD%E8%A8%88%E5%B8%AB%E5%B0%8D-svg-%E6%87%89%E8%A9%B2%E6%9C%89%E7%9A%84%E8%A7%80%E5%BF%B5-38ba64b48b32">設計師對 SVG 應該有的觀念</a> 裡面介紹到了 <strong>SVG</strong> 的優點，包括 <strong>放大不會失真、可以做成動畫同時保有小檔案容量的優點 及 圖示集</strong>…等等。</p>
<hr>
<h2 id="超級前言"><a href="#超級前言" class="headerlink" title="超級前言"></a>超級前言</h2><p><img src="/images/others/loading.gif" data-original="/images/20210516/news.png" alt="疫情爆炸"></p>
<p>最近疫情大爆炸，一天前的報導 <strong><a href="https://heho.com.tw/archives/172322">疫情即時／國內單日新增 180 例確診個案！雙北防疫升級到第三級疫情即時／國內單日新增 180 例確診個案！雙北防疫升級到第三級</a></strong> 已經到了單日新增 <strong>180</strong> 例。</p>
<p>最近經歷了停水停電又疫情，希望大家一起加油撐過這個難關，平日不能出門就在家讀讀書看看影片寫寫 <strong>Code</strong> 吧!</p>
<p>超級前言要先提醒大家 <strong>勤洗手、少外出、多戴口罩</strong> 之外，請大家下載 <strong>臺灣社交距離App</strong>，這是一款透過藍芽偵測附近是否有確診者的 <strong>APP</strong>，但放心全程不須填寫任何個人資料。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210516/app.png" alt="臺灣社交距離"></p>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p>因為這次專案使用 <strong>Vue3 + TS(TypeScript)</strong> 所以設定上有些許不一樣，但不會差異太多，如果您使用 <strong>Vue2</strong> 也不用擔心！</p>
<p>主要會介紹幾種引入方式：</p>
<ol>
<li><p><strong><code>&lt;Img&gt;</code></strong> 引入方式</p>
</li>
<li><p><strong>Inline</strong> 引入方式</p>
</li>
<li><p><strong>Component</strong> 引入方式</p>
</li>
</ol>
<hr>
<h3 id="引入方式"><a href="#引入方式" class="headerlink" title="&lt;Img&gt; 引入方式"></a><strong><code>&lt;Img&gt;</code></strong> 引入方式</h3><p>首先介紹最基本的 <strong><code>&lt;Img&gt;</code></strong> 引入方式，這個方式最簡單只需要在專案內引入圖片檔案，接著再放到圖片標籤裡即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- <span class="title class_">Vue3</span> 不需要在用一個 <span class="title class_">Div</span> 包住所有的 <span class="title class_">Div</span> --&gt;</span><br><span class="line">&lt;img :src=&quot;tagIcon&quot;&gt;</span><br><span class="line">&lt;img :src=&quot;profileIcon&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 或直接使用路徑&gt;</span><br><span class="line">&lt;img src=&quot;xxx.svg&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; defineComponent, ref &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">// Icon</span><br><span class="line">import tagIconUrl from &#x27;@/assets/images/icon/icon_tag_circle.svg&#x27;;</span><br><span class="line">import profileIconUrl from &#x27;@/assets/images/icon/icon_profile.svg&#x27;;</span><br><span class="line"></span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  name: &quot;MyIconComponent&quot;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const tagIcon = ref(tagIconUrl);</span><br><span class="line">    const profileIcon = ref(profileIconUrl);</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      tagIcon,</span><br><span class="line">      profileIcon,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>第一種方式的優點是快速，缺點是好幾個 <strong>SVG</strong> 要引好幾次，另外無法直接對 <strong>SVG</strong> 改變顏色。</li>
</ul>
<h3 id="Inline-引入方式"><a href="#Inline-引入方式" class="headerlink" title="Inline 引入方式"></a><strong>Inline</strong> 引入方式</h3><p>第二種方式更簡單，如果你仔細打開 SVG 的檔案會發現長得像下面這樣。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210516/svg_code.png" alt="SVG Code"></p>
<p>直接把這幾段程式碼貼入到你的檔案中即可出現。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 512 512&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">fill</span>=<span class="string">&quot;var(--ci-primary-color, currentColor)&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M256,16C123.452,16,16,123.452,16,256S123.452,496,256,496,496,388.548,496,256,388.548,16,256,16ZM403.078,403.078a207.253,207.253,0,1,1,44.589-66.125A207.332,207.332,0,0,1,403.078,403.078Z&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ci-primary&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">width</span>=<span class="string">&quot;40&quot;</span> <span class="attr">height</span>=<span class="string">&quot;40&quot;</span> <span class="attr">x</span>=<span class="string">&quot;152&quot;</span> <span class="attr">y</span>=<span class="string">&quot;200&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;var(--ci-primary-color, currentColor)&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ci-primary&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">width</span>=<span class="string">&quot;40&quot;</span> <span class="attr">height</span>=<span class="string">&quot;40&quot;</span> <span class="attr">x</span>=<span class="string">&quot;320&quot;</span> <span class="attr">y</span>=<span class="string">&quot;200&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;var(--ci-primary-color, currentColor)&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ci-primary&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">fill</span>=<span class="string">&quot;var(--ci-primary-color, currentColor)&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M338.289,307.2A83.6,83.6,0,0,1,260.3,360H251.7a83.6,83.6,0,0,1-77.992-52.8l-1.279-3.2H137.968L144,319.081A116,116,0,0,0,251.7,392H260.3A116,116,0,0,0,368,319.081L374.032,304H339.568Z&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ci-primary&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>第二種方式雖然可以自由改變大小及顏色，但與第一種方式同樣的，需要引入好幾個 <strong>SVG</strong> 要貼入好幾次，而且這種方式會讓版面嚴重的變得雜亂，一點也不清爽。</li>
</ul>
<h3 id="Component-引入方式"><a href="#Component-引入方式" class="headerlink" title="Component 引入方式"></a><strong>Component</strong> 引入方式</h3><p>最後是筆者最推薦的一種方式，這種方式日後<strong>擴充性高</strong>，<strong>使用方便</strong>，<strong>且可以任意放大放小不失真</strong>，<strong>加上想改變顏色就可以直接改變</strong>。</p>
<p>在了解這種方式之前要先來介紹一下 <strong>SVG</strong> 的標籤，基本上你必須認識最基本的三個標籤，分別為 <code>&lt;defs&gt;</code>、<code>&lt;use&gt;</code>、<code>&lt;symbol&gt;</code>。</p>
<p>基本上 <code>&lt;svg&gt;</code> 你們已經認識了，還有包在 <code>&lt;svg&gt;</code> 裡面的 <code>&lt;path&gt;</code>、<code>&lt;rect&gt;</code>，這些就是定義圖形的長相，但為什麼還有另外上面三個呢？</p>
<p>這三個標籤 <code>&lt;defs&gt;</code>、<code>&lt;symbol&gt;</code>、<code>&lt;use&gt;</code> 可以使我們輕鬆達到把所有的 <strong>SVG</strong> 放在同一個 <strong>.svg</strong> 檔案裡，然後透過分別給予他們的 <strong>ID Name</strong> 去呼叫並使用它。</p>
<hr>
<h4 id="標籤"><a href="#標籤" class="headerlink" title="&lt;defs&gt; 標籤"></a><code>&lt;defs&gt;</code> 標籤</h4><p>用於預定義一个元素使其能夠在 <strong>SVG</strong> 圖像中重複使用，舉的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;svg&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">defs</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;3d-svg&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 512 512&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">fill</span>=<span class="string">&#x27;var(--ci-primary-color, currentColor)&#x27;</span> <span class="attr">d</span>=<span class="string">&#x27;M68.983,382.642l171.35,98.928a32.082,32.082,0,0,0,32,0l171.352-98.929a32.093,32.093,0,0,0,16-27.713V157.071a32.092,32.092,0,0,0-16-27.713L272.334,30.429a32.086,32.086,0,0,0-32,0L68.983,129.358a32.09,32.09,0,0,0-16,27.713V354.929A32.09,32.09,0,0,0,68.983,382.642ZM272.333,67.38l155.351,89.691V334.449L272.333,246.642ZM256.282,274.327l157.155,88.828-157.1,90.7L99.179,363.125ZM84.983,157.071,240.333,67.38v179.2L84.983,334.39Z&#x27;</span> <span class="attr">class</span>=<span class="string">&#x27;ci-primary&#x27;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#3d-svg&quot;</span> <span class="attr">x</span>=<span class="string">&quot;50&quot;</span> <span class="attr">y</span>=<span class="string">&quot;50&quot;</span> /&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#3d-svg&quot;</span> <span class="attr">x</span>=<span class="string">&quot;200&quot;</span> <span class="attr">y</span>=<span class="string">&quot;550&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure>

<h4 id="標籤-1"><a href="#標籤-1" class="headerlink" title="&lt;symbol&gt; 標籤"></a><code>&lt;symbol&gt;</code> 標籤</h4><p>這個標籤通常會包在 <code>&lt;defs&gt;</code> 標籤裡面，用於定義可重複使用的符號，這邊要記得，不管使用 <code>&lt;defs&gt;</code> 或是 <code>&lt;symbol&gt;</code> 都不會直接顯示，必須使用最後一個要介紹的標籤。</p>
<h4 id="標籤-2"><a href="#標籤-2" class="headerlink" title="&lt;use&gt; 標籤"></a><code>&lt;use&gt;</code> 標籤</h4><p>透過 <code>&lt;use&gt;</code> 標籤可以使用上面定義那兩個標籤的 <strong>SVG</strong>，使用方法如上面所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;use <span class="attr">xlink</span>:href=<span class="string">&quot;#3d-svg&quot;</span> x=<span class="string">&quot;50&quot;</span> y=<span class="string">&quot;50&quot;</span> /&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#3d-svg&quot;</span> <span class="attr">x</span>=<span class="string">&quot;200&quot;</span> <span class="attr">y</span>=<span class="string">&quot;550&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><em>切記 <strong>ID</strong> 名稱一定要對到才有用。</em></p>
<hr>
<p>講解完這幾個標籤你大概就知道該怎麼做成 <strong>Component</strong>，一開始筆者不知道還以為是把所有要用到的 <strong>SVG</strong> 都引入到那個 <strong>Component</strong> 裡面再去呼叫，這樣也太不清爽了。</p>
<p><em>- 把所有要用到的 <strong>SVG</strong> 分類好分成幾個檔案放，然後再透過 <strong>Webpack</strong> 的 <strong>require.context</strong> 遍歷 <strong>SVG</strong> 把他們都寫入 <strong>main.js</strong> 裡面，最後透過 <code>&lt;use&gt;</code> 的標籤寫在 <strong>Vue Component</strong> 裡面，透過帶入 <strong>Prop</strong> 去呼叫你要使用的 Icon。</em></p>
<p><strong>＊這邊使用 <a href="https://coreui.io/vue/demo/free/3.1.1/#/icons/coreui-icons">Coreui Free Admin</a> 的免費 Icon 做範例＊</strong></p>
<ol>
<li><strong>建立 Icon 的相關資料夾</strong></li>
</ol>
<p><strong>SVG</strong> 的範例檔案在步驟一的下方有附上，雖然是提供 <strong><a href="https://coreui.io/vue/demo/free/3.1.1/#/icons/coreui-icons">Coreui Free Admin</a> 的免費 Icon</strong>，但還是請不要使用在商業用途，以避免法律責任。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210516/step1.png" alt="第一步"></p>
<p>首先到 <code>/src/assets/</code> 建立 <strong>Icons</strong> 資料夾，這邊筆者把 <strong>Icons</strong> 底下資料夾在分為 <strong>sprites</strong> 及 <strong>svg</strong> 兩個，前者會放所有 <strong>SVG</strong> 的程式碼內容，像是這種程式碼 <code>&lt;path fill=&#39;var(--ci-primary-color, currentColor)&#39; d=&#39;M68.983,382.642l171.35,98.928a32.082,32.082,0,0,0,32,0l171.352-98.929a32.093,32.093,0,0,0,16-27.713V157.071a32.092,32.092,0,0,0-16-27.......略</code>，然後用 <defs> 及 <symbol> 包起來。</p>
<p>這種所有 <strong>SVG</strong> 的<strong>設定組合集</strong>可以不一定只能有一隻檔案，筆者這邊就分為三個檔案，分別為 <strong>LOGO、國旗、其他 SVG</strong> 分類。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210516/step1-1.png" alt="分類擺放"></p>
<blockquote>
<p>檔案範例請 <strong><a href="https://dubox.com/s/1lPdD3zJe72AbU5KI-ftEXQ">點我下載</a></strong>，密碼為 <strong>5u7r</strong>，如果連結過期或不能使用請在下方留言告訴我。</p>
</blockquote>
<ol start="2">
<li><strong>安裝 svg-sprite-loader 套件</strong></li>
</ol>
<p>這是讓 <strong>Webpack</strong> 讀懂你 <strong>SVG</strong> 的套件，如果沒安裝就會噴錯。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// NPM</span><br><span class="line">npm i svg-sprite-loader -S</span><br><span class="line"></span><br><span class="line">// YARN</span><br><span class="line">yarn add svg-sprite-loader</span><br></pre></td></tr></table></figure>

<p>選擇你的安裝方式，安裝後記得在 <strong>Vue.config.js</strong> 裡面加上設定：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">dir</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;.&#x27;</span>, dir)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 引入 Svg 需要搭配這個, 不然會出錯</span></span><br><span class="line">    <span class="attr">configureWebpack</span>: &#123;</span><br><span class="line">        <span class="attr">module</span>: &#123;</span><br><span class="line">            <span class="attr">rules</span>: [&#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.svg$/</span>,</span><br><span class="line">                <span class="attr">use</span>: [<span class="string">&#x27;svg-sprite-loader&#x27;</span>],</span><br><span class="line">            &#125;, ]</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 引入 Svg 檔案(主要寫在 main.js)</span></span><br><span class="line">    <span class="attr">chainWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">        config.<span class="property">module</span>.<span class="property">rules</span>.<span class="title function_">delete</span>(<span class="string">&quot;svg&quot;</span>);</span><br><span class="line">        config.<span class="property">module</span></span><br><span class="line">            .<span class="title function_">rule</span>(<span class="string">&#x27;svg-sprite-loader&#x27;</span>)</span><br><span class="line">            .<span class="title function_">test</span>(<span class="regexp">/\.svg$/</span>)</span><br><span class="line">            .<span class="property">include</span></span><br><span class="line">            .<span class="title function_">add</span>(<span class="title function_">resolve</span>(<span class="string">&#x27;src/main.ts&#x27;</span>))</span><br><span class="line">            .<span class="title function_">end</span>()</span><br><span class="line">            .<span class="title function_">use</span>(<span class="string">&#x27;svg-sprite-loader&#x27;</span>)</span><br><span class="line">            .<span class="title function_">loader</span>(<span class="string">&#x27;svg-sprite-loader&#x27;</span>)</span><br><span class="line">            .<span class="title function_">options</span>(&#123;</span><br><span class="line">                <span class="attr">symbolId</span>: <span class="string">&#x27;[name]&#x27;</span></span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>正常的網路上教學都只會爬文到加入 <strong>chainWebpack</strong> 這個設定，但似乎都沒有加上 <strong>configureWebpack</strong> 這個設定，這邊筆者也不太確定為什麼加上就好了，如果有哪路大神知道還請不吝設在下方留言，感激不盡。</p>
<p>如果你是使用 <strong>Vue Cli</strong> 記得設定完要重新在啟動一次，設定檔才會被讀到！</p>
<ol start="3">
<li><strong>將所有設定組合集包在 HTML 裡</strong></li>
</ol>
<p>聰明的你會看到在第一步 <strong>建立 Icon 的相關資料夾</strong> 圖片裡有多一個 <strong>index.ts</strong> 的檔案，如果你並不是使用 <strong>TS</strong> 的話可以創建一個 <strong>index.js</strong>。</p>
<p>裡面的目的是要遍歷你的 <strong>SVG</strong> 組合設定集內容並把他們輸出到 <strong>HTML</strong> 上：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 Svg(都寫成 Sprites 了), 使用 Symbol 的標籤, 透過 use 可以顯示該 Svg,</span></span><br><span class="line"><span class="comment">// 所有 Svg 放在 /src/assets/icons/sprites 直接引入後使用</span></span><br><span class="line"><span class="comment">// Svg 放在 /src/assets/icons/svg 方便查看該 Svg 長怎樣</span></span><br><span class="line"><span class="keyword">const</span> req = <span class="built_in">require</span>.<span class="title function_">context</span>(<span class="string">&quot;@/assets/icons/sprites&quot;</span>, <span class="literal">false</span>, <span class="regexp">/\.svg$/</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">requireAll</span> = (<span class="params">requireContext: any</span>) =&gt;</span><br><span class="line">  requireContext.<span class="title function_">keys</span>().<span class="title function_">map</span>(requireContext);</span><br><span class="line"><span class="title function_">requireAll</span>(req);</span><br></pre></td></tr></table></figure>

<p>這邊可以引入單一隻 <strong>SVG</strong> 或是組合設定集，但相信大部分的人都是選後者；之後回去頁面上打開開發者模式(F12)看應該就會看到引入的組合設定集。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210516/step3.png" alt="有在這邊看到就是成功引入了"></p>
<p>展開後會發現熟悉的標籤 <code>&lt;defs&gt;</code> 及 <code>&lt;symbol&gt;</code> 出現了。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210516/step3-1.png" alt="之後透過 Use 標籤去使用"></p>
<ol start="4">
<li><strong>建立方便引用的 Component</strong></li>
</ol>
<p>這邊就是重頭戲了，在這邊我們需要建立一個 <strong>Icon</strong> 的 <strong>Component</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template lang=<span class="string">&quot;pug&quot;</span>&gt;</span><br><span class="line">svg.<span class="title function_">svgIcon</span>(</span><br><span class="line">  xmlns=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span></span><br><span class="line">  :<span class="keyword">class</span>=<span class="string">&quot;className&quot;</span></span><br><span class="line">  aria-hidden=<span class="string">&quot;true&quot;</span></span><br><span class="line">)</span><br><span class="line">  <span class="title function_">use</span>(</span><br><span class="line">    :<span class="attr">xlink</span>:href=<span class="string">&quot;`#$&#123;iconType&#125;_$&#123;iconFullName&#125;`&quot;</span></span><br><span class="line">  )</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; defineComponent, toRef &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">type iconTitleType = string;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;IconComponent&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 客製化 Class Name</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">className</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">type</span>: <span class="title class_">String</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">iconType</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">type</span>: <span class="title class_">String</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">default</span>: <span class="string">&quot;free&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">iconName</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">type</span>: <span class="title class_">String</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">default</span>: <span class="string">&quot;3d&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params">props</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// Props</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> iconType = <span class="title function_">toRef</span>(props, <span class="string">&quot;iconType&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> iconName = <span class="title function_">toRef</span>(props, <span class="string">&quot;iconName&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// Icon 開頭</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> <span class="attr">iconFullName</span>: iconTitleType;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">switch</span> (iconType.<span class="property">value</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">case</span> <span class="string">&quot;brand&quot;</span>:</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        iconFullName = <span class="string">`cib-<span class="subst">$&#123;iconName.value&#125;</span>`</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">break</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">case</span> <span class="string">&quot;flag&quot;</span>:</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        iconFullName = <span class="string">`cif-<span class="subst">$&#123;iconName.value&#125;</span>`</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">break</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">case</span> <span class="string">&quot;free&quot;</span>:</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">default</span>:</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        iconFullName = <span class="string">`cil-<span class="subst">$&#123;iconName.value&#125;</span>`</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">break</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      iconFullName,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      ...props,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>仔細看看剛剛步驟三展開引入的 <strong>SVG</strong> 組合設定集，裡面的 <strong>SVG ID</strong> 開頭都會跟著我們分類的檔案名稱，所以這邊也必須判斷你要使用的 <strong>SVG</strong> 在哪一個分類，所以特別使用 <strong>iconType</strong>、<strong>iconName</strong> 去判斷，並從父層透過 <strong>prop</strong> 傳過來。</p>
<p>如果你沒有使用 <strong>TS</strong> 其實也是一樣做法，最終目的都是想要透過父層傳過來的 <strong>prop</strong> 去判斷要使用哪一個 <strong>Icon</strong>。</p>
<ol start="5">
<li><strong>全局註冊 Component</strong></li>
</ol>
<p>到這邊幾乎就快大功告成了，到入口 <strong>main.ts</strong> 或是 <strong>main.js</strong>(沒有用 <strong>TS</strong> 的話)。</p>
<p>這邊註冊分為 <strong>Vue2</strong> 及 <strong>Vue3</strong>：</p>
<ul>
<li>Vue2：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@/assets/icons&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">SvgComponent</span> <span class="keyword">from</span> <span class="string">&quot;@/components/SvgComponent.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;SvgComponent&#x27;</span>, <span class="title class_">SvgComponent</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>Vue3：</li>
</ul>
<p>在 <strong>Vue3</strong> 已經遺棄 <strong>Vue.component()</strong> 這種方法了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;@/assets/icons&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">SvgComponent</span> <span class="keyword">from</span> <span class="string">&quot;@/components/SvgComponent.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">  .<span class="title function_">component</span>(<span class="string">&quot;SvgComponent&quot;</span>, <span class="title class_">SvgComponent</span>)</span><br><span class="line">  .<span class="title function_">use</span>(store)</span><br><span class="line">  .<span class="title function_">use</span>(router)</span><br><span class="line">  .<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>請記得 <strong>mount</strong> 一定要在最後。</p>
<ol start="6">
<li><strong>Enjoy It!</strong></li>
</ol>
<p>最後就是開心地使用了，由於全局註冊的關係，也不用每一個檔案都要在引入一次，直接使用即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template lang=<span class="string">&quot;pug&quot;</span>&gt;</span><br><span class="line"><span class="title class_">SvgIcon</span>(</span><br><span class="line">  iconName=<span class="string">&quot;happy&quot;</span></span><br><span class="line">)</span><br><span class="line">&lt;template&gt;</span><br></pre></td></tr></table></figure>

<ol start="7">
<li><strong>擴充方法</strong></li>
</ol>
<p>到這個步驟你已經可以順利的引入 <strong>SVG</strong>，如果你有自定義的 <strong>SVG</strong> 請繼續參考這個步驟。</p>
<p>在這邊我們先改寫剛剛的 <strong>步驟四</strong> 的 <strong>建立方便引用的 Component</strong> - <strong>Icon</strong> 的 <strong>Component</strong>，將 setup 裡面判斷目前要用哪一個 SVG 的地方改寫如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (iconType.<span class="property">value</span>) &#123;</span><br><span class="line">  <span class="comment">// 新增自定義 custom</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;custom&quot;</span>:</span><br><span class="line">    iconFullName = <span class="string">`c-<span class="subst">$&#123;iconName.value&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;brand&quot;</span>:</span><br><span class="line">    iconFullName = <span class="string">`cib-<span class="subst">$&#123;iconName.value&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;flag&quot;</span>:</span><br><span class="line">    iconFullName = <span class="string">`cif-<span class="subst">$&#123;iconName.value&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;free&quot;</span>:</span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    iconFullName = <span class="string">`cil-<span class="subst">$&#123;iconName.value&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20210516/step1.png" alt="步驟一"></p>
<p>接著在按照 <strong>步驟一</strong> 在資料夾 <code>./src/assets/icons/sprites</code> 裡面新增 <code>custom.svg</code>，然後裡面輸入下列程式碼(這邊可以複製筆者的，會有驚喜)：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;svg aria-hidden=<span class="string">&quot;true&quot;</span> style=<span class="string">&quot;position: absolute; width: 0; height: 0; overflow: hidden;&quot;</span> version=<span class="string">&quot;1.1&quot;</span> xmlns=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">xmlns</span>:xlink=<span class="string">&quot;http://www.w3.org/1999/xlink&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">defs</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;c-test-svg&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      // 這邊為可替換的內容</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 521.84 201&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">defs</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"><span class="selector-class">.cls-1</span>&#123;<span class="attribute">fill</span>:<span class="number">#040000</span>;&#125;<span class="selector-class">.cls-1</span>,<span class="selector-class">.cls-3</span>&#123;<span class="attribute">stroke</span>:<span class="number">#231815</span>;<span class="attribute">stroke-miterlimit</span>:<span class="number">10</span>;&#125;<span class="selector-class">.cls-2</span>&#123;<span class="attribute">font-size</span>:<span class="number">90px</span>;<span class="attribute">fill</span>:<span class="number">#fff</span>;&#125;<span class="selector-class">.cls-2</span>,<span class="selector-class">.cls-4</span>&#123;<span class="attribute">font-family</span>:HanziPenTC-W5-B5pc-H, HanziPen TC;&#125;<span class="selector-class">.cls-3</span>&#123;<span class="attribute">fill</span>:<span class="number">#e5852e</span>;&#125;<span class="selector-class">.cls-4</span>&#123;<span class="attribute">font-size</span>:<span class="number">70px</span>;<span class="attribute">fill</span>:<span class="number">#231815</span>;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">defs</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>資產 2<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">g</span> <span class="attr">id</span>=<span class="string">&quot;圖層_2&quot;</span> <span class="attr">data-name</span>=<span class="string">&quot;圖層 2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">g</span> <span class="attr">id</span>=<span class="string">&quot;圖層_1-2&quot;</span> <span class="attr">data-name</span>=<span class="string">&quot;圖層 1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">rect</span> <span class="attr">class</span>=<span class="string">&quot;cls-1&quot;</span> <span class="attr">x</span>=<span class="string">&quot;0.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;0.5&quot;</span> <span class="attr">width</span>=<span class="string">&quot;520.84&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;cls-2&quot;</span> <span class="attr">transform</span>=<span class="string">&quot;translate(20.5 127.41)&quot;</span>&gt;</span>Happy<span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="tag">&lt;<span class="name">rect</span> <span class="attr">class</span>=<span class="string">&quot;cls-3&quot;</span> <span class="attr">x</span>=<span class="string">&quot;262.19&quot;</span> <span class="attr">y</span>=<span class="string">&quot;25.22&quot;</span> <span class="attr">width</span>=<span class="string">&quot;243.01&quot;</span> <span class="attr">height</span>=<span class="string">&quot;152.69&quot;</span> <span class="attr">rx</span>=<span class="string">&quot;12&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;cls-4&quot;</span> <span class="attr">transform</span>=<span class="string">&quot;translate(321.67 122.5)&quot;</span>&gt;</span>SVG<span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="tag">&lt;/<span class="name">g</span>&gt;</span><span class="tag">&lt;/<span class="name">g</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;請輸入你的客製化ID&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      // 新增更多你的 SVG 吧</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span></span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure>

<p>接著依照上面 <strong>步驟三</strong> 的 <strong>將所有設定組合集包在 HTML 裡</strong>，會把所有 <code>./src/assets/icons/sprites</code> 下的 <strong>SVG</strong> 程式碼都寫進 <strong>HTML</strong> 裡面，我們只需要透過 <strong>步驟四</strong> 的 <strong>建立方便引用的 Component</strong> 去把這個 <strong>SVG</strong> 呼叫出來即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template lang=<span class="string">&quot;pug&quot;</span>/&gt;</span><br><span class="line"><span class="comment">// 這邊套件怎麼傳參數進去也可以自定義，不一定要按照筆者的</span></span><br><span class="line"><span class="title class_">SvgIcon</span>(</span><br><span class="line">  className=<span class="string">&quot;tw-mr-1&quot;</span>,</span><br><span class="line">  :width=<span class="string">&quot;100&quot;</span>,</span><br><span class="line">  :height=<span class="string">&quot;40&quot;</span>,</span><br><span class="line">  iconType=<span class="string">&quot;custom&quot;</span>,</span><br><span class="line">  iconName=<span class="string">&quot;test-svg&quot;</span>,</span><br><span class="line">)</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不需要在 &lt;script&gt; 再次引入 SvgIcon，因為已經全域註冊了</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>這次因為 <strong>Vue3</strong> 加上 <strong>TS</strong> 的關係又吸取了很多知識，雖然 <strong>Side Project</strong> 的進度緩慢，但許多新知吸取後覺得滿滿成就感，很多原本是簡單的東西，例如 <strong>SVG</strong> 的引入，但可以在一件事情上學習且練習到其他關聯的東西，這才是最無價的。</p>
<p>希望這篇文章可以幫助自己之後需要再次使用時可以快速回憶，也希望能幫助到各位，最後希望最近的疫情可以趨緩，我們可以一起度過這個困難的時期，再次提醒，大家要記得 <strong>勤洗手、少外出、一定要戴口罩</strong>！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210516/news_fuck_COVID19.png" alt="不戴好口罩你知道的！！！！！"></p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><p>簡書 - <a href="https://www.jianshu.com/p/7a34e32aa97f">【vue】vue3中使用svg切图</a></p>
</li>
<li><p>IT邦幫忙 — <a href="https://ithelp.ithome.com.tw/articles/10230334">在 Vue 聰明使用 SVG-Icon</a></p>
</li>
<li><p>Medium - <a href="https://intersection.tw/%E8%A8%AD%E8%A8%88%E5%B8%AB%E5%B0%8D-svg-%E6%87%89%E8%A9%B2%E6%9C%89%E7%9A%84%E8%A7%80%E5%BF%B5-38ba64b48b32">設計師對 SVG 應該有的觀念</a></p>
</li>
<li><p>痞客邦 - <a href="https://ytliu0.pixnet.net/blog/post/229583714-svg%E6%98%AF%E4%BB%80%E9%BA%BC%E6%84%8F%E6%80%9D%EF%BC%9Fsvg%E6%98%AF%E4%BB%80%E9%BA%BC%E7%9A%84%E7%B8%AE%E5%AF%AB%EF%BC%9F">SVG是什麼意思？SVG是什麼的縮寫？</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
        <tag>FrameWork</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>[Vue Note] — 在 Vue3 優雅的引入 I18n 之餘，透過網站統一管理並一鍵更新</title>
    <url>/2021/05/28/20210528/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p><img src="/images/others/loading.gif" data-original="/images/20210528/i18nBanner.png" alt="I18n"></p>
<blockquote>
<p>還在找怎麼最簡單在 <strong>Vue3</strong> 引入 <strong>I18n</strong> 的使用方式嗎？看到這邊就對了，<strong>Vue2</strong> 也適用。</p>
</blockquote>
<p>首先強調本篇絕對不是說 <strong>Vue3</strong> 結果使用 <strong>Vue Cli3.0</strong>，是確確實實的 <strong>Vue3</strong> 沒有錯，放心地看下去沒關係；至於會有這篇文章也是剛好最近的 <strong>Side Project</strong> 碰到多語系的功能，第一次實作後將過程記錄下來，如果中途或是內容有任何錯誤，歡迎下方留言告訴筆者。</p>
<p>先說一下筆者的環境(當然 <strong>Vue2</strong> 也可以參考)：</p>
<ul>
<li>nodejs v12.16.1</li>
<li>vue 3.0</li>
<li>vue-cli 4.5.12</li>
</ul>
<span id="more"></span>

<p>首先如果不知道 <strong>I18n</strong> 的話這邊快速解釋一下，就是透過 <strong>I18n</strong> 這個套件可以做到一個網站多語系；在我們手動建立好各種語言的翻譯之後，只要將套件引入，在隨時都可以切換指定現在要使用什麼語系顯示文字，達到多語系網站的目的。</p>
<p>引用套件其實並不稀奇，但碰到了 <strong>Vue3 + TypeScript</strong> 對還不熟的筆者來說差點<strong>要我命3000</strong>，在確定引入成功後，想起前陣子在公司接觸到的專案，在厲害的其他前端同事處理之下可以達到指令更新最新的語言包，並且透過網站統一管理，各自新增並且不影響 <strong>commit</strong>，這邊就深深覺得一定要筆記了。</p>
<blockquote>
<p><em>筆者目前還沒有在網路上看到相關的教學，如果有的話還請見諒，也歡迎互相切磋交流。</em></p>
</blockquote>
<p>詳細解釋為麼叫 <strong>I18n</strong>， 沒有興趣可跳過。</p>
<p><strong>I18n</strong> 的全名為 <strong>『Internationalization』</strong>，共有<strong>20個字母</strong>，去掉頭尾的 <strong>I</strong> 及 <strong>n</strong> 中間有 <strong>18個字</strong>，如果每次提到都要打或是說這麼長的一串文字其實很麻煩，所以就乾脆簡稱 <strong>『I18n』</strong>，筆者剛開始還以為是不是拿了18國當範例之類的，請見諒我是小菜雞。</p>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p>本次筆記將會記錄幾個摘要，如果你不想要透過網站統一管理，那其實做到安裝完套件並且引入即可，不會太麻煩。</p>
<ol>
<li><p><strong>I18n</strong> 引入方式</p>
</li>
<li><p><strong>I18n</strong> 進階用法</p>
</li>
<li><p><strong>線上網站統一管理語言包</strong></p>
</li>
<li><p><strong>一鍵更新語言包</strong></p>
</li>
</ol>
<hr>
<h3 id="I18n-引入方式"><a href="#I18n-引入方式" class="headerlink" title="I18n 引入方式"></a><strong>I18n</strong> 引入方式</h3><p>上網查詢了一下 <strong>Vue</strong> 的 <strong>I18n</strong> 引入方式有些都特別麻煩，這邊簡單的記錄一下該怎麼引入。</p>
<h4 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$npm i vue-i18n -S</span><br><span class="line"></span><br><span class="line">or</span><br><span class="line"></span><br><span class="line">$yarn add vue-i18n -S</span><br></pre></td></tr></table></figure>

<p>安裝 <code>vue-i18n</code> 即可，有些教學會請你安裝類似 <code>vue-i18n@next</code> 這種的套件，其實不需要再另外安裝。</p>
<h4 id="檔案架構"><a href="#檔案架構" class="headerlink" title="檔案架構"></a>檔案架構</h4><p>接著在專案 <code>/src</code> 下新增放語言包的資料夾及檔案，如下：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210528/createNewFile.png" alt="新增資料夾"></p>
<p>有些教學會請你新增的語言包是分開的，例如 <code>en.json</code>、<code>ch.json</code>…等等也可以，但是在引入語言包的時候需要注意！</p>
<p>這邊 <code>common.json</code> 裡面請先打上下面的內容：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @/src/i18n/common.json</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;zh-TW&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;welcome&quot;</span><span class="punctuation">:</span> <span class="string">&quot;歡迎&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ja-JP&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;welcome&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ようこそ&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;en-US&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;welcome&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Welcome&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>沒錯上面就是我們的語言包，如果拆成多支檔案，只需要鍵入內容即可(以下為範例)：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ./src/i18n/ch.json</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;welcome&quot;</span><span class="punctuation">:</span> <span class="string">&quot;歡迎&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><code>index.ts</code>(或是 <code>index.js</code>) 打上下列內容：</p>
<ol>
<li>如果是合併再一起的語言包</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ./src/i18n/index.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createI18n &#125; <span class="keyword">from</span> <span class="string">&quot;vue-i18n&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> message <span class="keyword">from</span> <span class="string">&quot;./common.json&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> i18n = <span class="keyword">new</span> <span class="title function_">createI18n</span>(&#123;</span><br><span class="line">  <span class="attr">locale</span>: <span class="string">&quot;zh-TW&quot;</span>,</span><br><span class="line">  <span class="attr">messages</span>: message,</span><br><span class="line">  <span class="attr">fallbackLocale</span>: <span class="string">&quot;zh-TW&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; i18n &#125;;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>如果是分開的語言包</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ./src/i18n/index.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createI18n &#125; <span class="keyword">from</span> <span class="string">&quot;vue-i18n&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ch <span class="keyword">from</span> <span class="string">&quot;./ch.json&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> en <span class="keyword">from</span> <span class="string">&quot;./en.json&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> i18n = <span class="keyword">new</span> <span class="title function_">createI18n</span>(&#123;</span><br><span class="line">  <span class="attr">locale</span>: <span class="string">&quot;zh-TW&quot;</span>,</span><br><span class="line">  <span class="attr">messages</span>: &#123;</span><br><span class="line">    ch,</span><br><span class="line">    en</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">fallbackLocale</span>: <span class="string">&quot;zh-TW&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; i18n &#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>所以其實分開合再一起結果都一樣的，但因為後面方便使用網站管理，這邊筆者使用合併的方式。</strong></p>
</blockquote>
<h4 id="引入套件"><a href="#引入套件" class="headerlink" title="引入套件"></a>引入套件</h4><p>下一步到我們的入口 <code>main.ts</code> 或 <code>main.js</code>，引入剛剛使用的 <strong>I18n</strong> 套件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ./src/main.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./store&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; i18n &#125; <span class="keyword">from</span> <span class="string">&quot;@/i18n&quot;</span>; <span class="comment">// 引入 I18n 套件</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">  .<span class="title function_">use</span>(store)</span><br><span class="line">  .<span class="title function_">use</span>(router)</span><br><span class="line">  .<span class="title function_">use</span>(i18n) <span class="comment">// &lt;-- 這樣就全局引入了</span></span><br><span class="line">  .<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="使用套件"><a href="#使用套件" class="headerlink" title="使用套件"></a>使用套件</h4><p>到此地你已經可以使用多語系了，到隨便一個頁面，新增選項，就可以更改多語系：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ./src/App.vue</span></span><br><span class="line"></span><br><span class="line">&lt;template lang=<span class="string">&quot;pug&quot;</span>&gt;</span><br><span class="line"><span class="title function_">button</span>(</span><br><span class="line">  @click=<span class="string">&quot;$i18n.locale = &#x27;ch&#x27;&quot;</span></span><br><span class="line">) 繁體中文</span><br><span class="line"><span class="title function_">button</span>(</span><br><span class="line">  @click=<span class="string">&quot;$i18n.locale = &#x27;en&#x27;&quot;</span></span><br><span class="line">) <span class="title class_">English</span></span><br><span class="line"></span><br><span class="line">h2 &#123;&#123; $t(<span class="string">&quot;-welcome&quot;</span>) &#125;&#125;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>也許你查看了許多文章，會叫你使用 <code>import &#123; useI18n &#125; from &quot;vue-i18n&quot;;</code> 引入套件，然後透過 <code>const &#123; t, locale &#125; = useI18n();</code> 來渲染文字或者更改語言，其實 <code>t</code> 是可以省略的，如果有另外寫 <strong>methods</strong> 才需要用到引入套件並且使用 <code>locale</code> 去更改語系。</p>
<blockquote>
<p><strong>到這邊你已經成功的將多語系引入進來了，下一步將會講解如何在使用者關閉網頁之後也持續記錄著使用者所選擇的語系。</strong></p>
</blockquote>
<hr>
<h3 id="I18n-進階用法"><a href="#I18n-進階用法" class="headerlink" title="I18n 進階用法"></a><strong>I18n</strong> 進階用法</h3><p>其實也不算進階用法，這一步只是為了要紀錄使用者所選擇的語系，在關閉網頁之後不會再讓語系跳回來，所以我們要做的事情有幾件。</p>
<ol>
<li><p>將使用者語系紀錄到 LocalStorage</p>
</li>
<li><p>使用 VueX 去更改使用者選擇的語系，也順便將語系紀錄在 VueX(非必要，如果想在任何一頁單獨修改也可以)</p>
</li>
</ol>
<h4 id="修改-VueX"><a href="#修改-VueX" class="headerlink" title="修改 VueX"></a>修改 VueX</h4><p>為了達到上面的目的，我們必須先改寫 <strong>VueX</strong> 這邊，在這邊我們統一透過 <code>localStorage.setItem(&quot;i18nLang&quot;, value);</code> 來紀錄目前使用者所選擇的語系 <strong>localStorage</strong>，這樣下次我們只要撈取 <strong>localStorage</strong> 便可以知道使用者上次有沒有選擇了什麼語系。</p>
<p>打開 <code>./src/store/index.ts</code> 這隻檔案並且修改為：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ./src/store/index.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prototype[State]</span></span><br><span class="line">type stateType = &#123;</span><br><span class="line">  <span class="attr">langsOption</span>: lang.<span class="property">langsOptionType</span>[];</span><br><span class="line">  <span class="attr">lang</span>: string | <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">stateInit</span>: stateType = &#123;</span><br><span class="line">  <span class="attr">langsOption</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">key</span>: <span class="string">&quot;zh-TW&quot;</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;繁體中文&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">key</span>: <span class="string">&quot;en-US&quot;</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;English(United States)&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">key</span>: <span class="string">&quot;ja-JP&quot;</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;日本語&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">lang</span>: <span class="literal">null</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: stateInit,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="comment">// 切換語系設定</span></span><br><span class="line">    <span class="title function_">setI18nLang</span>(<span class="params">state, value</span>) &#123;</span><br><span class="line">      state.<span class="property">lang</span> = value;</span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;i18nLang&quot;</span>, value);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">modules</span>: &#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>如果不是 <strong>TypeScript</strong> 的話直接使用下面的方式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ./src/store/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">langsOption</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">key</span>: <span class="string">&quot;zh-TW&quot;</span>,</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&quot;繁體中文&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">key</span>: <span class="string">&quot;en-US&quot;</span>,</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&quot;English(United States)&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">key</span>: <span class="string">&quot;ja-JP&quot;</span>,</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&quot;日本語&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">lang</span>: <span class="literal">null</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="comment">// 切換語系設定</span></span><br><span class="line">    <span class="title function_">setI18nLang</span>(<span class="params">state, value</span>) &#123;</span><br><span class="line">      state.<span class="property">lang</span> = value;</span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;i18nLang&quot;</span>, value);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">modules</span>: &#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="改寫套件引入檔案"><a href="#改寫套件引入檔案" class="headerlink" title="改寫套件引入檔案"></a>改寫套件引入檔案</h4><p>接著改寫 <code>./src/i18n/index.ts</code> 這隻檔案，改寫成下面的內容(聰明的你一定知道這邊要去讀取 <strong>localStorage</strong> 拿取上次使用者是否有選擇語系)：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ./src/i18n/index.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;@/store&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createI18n &#125; <span class="keyword">from</span> <span class="string">&quot;vue-i18n&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> message <span class="keyword">from</span> <span class="string">&quot;./common.json&quot;</span>; <span class="comment">// 這邊之後統一示範全部檔案集中在同一支 JSON 的方式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> locale = <span class="string">&quot;zh-TW&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判斷之前是否有改過語系, 讀取紀錄</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;i18nLang&quot;</span>)) &#123;</span><br><span class="line">  <span class="comment">// 必須先賦予一個變數, 不然 TS 會出現 &quot;類型 &#x27;string | null&#x27; 不可指派給類型 &#x27;string&#x27;。類型 &#x27;null&#x27; 不可指派給類型 &#x27;string&#x27;。&quot; 的錯誤</span></span><br><span class="line">  <span class="keyword">const</span> localeData = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;i18nLang&quot;</span>);</span><br><span class="line">  locale = localeData !== <span class="literal">null</span> ? localeData : <span class="string">&quot;zh-TW&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;i18nLang&quot;</span>, locale);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// VueX 更改</span></span><br><span class="line">store.<span class="title function_">commit</span>(<span class="string">&quot;setI18nLang&quot;</span>, locale);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> i18n = <span class="keyword">new</span> <span class="title function_">createI18n</span>(&#123;</span><br><span class="line">  locale,</span><br><span class="line">  <span class="attr">messages</span>: message,</span><br><span class="line">  <span class="attr">fallbackLocale</span>: <span class="string">&quot;zh-TW&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; i18n &#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><em>這邊題外話一下， <code>const localeData = localStorage.getItem(&quot;i18nLang&quot;);</code> 那邊一定要這樣使用，不然會噴錯，如果有哪路大神知道為什麼的歡迎在下方留言告訴筆者，感激不盡。</em></p>
</blockquote>
<h4 id="最後修改要讓使用者選擇的頁面"><a href="#最後修改要讓使用者選擇的頁面" class="headerlink" title="最後修改要讓使用者選擇的頁面"></a>最後修改要讓使用者選擇的頁面</h4><p>這邊就依照個人喜好修改，附上使用者覺得很方便的 <strong>select</strong> 使用 <strong>v-model</strong> 綁定 <strong>VueX</strong> 的方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 某支 .vue 檔</span></span><br><span class="line"></span><br><span class="line">&lt;template lang=<span class="string">&quot;pug&quot;</span>&gt;</span><br><span class="line"><span class="title function_">select</span>(</span><br><span class="line">  v-model=<span class="string">&quot;lang&quot;</span></span><br><span class="line">)</span><br><span class="line">  <span class="title function_">option</span>(<span class="params"></span></span><br><span class="line"><span class="params">    v-<span class="keyword">for</span>=<span class="string">&quot;lang in langsOption&quot;</span>,</span></span><br><span class="line"><span class="params">    :key=<span class="string">&quot;lang.id&quot;</span>,</span></span><br><span class="line"><span class="params">    :value=<span class="string">&quot;lang.key&quot;</span></span></span><br><span class="line"><span class="params">  </span>) &#123;&#123; lang.<span class="property">title</span> &#125;&#125;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; defineComponent, ref, computed &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; useI18n &#125; <span class="keyword">from</span> <span class="string">&quot;vue-i18n&quot;</span>; <span class="comment">// 這邊必須要透過 methods 去修改語系，所以必須要引入 vue-i18n，另外也可寫在 VueX 看個人喜好</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;index&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// Vue Tools</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> store = <span class="title function_">useStore</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// i18n</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> &#123; locale &#125; = <span class="title function_">useI18n</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">langsOption</span>: <span class="title function_">computed</span>(<span class="function">() =&gt;</span> store.<span class="property">state</span>.<span class="property">langsOption</span>),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">lang</span>: <span class="title function_">computed</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">get</span>: <span class="function">() =&gt;</span> store.<span class="property">state</span>.<span class="property">lang</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">set</span>: <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">if</span> (val === store.<span class="property">state</span>.<span class="property">lang</span>) <span class="keyword">return</span>; <span class="comment">// 如果和原本一樣就不更改</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          locale.<span class="property">value</span> = val; <span class="comment">// 修改 i18n 套件的語系設定, 這邊也可改寫在 VueX, 依個人喜好</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          store.<span class="title function_">commit</span>(<span class="string">&quot;setI18nLang&quot;</span>, val); <span class="comment">// 修改 VueX 的值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>透過上面方法即可達到快速更改語系，也可記錄使用者語系至 <strong>localStorage</strong>，到這邊基本的用法都差不多了，如果你想再繼續下去學習透過網站統一管理語言包就接著下一步吧 Go～</p>
<hr>
<p><img src="/images/others/loading.gif" data-original="/images/20210528/LocoLogo.png" alt="Localise.biz"></p>
<h3 id="線上網站統一管理語言包"><a href="#線上網站統一管理語言包" class="headerlink" title="線上網站統一管理語言包"></a><strong>線上網站統一管理語言包</strong></h3><p>其實本地新增編輯語言包真的不太方便，如果多人開發的時候又會碰到需要解 <strong>Git</strong> 衝突的情況，今天如果有幾十個專案，就又要一個一個比對並且複製貼上去修改，太不人性化了。</p>
<p>因為前陣子筆者接觸公司的專案，發現強大的前端同事使用了一個方便的網站，索性便在這次的 <strong>Side Project</strong> 使用上，這邊也一起記錄下來。</p>
<h4 id="註冊網站帳號"><a href="#註冊網站帳號" class="headerlink" title="註冊網站帳號"></a>註冊網站帳號</h4><p><img src="/images/others/loading.gif" data-original="/images/20210528/plan.png" alt="Plan"></p>
<p>沒錯，因為需要透過網站去申請帳號密碼，才能把語言包紀錄在該網站的資料庫，但放心，免費的額度還是有的。</p>
<p>『每一個字串一種語言為一個項目，免費額度基本上的項目為 2000』，其實很夠用了，因為該網站為專案式管理語言包，所以如果公司專案覺得不錯的話，其實可以小花 <strong>$19.59&#x2F;mo(美金)</strong> 購買商業方案，筆者覺得很划算。</p>
<h4 id="建立專案"><a href="#建立專案" class="headerlink" title="建立專案"></a>建立專案</h4><p>申請結束後請建立專案，然後輸入專案名稱。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210528/createNewProject.png" alt="Create New Project"></p>
<p>這邊可以看見我已經有使用一個專案，因為筆者裡面設定了<strong>三種語言</strong>，所以每一個項目都會*3，目前有九個翻譯，就是佔用了 <strong>27</strong> 個 <strong>Translation</strong>。</p>
<p>另外這個網站還有個好處是語言包除了可以下載之外，也可以匯入，所以其實是很安全的，不怕語系檔案不見。</p>
<h4 id="建立第一個翻譯"><a href="#建立第一個翻譯" class="headerlink" title="建立第一個翻譯"></a>建立第一個翻譯</h4><p><img src="/images/others/loading.gif" data-original="/images/20210528/newAsset.png" alt="第一個翻譯"></p>
<p>之後點擊綠色的按鈕新增第一個翻譯，然後在 <strong>Asset ID</strong> 輸入要設定的語系 <strong>Key</strong>，這邊先測試輸入 <strong>welcome</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210528/newAsset-2.png" alt="目前語系"></p>
<p>這邊你會發現目前只有中文，查看右邊的地方有一個地球的 <strong>Icon</strong>，點擊後下面會出現 <strong>New locale</strong>，再度點擊後會彈出一個視窗，這時候就可以輸入你想新增的語系了，但記得，語系越多，佔用的 <strong>Translation</strong> 就會越多！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210528/newLocales.png" alt="新增語系"></p>
<p>最後在大框框那邊輸入你想翻譯的文字，然後再透過下拉去切換語言，把你設定的語言都新增好，右邊地球那邊會顯示你的百分比，如果某些語言沒有翻譯，就不會 <strong>100%</strong>。</p>
<h4 id="拿取-API-Key"><a href="#拿取-API-Key" class="headerlink" title="拿取 API Key"></a>拿取 API Key</h4><p><img src="/images/others/loading.gif" data-original="/images/20210528/APIKeys.png" alt="記好你的Key"></p>
<p>與大多的網站差不多，通常要打那個網站的 <strong>API</strong>，都會需要帶 <strong>Key</strong>，一樣看到剛剛右邊的地球，點擊地球右邊的板手 <strong>Icon</strong>，下方有一個 <strong>API Keys</strong>，點擊後又會彈出一個視窗，記下你的 <strong>API Keys</strong>，記得請使用上方的，下方的會包含可以修改的權限，這邊我們不需要。</p>
<blockquote>
<p>放心這個專案在示範完之後就會砍掉了，所以上面的 <strong>Key</strong> 是沒用的。</p>
</blockquote>
<h4 id="查閱-Document"><a href="#查閱-Document" class="headerlink" title="查閱 Document"></a>查閱 Document</h4><p>接著到網站的 <strong><a href="https://localise.biz/api/docs">API 文件</a></strong> 可以看見許多 <strong>API</strong> 的介紹，這邊我們只需要找到 <strong><a href="https://localise.biz/api/docs/export">Export API</a></strong> 就可以了，進去後我們需要用到的是 <code>GET /api/export/all.&#123;ext&#125;</code> 這支 <strong>API</strong>；有些人會使用 <code>GET /api/export/archive/&#123;ext&#125;.zip</code>，但這個需要再解壓縮並且引入方式也要分開，筆者採用最暴力且簡單的方式，透過 <strong>API</strong> 取得語言包的 <strong>JSON</strong> 然後載入套件中。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210528/LocoSwagger.png" alt="測試 API"></p>
<p>這邊推薦可以先使用該網站的 <strong><a href="https://localise.biz/api#!/export/exportArchive">API Explorer</a></strong> 去查看你的 <strong>API</strong> 打不打得過，類似 <strong>Swagger</strong>，很方便。</p>
<hr>
<h3 id="一鍵更新語言包"><a href="#一鍵更新語言包" class="headerlink" title="一鍵更新語言包"></a><strong>一鍵更新語言包</strong></h3><p>這邊就要開始來講最後的重頭戲了，怎麼透過指令去直接抓取最新的語言包呢？首先到專案目錄新增 <code>loadi18nFile.js</code> 這支檔案，然後在裡面打上下列的內容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 至 Loco 網站抓取語言檔(這邊直接抓取 JSON 不需再分資料夾)</span></span><br><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">&#x27;https&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bl = <span class="built_in">require</span>(<span class="string">&#x27;bl&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> colors = <span class="built_in">require</span>(<span class="string">&#x27;colors&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> i18nPath = path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./src/i18n&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> locoApiKey = <span class="string">&quot;p90GaanWIslvbDG01a41e72qyown4xZC&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> locoGetJSONApiUrl = <span class="string">&quot;https://localise.biz/api/export/all?key=&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> localesDownloadUrl = <span class="string">`<span class="subst">$&#123;locoGetJSONApiUrl&#125;</span><span class="subst">$&#123;locoApiKey&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">downloadLocoJson</span>(<span class="params"></span>) &#123;</span><br><span class="line">    https</span><br><span class="line">        .<span class="title function_">get</span>(localesDownloadUrl, <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">            response.<span class="title function_">setEncoding</span>(<span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">            response.<span class="title function_">pipe</span>(<span class="title function_">bl</span>(<span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    <span class="title function_">reject</span>(err);</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Loco JSON pipe failed&#x27;</span>.<span class="property">red</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">let</span> i18nJSON = data.<span class="title function_">toString</span>();</span><br><span class="line">                <span class="keyword">if</span> (i18nJSON) &#123;</span><br><span class="line">                    fs.<span class="title function_">writeFile</span>(<span class="string">`<span class="subst">$&#123;i18nPath&#125;</span>/common.json`</span>, i18nJSON, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Loco JSON writeFile failed&#x27;</span>.<span class="property">red</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Loco JSON writeFile success&#x27;</span>.<span class="property">green</span>);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Loco JSON downloading success&#x27;</span>.<span class="property">green</span>);</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// Handle errors</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Loco JSON downloading failed&#x27;</span>.<span class="property">red</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">downloadLocoJson</span>();</span><br></pre></td></tr></table></figure>

<p>如果想謹慎一點，也可以將 <strong>API Key</strong> 放在 <strong>.env</strong> 中，再透過套件 <code>require(&#39;dotenv&#39;).config();</code> 去取得 <code>process.env.VUE_API_KEY</code> 也會比較安全。</p>
<blockquote>
<p><strong>關於上面的內容也可以自行研究一下，例如 <code>setEncoding</code>、<code>writeFile</code> 都可以在網路上查看該用法是什麼，這個比較偏向 <strong>Node.js</strong> 故這邊不多做解釋，有興趣可以參考 <a href="https://rexhung0302.github.io/2020/08/06/20200806/#more">[NodeJS Become A Full Stack Developer] — 從0開始 NodeJS 小試身手</a></strong></p>
</blockquote>
<h4 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h4><p>最後的最後我們只需要修改 <code>package.json</code>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;i18n-Test-project&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;serve&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node loadI18nFile &amp;&amp; vue-cli-service serve&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-cli-service build&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-cli-service lint&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;loadI18n&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node loadI18nFile&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// ... 略</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>之後就可以透過 <code>yarn run loadI18n</code> 或 <code>npm run loadI18n</code> 來直接更新語言包啦！或是在 <code>yarn serve</code> 之前先去更新一波語言包，這樣多人開發起來更方便了。</p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>這次在做的 <strong>Side Project</strong> 其實是從去年底開始因為家人剛好有需求，拿來一邊練習一邊開發的，原本前台的頁面其實都做好了，因為想挑戰看看開始實作後台，這時候才了解後端工程師真的辛苦啊(原本就深感辛苦，別砲我QQ)。</p>
<p>透過這次的練習其實又收穫滿滿，除了上一篇的 <strong><a href="https://rexhung0302.github.io/2021/05/16/20210516/">[Vue Notes] — 在 Vue 優雅的引入 SVG 幾種方式</a></strong> 之外，這次又學到怎麼使用 <strong>I18n</strong>。對了，還有被 <strong>Vue3 + TS</strong> 摧殘得不成人形…</p>
<p>希望之後能學到更多優雅的使用方式再繼續上來筆記，如果各位有什麼更好的方式也請不要吝設在下方留言讓筆者知道，感謝各位。</p>
<p>結論的最後也再次希望近期的疫情可以快點結束，願那些因為疫情而辛苦或是受傷的人也可以事事順利或早日康復，願台灣會更好願你我都會更好，一起加油！</p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><p>Youtuber - Scalable Scripts - <a href="https://www.youtube.com/watch?v=RIjIkMcdoII">Vue 3 Language Translations (i18n) using vue-i18n-next</a></p>
</li>
<li><p>mks — <a href="https://mks.tw/3272/vue3-0-%E4%BD%BF%E7%94%A8-vue-3-0-vue-cli-4-%E9%96%8B%E7%99%BC-i18n-%E5%A4%9A%E5%9C%8B%E8%AA%9E%E8%A8%80-%E5%9C%8B%E9%9A%9B%E5%8C%96%E9%96%8B%E7%99%BC">[ Vue3.0 ] 使用 Vue 3.0 &#x2F; Vue-cli 4 開發 i18n 國際化 多國語言功能</a></p>
</li>
<li><p>MIS腳印 - <a href="https://www.footmark.info/programming-language/vuejs/vue-cli3-i18n/">Vue Cli 3 使用 Vue I18n 實作多國語言網站和多語系切換功能</a></p>
</li>
<li><p>Dylan’s Blog - <a href="https://dylan237.github.io/nodejs-readfile-and-writefile.html">使用 Node.js 讀取及寫入檔案</a></p>
</li>
<li><p>iT邦幫忙 - <a href="https://ithelp.ithome.com.tw/articles/10188311">實用Gem介紹：i18n-js</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
        <tag>FrameWork</tag>
        <tag>Vue</tag>
        <tag>i18n</tag>
      </tags>
  </entry>
  <entry>
    <title>[Git Note] — Vue3 部署至 GitHub Page 超級淺入遷出</title>
    <url>/2021/06/09/20210609/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p><img src="/images/others/loading.gif" data-original="/images/20210609/github_page_logo.png" alt="GitHub Page"></p>
<p>使用 <code>GitHub Page</code> 展示你的前端作品，如果你剛好碰上畫面打開一片空白，可以參考此篇筆記。</p>
<span id="more"></span>

<blockquote>
<p>因為步驟滿簡單的，這邊就簡短敘述了(<del>但過程踩了很久的坑</del>)。</p>
</blockquote>
<hr>
<h3 id="建立-Repository"><a href="#建立-Repository" class="headerlink" title="建立 Repository"></a>建立 Repository</h3><p><img src="/images/others/loading.gif" data-original="/images/20210609/repositiories.png" alt="Your Repositiories"></p>
<p>首先進入 <strong><a href="https://github.com/">GitHub</a></strong> 後點擊右上角的人像圖片，然後再點擊 <strong>Your repositiories</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210609/new.png" alt="New Repositiory"></p>
<p>接著點擊綠色按鈕 <strong>New</strong> 一個新的 <strong>Repositiory</strong>。</p>
<p>接著建立好之後就把你的專案 <strong>Init</strong> 然後 <strong>git remote</strong> 到你的 <strong>Repositiory</strong>，這邊就不詳加贅述了。</p>
<h3 id="建立-Vue-config-js"><a href="#建立-Vue-config-js" class="headerlink" title="建立 Vue.config.js"></a>建立 Vue.config.js</h3><p>接著看你的 <strong>Vue Cli</strong> 版本：</p>
<ol>
<li><strong>Vue Cli 2.x</strong></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /config/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">export</span> = &#123;</span><br><span class="line">  <span class="attr">baseUrl</span>: <span class="string">&#x27;/請替換這邊為 Repositiory 的名稱/&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>Vue Cli 3.x</strong></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">export</span> = &#123;</span><br><span class="line">  <span class="attr">baseUrl</span>: <span class="string">&#x27;/請替換這邊為 Repositiory 的名稱/&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>Vue Cli 4.x</strong></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">export</span> = &#123;</span><br><span class="line">  <span class="attr">publicPath</span>: <span class="string">&#x27;/請替換這邊為 Repositiory 的名稱/&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：如果之後到 GitHub Page 上查看是一片空白，可以再試著修改一下這邊的路由，試試看把 <strong><code>&#39;/請替換這邊為 Repositiory 的名稱/&#39;</code></strong> 修改為 <strong><code>&#39;./&#39;</code></strong></p>
</blockquote>
<h3 id="Vue3-確保-Vue-router-的模式正常"><a href="#Vue3-確保-Vue-router-的模式正常" class="headerlink" title="Vue3 確保 Vue router 的模式正常"></a>Vue3 確保 Vue router 的模式正常</h3><p><img src="/images/others/loading.gif" data-original="/images/20210609/vue-router.png" alt="Vue Router"></p>
<p>如果你是 <strong>Vue3</strong> 請確定這隻檔案 <code>/src/router/index.ts</code> 裡面的一段程式碼：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(process.<span class="property">env</span>.<span class="property">BASE_URL</span>),</span><br><span class="line">  routes,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>這邊請確保 <strong><code>createWebHistory</code></strong> 裡面有帶上變數 <strong><code>process.env.BASE_URL</code></strong>，如果沒帶可能也會一片空白。</p>
<blockquote>
<p>如果還是一片空白可以試著把 <strong><code>process.env.BASE_URL</code></strong> 拿掉，或許會出現，這邊筆者按照上面的方式成功顯示頁面，但其他人有把 <strong><code>process.env.BASE_URL</code></strong> 拿掉，且 <strong><code>publicPath</code></strong> 並沒有加上 <strong>Repositiory</strong> 的名稱，所以都可以試著改看看。</p>
</blockquote>
<h3 id="快速部署"><a href="#快速部署" class="headerlink" title="快速部署"></a>快速部署</h3><p>最後這邊還是要來推一下之前的文章 <strong><a href="https://rexhung0302.github.io/2020/08/04/20200804/">[Git Notes] — 快速部署 Vue Cli 靜態資源至 GitHub Pages</a></strong>，如果你不想要每次都一直 <code>git add</code> 後推上去 <strong>GitHub</strong> 才能看到結果，或是想把 <strong>資源</strong> 和 <strong>編譯出來的成品</strong> 分開，也推薦使用這個方法。</p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>因為這次要提交某間公司的面試題目，剛好題目需求是需要使用框架跟前端單元測試，所以才會選擇使用 <strong>Vue3+TS+JE</strong>，但建立 <strong>GitHub Page</strong> 之後就一直一片空白，後來發現是 <strong>vue-router</strong> 那邊的東西顯示不出來，修修改改後才發現最主要是上面說的 <strong>vue router</strong> 跟 <strong>publicPath</strong> 這兩個問題。</p>
<p>最後還是要感謝<strong>六角的助教 Ray</strong>，剛好在群組發問時被認出來，後來也私下透過 <strong>Slack</strong> 幫助解決問題，大力感謝。</p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li>六角助教 Ray - <a href="https://hsiangfeng.github.io/vue/20200214/1055437216/">https://hsiangfeng.github.io/vue/20200214/1055437216/</a></li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
        <tag>FrameWork</tag>
        <tag>Vue</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>[React Note] — React 初次見面之 React Router 淺入淺出</title>
    <url>/2021/06/18/20210618/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p><img src="/images/others/loading.gif" data-original="/images/20210618/react-router-logo.png" alt="React Router"></p>
<p>初次入坑 <strong>React</strong>，首要任務為了解 <strong>React Router</strong> 所以就有這篇筆記的誕生，這篇文章會講解如何簡單運用及巢狀路由的運用。</p>
<span id="more"></span>

<p>因為最近工作需求，開始會接觸到 <strong>React</strong>，剛好先透過 <strong>React Router</strong> 來了解 <strong>React</strong>，如果你也剛好正想入門或是了解一下 <strong>React</strong> 的路由跟 <strong>Vue</strong> 有什麼不一樣，可以參考本篇紀錄。</p>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p>首先要先了解到 <strong>React Router</strong> 的基礎用法，可能會合印象中 <strong>Vue Router</strong> 就透過一個 <code>&lt;router-view&gt;&lt;/router-view&gt;</code> 即可渲染有點差異，所以這邊會分四個部分(第一部分為簡單介紹)。</p>
<ol>
<li><p>關於 React Router 及 React Router Dom</p>
</li>
<li><p>基礎的路由運用</p>
</li>
<li><p>巢狀的路由運用</p>
</li>
<li><p>透過 React Router Config 統一管理及渲染畫面</p>
</li>
</ol>
<blockquote>
<p>最後也會將範例檔放在 <strong>Github</strong> 上，有興趣的朋友都可以下載來玩看看，但需要事先提醒，因為目前筆者對 <strong>React</strong> 不是那麼熟悉，所以可能如<strong>樣式、檔案擺放或程式碼內容</strong>可能會有些許錯誤，如果有誤還請各路大神不見晾在下方留言。</p>
</blockquote>
<hr>
<h3 id="關於-React-Router-及-React-Router-Dom"><a href="#關於-React-Router-及-React-Router-Dom" class="headerlink" title="關於 React Router 及 React Router Dom"></a>關於 React Router 及 React Router Dom</h3><p><img src="/images/others/loading.gif" data-original="/images/20210618/react-router-dom.png" alt="React Router Dom"></p>
<p>如果您是後來才接觸，可能會滿疑惑為什麼網路上收尋 <strong><a href="https://github.com/ReactTraining/react-router#readme">React Route</a>r</strong>，安裝後卻出現 <strong>React Router Dom</strong> 呢？其實 <strong>React Router Dom</strong> 就只是基於 <strong>React Route</strong> 更進階的套件，核心都還是 <strong>React Route</strong>，相同地，<strong>react-router-native</strong> 也是基於 <strong>React Route</strong> 更進階的套件。</p>
<p>這邊我們需要知道 <strong>react-router</strong> 一些基礎用法及 <strong>react-router-dom</strong> 提供的用法，還有最後會了解 <strong>react-router-config</strong> 的用法。</p>
<h4 id="React-Router-Dom-的運用"><a href="#React-Router-Dom-的運用" class="headerlink" title="React Router Dom 的運用"></a>React Router Dom 的運用</h4><p><strong>React Router Dom</strong> 其實只是多了四個 <strong>React Component</strong>：<strong>BrowserRouter、 HashRouter、Link、NavLink</strong>。</p>
<blockquote>
<p><em>關於 React Router 的運作就是建立在 <strong><a href="https://github.com/ReactTraining/history">history</a></strong> 及 <strong>location</strong> 上，這邊因為是淺入淺出，就不多做探討，有興趣可以參考 <strong><a href="https://medium.com/%E6%89%8B%E5%AF%AB%E7%AD%86%E8%A8%98/a-little-bit-of-react-router-dom-e5b809fcb127">React-router-dom | 原理解析</a></strong> 這篇文章。</em></p>
</blockquote>
<hr>
<h3 id="基礎的路由運用"><a href="#基礎的路由運用" class="headerlink" title="基礎的路由運用"></a>基礎的路由運用</h3><p>首先需要先認識幾個元件，基本上認識這幾個元件後，就能建立基本的路由切換了。</p>
<ul>
<li><p>BrowserRouter</p>
</li>
<li><p>Switch</p>
</li>
<li><p>Link</p>
</li>
<li><p>Route</p>
</li>
</ul>
<p>讓我們先初始化專案，然後進去專案在安裝需要的套件(因為筆者的範例程式碼有安裝 <strong>UI</strong> 框架，這邊可以自己取捨)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npx create-react-app react-router-test</span><br><span class="line"></span><br><span class="line">$ cd react-router-test</span><br><span class="line"></span><br><span class="line">$ yarn i / npm i // 擇一</span><br><span class="line"></span><br><span class="line">$ npm i -S react-router-dom</span><br></pre></td></tr></table></figure>

<p>接著將 <strong>App.js</strong> 改為下面的程式碼：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span>, <span class="title class_">Switch</span>, <span class="title class_">Route</span>, <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createBrowserHistory &#125; <span class="keyword">from</span> <span class="string">&quot;history&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Component</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">UsersComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./users.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">React.Fragment</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">header</span> <span class="attr">className</span>=<span class="string">&quot;App-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>首頁<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/users&quot;</span>&gt;</span>使用者頁面<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            </span></span><br><span class="line"><span class="language-xml">            &#123;/* 路由元件引入方式有兩種 第一種用 render */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">render</span>=<span class="string">&#123;()</span>=&gt;</span> (</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">label</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            )&#125; /&gt;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            &#123;/* 路由元件引入方式有兩種 第二種種用 component */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/users&quot;</span> <span class="attr">component</span>=<span class="string">&#123;UsersComponent&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/:edit&quot;</span> <span class="attr">render</span>=<span class="string">&#123;()</span>=&gt;</span> (</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">label</span>&gt;</span>Hello Edit<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            )&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">React.Fragment</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<p>關於 <strong>Component</strong> 怎麼引入其實就看個人，通常會建議寫在外部在整合進來。</p>
<ul>
<li><p><strong>BrowserRouter</strong> - 上面我們先引入 <strong>BrowserRouter</strong> 然後使用 <strong>as</strong> 簡化成 <strong>Router</strong>，因為上面原理提過，路由的核心是 <strong>History</strong>，所以這邊必須用 <strong>BrowserRouter</strong> 把全部的程式碼包起來。</p>
</li>
<li><p><strong>Switch</strong> - 加不加這個其實都可以跑，但如果今天我們網址輸入 <code>/home</code>，其實也算是有匹配到 <code>/</code> 這個路由，這時候 <code>path=&quot;/:edit&quot;</code> 也會一起出現，這並不是我們所預期的，所以最快的方式就是加入 <strong>Switch</strong>，這個套件會預設幫你找最近且最符合資格的路由，例如 <code>/home</code>。</p>
</li>
<li><p><strong>Link</strong> - 這個你可以把它當成是 <code>&lt;router-link to=&quot;/home&quot;&gt;XXX&lt;/router-link&gt;</code>，最後會被轉為 <code>&lt;a&gt;&lt;/a&gt;</code> 標籤，然後可以讓使用者點擊後再轉倒頁面。</p>
</li>
<li><p><strong>Route</strong> - 這個你可以把它當成是 <code>&lt;router-view&gt;&lt;/router-view&gt;</code>，如果沒用過 <strong>Vue</strong> 沒關係，透過英文我們可以知道， <strong>Route</strong> 是路線、路徑的意思，所以意思就是拿來放顯示畫面的地方。</p>
</li>
</ul>
<p><img src="/images/others/loading.gif" data-original="/images/20210618/react-error.png" alt="React Router Error"></p>
<p>這邊你可能會問那 <code>&lt;React.Fragment&gt;&lt;/React.Fragment&gt;</code> 這個 <strong>Component</strong> 是在做什麼的呢？其實筆者這邊也很納悶，沒有加之前會噴紅，加了就不會了，希望有知道的大神可以在下方留言告訴筆者，感激不盡。</p>
<hr>
<h3 id="巢狀的路由運用"><a href="#巢狀的路由運用" class="headerlink" title="巢狀的路由運用"></a>巢狀的路由運用</h3><p>巢狀路由其實概念大致上都差不多，只是要注意幾個小地方，我們一樣拿上面的程式碼來改(樣式一樣請自己加上哦)：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span>, <span class="title class_">Switch</span>, <span class="title class_">Route</span>, <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createBrowserHistory &#125; <span class="keyword">from</span> <span class="string">&quot;history&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Component</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">UsersComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./users.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">React.Fragment</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">header</span> <span class="attr">className</span>=<span class="string">&quot;App-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>首頁<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/home/living-room&quot;</span>&gt;</span>首頁<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/users&quot;</span>&gt;</span>使用者頁面<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            </span></span><br><span class="line"><span class="language-xml">            &#123;/* 路由元件引入方式有兩種 第一種用 render */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">render</span>=<span class="string">&#123;()</span>=&gt;</span> (</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">label</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            )&#125; /&gt;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">&quot;/home/living-room&quot;</span> <span class="attr">render</span>=<span class="string">&#123;()</span>=&gt;</span> (</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">label</span>&gt;</span>Hello Living Room<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            )&#125; /&gt;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            &#123;/* 路由元件引入方式有兩種 第二種種用 component */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/users&quot;</span> <span class="attr">component</span>=<span class="string">&#123;UsersComponent&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/:edit&quot;</span> <span class="attr">render</span>=<span class="string">&#123;()</span>=&gt;</span> (</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">label</span>&gt;</span>Hello Edit<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            )&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">React.Fragment</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<p>其實大致上都差不多，但如果你的路由有第二層，像是 <code>path=&quot;/home/living-room&quot;</code> 這樣，請記得在 <code>&lt;Route&gt;&lt;/Route&gt;</code> 這邊裡面加上 <strong>exact</strong> 這個屬性，如果沒有加上，你會發現透過 <code>&lt;Link&gt;&lt;/Link&gt;</code> 跳轉或是直接輸入網址導入到 <code>/home/living-room</code> 時，這時候 <code>/home/</code> 也會被渲染出來，因為路徑匹配到了，所以通常如果不是多頁面共用的元件建議都會改成像是 <code>&lt;Route exact path=&quot;/home/living-room&quot; /&gt;</code> 這樣。</p>
<hr>
<h3 id="透過-React-Router-Config-統一管理及渲染畫面"><a href="#透過-React-Router-Config-統一管理及渲染畫面" class="headerlink" title="透過 React Router Config 統一管理及渲染畫面"></a>透過 React Router Config 統一管理及渲染畫面</h3><p>最後你可能會滿納悶為什麼不能透過一隻檔案去統一管理路由，像是 <strong>Vue Router</strong> 那樣，最後再透過 <code>&lt;router-view&gt;&lt;/router-view&gt;</code> 渲染呢？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/user/:userId&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">User</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>剛開始可能會想說把路由整理起來，再透過 <strong>map</strong> 去渲染出來，這是一個做法，但我們可以透過套件 <strong>react-router-config</strong> 來做到這件事情，這邊只需要兩個地方，下面會提到。</p>
<p>首先我們先把路由整理起來：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// router.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Component 用 import 或是直接寫在這邊都可以</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">home</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">label</span>&gt;</span>Hello Home<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">&#x27;./user.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> password <span class="keyword">from</span> <span class="string">&#x27;./profile.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> password <span class="keyword">from</span> <span class="string">&#x27;./password.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;首頁&#x27;</span>,</span><br><span class="line">    <span class="attr">exact</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">component</span>: home</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;使用者資料&#x27;</span>,</span><br><span class="line">    <span class="attr">exact</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">component</span>: user,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/user/profile&#x27;</span>,</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;個人資訊&#x27;</span>,</span><br><span class="line">        <span class="attr">exact</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">component</span>: profile</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/user/password&#x27;</span>,</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;密碼更改&#x27;</span>,</span><br><span class="line">        <span class="attr">exact</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">component</span>: password</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>然後回來 <code>App.js</code>，改寫下面程式碼：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span>, <span class="title class_">Switch</span>, <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createBrowserHistory &#125; <span class="keyword">from</span> <span class="string">&quot;history&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 這次主角</span></span><br><span class="line"><span class="keyword">import</span> &#123; renderRoutes &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-config&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">&#x27;./router.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Component</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">UsersComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./users.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">React.Fragment</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">header</span> <span class="attr">className</span>=<span class="string">&quot;App-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;</span></span><br><span class="line"><span class="language-xml">                routes.map((route) =&gt; (</span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;route.path&#125;</span>&gt;</span>&#123;route.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                ))</span></span><br><span class="line"><span class="language-xml">              &#125;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123; renderRoutes(routes) &#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">React.Fragment</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<p>透過上面的方法，可以用 <strong>map</strong> 渲染出路由，不管是我們要拿來用 <strong>Link</strong> 的，或是拿來渲染畫面用的，因為我們在路由內已經都設定好了。</p>
<p><strong>這邊要注意，第一個重點！！</strong></p>
<p><strong>renderRoutes()</strong> 只能渲染第一層的畫面，所以接下來我們在會經過第二層的父元件上，使用 <code>&#123;route&#125;</code> 這個參數再把子元件傳下去，馬上接著建立 <code>user.js</code>、<code>profile.js</code>、<code>password.js</code>，這三隻檔案，然後打開 <code>user.js</code> 這隻檔案：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; renderRoutes &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-config&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">user</span> = (<span class="params">&#123; route &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;</span></span><br><span class="line"><span class="language-xml">      routes.map((route) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;route.path&#125;</span>&gt;</span>&#123;route.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  &#123; <span class="title function_">renderRoutes</span>(route.<span class="property">children</span>) &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> user;</span><br></pre></td></tr></table></figure>

<p>這邊就是第二個重點，這邊必須帶入的是 <strong>route</strong> 的 <strong>children</strong>，畫面才能渲染出來。</p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>這次因為剛接觸 <strong>React</strong> 其實滿多地方還不是很熟悉，這邊先練習比較基本的 <strong>React Router</strong>，看起來這潭水還很深？！雖然剛開始沒有 <strong>v-for, v-if, v-model</strong> 很不習慣，但我想各自框架都有各自的優點，未來會努力再學到更多的知識再繼續補筆記上來。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210618/react-router-practice.gif" alt="React Router Practice"></p>
<p>最後的最後這邊補上<a href="https://github.com/RexHung0302/react-router-practice">範例程式碼</a>，但因為練習時有特別在拆一個首頁目錄，所以會跟上面的程式碼有些許差別，但大致上的用法都差不多。</p>
<ul>
<li><a href="https://github.com/RexHung0302/react-router-practice">範例程式碼請點我</a></li>
</ul>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li>PJCHENder<br>那些沒告訴你的小細節 - <a href="https://pjchender.blogspot.com/2018/11/react-react-router-dynamic-breadcrumb.html">[React] 搭配 React Router 打造一個動態麵包屑（dynamic breadcrumb）</a></li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
        <tag>FrameWork</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>[React Note] — 前端 Excel 匯出加上樣式之 xlsx-style 的踩坑深入淺出</title>
    <url>/2021/07/29/20210729/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p><img src="/images/others/loading.gif" data-original="/images/20210729/excel-banner.png" alt="React Excel 踩坑之路"></p>
<ul>
<li><p>如果你有需要使用前端匯出 <strong>Excel</strong> 且需要將 <strong>Excel</strong> 加上樣式，推薦參考這篇文章！</p>
</li>
<li><p>如果你剛好使用 <strong>xlsx-style</strong> 碰到了套件本身的 <strong>Error</strong> 問題，更推薦參考這篇文章！</p>
</li>
<li><p>如果你只是想單純看看前端怎麼使用套件將 <strong>Data、Table、JSON</strong> 匯出，超級推薦這篇，但請各路大神手下留情。</p>
</li>
</ul>
<span id="more"></span>

<blockquote>
<p><em><strong>本篇文章為筆記使用，如果有任何錯誤的地方，還請手下留情，也歡迎在下方留言指教。</strong></em></p>
</blockquote>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p>這篇文章不會特別去比較各種 <strong>Excel</strong> 匯出的套件差異，單純會講解如何從這個需求一路到使用 <strong><a href="https://github.com/protobi/js-xlsx/tree/beta">xlsx-style</a></strong> 這個套件且踩坑一段時間，一路到成功解決這個問題。</p>
<p>如果你只想知道關於 <strong>xlsx-style</strong> 的 <strong>.&#x2F;cptable</strong> 坑，歡迎跳至下方使用指南瀏覽。</p>
<blockquote>
<p><em><strong>不得不說前端之路真的很孤獨啊，筆者察覺到台中(不確定是不是只有台中，因為目前只在台中就職)的前端職缺超級超級超級缺，但職缺待遇卻都超級超級超級差，不曉得到底是沒有人才？！還是沒有好公司呢？！因為這個原因，所以每間公司的前端都少得可憐，能討論的人也都很有限…有空在寫一篇文章來談談這個狀況吧</strong></em></p>
</blockquote>
<hr>
<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>俗話說得好 - 『<strong>工程師的成長推力是需求，是PM，是客戶，是薪水</strong>』（<del>開個小玩笑</del>。</p>
<p>因為在工作上剛好碰到後台需要產出 <strong>Excel</strong> 的需求，主管詢問前端能不能做到，以往都是請後端產出，但今天剛好有時間，就研究了一下該怎麼從前端產 <strong>Excel</strong>，而因為以前實作的產出結果是 <strong>CSV</strong>，但這次需要產出 <strong>.xlsx</strong> 還要加上樣式，所以心血來潮就研究了一下。</p>
<blockquote>
<p>如果你剛好有這個需求，但不想要太過複雜，可以使用 <strong><a href="https://d3js.org/">d3.js</a></strong> 的 <strong><a href="https://github.com/d3/d3/blob/main/API.md#delimiter-separated-values-d3-dsv">csv api</a></strong> 即可達成匯入匯出，甚至可以匯出圖表。</p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20210729/d3js.png" alt="d3.js"></p>
<p>在最後決定使用 <strong><a href="https://github.com/protobi/js-xlsx/tree/beta">xlsx-style</a></strong> 時，其實也考慮過 <strong><a href="https://github.com/exceljs/exceljs/blob/master/README_zh.md">exceljs</a></strong>，但因為需求上需要在輸出後加上樣式，故改選前者，如果你並不需要更改樣式，可以選擇後者，仔細去 <strong>Github</strong> 瞧瞧，後者有中文介紹(<del>對 筆者就是膚淺</del>)，且前者說真的文件不易讀，而且後來很多 <strong>Fork</strong> 出來相關的套件有很多隱藏的坑。</p>
<hr>
<h3 id="關於-xlsx-及-xlsx-style-的關係"><a href="#關於-xlsx-及-xlsx-style-的關係" class="headerlink" title="關於 xlsx 及 xlsx-style 的關係"></a>關於 xlsx 及 xlsx-style 的關係</h3><p><img src="/images/others/loading.gif" data-original="/images/20210729/xlsx-style.png" alt="xlsx-style"></p>
<p><strong>xlsx</strong> 就是 <strong>SheetJS</strong>，而 <strong>xlsx-style</strong> 是從 <strong>SheetJS fork</strong> 出來的套件，光看名字很容易會被搞混。</p>
<p>為什麼會用到 <strong>xlsx-style</strong> 呢？因為 <strong>xlsx</strong>(<strong>aka SheetJS</strong>，以下統一以 <strong>xlsx</strong> 稱呼之，避免搞混)免費版本不支援格式變更，例如：居中、自動換行…等等，所以後來出現了 <strong>xlsx-style</strong>。</p>
<hr>
<h3 id="使用指南"><a href="#使用指南" class="headerlink" title="使用指南"></a>使用指南</h3><h4 id="Step1：事前準備"><a href="#Step1：事前準備" class="headerlink" title="Step1：事前準備"></a>Step1：事前準備</h4><p>首先我們需要安裝相關套件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm i xlsx xlsx-style file-saver -S</span><br></pre></td></tr></table></figure>

<blockquote>
<p><em><strong>小提示： -S 是為了在 package.json 紀錄你安裝了這個套件，如果沒有加上去可能之後 Clone 專案的人在 npm install 的時候會少安裝這個套件，雖然 npm v5.0.0 後已經在安裝時預設加入這個指令，但筆者習慣性還是會加上；另外也可以在某些只有開發時會用到的套件安裝時加上 -D，意思是只有開發的時候(會放到 package.json 的 devDependencies)才會用到，例如 scss，因為編譯出來已經轉為 css，其他編譯出來還需要用到的請使用 -S(會放到 package.json 的 dependencies)。</strong></em></p>
</blockquote>
<p>這邊提一下為何會使用這三個套件，因為我們需要把 <strong>JSON</strong> 轉為 <strong>Sheet</strong>，就是 <strong>Excel</strong> 的格式，在網頁上 <strong>console.log</strong> 會如下圖。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210729/sheet.png" alt="sheet"></p>
<p>接著因為我們需要加上樣式，讓輸出後的 <strong>Excel</strong> 可以有顏色或者居中等等的目的(<del>因為不想付錢解鎖 xlsx 的進階功能</del>)，所以要透過 <strong>xlsx-style</strong> 去加上樣式。</p>
<p>最後的最後因為我們要在前端把檔案下載下來，而筆者很懶得再寫類似下面這種程式碼：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">downloadFileHandler</span>(<span class="params">blob</span>) &#123;</span><br><span class="line">  <span class="comment">// 建立一個 a 標籤供 插入檔案 及 點擊</span></span><br><span class="line">  <span class="keyword">var</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">  <span class="comment">// 插入檔案</span></span><br><span class="line">  link.<span class="property">href</span> = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span><br><span class="line">  link.<span class="property">download</span> = <span class="string">`excel - <span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;</span>.xlsx`</span>;</span><br><span class="line">  <span class="comment">// 在網頁插入這個 DOM</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(link);</span><br><span class="line">  <span class="comment">// 點擊下載</span></span><br><span class="line">  link.<span class="title function_">click</span>();</span><br><span class="line">  <span class="comment">// 移除網頁上這個 DOM</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(link);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以裝了 <strong>file-saver</strong> 這個套件，只需要將上面程式碼改為下方程式碼：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入套件</span></span><br><span class="line"><span class="keyword">import</span> &#123; saveAs &#125; <span class="keyword">from</span> <span class="string">&quot;file-saver&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 將你的 blob 丟進來 並 下載</span></span><br><span class="line"><span class="title function_">saveAs</span>(blob, <span class="string">`excel - <span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;</span>.xlsx`</span>);</span><br></pre></td></tr></table></figure>

<p>所以說，俗話說得好 - 『<strong>正因為懶，造就出偉大的工程師</strong>』(<del>沒錯又是我亂照的句子</del>)。</p>
<h4 id="Step2：Know-Bug"><a href="#Step2：Know-Bug" class="headerlink" title="Step2：Know Bug"></a>Step2：Know Bug</h4><p><img src="/images/others/loading.gif" data-original="/images/20210729/cptable-error.png" alt="惱人的 cptable 錯誤"></p>
<p>你沒看錯，第二步就要你認識 <strong>Bug</strong>，這也是本篇文章的重點了，筆者不曉得原套件是否有解除了這個問題，但網路上爬文幾乎都能收尋到一種解法，那就是直接去修改 <strong>node_modules</strong>，但聰明的你一定馬上覺得怪怪的，如果別人 clone 你的專案下來怎麼跑呢？每次部署或是每次其他同事要使用你都要跟他們說或者寫一份警告文件嗎？</p>
<p>網路上的文章甚至 <strong>xlsx-style</strong> 的 <strong>issues</strong> 討論區都是這種解法，詳細可參考</p>
<ul>
<li><p><a href="https://github.com/protobi/js-xlsx/issues/100#issuecomment-426619718">xlsx-style issues Can’t resolve ‘.&#x2F;cptable’ in ‘myPath\node_modules\xlsx-style\dist’ #100</a></p>
</li>
<li><p><a href="http://www.cxyzjd.com/article/qq_24044863/100011265">not found cptable in node_modules&#x2F;xlsx-style&#x2F;dist&#x2F;cpexcel.js_FWodong的博客-程序员宅基地</a></p>
</li>
<li><p><a href="https://blog.csdn.net/sunyv1/article/details/108601772">vue导入xlsx-style组件报错Can‘t resolve ‘.&#x2F;cptable‘ in ‘xxx\node_modules_xlsx</a></p>
</li>
</ul>
<p>看到後面因為瞧到了 <strong>Vue</strong> 的解法，但筆者使用的是 <strong>React</strong>，不過兩者原理應該相去不遠，所以筆者開始研究怎麼解開這個難題。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210729/807.png" alt="不要再改 807 行啦"></p>
<blockquote>
<p><em>請不要再直接改 <strong>807</strong> 行了…</em></p>
</blockquote>
<h4 id="Step3：Debug"><a href="#Step3：Debug" class="headerlink" title="Step3：Debug"></a>Step3：Debug</h4><p>打開終端機安裝套件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm i react-app-rewired customize-cra -S</span><br></pre></td></tr></table></figure>

<p>這邊要先說說為什麼需要安裝 <strong><a href="https://github.com/timarney/react-app-rewired">react-app-rewired</a></strong> 這個套件，而這個檔案是什麼；以往寫 <strong>Vue</strong> 都是直接創建 <strong>Webpack.config.js</strong> 去修改 <strong>Webpack</strong> 的設定，但因為 <strong>React</strong> 透過 <strong><a href="https://github.com/facebook/create-react-app">Create React App</a></strong> 去建立 React 應用的一個腳手架工具，他將你不需要關心的設定都配置好，就像 <strong>Apple IOS</strong>，所以直接創建並配置 <strong>Webpack.config.js</strong> 不是一個聰明的決定。</p>
<p><strong>React</strong> 其實預設有提供 <strong>eject</strong> 可以噴射出(<del>抱歉筆者字典直接翻譯，覺得很好記就用這個詞了</del>)他們原本的封裝在 <strong>Create React App</strong> 的配置，反編譯到目前的專案，缺點是 <code>之後 Create React App 升級後你再也享受不到升級後的好處，因為他已經是以檔案的形式存在的你專案</code>，故這邊不推薦這個『<strong>噴射設定方式</strong>』。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210729/eject.png" alt="Google 翻譯我就爛"></p>
<p>為了享有 <strong>Create React App</strong> 之後升級還能跟上升級後的福利，又能客製化設定，這邊就要依靠 <strong><a href="https://github.com/timarney/react-app-rewired">react-app-rewired</a></strong> 這個套件。</p>
<p>而 <strong><a href="https://github.com/arackaf/customize-cra">customize-cra</a></strong> 這個套件提供了 <strong>override</strong> 這個 <strong>api</strong>，讓程式可以吃到你創建的 <strong>config-overrides.js</strong> 這支檔案，這隻檔案可以想像成 <strong>webpack.config.js</strong>。</p>
<p>接著讓我們創建一支檔案放在專案根目錄，命名為 <strong>config-overrides.js</strong>，然後裡面打上：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; override, addWebpackExternals &#125; = <span class="built_in">require</span>(<span class="string">&quot;customize-cra&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">override</span>(</span><br><span class="line">  <span class="title function_">addWebpackExternals</span>(&#123;</span><br><span class="line">    <span class="string">&quot;./cptable&quot;</span>: <span class="string">&quot;var cptable&quot;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>正如上方提到爬文時看見了 <strong>Vue</strong> 的配置，大致的用意就是告訴編譯時，如果碰到 <strong>.&#x2F;cptable</strong> 這個關鍵字，就替換成 <strong>var cptable</strong>。</p>
<p>然後到 <strong>package.json</strong> 把 <strong>react-scripts start</strong> 那邊的程式碼改為：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//...略</span></span><br><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;start&quot;</span>: <span class="string">&quot;react-app-rewired start&quot;</span>,</span><br><span class="line">  <span class="string">&quot;build&quot;</span>: <span class="string">&quot;react-app-rewired build&quot;</span>,</span><br><span class="line">  <span class="string">&quot;test&quot;</span>: <span class="string">&quot;react-app-rewired test&quot;</span>,</span><br><span class="line">  <span class="comment">// 這個先不改，我們這邊也不會用到</span></span><br><span class="line">  <span class="string">&quot;eject&quot;</span>: <span class="string">&quot;react-scripts eject&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//...略</span></span><br></pre></td></tr></table></figure>

<p>最後再重跑一次 <strong>npm start</strong>，就會發現沒有噴錯了(<del>筆者計時卡關半已天多…</del>)。</p>
<p>這個步驟講了這麼多，簡單快速的在敘述一下整個過程。</p>
<ol>
<li><p>安裝套件 <strong>react-app-rewired</strong> 用於最後替代 <strong>package.json</strong> 的 <strong>react-scripts</strong></p>
</li>
<li><p>安裝套件 <strong>customize-cra</strong> 用於透過該套件 <strong>api</strong> 去吃到 <strong>config-overrides.js</strong> 的設定 及 <strong>取代編譯後套件的錯誤</strong></p>
</li>
<li><p>創建 <strong>config-overrides.js</strong> 修改 <strong>webpack</strong> 的配置。</p>
</li>
<li><p><del>休息一下，我們繼續。</del></p>
</li>
</ol>
<h4 id="Step4：基本概念"><a href="#Step4：基本概念" class="headerlink" title="Step4：基本概念"></a>Step4：基本概念</h4><p>在使用套件前我們必須先知道 <strong>xlsx</strong> 的基礎，這大段沒興趣可跳過，雖字多，但強烈建議閱讀。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210729/xlsx-basic.png" alt="基本概念"></p>
<p>首先要知道 <strong>Excel</strong> 的一些名稱對應，在 xlsx 設定上我們會使用到 <strong>Cell Object(單元格)、Worksheet Object(工作表)、Workbook Object(工作簿)</strong>…這三個，分別是從最小到最大單位範圍的 <strong>單元格、工作表、工作簿(通常指包含全部的工作表)</strong>；有興趣可以詳細參考 <strong><a href="https://zhuanlan.zhihu.com/p/257845606">JavaScript导出excel文件，并修改文件样式</a></strong>，這邊只會大略說明。</p>
<ul>
<li>—– <strong>Cell Object(單元格)</strong> —–</li>
</ul>
<p>通常指的是 <strong>Worksheet Object(工作表)</strong> 裡面的其中一個格子，裡面的屬性可參考 <strong><a href="https://github.com/protobi/js-xlsx/tree/beta#cell-object">xlsx Github - Cell Object</a></strong>，這邊基本上會用到的就是下列三個。</p>
<ul>
<li>v 單元格的值</li>
<li>t 單元格的類型，”b”布爾值、”n”數字、”e”錯誤、”s”字符串、”d”日期</li>
<li>s 單元格的樣式(這個是重點)</li>
</ul>
<p>另外重點需要知道 <strong>Cell Object(單元格)</strong> 的格式為 <strong>{c: C, r: R}</strong>，<strong>Ｃ</strong> 為列號、<strong>R</strong> 為行號，很簡單吧，以下圖為例 <strong>王五</strong> 就是在 <strong>{c: 1, r: 5}</strong>，記得<strong>格子開頭都是 0 開始算</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210729/sheet-introduct.png" alt="格式介紹"></p>
<blockquote>
<p><em><strong>xlsx 裡面有提供 utils 可以去對單元格進行操作，例如：LSX.utils.encode_row()、XLSX.utils.encode_cell()…等等</strong></em></p>
</blockquote>
<ul>
<li>—– <strong>Worksheet Object(工作表)</strong> —–</li>
</ul>
<p><img src="/images/others/loading.gif" data-original="/images/20210729/sheet.png" alt="sheet"></p>
<p>這個工作表可以透過 <strong>xlsx</strong> 的 <strong>worksheet</strong> 去對單元格做 <strong>合併、凍結、樣式</strong>…等等的設定，一樣可以詳細參考 <strong><a href="https://github.com/protobi/js-xlsx/tree/beta#worksheet-object">xlsx Github - Worksheet Object</a></strong>。</p>
<ul>
<li>Worksheet[‘!ref’]：<strong><code>!ref</code></strong> 代表這個工作表裡面的 <strong>Cell Object(單元格)</strong> 範圍。</li>
<li>Worksheet[‘!merges’]：可以合併儲存格，裡面需要帶入物件 <code>&#123;s: &#123; c: C &#125;, e: &#123; r: R &#125;&#125;</code> 開始到結束的格子，裡面 <strong>C</strong> 及 <strong>R</strong> 地方為你的格子格式，算法可以看上面的 <strong>Cell Object(單元格)</strong>。</li>
<li>Worksheet[‘!freeze’]：可以凍結單元格，變成類似懸浮的表頭。</li>
</ul>
<blockquote>
<p><em><strong>Worksheet 並不是 API 而是你需要自己去抓到 sheet，下面會有範例，這邊先上圖。</strong></em></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20210729/Worksheet-console.png" alt="Worksheet"></p>
<ul>
<li>—– <strong>Workbook Object(工作簿)</strong> —–</li>
</ul>
<p>這個應該就很明白了，多個 <strong>Worksheet Object(工作表)</strong> 就是 <strong>Workbook Object(工作簿)</strong>，一樣可參考 <strong><a href="https://github.com/protobi/js-xlsx/tree/beta#workbook-object">xlsx Github - Workbook Object</a></strong>。</p>
<p>這邊只需要我們可以命名 <strong>Worksheet Object(工作表)</strong> 的名稱，然後把對應的 <strong>Worksheet Object(工作表)</strong> 丟進去，如下方範例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Workbook</span> = &#123;</span><br><span class="line">  <span class="title class_">SheetNames</span>: [<span class="string">&quot;sheet_1&quot;</span>],</span><br><span class="line">  <span class="title class_">Sheets</span>: &#123;</span><br><span class="line">    <span class="attr">sheet_1</span>: <span class="title class_">Worksheet</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="Step5：快樂輸出"><a href="#Step5：快樂輸出" class="headerlink" title="Step5：快樂輸出"></a>Step5：快樂輸出</h4><p><img src="/images/others/loading.gif" data-original="/images/20210729/doggg.gif" alt="快樂輸出"></p>
<p>終於可以快樂的使用套件，看了前面字這麼多筆者知道你一定不耐煩了，這邊就會快速帶過了，簡單地列出幾點概要，並且會丟一個範例上 <strong>Github</strong>，有興趣可以直接 <strong>Clone</strong> 下來玩玩。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210729/all-step.png" alt="使用概要"></p>
<p>在前置步驟都做完之後，只需要把 <strong>JSON</strong> 透過 <strong>xlsx</strong> 的 <strong>json_to_sheet()</strong> 轉為 <strong>sheet</strong> 拿到 <strong>Worksheet Object</strong>，接著對想要操作的 <strong>Cell Object</strong> 裡面的 <strong>“s”</strong> 放進客製化樣式，相關可客製化內容可以參考 <strong><a href="https://github.com/protobi/js-xlsx/tree/beta#cell-styles">xlsx Github - Cell Styles</a></strong>，或是可參考其他作者的翻譯 <a href="https://itw01.com/8MJOMEL.html">JavaScript匯出excel檔案，並修改檔案樣式</a>。</p>
<p>接著透過 <strong>xlsx-style</strong> 的 <strong>write()</strong> 去把檔案編寫成 <strong>Excel</strong> 讀得懂的格式，詳細內容如下圖。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210729/xlsx-style-write.png" alt="xlsx-style-write"></p>
<blockquote>
<p><em><strong>請一定要使用 <strong>xlsx-style</strong> 的 <strong>write()</strong>，不然輸出後的檔案樣式不會變更，有興趣可以試看看。</strong></em></p>
</blockquote>
<p>最後在透過官方提供的 <strong>function</strong> 把上面的內容轉為 <strong>blob</strong>，<strong>function</strong> 如下，詳細也可參考 <strong><a href="https://github.com/protobi/js-xlsx/tree/beta#writing-workbooks">官方文件</a></strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">s2ab</span> = (<span class="params">s</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">var</span> buf = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(s.<span class="property">length</span>);</span><br><span class="line">  <span class="keyword">var</span> view = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(buf);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i !== s.<span class="property">length</span>; ++i) view[i] = s.<span class="title function_">charCodeAt</span>(i) &amp; <span class="number">0xff</span>;</span><br><span class="line">  <span class="keyword">return</span> buf;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>最後的最後透過套件 <strong>file-saver</strong>，省去自己寫 <strong>function</strong> 透過 <strong>api saveAs</strong> 去下載這個 <strong>blob</strong>，大功告成！</p>
<hr>
<h3 id="最終成果"><a href="#最終成果" class="headerlink" title="最終成果"></a>最終成果</h3><p>因為時間關係，目前只有實作 <strong>JSON</strong> 轉為 <strong>xlsx</strong>，之後會再將這個範例補上如何將 <strong>xlsx</strong> 轉為 <strong>JSON</strong>。</p>
<p>Source Code：<a href="https://github.com/RexHung0302/React-xlsx-style">點我</a></p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>其實最一開始只是想紀錄 <strong>xlsx-style</strong> 的套件問題(<strong>cptable error</strong>)，後來又碰到 <strong>React</strong> 的 <strong>overrides</strong>，不小心又獲得了一些額外技能點。</p>
<p>這次拜這個需求所賜，又對 <strong>React</strong> 了解了一點，雖然中途處處碰壁，一直很挫折，但最後還是成就感十足；關於前端孤獨之路之後有空再分享，如果各位有什麼建議，或是筆者在內容上有錯誤，還請不吝嗇直接提出。</p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><p>知乎 - <a href="https://zhuanlan.zhihu.com/p/257845606">JavaScript导出excel文件，并修改文件样式</a></p>
</li>
<li><p>ITW01 - <a href="https://itw01.com/8MJOMEL.html">JavaScript匯出excel檔案，並修改檔案樣式</a></p>
</li>
<li><p>Gihub - <a href="https://github.com/protobi/js-xlsx/tree/beta#writing-workbooks">xlsx-style</a></p>
</li>
<li><p>Gihub - <a href="https://github.com/SheetJS/sheetjs">xlsx aka Sheetjs</a></p>
</li>
<li><p>Github - <a href="https://github.com/timarney/react-app-rewired">react-app-rewired</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
        <tag>FrameWork</tag>
        <tag>React</tag>
        <tag>Excel</tag>
        <tag>xlsx</tag>
        <tag>xlsx-style</tag>
      </tags>
  </entry>
  <entry>
    <title>[Crypto Note] - 如何第一次交易虛擬幣就上手</title>
    <url>/2021/04/25/20210425/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p><img src="/images/others/loading.gif" data-original="/images/20210425/crypto.png" alt="加密貨幣"></p>
<p>『<strong>幣圈一天，人間一年</strong>』，想知道怎麼加快老化程度，甚至想要過幾年就超越你父母的年紀嗎(誤？</p>
<p>這是一篇關於虛擬貨幣的買賣筆記，如果你也有興趣，就繼續往下讀下去吧！</p>
<span id="more"></span>

<blockquote>
<p>任何相關內容都只是投資筆記並非投資建議，投資理財有賺有賠，申請前請詳閱公開說明書。</p>
</blockquote>
<hr>
<h3 id="加密貨幣"><a href="#加密貨幣" class="headerlink" title="加密貨幣"></a>加密貨幣</h3><p>相信在最近除了你身邊的叔叔阿姨阿公阿嬤之外，連早餐店會叫你帥哥的老闆一直到在讀書的學生都會一直跟你說『<strong>欸，今天台股又新高啦！</strong>』。</p>
<p>沒錯！在這個 <strong>被動&amp;斜槓</strong> 的時代，舉凡股市、代理…之外，<strong>虛擬貨幣</strong>也是萬人空巷，今天就要來說說該怎麼入門虛擬貨幣。</p>
<blockquote>
<p><em>再次提醒『<strong>幣圈一天，人間一年</strong>』，因為虛擬貨幣市場沒有休息日，而且沒有漲跌幅限制，大家常在說上下 <strong>15%</strong> 是橫盤，不過現在虛擬貨幣也可以購買 特斯拉股票 了，可見之後的未來發展無可想像。</em></p>
</blockquote>
<hr>
<h3 id="基本概念及交易所"><a href="#基本概念及交易所" class="headerlink" title="基本概念及交易所"></a>基本概念及交易所</h3><p>在搞懂一切東西之前你必須要先知道基本的 <strong>區塊鏈</strong> 及 <strong>去中心化</strong> 概念，這邊推薦 <a href="https://www.youtube.com/watch?v=Oe7fzDrIKt4">什么是 区块链？什么是 去中心化？</a> 這個影片知道一些基本概念。</p>
<p>如果今天我們從區塊鏈裡拿到獎勵的比特幣，總會有個地方可以讓我們去做交易，這時候我們就必須透過交易所；如果今天你不想要購買礦機去挖礦，單純只想炒幣也可以直接申請交易所的帳戶去做操作，類似操作股票的概念。</p>
<h4 id="現貨-去中心化交易所"><a href="#現貨-去中心化交易所" class="headerlink" title="現貨 &amp; 去中心化交易所"></a>現貨 &amp; 去中心化交易所</h4><p>在一般我們認知的挖礦，我們還能透過交易所去買賣虛擬貨幣，其實就跟買賣台股沒什麼差異，而交易所也是有大有小，在挑選台股交易所時我們會挑手續費低，服務多的，而在虛擬貨幣交易所也是大同小異。</p>
<p>一般來說我們正常會使用現貨交易所，諸如 <strong>幣安、火幣</strong> 或 老牌交易所 <strong>Coinbase Pro</strong>…等等，可參考下圖。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210425/spotTopFive.png" alt="現貨交易所排行"></p>
<p>這邊不過多討論 <strong>現貨、衍生品、去中心化交易所</strong> 及 <strong>Lending</strong> 的差異，今天主要內容會放在如何購買虛擬貨幣。</p>
<h4 id="交易所-錢包"><a href="#交易所-錢包" class="headerlink" title="交易所 &amp; 錢包"></a>交易所 &amp; 錢包</h4><p>今天不管你是挖礦得到的幣，還是透過朋友拿到的幣，都必須要有個地方存放你的虛擬貨幣，這個存放錢幣的地方就是錢包，而錢包大致上可分為 <strong>冷錢包</strong> 或 <strong>熱錢包</strong>，最大的區別就在前者不會連接網路而後者會連接網路。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210425/coolwallet.png" alt="冷錢包"></p>
<blockquote>
<p><em>詳細區別可參考 <a href="https://to-coin.com/best-bnb-wallet/">如何安全地儲存 完整冷錢包熱錢包介紹</a></em></p>
</blockquote>
<p>而通常冷錢包的價格都不便宜，熱錢包通常交易所會提供，或是安裝一些APP，類似 <strong>MetaMask(狐狸錢包)、Trust Wallet</strong>…等等，剛開始入坑的韭菜們都會建議先開通交易所，先使用交易所提供的錢包，如果之後長期看好某些虛擬貨幣，就可以把這些虛擬貨幣丟進自己錢包內。</p>
<h4 id="你必須認識的幾個虛擬幣"><a href="#你必須認識的幾個虛擬幣" class="headerlink" title="你必須認識的幾個虛擬幣"></a>你必須認識的幾個虛擬幣</h4><ol>
<li><p>比特幣(BTC)</p>
</li>
<li><p>以太幣(ETH)</p>
</li>
<li><p>泰達幣(USDT) - 穩定幣 基本會讓一個 USDT:一塊美金</p>
</li>
<li><p>幣安幣(BNB) - 和前三個幣不同的地方是，BNB算是平台幣</p>
</li>
</ol>
<p>基本上如果想要長期投資可以買一些 <strong>BTC、ETH</strong>，而 <strong>BNB</strong> 是可以在 幣安 平台上做很多活動，例如<strong>挖礦、IEO</strong> 或 <strong>在去中心化交易中心當手續費扣</strong>…等等，如果今天是想使用其他平台，也可以購入一些他們的平台幣，基本上都會有折扣優惠或是活動可以參加等等，例如 <strong>FTX</strong> 的 <strong>FTT Coin</strong>。</p>
<hr>
<h3 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h3><p>在這邊筆者也簡單介紹一下整個買賣流程及建議方式，主要以幾間筆者較熟悉的交易所做介紹(因為幣安目前為現貨交易所排行第一所以這邊推薦幣安交易所入門)。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210425/process.png" alt="基本買賣流程"></p>
<p>上圖是基本的購買流程，這邊整理一下事前需要準備的項目：</p>
<ol>
<li><p>MAX交易所帳戶</p>
</li>
<li><p>幣安交易所帳戶</p>
</li>
</ol>
<blockquote>
<p>*因為 <strong>PancakeSwap</strong> 為 <strong>幣安(Binance)</strong> 開發出的 的 <strong>Binance智能鏈（BSC）</strong>，配合幣安交易所交易比較方便外手續費(<strong>Gas Fee</strong>)也比較低所以去中心化交易所目前筆者會推薦這個。*</p>
</blockquote>
<h4 id="MAX申請"><a href="#MAX申請" class="headerlink" title="MAX申請"></a>MAX申請</h4><p>這邊需要先申請 <strong>MAX交易所</strong>，如果這篇文章對你有幫助，可以使用我的<a href="https://max.maicoin.com/signup?r=9f270778">連結</a>申請或者透過我的推薦碼ID <strong>9f270778</strong>，之後買賣你會有 <strong>20%的交易手續費折抵</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210425/MAX_QR_Code.png" alt="筆者推薦碼"></p>
<p>首先掃上方 <strong>QRCode</strong> 或使用筆者的推薦碼連結進入 <a href="https://max.maicoin.com/signup?r=9f270778">MAX官方網站註冊</a> ，或者直接搜尋 <strong>MAX官方網站</strong> 點擊右上角註冊。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210425/MAX.png" alt="註冊"></p>
<p>接著開始申請步驟，這邊就不詳述了</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210425/MAX_step1.png" alt="輸入基本資訊"></p>
<p>申請結束後會是 <strong>LV.1</strong> 的階級，可以進行幣幣交易，但還無法出入金台幣，可參考 <a href="https://max.maicoin.com/docs/limits">MAX等級限制</a>，這邊必須要再上傳身分證及手持身分證自拍上傳(簡稱 <strong>KYC</strong>，之後幾乎每一個交易所都會用到)</p>
<p>這邊驗證升上 <strong>LV.2</strong> 的時間大約會在一週到兩三週不等，近期會越來越慢，因為越來越多人申請，至於 <strong>LV.3</strong> 就看個人有無需要，<strong>LV.2</strong> 及 <strong>LV.3</strong> 的差異就只差在出入金的上限。</p>
<h4 id="幣安申請"><a href="#幣安申請" class="headerlink" title="幣安申請"></a>幣安申請</h4><p>申請完成 <strong>MAX交易所</strong> 之後等待驗證的時間(約一週到兩三週不等)可以先申請 <strong>幣安交易所</strong>，這邊一樣附上筆者的<a href="https://www.binance.com/zh-TW/register?ref=94070026">幣安推薦碼</a> 及 推薦碼ID <strong>94070026</strong>，之後買賣會有 <strong>20%的反佣</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210425/BinanceQRCode.png" alt="筆者推薦碼"></p>
<p>首先掃上方 <strong>QRCode</strong> 或使用筆者的推薦碼連結進入 <a href="https://www.binance.com/zh-TW/register?ref=94070026">幣安官方網站註冊</a>，或者直接搜尋 <strong>幣安官方網站</strong> 點擊右上角註冊 或 立即註冊。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210425/Binance.png" alt="註冊"></p>
<p>接著一樣開始註冊步驟，這邊也不詳細贅述，中間驗證也需要 <strong>KYC</strong> 然後要等待約一週到兩週不等的時間，如果中途沒有被開通可以向官方反應，假使不幸沒有通過，通常官方也只會告知你資格不符合，這時候可能只能使用其他交易所了。</p>
<h4 id="Google-Authenticator-安全驗證"><a href="#Google-Authenticator-安全驗證" class="headerlink" title="Google Authenticator 安全驗證"></a>Google Authenticator 安全驗證</h4><p>通常靠帳號密碼登入是非常不安全的，我們會透過 <strong>Google Authenticator</strong> 做二階段驗證，往後再登入交易中心或是錢包的時候，如果有連結 <strong>Google Authenticator</strong> 會需要你先到這個 APP 拿驗證碼，然後再驗證，通常驗證碼只會存在幾秒鐘，會一直刷新，所以是滿安全的。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210425/GA_EX.png" alt="驗證碼會一直刷新"></p>
<blockquote>
<p><em>詳細可參考 <a href="https://www.binance.com/zh-TW/support/faq/115000433432">谷歌二次認證操作說明
</a></em></p>
</blockquote>
<h4 id="基本安裝推薦"><a href="#基本安裝推薦" class="headerlink" title="基本安裝推薦"></a>基本安裝推薦</h4><p>這邊推薦把 <strong>幣安、MAX</strong> 及 <strong>Google Authenticator</strong> 都安裝在手機上，使用手機操作，另外其餘的交易所如果有興趣也可以先進行申請還有 <strong>KYC</strong>，例如 <strong>FTX Pro、BitoPro、ACE</strong>…等等，至於是好是壞就建議上網爬爬文或者加入社群詢問其他使用者，畢竟投資也不是一昧的跟著別人走，這樣就跟加入仙股群沒什麼兩樣了。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210425/APP_recommon.png" alt="基本安裝APP"></p>
<hr>
<h3 id="關於買賣"><a href="#關於買賣" class="headerlink" title="關於買賣"></a>關於買賣</h3><p>再通過驗證後，我們必須先入金，入金流程就是下方圖示，手續費個人戶通常是 <strong>15塊</strong> 台幣。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210425/deposit_process.png" alt="MAX入金流程"></p>
<p>成功入金後，透過下方流程購買穩定幣 <strong>USDT</strong>，</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210425/MAX_buy_process.png" alt="MAX購買穩定幣流程"></p>
<p>購買成功後就可以透過 <strong>TRC-20</strong> 發送到 <strong>幣安</strong>，基本就不會收取手續費，詳情可參考 <a href="https://max.maicoin.com/campaigns/trc20usdt">MAX - 3&#x2F;23 支援 TRC20 - USDT 的入金和提領</a>。</p>
<p>整個操作流程就是像下圖，這邊筆者要跟道歉，容我偷懶一下，用圖片跟簡單敘述帶過。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210425/MAX_TO_Binance_step1.png" alt="MAX傳送穩定幣到幣安流程一"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20210425/MAX_TO_Binance_step2.png" alt="MAX傳送穩定幣到幣安流程二"></p>
<p>成功後到幣安可以查詢是否有收到，接著就可以開始買賣了，請記得在幣安找的交易對，盡量都找後面是 <strong>USDT</strong> 的，因為你是持有 <strong>USDT</strong>，除非那個幣沒有 <strong>USDT</strong>，才需要先去買對應的幣種。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210425/USDT_EX.png" alt="幣種對"></p>
<p>例如上圖看見的後面交易對都是 <strong>USDT</strong>，就代表用後面去買前面的幣，舉凡 <strong>BTC&#x2F;USDT、BNB&#x2F;USDT、FIL&#x2F;USDT</strong>…等等，相對的如果賣出就是賣掉前面的，換取後面的 <strong>USDT</strong>，這時候就可以掛限價單了。</p>
<hr>
<h3 id="關於其它幣種"><a href="#關於其它幣種" class="headerlink" title="關於其它幣種"></a>關於其它幣種</h3><p>有些剛出的幣種，或許你在交易所上會看不到，但你又會想要持有，例如下圖的 <strong>便便幣</strong>，這時候需要再透過 <strong>其它的錢包</strong> 及 <strong>去中心化交易所</strong> 購買，這邊會在下次的文章筆記中紀錄。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210425/POO_COIN_EX.png" alt="便便幣 筆者在寫紀錄這天一顆也要將近4美金"></p>
<hr>
<h3 id="簡單QA"><a href="#簡單QA" class="headerlink" title="簡單QA"></a>簡單QA</h3><p>Q: 為什麼不直接在 MAX交易所 上交易就好了，還需要透過幣安呢？<br>A: 很簡單，找交易所，找交易量最大的就對了，不然你會照成滑點，什麼是滑點呢，就是你可以掛買10塊錢，但因為賣的人太少，結果實際成交在12塊，相反的你掛賣10塊，買的人太少，實際成交價在8塊。另外幣安的活動多，有一些質押利率也比較好。</p>
<p>Q: 為什麼要在技術部落格寫投資文章呢？<br>A: 這個部落格其實一直就是以 <strong>生活</strong> 及 <strong>工作</strong> 為主，但我發現部落格目前比例嚴重失衡(QQ，所以想找幾個有興趣得東西加入，而工程師嘛，基本上接處的資訊都很新，我相信尤其是在被動收入及投資這塊，大家都有興趣，誰不想賺更多錢呢？所以之後有機會都會不定期的分享文章。</p>
<p>Q: 你是不是老鼠會？資金盤？收下線？<br>A: 當然不是，請放心你收尋一百篇文章都會附上推薦碼給你，這只是平台回饋給幫助推廣的人一個活動，基本上任何平台甚至類型都是，舉例來說外匯也是，但為什麼會有 <strong>外匯Ｘ年軍</strong> 呢？因為他們是使用自家甚至不太知名的軟體或公司去跟你推廣及讓你入金，也很難出金，至於幣安的話，不用擔心了，上網都查得到，也還是那句老話，投資有賺有賠，大家都是成年人了，決定權在你身上，可以多看、多聽、再決定。</p>
<p>Q: 虛擬幣這麼無聊嗎？只能買賣投資？那我買股票就好啦<br>A: 虛擬幣不只是買賣投資，近期甚至發展到了 <strong>NFT</strong>，什麼是 <strong>NFT</strong> 呢？請參考 <a href="https://www.rayskyinvest.com/29482/what-is-nft?utm_source=raysky&utm_medium=Google_ads&utm_campaign=29482_what_is_nft&gclid=Cj0KCQjwppSEBhCGARIsANIs4p6bod86qV_j0FpPjKPpM3K_e-Su_QUFtVY0zd_o3zMObQr3m7EF-AYaAnGmEALw_wcB">什麼是 NFT？</a>，而之後又發展到了 CryptoKitties、NBA Top Shot，還有台灣歌手都已經在玩了 <a href="https://www.blocktempo.com/interest-in-nfts-has-reached-2017-ico-levels/">台灣樂壇首例！周興哲預告發行NFT音樂作品；NFT搜尋量直逼2017年ICO狂熱</a>，這裡面的獲利程度大到超乎你想像。</p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>其實原本想打一篇如何透過去 <strong>去中心化交易所</strong> 買到交易所上沒有的幣種，但想來想去如果有其他人有興趣，也可以先透過文章筆記內容申請玩看看已經在交易中心的幣種，但還是那句『<strong>任何相關內容都只是投資筆記並非投資建議，投資理財有賺有賠，申請前請詳閱公開說明書</strong>』，下次有機會會在介紹一下 <strong>PancakeSwap</strong> 這間交易所。</p>
<p><strong>幣安</strong> 這間交易所不只是交易虛擬貨幣，還可以透過 <strong>流動性挖礦、IEO</strong>…等等的拿到很多新幣，如果各位有興趣都可以上網找相關文章介紹，如果你對虛擬貨幣有興趣，很歡迎在下面留言或是留下你的 <strong>LINE ID</strong> 一起討論。</p>
<p>之後有機會筆者也會介紹一下最近很紅很熱的 <strong>NBA Top Shot</strong>，基本上基本卡包 <strong>9美金</strong> 起跳，如果抽到稀有卡片賣到<strong>上千上萬美金</strong>都有可能，有機會也會來介紹一下怎麼玩。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210425/nab_top_shot_EX.png" alt="詹皇的卡片甚至賣到 199999 美金"></p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><p>幣安 - <a href="https://www.binance.com/zh-TW">幣安台灣官網</a></p>
</li>
<li><p>MAX — <a href="https://max.maicoin.com/campaigns/3anniversary?gclid=Cj0KCQjwppSEBhCGARIsANIs4p5USeg-yjs8kx0lHVnun8I4ZJ8jJZ7eNuLF8rkawuxzmm6NTfh5is0aApHWEALw_wcB">MAX交易所</a></p>
</li>
<li><p>TOCOIN - <a href="https://to-coin.com/best-bnb-wallet/">【 2021最新】幣安幣(BNB)錢包推薦 如何安全地儲存 完整冷錢包熱錢包介紹</a></p>
</li>
<li><p>Rayskyinvest Website - <a href="https://www.rayskyinvest.com/29482/what-is-nft?utm_source=raysky&utm_medium=Google_ads&utm_campaign=29482_what_is_nft&gclid=Cj0KCQjwppSEBhCGARIsANIs4p6bod86qV_j0FpPjKPpM3K_e-Su_QUFtVY0zd_o3zMObQr3m7EF-AYaAnGmEALw_wcB">什麼是 NFT？從零到一完整觀念講解到 NFT 項目投資教學</a></p>
</li>
<li><p>Block TEMPO - <a href="https://www.blocktempo.com/interest-in-nfts-has-reached-2017-ico-levels/">台灣樂壇首例！周興哲預告發行NFT音樂作品；NFT搜尋量直逼2017年ICO狂熱</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>投資理財</category>
        <category>Crypto</category>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Investment</tag>
        <tag>Crypto</tag>
        <tag>Binance</tag>
        <tag>PancakeSwap</tag>
      </tags>
  </entry>
  <entry>
    <title>[Git Note] — React 部署至 GitHub Page 超級淺入遷出</title>
    <url>/2021/09/28/20210928/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p><img src="/images/others/loading.gif" data-original="/images/20210928/banner.jpg" alt="Create React App + Github Pages"></p>
<p>如果你正在尋找如何將 <strong>React</strong> 部署上 <strong>Github Page</strong>，那就可以參考此篇文章，整個流程可在幾分鐘不到的時間學會。</p>
<span id="more"></span>

<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><blockquote>
<p><strong>Vue</strong> 和 <strong>React</strong> 的部署方式不同，故紀錄流程方便日後查看或供需要的人學習。</p>
</blockquote>
<p>本篇文章預設學習前的基本條件需求</p>
<ul>
<li>會使用 <strong>Git</strong> 並且能推 <strong>Code</strong> 上 <strong>Github</strong></li>
<li>知道 <strong>Create-React-App</strong> 且可以建立出基本 <strong>React</strong> 專案</li>
<li>會使用 <strong>Npm</strong> 或 <strong>Yarn</strong> 安裝 <strong>package</strong></li>
</ul>
<hr>
<h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><blockquote>
<p><em>基本上預設您已經有一個專案，這邊會使用 <a href="https://github.com/RexHung0302/react-router-practice">react-router-practice</a> 作為範例，如果想學習 <strong>React Router</strong> 的相關知識可參考 <a href="https://rexhung0302.github.io/2021/06/18/20210618/#more">[React Notes] — React 初次見面之 React Router 淺入淺出</a></em></p>
</blockquote>
<ol>
<li>首先需要先推程式碼上 <strong>Github</strong></li>
</ol>
<p><img src="/images/others/loading.gif" data-original="/images/20210928/gitRes.jpg" alt="Github Res"></p>
<ol start="2">
<li>接著回到專案，並且安裝套件 <a href="https://github.com/tschaub/gh-pages"><strong>gh-pages</strong></a></li>
</ol>
<p><img src="/images/others/loading.gif" data-original="/images/20210928/cmdLine.png" alt="安裝套件"></p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">$ npm i gh-pages / yarn add gh-pages <span class="comment">// 選擇你啟動專案的方式</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>將 <strong>package.json</strong> 補上兩行相關指令</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-scripts start&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-scripts build&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-scripts test&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eject&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-scripts eject&quot;</span><span class="punctuation">,</span></span><br><span class="line">+   <span class="attr">&quot;predeploy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run build&quot;</span><span class="punctuation">,</span> <span class="comment">// 這邊使用 npm 或 yarn 就看你啟動專案的方式</span></span><br><span class="line">+   <span class="attr">&quot;deploy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gh-pages -d build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>將 <strong>package.json</strong> 補上 <strong>homepage</strong> 的網址</li>
</ol>
<ul>
<li>請將 <strong>githubusername</strong> 換成你的 <strong>Github</strong> 帳號</li>
<li>請將 <strong>app-name</strong> 換成你 <strong>Repository</strong> 的名稱</li>
</ul>
<p><img src="/images/others/loading.gif" data-original="/images/20210928/homePageUrl.png" alt="路徑千萬不要打錯囉"></p>
<blockquote>
<p><strong>這邊需要注意如果你的帳號為大寫，都一致改為全小寫，下圖紅色是『githubusername』，藍色『app-name』</strong></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20210928/homePageExampleGithub.png" alt="可直接到你的 Github 查看使用名稱及專案名稱"></p>
<p>改完大致上如下圖</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210928/packageJson.png" alt="package.json"></p>
<ol start="5">
<li>執行指令，輸入下列指令</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">$ npm run deploy / yarn deploy <span class="comment">// 這邊使用 npm 或 yarn 就看你啟動專案的方式</span></span><br></pre></td></tr></table></figure>

<p>跑完後上 <strong>Github</strong> 應該會看到你的分支多了一個 <strong>gh-pages</strong>，如下圖</p>
<p><img src="/images/others/loading.gif" data-original="/images/20210928/gh-pages.png" alt="gh-pages"></p>
<ol start="6">
<li>接著按照下圖順序操作</li>
</ol>
<ul>
<li>先點擊 <strong>Setting</strong></li>
<li>再點擊 <strong>Pages</strong></li>
<li>接著將分支切換至 <strong>gh-pages</strong> 然後資料夾為 <strong>&#x2F;(root)</strong> ，再點擊保存**(Save)**</li>
<li>最後就會有展示網址出來了</li>
</ul>
<p><img src="/images/others/loading.gif" data-original="/images/20210928/step-guid.png" alt="跟著步驟一步一步走"></p>
<ol start="7">
<li>查看成果</li>
</ol>
<p><img src="/images/others/loading.gif" data-original="/images/20210928/result.png" alt="成果展示"></p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>最近忙碌一個回過神發現已經兩個月沒有撰寫新文章了，最近剛轉換跑道，還在跟新的技術框架奮鬥中；恰巧這次工作專案需要部署上 <strong>Github Pages</strong>，所以就趁機筆記一下整個過程。</p>
<p>之前使用 <strong>Vue</strong> 都是透過自己寫 <a href="http://deploy.sh/">deploy.sh</a> 去推 <strong>Code</strong> 上 <strong>Github</strong>，第一次推 <strong>React</strong> 上 <strong>Github</strong> 卻發現打開都是一片空白，一查才發現跟 <strong>Vue</strong> 的方式大大不同，所以就趁機記錄下來了，但其實實作後發現這個過程非常的易學且快速，相信第一次推 <strong>React</strong> 上 <strong>Github</strong> 的你也會喜歡這種方式。</p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li>iT邦幫忙 - <a href="https://ithelp.ithome.com.tw/articles/10228423">[Day 29 - 即時天氣] 寫網頁就是要炫耀啊，不然要幹麻？發布上 Github Pages 吧！</a></li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
        <tag>FrameWork</tag>
        <tag>GitHub</tag>
        <tag>React</tag>
        <tag>CreateReactApp</tag>
      </tags>
  </entry>
  <entry>
    <title>[NodeJS Become A Full Stack Developer] — 透過 Socket.io 來製作即時聊天室吧</title>
    <url>/2021/10/01/20211001/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p><img src="/images/others/loading.gif" data-original="/images/20211001/demo.gif" alt="Chat Room"></p>
<p>這是一篇關於 <strong>Socket.io</strong> 的淺入淺出文章，如果你正在尋找相關知識或想知道什麼是 <strong>Socket.io</strong> 甚至有想要嘗試自己做一個即時聊天室，那麼這篇文章就很適合你。</p>
<span id="more"></span>

<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p>本篇文章後端將會使用 <strong>Node.js</strong>，前端將會使用 <strong>React(Create React APP)</strong>，不同框架語言使用方式其實應該都差不多，但如果你有打算使用其他框架，可以再多爬幾篇文章比較一下。</p>
<p>這邊會簡單的提一下 <strong>Socket.io</strong> 是什麼，但不會深度解析什麼是 <strong>Socket.io</strong> 及背後的原理；最後我們將會實作出有下列幾個簡單功能的聊天室。</p>
<ol>
<li>透過 <strong>Socket.io</strong> 達到即時聊天效果。</li>
<li>不同聊天室分群聊天效果。</li>
<li>全頻道&#x2F;分群廣播效果。</li>
<li>透過打 <strong>api</strong> 後，操作 <strong>Socket.io</strong>。</li>
</ol>
<hr>
<h2 id="淺入淺出關於-Sokect-io-的介紹"><a href="#淺入淺出關於-Sokect-io-的介紹" class="headerlink" title="淺入淺出關於 Sokect.io 的介紹"></a>淺入淺出關於 Sokect.io 的介紹</h2><blockquote>
<p><em><strong>在實作 Socket.io 聊天室之前，筆者雖然預設大家都已經知道這個東西是什麼，但或許還是有一些讀者是第一次接觸或不了解 Socket.io 的。如果你已經知道，這個地方可以跳過。</strong></em></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20211001/api_vs_socketio.png" alt="不專業的解說圖"></p>
<h3 id="一般的伺服器與使用者溝通方式"><a href="#一般的伺服器與使用者溝通方式" class="headerlink" title="一般的伺服器與使用者溝通方式"></a>一般的伺服器與使用者溝通方式</h3><p>首先我們一般前端使用者與後端溝通都是透過 <strong>API</strong> 來發送請求，然後再透過 <strong>Response</strong> 去接收回覆的訊息，但是伺服器並無法直接主動發出訊息給使用者；使用者在送出表單或者點擊某顆按鈕後透過 <strong>ajax</strong> 或 <strong>axios</strong> 去打 <strong>API</strong> 亦或者連接網站後，發出任何請求至後端。</p>
<p>像上方左邊的圖，<strong>1</strong> 就是使用者發起請求，而伺服器收到後會傳送 <strong>Response</strong> 回給發起請求的使用者，但無法發送給其他使用者，例如 <strong>使用者A</strong> 發起請求後，伺服器只能回傳 <strong>Response</strong> 給這個使用者，無法發給 <strong>使用者B</strong> 或 <strong>使用者C</strong>。</p>
<h3 id="使用-Socket-io-的伺服器與使用者溝通方式"><a href="#使用-Socket-io-的伺服器與使用者溝通方式" class="headerlink" title="使用 Socket.io 的伺服器與使用者溝通方式"></a>使用 Socket.io 的伺服器與使用者溝通方式</h3><p>透過 <strong>Socket.io</strong> 我們可以達到上面一般方式我們想達到的事情，可以把 <strong>Socket.io</strong> 想像成 <strong>某個訂閱服務</strong>，當使用者主動發起請求至訂閱服務，可以再回傳事件，但這時候已經不是依靠 API 方式去溝通，而是透過 <strong>Socket.io</strong> 提供的 <strong>API</strong>，待會後面會說到。</p>
<p>最主要的地方來了，當訂閱服務收到使用者的請求後，他除了可以主動回覆給該使用者，也可以一併的主動發出訊息給所有訂閱的使用者，聰明的你就知道這個可以達到聊天室的需求。</p>
<p>其實現在很多東西都會用到 <strong>Socket.io</strong>：</p>
<ol>
<li><p>遊戲</p>
</li>
<li><p>聊天室</p>
</li>
<li><p>客服中心</p>
</li>
<li><p>任何需要即時更新的資料，股票、博彩…等等</p>
</li>
</ol>
<h3 id="何謂-Socket-io-Websocket-Socket"><a href="#何謂-Socket-io-Websocket-Socket" class="headerlink" title="何謂 Socket.io Websocket Socket"></a>何謂 Socket.io Websocket Socket</h3><p>這邊其實沒有要詳細說明三者差異，有興趣可以參考 <a href="https://leesonhsu.blogspot.com/2018/07/socketwebsocketsocketio.html">【筆記】Socket，Websocket，Socket.io的差異</a>。</p>
<p>但還是快速地說一下：</p>
<ul>
<li><p><strong>Socket</strong> 就是以前的 <strong>TCP&#x2F;IP</strong>，現在也變成通訊的標準之一。</p>
</li>
<li><p><strong>Websocket</strong> 在七層模型中屬於「<strong>應用層</strong>」，也是一種協議。</p>
</li>
<li><p><strong>Socket.io</strong> 和上面兩者不同，他是 <strong>JavaScript</strong> 的一個函式庫，使伺服器和客戶端之間即時雙向的通信成為可能</p>
</li>
</ul>
<hr>
<h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><p><img src="/images/others/loading.gif" data-original="/images/20211001/socketio_website.png" alt="Socket.io 官方文件"></p>
<p>在開始前我們都需要先認識幾個簡單的 <strong>Socket.io</strong> 的 <strong>API</strong>，這邊會分成前端及後端部分去講解，就跟 <strong>Socket.io</strong> 官方文件差不多。</p>
<h3 id="關於後端的-Socket-io"><a href="#關於後端的-Socket-io" class="headerlink" title="關於後端的 Socket.io"></a>關於後端的 Socket.io</h3><p>因為會講到連接的方式，所以這邊會從後端開始講起，這邊會先提供最終程式碼，<a href="https://github.com/RexHung0302/Socketio-Server">傳送門請點我</a>。</p>
<ol>
<li>首先我們用 <strong>Node.js</strong> 的 <strong><a href="https://www.runoob.com/nodejs/nodejs-express-framework.html">Express</a></strong> 框架作為我們的後端專案，如果你想從頭寫，不用框架也可以，可以參考官方的 <strong><a href="https://socket.io/get-started/chat">教學文件</a></strong>。</li>
</ol>
<p>我們需要先安裝 <code>express-generator</code>，這是一個 <strong>Express</strong> 的應用程式產生器，然後透過 <code>express-generator</code> 去產生一個 <strong>Node.js</strong> 專案。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install express-generator -g // 全域安裝</span><br><span class="line"></span><br><span class="line">$ express -h // 查看指令大全 順便檢查有無安裝成功</span><br><span class="line"></span><br><span class="line">$ express --view=pug Socketio-Server // --view=pug 為使用 pug 模板，這邊不重要 我們不會用到</span><br></pre></td></tr></table></figure>

<p>建立完成後大概會長得像下面的架構。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211001/socketio_server.png" alt="後端架構"></p>
<ol start="2">
<li>接著我們要安裝我們的主角，<strong><a href="https://github.com/socketio/socket.io">Socket.io</a></strong>，官方文件可參考 <strong><a href="https://socket.io/">此處</a></strong>。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install socket.io // 現在的版本都會預設 -S 可以不用加了</span><br><span class="line"></span><br><span class="line">$ npm install uuidv4 // 可裝可不裝，後面判斷使用者會用到</span><br><span class="line"></span><br><span class="line">$ npm install moment // 可裝可不裝，後面聊天室顯示送出訊息時間用</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20211001/save_desc.png" alt="關於 -S"></p>
<blockquote>
<p><em>如果不知道 -S 是什麼意思，可以參考 <strong><a href="https://rexhung0302.github.io/2020/03/21/20200321/">[Tool Notes] — 關於Webpack #2 - Babel？</a></strong> 的 <strong>開動了</strong> 一小段。</em></p>
</blockquote>
<ol start="3">
<li>安裝完後就可以開始使用了，打開 <code>/bin/www</code> 這隻檔案，然後引入相關套件。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /bin/www</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">v4</span>: uuidv4 &#125; = <span class="built_in">require</span>(<span class="string">&quot;uuid&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">&quot;moment&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.<span class="title function_">createServer</span>(app); <span class="comment">// 這行原本就有</span></span><br><span class="line"><span class="keyword">const</span> io = <span class="built_in">require</span>(<span class="string">&quot;socket.io&quot;</span>)(server); <span class="comment">// 一定要在 server 後面</span></span><br></pre></td></tr></table></figure>

<p>因為我們的聊天室會有使用者們及聊天房間，所以在加入下面程式碼，因為這次範例是全部分開聊天，如果你想要也可以在弄一個房間作為大廳。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /bin/www</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> users = [];</span><br><span class="line"><span class="keyword">let</span> chatRooms = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="title function_">uuidv4</span>(),</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;新手村一&quot;</span>,</span><br><span class="line">    <span class="attr">desc</span>: <span class="string">&quot;菜雞才能來喔！&quot;</span>,</span><br><span class="line">    <span class="attr">userNumber</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="title function_">uuidv4</span>(),</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;無差別&quot;</span>,</span><br><span class="line">    <span class="attr">desc</span>: <span class="string">&quot;不管你是什麼雞都可以來～&quot;</span>,</span><br><span class="line">    <span class="attr">userNumber</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>開始使用 <strong>socket.io</strong> 套件，繼續編輯我們的 <code>/bin/www</code>，加上下面程式碼</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /bin/www</span></span><br><span class="line">io.<span class="title function_">on</span>(<span class="string">&quot;connection&quot;</span>, <span class="function">(<span class="params">socket</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 登入</span></span><br><span class="line">  socket.<span class="title function_">on</span>(<span class="string">&quot;login&quot;</span>, <span class="function">(<span class="params">&#123; id, name &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> sameUser = users.<span class="title function_">find</span>(<span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> user.<span class="property">name</span> === name;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sameUser) &#123;</span><br><span class="line">      socket.<span class="title function_">emit</span>(<span class="string">&quot;connectionFail&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">success</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&quot;使用者名稱重複&quot;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 只發事件給這個使用者</span></span><br><span class="line">      socket.<span class="title function_">emit</span>(<span class="string">&quot;connectionSuccess&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">success</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&quot;歡迎加入！連線成功&quot;</span>,</span><br><span class="line">        <span class="attr">rooms</span>: chatRooms,</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 給除了這個使用者外的其他人</span></span><br><span class="line">      socket.<span class="property">broadcast</span>.<span class="title function_">emit</span>(<span class="string">&quot;connectionSuccess&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">success</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">message</span>: <span class="string">`歡迎使用者 <span class="subst">$&#123;name&#125;</span> 連線成功`</span>,</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 發事件給所有人，包括這個使用者</span></span><br><span class="line">      io.<span class="title function_">emit</span>(<span class="string">&quot;connectionSuccess&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">success</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&quot;即刻起免費使用聊天室直到～永遠&quot;</span>,</span><br><span class="line">        <span class="attr">rooms</span>: chatRooms,</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      users.<span class="title function_">push</span>(&#123;</span><br><span class="line">        id,</span><br><span class="line">        name,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>上面這幾行其實也是使用了 <strong>Socket.io</strong> 最常使用的兩個 <strong>API</strong>，<code>on</code> 及 <code>emit</code>，前者就是監聽事件，後者就是發送事件。</p>
<p><code>io.on(&quot;connection&quot;, (socket) =&gt; &#123;</code> 這行就是前端在連接(訂閱)這個 <strong>Socket.io</strong> 後會觸發的事件，這邊都是使用 <strong>connection</strong> 或 <strong>connect</strong>，兩者都可以，差別就在於如果你兩者都有使用的話 <strong>connect</strong> 會先被觸發，之後再跑 <strong>connection</strong>，詳細可參考 <strong><a href="https://segmentfault.com/a/1190000012915401">你知道socket.io中connect事件和connection事件的区别吗?</a></strong>，如果想實驗可以改為下列程式碼。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /bin/www</span></span><br><span class="line">io.<span class="title function_">on</span>(<span class="string">&quot;connect&quot;</span>, <span class="function">(<span class="params">socket</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a user connect&quot;</span>);</span><br><span class="line">  io.<span class="title function_">on</span>(<span class="string">&quot;connection&quot;</span>, <span class="function">(<span class="params">socket</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a user connection&quot;</span>);</span><br><span class="line">    <span class="comment">//... 下略</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 將會輸出</span></span><br><span class="line"><span class="comment">// a user connect</span></span><br><span class="line"><span class="comment">// a user connection</span></span><br></pre></td></tr></table></figure>

<p>修改完就會發現兩個 <strong>console.log</strong> 都被觸發，但如果你反過來像下面程式碼就只會觸發一個。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">io.<span class="title function_">on</span>(<span class="string">&quot;connection&quot;</span>, <span class="function">(<span class="params">socket</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a user connection&quot;</span>);</span><br><span class="line">  io.<span class="title function_">on</span>(<span class="string">&quot;connect&quot;</span>, <span class="function">(<span class="params">socket</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a user connect&quot;</span>);</span><br><span class="line">    <span class="comment">//... 下略</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 將會輸出</span></span><br><span class="line"><span class="comment">// a user connection</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><em>等等後面會在提到 <strong>Namespace</strong> 及 <strong>room</strong> 的部分。</em></p>
</blockquote>
<p>在跑完 <strong>connection</strong> 後會回傳一個 <strong>value</strong>，這邊我們跟官方文件一樣使用 <strong>socket</strong>，這邊會發現使用了 <code>socket.emit(&quot;connectionSuccess&quot;</code>，但後面又有 <code>socket.broadcast.emit(&quot;connectionSuccess&quot;</code> 及 <code>io.emit(&quot;connectionSuccess&quot;</code>，這邊其實先搞懂 <strong>io</strong> 跟 <strong>socket</strong> 的差異之後發事件就大同小異了。</p>
<p><code>socket.emit(&quot;connectionSuccess&quot;</code> 就是發送事件給發送事件給後端的這個使用者，可能有點饒舌，但簡單說就是發送事件給透過 <code>io.on(&quot;connection&quot;, //...略</code> 連線(訂閱)的使用者。</p>
<p><code>socket.broadcast.emit(&quot;connectionSuccess&quot;</code> 就是發送事件給除了發起事件給後端的前端使用者外的人。</p>
<p><code>io.emit(&quot;connectionSuccess&quot;</code> 就是發送事件給所有人。</p>
<p>後面基本上我們會大量使用到 <code>socket</code> 去做 <code>socket.on</code> 或者 <code>socket.emit</code>，到這邊我們大致完成了後端的部分，接下來開始著手完成前端的部分吧。</p>
<p>接著就可以啟用 <code>npm start</code> 了，筆者自己跟預設應該都是跑在 <code>port 3000</code>。</p>
<h3 id="關於前端的-Socket-io"><a href="#關於前端的-Socket-io" class="headerlink" title="關於前端的 Socket.io"></a>關於前端的 Socket.io</h3><p>首先我們需要在前端刻出聊天室的樣子，這邊會先提供程式碼，<a href="https://github.com/RexHung0302/Socketio-Client">傳送門請點我</a>，這邊就不詳細講解怎麼切版；</p>
<ol>
<li>前端主要需要安裝 <strong>socket.io-client</strong> 這個套件 及 <strong>uuid</strong> 產生獨一無二的 ID。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm i socket.io-client -S // or yarn add</span><br><span class="line"></span><br><span class="line">$ npm i uuid</span><br></pre></td></tr></table></figure>

<p>再來前端很簡單只要記得三個基本的東西：</p>
<ul>
<li>連線</li>
<li>監聽事件(on, once)</li>
<li>發送事件(emit)</li>
</ul>
<ol start="2">
<li>讓我們跟後端 <strong>Socket.io</strong> 連線，根據你想連線的檔案位子可以做調整，例如我想在 <strong>component</strong> 是聊天室頁面的時候再連線。</li>
</ol>
<p>參考 <code>src/pages/Lobby/index.tsx</code> 這隻檔案，可以發現在 <strong>useEffect</strong> 剛進來的時候去做連線的動作。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211001/init_socketio.png" alt="初始化 Socket.io"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/pages/Lobby/index.tsx 範例檔案</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; io &#125; <span class="keyword">from</span> <span class="string">&quot;socket.io-client&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Lobby</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 初始化</span></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> newSocket = <span class="title function_">io</span>(</span><br><span class="line">    process.<span class="property">env</span>.<span class="property">REACT_APP_API_DOMAIN</span></span><br><span class="line">      ? process.<span class="property">env</span>.<span class="property">REACT_APP_API_DOMAIN</span></span><br><span class="line">      : <span class="string">&quot;http://localhost:3000&quot;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">transports</span>: [<span class="string">&quot;websocket&quot;</span>],</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//... 略</span></span><br><span class="line">    <span class="comment">// 因為前端邏輯需求，範例專案這邊註解了</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      newSocket.<span class="title function_">close</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, [])</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Lobby</span>;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>做好連線後我們就可以在需要的地方發起事件通知後端，在需要連線得地方輸入下面程式碼，這樣一來後端就可以接到事件了。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/pages/ChatRoom/index.tsx 範例檔案</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; io &#125; <span class="keyword">from</span> <span class="string">&quot;socket.io-client&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; v4 <span class="keyword">as</span> uuidv4 &#125; <span class="keyword">from</span> <span class="string">&quot;uuid&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ChatRoom</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 初始化</span></span><br><span class="line">  <span class="title function_">useEffect</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        io.<span class="title function_">emit</span>(<span class="string">&quot;joinChatRoom&quot;</span>, &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="title function_">uuidv4</span>(),</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;使用者名稱&quot;</span>,</span><br><span class="line">          <span class="attr">roomId</span>: xxxxxxxx<span class="comment">// 房間 ID，可在連線時由後端傳過來,</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    []</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ChatRoom</span>;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>接下來為監聽事件，監聽的事件如果在後端發起了事件，而名稱剛好對到，就會收到訊息。</li>
</ol>
<p><img src="/images/others/loading.gif" data-original="/images/20211001/socketio_on_once.png" alt="監聽事件"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/pages/Lobby/index.tsx</span></span><br><span class="line"></span><br><span class="line">data.<span class="property">state</span>.<span class="property">ws</span>.<span class="title function_">once</span>(<span class="string">&quot;connectionFail&quot;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//...略  </span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">data.<span class="property">state</span>.<span class="property">ws</span>.<span class="title function_">on</span>(<span class="string">&quot;updateInfo&quot;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//...略</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>關於 <strong>on</strong> 及 <strong>once</strong> 的差異可以簡單分為，前者為事件發生當下會收到， <strong>once</strong> 則為下一次才收到。</p>
<ol start="5">
<li>我們有接收的監聽事件，理所當然使用者端也可以主動發起事件，這邊就是透過 <strong>emit</strong>。</li>
</ol>
<p><img src="/images/others/loading.gif" data-original="/images/20211001/socketio_emit.png" alt="事件發送"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data.<span class="property">state</span>.<span class="property">ws</span>.<span class="title function_">emit</span>(<span class="string">&quot;createNewChatRoom&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">userId</span>: data.<span class="property">state</span>.<span class="property">id</span>,</span><br><span class="line">  ...newChatRoom,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>使用者端基本就是這三個 <strong>API</strong>，再詳細的話可以參考官方文件 <a href="https://socket.io/docs/v4/client-installation/">Socket.io</a></p>
<hr>
<h2 id="初階版的小晉級"><a href="#初階版的小晉級" class="headerlink" title="初階版的小晉級"></a>初階版的小晉級</h2><p>上面有提到 <strong>Namespace</strong> 及 <strong>Room</strong>，雖然我們有使用 <strong>chatRooms</strong> 去分不同的聊天室，但其實後端透過 <code>io.emit()</code> 去發送事件，全部的人都會收到，這樣會照成一個尷尬的情況，就是 <strong>使用者A</strong> 在 <strong>房間A</strong> 聊天，透過前端的 <code>io.emit()</code> 把訊息發事件到後端，然後後端使用 <strong>io.emit</strong> 或 <strong>socket.broadcast.emit</strong> 發事件給使用者，這時候 <strong>房間B</strong> 的全部使用者也都會接收到訊息。</p>
<p>為了做到真正的分流，我們可以使用官方提供的方法 <strong>Namespace</strong> 或 <strong>Room</strong>。</p>
<h3 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h3><p><img src="/images/others/loading.gif" data-original="/images/20211001/namespace_desc.png" alt="Namespace"></p>
<p>這邊先來説說 <strong>Namespace</strong>，一般我們前端跟 <strong>Socket.io</strong> 連線，後端的部分都是預設 <code>io.on(&quot;connection&quot;, //...略</code>，但如果透過 Namespace 就可以達到一個 <strong>socket.io</strong> 有很多個 <strong>channel</strong>。</p>
<ol>
<li>將原本的 <code>/bin/www</code> 多加下列的程式碼</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /bin/www</span></span><br><span class="line"><span class="keyword">const</span> io = <span class="built_in">require</span>(<span class="string">&quot;socket.io&quot;</span>)(server); <span class="comment">// 原本就有的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> channel2 = io.<span class="title function_">of</span>(<span class="string">&quot;/channel-2&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> channel3 = io.<span class="title function_">of</span>(<span class="string">&quot;/channel-3&quot;</span>);</span><br><span class="line">channel2.<span class="title function_">on</span>(<span class="string">&quot;connection&quot;</span>, <span class="function">(<span class="params">socket</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//...略</span></span><br><span class="line">&#125;);</span><br><span class="line">channel3.<span class="title function_">on</span>(<span class="string">&quot;connection&quot;</span>, <span class="function">(<span class="params">socket</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//...略</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>再把前端加上下列程式碼</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; io &#125; <span class="keyword">from</span> <span class="string">&quot;socket.io-client&quot;</span>; <span class="comment">// 原本就有的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">xxx</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> newSocket = <span class="title function_">io</span>(</span><br><span class="line">    process.<span class="property">env</span>.<span class="property">REACT_APP_API_DOMAIN</span></span><br><span class="line">      ? process.<span class="property">env</span>.<span class="property">REACT_APP_API_DOMAIN</span></span><br><span class="line">      : <span class="string">&quot;http://localhost:3000&quot;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">transports</span>: [<span class="string">&quot;websocket&quot;</span>],</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> channel2 = <span class="title function_">io</span>(<span class="string">&quot;http://localhost:3000/channel-2&quot;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">transports</span>: [<span class="string">&quot;websocket&quot;</span>],</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> channel3 = <span class="title function_">io</span>(<span class="string">&quot;http://localhost:3000/channel-3&quot;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">transports</span>: [<span class="string">&quot;websocket&quot;</span>],</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> xxx;</span><br></pre></td></tr></table></figure>

<p>如此就達到分 <strong>Channel</strong> 的概念，你可以分別在不同的 <strong>Namespace</strong> 下去監聽或者發起事件。</p>
<blockquote>
<p><em>更詳細可參考官方文件 <a href="https://socket.io/docs/v4/namespaces/">Namespace</a></em></p>
</blockquote>
<h3 id="Room"><a href="#Room" class="headerlink" title="Room"></a>Room</h3><p><img src="/images/others/loading.gif" data-original="/images/20211001/room_desc.png" alt="Room"></p>
<p>再來我們來說說 <strong>Room</strong>，和 <strong>Namespace</strong> 都一樣可以做到分流，但他的加入方式不同，<strong>Room</strong> 提供幾個基本的 <strong>API</strong>，其中加入方式為  <strong>join()</strong>，當然也可以離開房間 <strong>leave()</strong>。</p>
<ol>
<li>我們嘗試把使用者加入到某間房間，修改一下我們原本 <code>/bin/www</code> 的程式碼</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /bin/www</span></span><br><span class="line">io.<span class="title function_">on</span>(<span class="string">&quot;connection&quot;</span>, <span class="function">(<span class="params">socket</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 登入</span></span><br><span class="line">  socket.<span class="title function_">on</span>(<span class="string">&quot;login&quot;</span>, <span class="function">(<span class="params">&#123; id, name &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//... 略</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  socket.<span class="title function_">on</span>(<span class="string">&quot;join&quot;</span>, <span class="function">(<span class="params">&#123;id, name&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 加入 Room</span></span><br><span class="line">    socket.<span class="title function_">join</span>(id);</span><br><span class="line"></span><br><span class="line">    io.<span class="title function_">to</span>(id).<span class="title function_">emit</span>(<span class="string">`使用者 <span class="subst">$&#123;name&#125;</span> 加入房間啦！`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>上面我們模擬一個情境，在前端透過點擊參加聊天室後，透過 <strong>Socket.io</strong> 發送事件 <strong>join</strong>，並且帶著房間(Room) <strong>id</strong> 及 <strong>使用者名稱</strong>，房間資訊在一開始登入時會傳給使用者。</p>
<p>接著透過 <strong>join()</strong> 這個方式把該事件的發送使用者(<strong>socket</strong>)加入名為變數 <strong>id</strong> 的 <strong>Room</strong>。緊接著透過 <code>io.to(id).emit()</code> 取代原本的 <code>io.emit()</code>，這樣事件只會發送給該房間(Room)的使用者(訂閱者)。</p>
<blockquote>
<p><em>更詳細可參考官方文件 <a href="https://socket.io/docs/v4/rooms/#default-room">Room</a></em></p>
</blockquote>
<h3 id="結合迸出新滋味"><a href="#結合迸出新滋味" class="headerlink" title="結合迸出新滋味"></a>結合迸出新滋味</h3><p>這時候聰明的你會想到，那我不就可以先用 <strong>Namespace</strong> 做出不同的頻道(伺服器的概念)，裡面再丟好幾個小房間。沒錯！你可以這麼做，而這也是 <strong>Socket.io</strong> 的最佳應用。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211001/namespace_room_desc.png" alt="遊戲分流概念"></p>
<p>如果用上圖來說明，應該會更清楚，如果你沒在玩遊戲，或者不清楚，也可以在參考下圖。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211001/namespace_room_desc_2.png" alt="大致概念"></p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>沒想到最近在工作上一忙，一晃眼又是兩個月沒有更新部落格了，趁這次在工作上摸新技術時，筆記了一下所學，其中一個就是 <strong>Socket.io</strong>，其實好久之前就一直想摸，雖然這篇文章沒有講得很詳細，但其實 <strong>Socket.io</strong> 真的滿好入門的，只要掌握其中幾個 <strong>API</strong>，像是 <code>on()</code>、<code>emit()</code>、<code>of()</code>、<code>to()</code>、<code>join()</code>、<code>leave()</code>…等等，其中最前面兩個也才是最常用的，大概了解了運作流程就可以自己做很多好玩的應用了。</p>
<p>前端專案裡面有包著 <strong>dockerfile</strong>，剛好最近工作上也有接觸到，但如果沒有研究的話，其實可以先跳過，這部分不影響程式碼進行；最後這邊會再附上 <strong>Source Code</strong> 的網址，大家都可以 <strong>colone</strong> 下來玩看看。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211001/banner.png" alt="Chat Room"></p>
<ul>
<li>前端 <strong>Source Code</strong> - <a href="https://github.com/RexHung0302/Socketio-Client">點我</a></li>
<li>後端 <strong>Source Code</strong> - <a href="https://github.com/RexHung0302/Socketio-Server">點我</a></li>
</ul>
<p>最後的最後放上一張手寫筆記結束今天這一回合，晚安各位！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211001/note.png" alt="筆記大全"></p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><p>官方文件 - <a href="https://socket.io/docs/v4/client-installation/">Socket.io</a></p>
</li>
<li><p>segmentfault - <a href="https://segmentfault.com/a/1190000012915401">你知道socket.io中connect事件和connection事件的区别吗?</a></p>
</li>
<li><p>Creative Coding TW - 互動程式創作台灣站 - <a href="https://creativecoding.in/2020/03/25/%E7%94%A8-socket-io-%E5%81%9A%E4%B8%80%E5%80%8B%E5%8D%B3%E6%99%82%E8%81%8A%E5%A4%A9%E5%AE%A4%E5%90%A7%EF%BC%81%EF%BC%88%E7%9B%B4%E6%92%AD%E7%AD%86%E8%A8%98%EF%BC%89/">用 Socket.io 做一個即時聊天室吧！（直播筆記）</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Back-end</category>
        <category>NodeJS</category>
        <category>Express</category>
        <category>React</category>
        <category>Socket.io</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>Back-end</tag>
        <tag>NodeJS</tag>
      </tags>
  </entry>
  <entry>
    <title>[UI/UX Note] — StoryBook 透過元件說故事</title>
    <url>/2021/11/04/20211104/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p><img src="/images/others/loading.gif" data-original="/images/20211104/demo.gif" alt="StoryBook Demo"></p>
<p>是否還在透過跟 <strong>PM</strong> 或 <strong>客戶</strong> 通靈開發呢？還在想怎麼快速跟同事介紹你的網站怎麼設計嗎？</p>
<p>你早該了解怎麼透過元件說故事的，何不現在就開始呢？</p>
<span id="more"></span>

<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><blockquote>
<p>那麼什麼是 <strong>StoryBook(以下簡稱SB)</strong> 呢？</p>
</blockquote>
<p>透過將每個獨立的 <strong>UI</strong> 元件，編譯成靜態檔案或者直接在本地執行 <strong>SB</strong>，將元件渲染到網頁上，可直接透過操作了解該元件的 <strong>UI&#x2F;UX</strong>，甚至可以提供客製化樣式提供選擇。</p>
<p>透過 <strong>SB</strong>，可以達到幾點需求：</p>
<ol>
<li>簡單配置及快速啟用</li>
<li>使開發人員及非開發人員(如 <strong>PM</strong>、顧客…等)快速理解 或 確認元件及 <strong>UI&#x2F;UX</strong> 是否符合預期</li>
<li>可獨立打包成 <strong>APP</strong>，作為 <strong>UI</strong> 文檔發布</li>
</ol>
<hr>
<h2 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h2><p>其實 <strong>SB</strong> 和任何前端套件一樣，透過安裝後，將會在 <strong>package.json</strong> 上留下紀錄，且會直接附帶啟動指令。</p>
<p>首先預設你的環境已經有下列幾項：</p>
<ul>
<li><strong>npx</strong></li>
<li>一個前端專案</li>
</ul>
<blockquote>
<p><em>空專案的情況下是無法安裝的</em></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20211104/warning.png" alt="可安裝列表"></p>
<h3 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h3><p>首先透過 <strong>SB</strong> 的指令快速安裝</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npx sb init</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20211104/installDemo.png" alt="安裝範例"></p>
<p>安裝結束後會看見 <strong>package.json</strong> 上面多了一些東西，</p>
<p><strong>scripts</strong> 上面會多兩行指令：</p>
<ul>
<li><strong>storybook</strong> 為啟動 <strong>port 6006</strong> 去打開一個網頁可以在頁面上操作元件，類似 <strong>yarn serve</strong>。</li>
<li><strong>build-storybook</strong> 為編譯出靜態的 <strong>SB</strong>，類似 <strong>yarn build</strong>。</li>
</ul>
<p><strong>devDependencies</strong> 會多出幾行，這些都是 <strong>SB</strong> 依賴的套件。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211104/package.png" alt="Package.json"></p>
<p>到現在我們的專案架構會變成下圖：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211104/folderView.png" alt="專案架構"></p>
<p>最外層的 <strong>.storybook</strong> 裡面有兩隻檔案：</p>
<ol>
<li><strong>main.js</strong> 這是 <strong>SB</strong> 的路徑及插件配置</li>
<li><strong>preview.js</strong> 這是全局組建預覽配置</li>
</ol>
<p>而內層的 <strong>stories</strong> 資料夾則是安裝 <strong>SB</strong> 後預設生成的 <strong>Demo</strong> 元件。</p>
<h2 id="啟動"><a href="#啟動" class="headerlink" title="啟動"></a>啟動</h2><p>接著我們使用指令來啟動 <strong>SB</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm run storybook / yarn storybook</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20211104/startDemo.png" alt="啟動結果"></p>
<p>跑一陣子後會發現 <strong>SB</strong> 已經跑在剛剛 <strong>package.json</strong> 的 <strong>script</strong> 指令的 <strong>port</strong> 上了。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211104/demo-page.png"></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>透過操作頁面上的元件，可以快速選擇我們想要的樣式，也可以讓使用者知道我們的元件提供什麼的參數。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211104/testDemo.gif" alt="更改相關參數"></p>
<p>選到頁籤 <strong>Docs</strong> 也可以讓開發者快速了解該元件怎麼使用及提供了什麼 <strong>props</strong> 可供傳入</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211104/testDemo2.gif" alt="更改相關參數"></p>
<p>整個安裝到啟動過程不到三分鐘，接下來才是重頭戲，該怎麼去寫我們的故事呢？</p>
<hr>
<h2 id="撰寫故事"><a href="#撰寫故事" class="headerlink" title="撰寫故事"></a>撰寫故事</h2><p>首先我們我們需要先知道配置有分 <strong>全局</strong> 及 <strong>Story的文件配置</strong>。</p>
<h3 id="關於配置"><a href="#關於配置" class="headerlink" title="關於配置"></a>關於配置</h3><p>在全局配置中我們可以設定一些基本的參數，例如背景顏色，這邊可以設置的參數可以參考官方文件 - <strong><a href="https://storybook.js.org/docs/react/essentials/introduction">Essential addons</a></strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211104/step1.png" alt="全局配置"></p>
<blockquote>
<p>全局配置是會影響全部 <strong>Story</strong> 的，如果不想要影響到全部的 <strong>Story</strong> 就請直接對 <strong>.stories.js&#x2F;.stories.tsx</strong> 檔案進行配置。</p>
</blockquote>
<p>之後我們大多精力都會花在 <strong>Story</strong> 配置上， 基本上每個 <strong>Story</strong> 的 <strong>default function</strong> 會寫入該元件的名稱、組建來源、基本配置，而具名的 <strong>function</strong> 則是你元件的故事，還有參數樣式設定。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211104/step1-1.png" alt="相關設定"></p>
<h3 id="層級分類配置"><a href="#層級分類配置" class="headerlink" title="層級分類配置"></a>層級分類配置</h3><p>default function 裡面的 <strong>titile</strong> 設定是可以拿來分類的，名稱前方可以加入斜線『 &#x2F; 』，例如 “<strong>example&#x2F;button</strong>“，這樣會使該元件前面再度加一個大分類，而加入『 | 』則會直接用資料夾去分類，像下圖就是官網的範例，舉其中一個例子 “<strong>LIBRARY&#x2F;Charts | LineGraph</strong>“。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211104/perview.png" alt="分類配置"></p>
<p>在了解全局及 <strong>Story</strong> 配置後，我們可以得知一件事情，整個 <strong>SB</strong> 都是以故事的方向來講述所有的元件，在 <strong>Story</strong> 配置中，我們可以有條理得整理我們的分類，接下來讓我們建立一個工程師的好夥伴元件 - <strong>TodoList</strong>。</p>
<h3 id="故事開始"><a href="#故事開始" class="headerlink" title="故事開始"></a>故事開始</h3><p>首先我們建立 <strong>components</strong> 及底下的資料夾跟檔案</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211104/perview.png" alt="架構"></p>
<p>打開 <code>/components/TodoItem/index.tsx</code> 並且修改內容</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./TodoItem.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">TodoItemProps</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * TodoItem 的項目名稱</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">title</span>: string;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * TodoItem 是否完成了</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">isDone</span>: boolean;</span><br><span class="line">  <span class="attr">key</span>: number;</span><br><span class="line">  <span class="attr">onClickHandler</span>: <span class="function">(<span class="params">key: number</span>) =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">TodoItem</span> = (<span class="params">&#123; title, isDone, id, onClickHandler &#125;: TodoItemProps</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;isDone</span> ? &quot;<span class="attr">todoItem__done</span> <span class="attr">todoItem</span>&quot; <span class="attr">:</span> &quot;<span class="attr">todoItem</span>&quot;&#125; <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> onClickHandler(id)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">className</span>=<span class="string">&quot;input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&#123;</span>`<span class="attr">checkbox_</span>$&#123;<span class="attr">id</span>&#125;`&#125; <span class="attr">checked</span>=<span class="string">&#123;isDone&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;()</span> =&gt;</span> onClickHandler(id)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">className</span>=<span class="string">&quot;label&quot;</span> <span class="attr">htmlFor</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>&#123;title&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>然後再修改 <code>/components/TodoItem/TodoItem.stories.tsx</code> 的內容</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ComponentStory</span>, <span class="title class_">ComponentMeta</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@storybook/react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">TodoItem</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./index&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;TodoList/TodoItem&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">TodoItem</span>,</span><br><span class="line">  <span class="attr">argTypes</span>: &#123;</span><br><span class="line">    <span class="attr">test</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;testName&quot;</span>,</span><br><span class="line">      <span class="attr">type</span>: &#123;</span><br><span class="line">        <span class="attr">require</span>: <span class="literal">false</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">description</span>: <span class="string">&quot;這是測試的 Props&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125; <span class="keyword">as</span> <span class="title class_">ComponentMeta</span>&lt;<span class="keyword">typeof</span> <span class="title class_">TodoItem</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Template</span>: <span class="title class_">ComponentStory</span>&lt;<span class="keyword">typeof</span> <span class="title class_">TodoItem</span>&gt; = <span class="function">(<span class="params">args</span>) =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">TodoItem</span> &#123;<span class="attr">...args</span>&#125; /&gt;</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">DefaultTodoItem</span> = <span class="title class_">Template</span>.<span class="title function_">bind</span>(&#123;&#125;);</span><br><span class="line"><span class="title class_">DefaultTodoItem</span>.<span class="property">args</span> = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;測試&#x27;</span>,</span><br><span class="line">  <span class="attr">isDone</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">key</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">UndoneTodoItem</span> = <span class="title class_">Template</span>.<span class="title function_">bind</span>(&#123;&#125;);</span><br><span class="line"><span class="title class_">UndoneTodoItem</span>.<span class="property">args</span> = &#123;</span><br><span class="line">  ...<span class="title class_">DefaultTodoItem</span>.<span class="property">args</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">DoneTodoItem</span> = <span class="title class_">Template</span>.<span class="title function_">bind</span>(&#123;&#125;);</span><br><span class="line"><span class="title class_">DoneTodoItem</span>.<span class="property">args</span> = &#123;</span><br><span class="line">  ...<span class="title class_">DefaultTodoItem</span>.<span class="property">args</span>,</span><br><span class="line">  <span class="attr">isDone</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>最後修改 <code>/components/TodoItem/TodoItem.css</code> 的內容</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.todoItem</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.todoItem__done</span> <span class="selector-class">.label</span>&#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: line-through;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接著儲存後下指令啟動 <strong>SB</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm run storybook / yarn storybook </span><br></pre></td></tr></table></figure>

<p>接下來在瀏覽器上就可以看到(如果 <strong>package.json</strong> 和上面設定一樣會在 <a href="http://localhost:6006/"><code>http://localhost:6006/</code></a>)成果。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211104/result.png" alt="項目選單"></p>
<p>基本上從 <strong>index.tsx</strong> 開始我們的寫法和一般我們開發時差不多，但這邊要注意如果使用 <strong>TS</strong>，在 <strong>Props</strong> 的註解是會預設出現在 <strong>SB</strong> 裡 <strong>Docs</strong> 的 <strong>Description</strong>。</p>
<p>如果是在 <strong>stories.tsx&#x2F;stories.js</strong> 裡面的 <strong>argTypes</strong> 寫的設定，也會出現在 <strong>SB</strong> 裡 <strong>Docs</strong> 的 <strong>Description。</strong></p>
<p><img src="/images/others/loading.gif" data-original="/images/20211104/props.png" alt="設定檔教學"></p>
<p>請注意：層級順序大小為 <strong>stories.tsx&#x2F;stories.js &gt; index.tsx</strong>，如果在 <strong>stories.tsx&#x2F;stories.js</strong> 裡面設定和 <strong>index.tsx</strong> 一模一樣的名稱會把 <strong>index.tsx</strong> 的 <strong>Prop</strong> 蓋掉。</p>
<p>接著新增 <strong>TodoList</strong> 資料夾及相關檔案</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211104/folder_2.png" alt="資料夾架構"></p>
<p>打開 <code>/components/TodoList/index.tsx</code> 並且修改內容</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./TodoList.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">TodoItem</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../TodoItem&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fakeApi = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;測試項目1&quot;</span>,</span><br><span class="line">    <span class="attr">isDone</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;測試項目2&quot;</span>,</span><br><span class="line">    <span class="attr">isDone</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;測試項目3&quot;</span>,</span><br><span class="line">    <span class="attr">isDone</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;測試項目4&quot;</span>,</span><br><span class="line">    <span class="attr">isDone</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">TodoList</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [todo, setTodo] = <span class="title function_">useState</span>(fakeApi);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onClickHandler</span> = (<span class="params">key: number</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setTodo</span>(<span class="function">(<span class="params">preVal</span>) =&gt;</span> &#123;</span><br><span class="line">      preVal[key].<span class="property">isDone</span> = !preVal[key].<span class="property">isDone</span>;</span><br><span class="line">      <span class="keyword">return</span> [...preVal];</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;</span></span><br><span class="line"><span class="language-xml">        todo.map((item, index) =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">TodoItem</span> &#123;<span class="attr">...item</span>&#125; <span class="attr">id</span>=<span class="string">&#123;index&#125;</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">onClickHandler</span>=<span class="string">&#123;onClickHandler&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))</span></span><br><span class="line"><span class="language-xml">      &#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>然後再修改 <code>/components/TodoItem/TodoList.stories.tsx</code> 的內容</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ComponentStory</span>, <span class="title class_">ComponentMeta</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@storybook/react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">TodoList</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./index&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">TodoItemStories</span> <span class="keyword">from</span> <span class="string">&#x27;../TodoItem/TodoItem.stories&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;TodoList/TodoList&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">TodoList</span>,</span><br><span class="line">&#125; <span class="keyword">as</span> <span class="title class_">ComponentMeta</span>&lt;<span class="keyword">typeof</span> <span class="title class_">TodoList</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Template</span>: <span class="title class_">ComponentStory</span>&lt;<span class="keyword">typeof</span> <span class="title class_">TodoList</span>&gt; = <span class="function">() =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">TodoList</span> /&gt;</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">TodoListItem</span> = <span class="title class_">Template</span>.<span class="title function_">bind</span>(&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">TodoListItem</span>.<span class="property">args</span> = &#123;</span><br><span class="line">  ...<span class="title class_">TodoItemStories</span>.<span class="property">DefaultTodoItem</span>.<span class="property">args</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>最後修改 <code>/components/TodoItem/TodoList.css</code> 的內容</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.todoList</span> <span class="selector-class">.todoItem</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:last-child</span>) &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下來一樣在瀏覽器上就可以看到(如果 <strong>package.json</strong> 和上面設定一樣會在 <a href="http://localhost:6006/"><code>http://localhost:6006/</code></a>)成果。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211104/result_2.png" alt="最終成果"></p>
<p>這邊要注意一下，在 <strong>SB</strong> 上如果有使用 <strong>useState</strong> 之類的 <strong>React API</strong>，可能會有所延遲或者會有預期外的事情發生，這邊還是建議 <strong>SB</strong> 上面還是用來切版設計為主，如果有牽扯到資料的更動或者任何行爲預測，還請直接在專案上執行。</p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>最近在研究前人專案時發現一直就很想研究的 <strong>StoryBook</strong>，剛好趁這次研究架構時一併學習這個套件。透過這個套件可以有效的減少多次的無效來回溝通，私心強烈建議公司都應該導入這個套件(當然前提是專案時程不趕的情況下)，因為這個套件也可以產出靜態檔案，方便直接給其他相關人員查看。</p>
<p>關於 SB 的部署方式之後有機會再寫一篇文章介紹，但網路上應該已經有許多的文章了，希望該篇文章能幫助到你，也能幫助到金魚腦的我之後喚醒相關的記憶。</p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><p>官方文件 - <a href="https://storybook.js.org/">StoryBook</a></p>
</li>
<li><p><a href="https://www.notion.so/chromatic-2f9e608544574281b0ddbc62839a0c21">透過 chromatic 發布成果</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>UI/UX</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>UI</tag>
        <tag>UX</tag>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>[React Note] — 前端 SEO 兩分鐘就上手</title>
    <url>/2022/02/18/20220218/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p><img src="/images/others/loading.gif" data-original="/images/20220218/hemet-logo.png" alt="React Helmet"></p>
<p>前端框架使用 <strong>SEO(Search Engine Optimization)</strong> 一直都被廣為討論著。如何快速透過套件讓每一個元件都能直接塞入想塞的 <strong>Meta</strong> 甚至是更改 <strong>Title</strong> 呢？</p>
<p>今天就要來使用前端 <strong>SEO</strong> 套件讓你兩分鐘就成為 <strong>SEO</strong> 初階入門者。</p>
<span id="more"></span>

<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p>這篇文章只是快速使用套件去加上 <strong>Meta</strong>，被不會談到太多太深的優化 <strong>SEO</strong> 爬蟲技能。</p>
<hr>
<h3 id="如何加入-Meta"><a href="#如何加入-Meta" class="headerlink" title="如何加入 Meta"></a>如何加入 Meta</h3><p>爬蟲關鍵就是讓你的 <strong>HTML</strong> 加上 <strong>Meta</strong>，什麼事 <strong>Meta</strong> 呢？<strong>HTML Meta</strong> 是拿來存放一些該網站的資訊，例如：網頁作者、網頁發布時間、網頁關鍵字…等等。而 <strong>Google</strong> 的爬蟲就是會從你 <strong>HTML</strong> <strong>Meta</strong> 的 <code>&lt;meta name=&quot;description&quot; content=&quot;這裡是網頁的簡短描述&quot;&gt;</code> 去爬。</p>
<p>通常我們除了可以直接把 <strong>Meta</strong> 寫死在 <code>/public/index.html</code> 之外(如下圖)，也可以參考使用套件方式帶入 Meta。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220218/index_html.png" alt="index.html"></p>
<h3 id="前人種樹"><a href="#前人種樹" class="headerlink" title="前人種樹"></a>前人種樹</h3><p>關於 <strong>SEO</strong> 的套件滿多的，查詢下來最常出現的套件為 <em><a href="https://github.com/nfl/react-helmet#readme">React Helmet</a></em> 及 <em><a href="https://github.com/s-yadav/react-meta-tags">react-meta-tags</a></em> ，這邊我們使用前者來達到快速且可以不同組建帶入不同 <strong>Meta</strong> 的方式。</p>
<h3 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h3><p>首先先到專案目錄底下安裝套件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$yarn</span> add react-helmet</span><br><span class="line"></span><br><span class="line">// 或</span><br><span class="line"></span><br><span class="line"><span class="variable">$npm</span> install --save react-helmet</span><br></pre></td></tr></table></figure>

<h3 id="使用套件"><a href="#使用套件" class="headerlink" title="使用套件"></a>使用套件</h3><p>使用方式滿簡單的，只要在你想引入的 <strong>Component</strong> 引入，然後打上你會在 Head 上面加上的資訊即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Helmet</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-helmet&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">&#x27;./logo.svg&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">SEO</span> <span class="keyword">from</span> <span class="string">&#x27;./components/SEO&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">header</span> <span class="attr">className</span>=<span class="string">&quot;App-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;logo&#125;</span> <span class="attr">className</span>=<span class="string">&quot;App-logo&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;logo&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          Edit <span class="tag">&lt;<span class="name">code</span>&gt;</span>src/App.js<span class="tag">&lt;/<span class="name">code</span>&gt;</span> and save to reload.</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">className</span>=<span class="string">&quot;App-link&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">href</span>=<span class="string">&quot;https://reactjs.org&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">rel</span>=<span class="string">&quot;noopener noreferrer&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          Learn React</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Helmet</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charSet</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">			    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;網頁標題&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&#x27;來點給爬蟲的描述&#x27;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;canonical&quot;</span> <span class="attr">href</span>=<span class="string">&#x27;http://google.com/&#x27;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">			  <span class="tag">&lt;/<span class="name">Helmet</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="包成元件"><a href="#包成元件" class="headerlink" title="包成元件"></a>包成元件</h3><p>單純一個地方使用很容易，但當我們多個地方需要使用的時候就很麻煩，這時候我們可以將這個套件包成 <strong>Component</strong>，然後需要引入的地方就直接 <strong>import</strong> 即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /components/SEO.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Helmet</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-helmet&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">SEO</span> = (<span class="params">&#123;</span></span><br><span class="line"><span class="params">  title = <span class="string">&quot;測試標題&quot;</span>,</span></span><br><span class="line"><span class="params">  description = <span class="string">&quot;測試content&quot;</span>,</span></span><br><span class="line"><span class="params">  url,</span></span><br><span class="line"><span class="params">  children</span></span><br><span class="line"><span class="params">&#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Helmet</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charSet</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;title&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&#123;description&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">    &#123;</span></span><br><span class="line"><span class="language-xml">      url ? (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;canonical&quot;</span> <span class="attr">href</span>=<span class="string">&#123;url&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      ) : &quot;&quot;</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Helmet</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>最後將原本的 <code>App.js</code> 修改一下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">&#x27;./logo.svg&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">SEO</span> <span class="keyword">from</span> <span class="string">&#x27;./components/SEO&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">header</span> <span class="attr">className</span>=<span class="string">&quot;App-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;logo&#125;</span> <span class="attr">className</span>=<span class="string">&quot;App-logo&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;logo&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          Edit <span class="tag">&lt;<span class="name">code</span>&gt;</span>src/App.js<span class="tag">&lt;/<span class="name">code</span>&gt;</span> and save to reload.</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">className</span>=<span class="string">&quot;App-link&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">href</span>=<span class="string">&quot;https://reactjs.org&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">rel</span>=<span class="string">&quot;noopener noreferrer&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          Learn React</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">SEO</span> <span class="attr">title</span>=<span class="string">&#x27;爬蟲快來爬我&#x27;</span> <span class="attr">description</span>=<span class="string">&#x27;爬蟲給你點content&#x27;</span> <span class="attr">url</span>=<span class="string">&#x27;http://test.google.com/&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&#x27;測試 content 1&#x27;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&#x27;測試 content 2&#x27;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&#x27;測試 content 3&#x27;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">SEO</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="查看成果"><a href="#查看成果" class="headerlink" title="查看成果"></a>查看成果</h3><p>最後開啟網頁的 <strong>F12</strong>，看一下 <strong>HTML Meta</strong> 是否上去了</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220218/react-helmet-meta.png" alt="成果"></p>
<hr>
<h3 id="陷阱與坑"><a href="#陷阱與坑" class="headerlink" title="陷阱與坑"></a>陷阱與坑</h3><p>只要是套件或多或少都會有自己需要注意的事項，關於這個 <em><a href="https://github.com/nfl/react-helmet#readme">React Helmet</a></em> 需要注意的地方是不能將 <strong>React Children Component</strong> 包裝在 <code>&lt;Helmet&gt;&lt;/Helmet&gt;</code> 裡面，例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Helmet</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-helmet&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">MyTitle</span> = (<span class="params">title</span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;title&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		<span class="language-xml"><span class="tag">&lt;<span class="name">Helmet</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">MyTitle</span> <span class="attr">title</span>=<span class="string">&#x27;網頁標題隨意帶入&#x27;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;/<span class="name">Helmet</span>&gt;</span></span></span><br><span class="line">	)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這種寫法會得到錯誤訊息 <strong>“You may be attempting to nest Helmet components within each other, which is not allowed. Refer to our API for more information.”</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220218/warning.png" alt="錯誤警告"></p>
<p>上面這種寫法是不行的，<code>&lt;Helmet&gt;&lt;/Helmet&gt;</code> 裡面只能包裝 <strong>HTML Tag</strong>，像我們上面包成 <strong>Component</strong> 那種寫法在帶入 <strong>HTML Tag</strong> 是可行的！</p>
<ul>
<li>可以傳入的 <strong>Tag Name</strong> 請參考 <a href="https://github.com/nfl/react-helmet/blob/2aecac5d0df4bc208fb11394e867b1b1ddcd5a5f/src/HelmetConstants.js#L7">此處</a></li>
<li>關於該套件 <strong>Tag Name</strong> 檢查的 <a href="https://github.com/nfl/react-helmet/blob/2aecac5d0df4bc208fb11394e867b1b1ddcd5a5f/src/Helmet.js#L187">Source Code</a></li>
</ul>
<hr>
<h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><p>這邊附上範例程式碼及 <strong>Source Code</strong>：</p>
<ul>
<li><em><a href="https://rexhung0302.github.io/react-seo-helment/">Demo</a></em></li>
<li><em><a href="https://github.com/RexHung0302/react-seo-helment">Source Code</a></em></li>
</ul>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>其實前端如果有考慮做到 <strong>SEO</strong> 最好的方式還是 <strong>SSR(Server Side Render)</strong>，但如果是 <strong>SPA(Single Page Application)</strong> 其實也不需要太擔心，現在基本上靠套件去實行就可以了，且 <strong>Google</strong> 的爬蟲也一直在升級中。</p>
<p>其實這個套件應該算是 <strong>React HTML</strong> 的 <strong>Head</strong> 管理套件，但現在的文章十有八九都是用這個套件，如果上述文章有任何錯誤，還歡迎各路高手在下面留言指出，感激不盡。</p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><p><a href="https://normanlin.net/programming/react-helmet">React Helmet 介紹</a></p>
</li>
<li><p><a href="https://madewith.cn/699">React Helmet</a></p>
</li>
<li><p><a href="https://github.com/RexHung0302/react-seo-helment">xlsx-style</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
        <tag>SEO</tag>
      </tags>
  </entry>
  <entry>
    <title>[Tool Note] — 透過 GAS 快速建立後端, 串接TG機器人佐 Google Excel</title>
    <url>/2022/03/01/20220301/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p><img src="/images/others/loading.gif" data-original="/images/20220301/banner.png" alt="Google Apps Script"></p>
<p>想要寫一個 <strong>Side Project</strong> 卻卡在後端建立很麻煩嗎？如果想要有一個 <strong>Side Project</strong> 需要資料庫，就算已經會 <strong>JavaScript</strong> 了，卻要在學習 <strong>Node.js</strong>、學習 <strong>ORM</strong>、學習建立資料庫、學習部署上機器…</p>
<p>等等，如果只是要練習 <strong>Side Project</strong> 不用這麼麻煩…趕緊來看看這篇文章吧！</p>
<p>這篇文章適合什麼人？</p>
<span id="more"></span>

<ul>
<li>想快速建立出 <strong>Side Project</strong> 當作品的人(不是很建議，但至少能證明你會看文件串接，後續繼續說明)</li>
<li>想知道如何串接通訊軟體機器人</li>
<li>想知道如何不需要建立 <strong>DB(資料庫)</strong> 就可以存資料及撈資料**(並非透過 LocalStorage)**</li>
<li>沒有程式碼經驗的小白也能輕鬆做出機器人</li>
</ul>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p>本篇將會用建立 <strong>Telegram(下簡稱 TG)</strong> 機器人的範例來介紹如何透過 <strong>Google Apps Script(下簡稱 GAS)</strong> 快速建立後端。</p>
<blockquote>
<p><em>如果不知道 <strong>Telegram</strong> 詳細可以參考 <a href="https://agirls.aotter.net/post/57085">專題｜為何大家開始用 Telegram？它有比 LINE 更好用嗎？</a> 簡單說就是像 <strong>LINE</strong> 的通訊軟體</em></p>
</blockquote>
<p>本篇文章預設學習前的基本條件需求</p>
<ul>
<li>會基本的 <strong>JavaScript</strong>(至少能會看懂)</li>
<li>會安裝及使用 <strong>Telegram</strong></li>
<li>會使用 <strong>Google Excel</strong></li>
</ul>
<p>這邊可以簡單分為六個小節：</p>
<ol>
<li>簡易基礎介紹 - 我們要做出什麼 <strong>Side Project</strong></li>
<li>申請機器人 - <strong>Side Project</strong> 需要使用</li>
<li>快速建立後端 - 不需要起一個後端服務快速建立後端</li>
<li>串丸子般把所有東西串起來 - 料都準備好了，一起下鍋吧</li>
<li>更新的一些小事 - 關於 <strong>GAS</strong> 需要注意的小事項</li>
<li>延伸應用 - 如果需要作品的人，可以如何延伸創作？</li>
</ol>
<hr>
<h3 id="簡易基礎介紹"><a href="#簡易基礎介紹" class="headerlink" title="簡易基礎介紹"></a>簡易基礎介紹</h3><p>看完上面一些條件後，聰明的你應該八九成能猜到我們要做什麼。這次我們要做一個簡易的機器人，可以幫我們建立一些資料，也可以把這些資料撈取出來給使用者。</p>
<p>先說說什麼是通訊軟體的機器人，如果使用 <strong>LINE</strong> 來舉例(如下圖)，就像有個人再跟你互動。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220301/LINE_Bot.png" alt="LINE Bot"></p>
<blockquote>
<p><em>圖片來至 <a href="https://www.ithome.com.tw/news/110573">Line開發者大會TechPulse來臺，整合5套開發套件，讓使用者開發聊天機器人應用</a></em></p>
</blockquote>
<p>而我們今天要使用的機器人是 <strong>TG</strong> 的機器人(<strong>不知道 TG 是什麼可以往上拉，有連結請參考</strong>)，大多的機器人概念圖都如下：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220301/botProcess.png" alt="機器人概念圖"></p>
<p>我們需要做事的地方就在右邊的後端伺服器那塊，將我們的程式碼寫好後部署上去，然後再透過通訊軟體提供的方式設定，讓通訊軟體知道如何找到我們的部署上去的程式碼，通訊軟體就會在某些時機點丟一些資訊過來，這時候在我們的程式碼裡面可以做一些判斷然後操作資料，最後回吐一些通訊軟體定義好的格式回去，這時候通訊軟體就會繼續做接下來的事情，這邊講的比較不好明白，繼續看下去就會瞭解了。</p>
<p>簡易來說，我們要做的事情很簡單：</p>
<ol>
<li>使用者輸入訊息給機器人</li>
<li>通訊軟體接到訊息後傳送通知到我們的後端伺服器去</li>
<li>經過我們部署到後端伺服器上的程式碼加工處理後回吐客製化訊息給通訊軟體</li>
<li>通訊軟體告知使用者我們回吐的資訊</li>
</ol>
<p>在製作機器人之前我們需要先安裝及申請幾樣東西(跟著文章一步一步走可以)：</p>
<ul>
<li>Telegram 安裝及申請帳號</li>
<li>Telegram 機器人申請</li>
<li>Google Excel 申請</li>
<li>Google App Script 專案建立</li>
</ul>
<hr>
<h3 id="申請機器人"><a href="#申請機器人" class="headerlink" title="申請機器人"></a>申請機器人</h3><p>這次需要先安裝 <a href="https://desktop.telegram.org/"><strong>TG</strong></a> 及申請帳號密碼，這邊就不詳細贅述了，接著需要申請一組機器人；至於為何要用 <strong>TG</strong> 而不用 <strong>LINE Bot</strong> 呢？因為 <strong>TG</strong> 真的容易很多。</p>
<ol>
<li><p>首先在 TG 的搜尋區輸入 <strong>@BotFather</strong>，就會看到一個藍勾勾的帳號，點選進去。</p>
<p> <img src="/images/others/loading.gif" data-original="/images/20220301/BotFather.png" alt="TG的機器人之父"></p>
</li>
<li><p>接著輸入 <code>/start</code>，輸入完會出現一些可以使用的指令，我們需要輸入 <code>/newbot</code> 來建立我們的第一隻機器人。</p>
</li>
<li><p>之後跟著指令輸入該輸入的資訊</p>
<p> <img src="/images/others/loading.gif" data-original="/images/20220301/newBot.png" alt="新增機器人"></p>
</li>
<li><p>建立結束後會拿到一串 Token，如果沒有記下來也沒關係，之後都還可以用 <strong>@BotFather</strong> 查詢到，輸入 <code>/mybots</code>，在點擊你想查詢的機器人。</p>
<p> <img src="/images/others/loading.gif" data-original="/images/20220301/myBot.png" alt="我的機器人"></p>
<p> <img src="/images/others/loading.gif" data-original="/images/20220301/botToken.png" alt="機器人的 Token"></p>
</li>
<li><p>為了後面方便我們先將一些機器人的資訊輸入完成，點擊 <strong>Edit Bot</strong> 然後點擊要編輯的資訊，像是 <strong>Edit Name</strong> 或 <strong>Edit Description</strong>…等等</p>
<p> <img src="/images/others/loading.gif" data-original="/images/20220301/botInfo.png" alt="機器人資訊"></p>
<ul>
<li><p><strong>Name</strong> - 機器人的名稱</p>
</li>
<li><p><strong>Description</strong> - 機器人的敘述，會在搜尋後要加入機器人的時候出現在畫面上</p>
<p>  <img src="/images/others/loading.gif" data-original="/images/20220301/botDescription.png" alt="機器人填寫 Description 後顯示的地方"></p>
</li>
<li><p><strong>About</strong> - 會出現在個人資料裡面的介紹</p>
</li>
<li><p><strong>Botpic</strong> - 機器人大頭貼</p>
</li>
<li><p><strong>Commands</strong> - 在機器人一對一或者有邀請該機器人的群組裡面輸入 “&#x2F;“ 後會出現的指令</p>
</li>
</ul>
</li>
</ol>
<p>另外如果有需要在群組裡面使用機器人，請記得點在機器人設定那邊點擊 <strong>BotSetting</strong> 然後把 <strong>Allow Groups</strong> 設定為 <strong>off</strong>，因為這次我們只有要自己使用，不需要打開。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220301/allowGroup.png" alt="允許在群組內使用"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20220301/sample_db_bot.png" alt="搜尋自己的機器人"></p>
<blockquote>
<p><em>TG 的 Bot 申請設定都在通訊軟體裡面的 <strong>@BotFather</strong> 完成，比起其他通訊軟體的 <strong>Bot</strong> 相對方便許多。</em></p>
</blockquote>
<hr>
<h3 id="快速建立後端"><a href="#快速建立後端" class="headerlink" title="快速建立後端"></a>快速建立後端</h3><p>申請好 <strong>TG Bot</strong> 之後，接下來我們要搭建我們的後端，這邊會需要一個紀錄資料的 <strong>DB</strong> 及 <strong>處理後端邏輯的地方</strong>。</p>
<ol>
<li><p>首先先創建一個 <strong><a href="https://www.google.com.tw/intl/zh-TW/sheets/about/">Google Excel</a></strong>(這個就是我們的簡易資料庫了)，然後裡面打上下面的內容</p>
<p> <img src="/images/others/loading.gif" data-original="/images/20220301/googleExcel.png" alt="Google Excel"></p>
<p> 下方的 <strong>工作表1</strong> 也請改名為 <strong>簡易記錄表</strong></p>
<p> <img src="/images/others/loading.gif" data-original="/images/20220301/sampleSheet.png" alt="表格可以隨意命名，這邊先以圖示為例"></p>
</li>
<li><p>接著創建一個 <a href="https://www.google.com/script/start/">Google Apps Script</a> 專案 </p>
<p> <img src="/images/others/loading.gif" data-original="/images/20220301/newGAS.png" alt="新增 GAS 專案"></p>
</li>
<li><p>複製下面程式碼貼上(把原本的 <strong>function myFunction()</strong> 整個替換掉)</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doGet</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 取得試算表</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">SheetId</span> = <span class="string">&#x27;excel 的 Id&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">SheetName</span> = <span class="string">&#x27;簡易記錄表&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">SpreadSheet</span> = <span class="title class_">SpreadsheetApp</span>.<span class="title function_">openById</span>(<span class="title class_">SheetId</span>);</span><br><span class="line">	<span class="comment">// const Sheet = SpreadSheet.getSheets()[0]; // 指定第一張試算表</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">Sheet</span> = <span class="title class_">SpreadSheet</span>.<span class="title function_">getSheetByName</span>(<span class="title class_">SheetName</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 取得資料</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">LastRow</span> = <span class="title class_">SpreadSheet</span>.<span class="title function_">getLastRow</span>(); <span class="comment">// 取得有資料的最後一欄</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">LastColumn</span> = <span class="title class_">SpreadSheet</span>.<span class="title function_">getLastColumn</span>(); <span class="comment">// 取得有資料的最後一列</span></span><br><span class="line"></span><br><span class="line">  <span class="title class_">Logger</span>.<span class="title function_">log</span>(<span class="title class_">Sheet</span>.<span class="title function_">getSheetValues</span>(<span class="title class_">LastRow</span>, <span class="title class_">LastColumn</span>, <span class="number">1</span>, <span class="number">1</span>)); <span class="comment">// 取得 startRow、startColumn、numRows 和 numColumns 從「左上儲存格至右下儲存格」中間區域所包含的儲存格數值</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">ContentService</span></span><br><span class="line">    .<span class="title function_">createTextOutput</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">result</span>: <span class="string">&#x27;測試Get取得資訊成功&#x27;</span>, <span class="attr">version</span>: <span class="string">&#x27;1.0&#x27;</span> &#125;))</span><br><span class="line">        .<span class="title function_">setMimeType</span>(<span class="title class_">ContentService</span>.<span class="property">MimeType</span>.<span class="property">JSON</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>將 <strong>SheetId</strong> 後面的 <strong>Excel 的 Id</strong> 替換為你剛剛創建 <strong>Google Excel</strong> 的 <strong>ID</strong>，<strong>ID</strong> 哪裡拿呢？打開剛剛你創建的 <strong>Google Excel</strong>，然後看網址那邊。</p>
<p> <a href="https://docs.google.com/spreadsheets/d/167CxX5-SwaTDDK4u1QRaPWIIWGcpbBNKahJYYozY22A/edit?hl=zh-TW#gid=0"><code>https://docs.google.com/spreadsheets/d/167CxX5-SwaTDDK4u1QRaPWIIWGcpbBNKahJYYozY22A/edit?hl=zh-TW#gid=0</code></a></p>
<p> <img src="/images/others/loading.gif" data-original="/images/20220301/excelID.png" alt="取得 Excel ID"></p>
<blockquote>
<p><em>取得中間那 <strong>d&#x2F;</strong> 後面開始一直到 <strong>&#x2F;edit</strong> 前面為止的範圍。</em></p>
</blockquote>
</li>
<li><p>接著按下執行按鈕</p>
<p> <img src="/images/others/loading.gif" data-original="/images/20220301/startGAS.png" alt="執行 GAS"></p>
<blockquote>
<p><em>第一次執行會需要權限同意，這是正常的</em></p>
</blockquote>
</li>
</ol>
<p><img src="/images/others/loading.gif" data-original="/images/20220301/startGASProcess.gif" alt="執行過程"></p>
<p>這邊很重要需要先解釋一下，<strong>GAS</strong> 預設兩種接收方式，我們在 <strong>GAS</strong> 寫完的程式碼發布後，會拿到一串網址，我們可以把這個當成 <strong>API</strong>，透過 <strong><a href="https://developer.mozilla.org/zh-TW/docs/Web/HTTP/Methods"><em>HTTP Methods</em></a></strong> 可以觸發我們寫的程式碼，而 <strong>GAS</strong> 只能接受 <strong>HTTP GET</strong> 及 <strong>POST</strong>。</p>
<p>而 <strong>GAS</strong> 最重要的兩點就寫在文件內，請參考 <em><a href="https://developers.google.com/apps-script/guides/web">Web Apps - Requirements for web apps</a></em>，第一點就是剛剛提到的 <strong>doGet(e)</strong> 跟 <strong>doPost(e)</strong>，第二點就是該程式碼回傳的內容必須是 <a href="https://developers.google.com/apps-script/guides/html">**<em>HTML service</em></a> <em><a href="https://developers.google.com/apps-script/reference/html/html-output">HtmlOutput</a></em> Object** 或 <a href="https://developers.google.com/apps-script/guides/content">**<em>Content service</em></a> <em><a href="https://developers.google.com/apps-script/reference/content/text-output">TextOutput</a></em> Object**。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220301/GASDoc.png" alt="GAS Document"></p>
<blockquote>
<p><em><strong>要提醒很重要的一件事情就是串接任何服務之前，文件一定要好好的看清楚規則及條件還有用法。</strong></em></p>
</blockquote>
<p>到這邊你已經可以撈取到 <strong>Excel</strong> 的內容了，這邊一行一行來解釋一下：</p>
<ul>
<li><code>const SheetId = &#39;excel 的 Id&#39;;</code> - 這行需要放入你的 <strong>Google Excel ID</strong></li>
<li><code>const SheetName = &#39;簡易記錄表&#39;;</code> - 這行需要輸入你 <strong>Google Excel</strong> 的 <strong>Sheet</strong> 名稱，名稱就是 <strong>Google Excel</strong> 下方的工作表名稱。</li>
<li><code>const SpreadSheet = SpreadsheetApp.openById(SheetId);</code> - 這行是透過 <strong>Google Excel</strong> 的 <strong>ID</strong> 取得你的 <strong>Google Excel</strong>，也可以使用 <code>openByUrl()</code></li>
<li><code>const Sheet = SpreadSheet.getSheets()[0];</code> - 這行註解掉的原因是取得 <strong>Excel Sheet</strong> 的方式可以使用 <code>getSheetByName()</code> 或 <code>getSheets()[0]</code> 詳細可參考 <a href="https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet#getSheetByName(String)"><em>Google App Script Api Doc</em></a></li>
<li><code>const Sheet = SpreadSheet.getSheetByName(SheetName);</code> - 這行上面提過是取得你的 <strong>Excel Sheet</strong> 表格</li>
<li><code>const LastRow = SpreadSheet.getLastRow();</code> - 這行是要取得有資料的最後那一欄</li>
<li><code>const LastRow = SpreadSheet.getLastColumn();</code> - 這行是要取得有資料的最後那一列</li>
<li><code>Logger.log(Sheet.getSheetValues(LastRow, LastColumn, 1, 1));</code> - 這行就是取得 <strong>startRow</strong>、<strong>startColumn</strong>、<strong>numRows</strong> 和 <strong>numColumns</strong>，最後的 1, 1 如果帶入其他數字可以取得一整個範圍的內容，例如 <code>Sheet.getSheetValues(1, 1, 2, 2);</code> 意思就是取得從 <strong>A1</strong> 到 <strong>B2</strong> 範圍的內容。</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="title class_">ContentService</span></span><br><span class="line">    .<span class="title function_">createTextOutput</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">result</span>: <span class="string">&#x27;測試Get取得資訊成功&#x27;</span>, <span class="attr">version</span>: <span class="string">&#x27;1.0&#x27;</span> &#125;))</span><br><span class="line">        .<span class="title function_">setMimeType</span>(<span class="title class_">ContentService</span>.<span class="property">MimeType</span>.<span class="property">JSON</span>); </span><br></pre></td></tr></table></figure>

<ul>
<li>最後一行則是要回傳的資訊，這邊建議回傳都使用 <code>ContentService.createTextOutput();</code> 這種方式回傳</li>
</ul>
<hr>
<h3 id="串丸子般把所有東西串起來"><a href="#串丸子般把所有東西串起來" class="headerlink" title="串丸子般把所有東西串起來"></a>串丸子般把所有東西串起來</h3><p>到這邊你已經建立好後端部分了，該準備的東西也都準備好了，我們開始來著手串接 <strong>TG Bot</strong> 吧。</p>
<p>先把剛剛的程式碼修改一下，左側先新增三隻檔案，然後修改一下檔案名稱如下：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220301/GASFileSnapSHot.png" alt="目前所有檔案的快照"></p>
<p><strong>app.gs</strong> 內容改為：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doGet</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 取得試算表</span></span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="title class_">Sheet</span>, <span class="title class_">SpreadSheet</span> &#125; = <span class="title function_">connectToSheet</span>(<span class="string">&#x27;Excel ID&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">SheetInfo</span> = <span class="title function_">getSheetInfo</span>(<span class="title class_">Sheet</span>, <span class="title class_">SpreadSheet</span>, &#123;</span><br><span class="line">    <span class="attr">startColumn</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">endColumn</span>: <span class="number">4</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">ContentService</span></span><br><span class="line">    .<span class="title function_">createTextOutput</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="title class_">SheetInfo</span>))</span><br><span class="line">        .<span class="title function_">setMimeType</span>(<span class="title class_">ContentService</span>.<span class="property">MimeType</span>.<span class="property">JSON</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收 TG 回應</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doPost</span>(<span class="params">e</span>) &#123;</span><br><span class="line">	<span class="comment">// 取得試算表</span></span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="title class_">Sheet</span>, <span class="title class_">SpreadSheet</span> &#125; = <span class="title function_">connectToSheet</span>(<span class="string">&#x27;Google Excel 的 ID&#x27;</span>);</span><br><span class="line">  <span class="comment">// Token</span></span><br><span class="line">  <span class="keyword">const</span> bot_token = <span class="string">&quot;TG Bot Token&quot;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 訊息來源</span></span><br><span class="line">  <span class="keyword">const</span> estringa = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(e.<span class="property">postData</span>.<span class="property">contents</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (estringa.<span class="property">message</span>.<span class="property">chat</span>.<span class="property">type</span> !== <span class="string">&#x27;private&#x27;</span>) <span class="keyword">return</span>; </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> newDate = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    id,</span><br><span class="line">    username,</span><br><span class="line">  &#125; = estringa.<span class="property">message</span>.<span class="property">chat</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    text,</span><br><span class="line">  &#125; = estringa.<span class="property">message</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setSheetInfo</span>(<span class="title class_">Sheet</span>, <span class="title class_">SpreadSheet</span>, [[newDate, username, id, text]])</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 整理要回覆給通訊軟體的內容</span></span><br><span class="line">  <span class="keyword">const</span> options = &#123;</span><br><span class="line">    <span class="string">&quot;method&quot;</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">    <span class="string">&quot;contentType&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">    <span class="string">&quot;payload&quot;</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">        <span class="string">&quot;method&quot;</span>: <span class="string">&quot;sendMessage&quot;</span>,</span><br><span class="line">        <span class="string">&quot;chat_id&quot;</span>: estringa.<span class="property">message</span>.<span class="property">chat</span>.<span class="property">id</span>,</span><br><span class="line">        <span class="string">&quot;text&quot;</span>: estringa.<span class="property">message</span>.<span class="property">text</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;;</span><br><span class="line">   </span><br><span class="line">  <span class="title class_">UrlFetchApp</span>.<span class="title function_">fetch</span>(<span class="string">`https://api.telegram.org/bot<span class="subst">$&#123;bot_token&#125;</span>/sendMessage`</span>, options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>connectToSheet.gs</strong> 內容改為:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 連結 Excel</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">connectToSheet</span>(<span class="params">SheetId</span>) &#123;</span><br><span class="line">  <span class="title class_">Logger</span>.<span class="title function_">log</span>(<span class="string">&#x27;start to connectToSheet&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">SpreadSheet</span> = <span class="title class_">SpreadsheetApp</span>.<span class="title function_">openById</span>(<span class="title class_">SheetId</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">Sheet</span> = <span class="title class_">SpreadSheet</span>.<span class="title function_">getSheets</span>()[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Sheet</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="title class_">Logger</span>.<span class="title function_">log</span>(<span class="string">&#x27;ConnectToSheet Success!&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="title class_">Sheet</span>,</span><br><span class="line">      <span class="title class_">SpreadSheet</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title class_">Logger</span>.<span class="title function_">log</span>(<span class="string">&#x27;ConnectToSheet Failed!&#x27;</span>);</span><br><span class="line">  <span class="keyword">throw</span> <span class="title class_">Error</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>getSheetInfo.gs</strong> 內容改為：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 取得目標 Excel 的資料</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSheetInfo</span>(<span class="params">Sheet, SpreadSheet, &#123;</span></span><br><span class="line"><span class="params">  startRow,</span></span><br><span class="line"><span class="params">  startColumn,</span></span><br><span class="line"><span class="params">  endRow = <span class="number">1</span>,</span></span><br><span class="line"><span class="params">  endColumn = <span class="number">1</span>,</span></span><br><span class="line"><span class="params">&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Sheet</span> || !<span class="title class_">SpreadSheet</span>) &#123;</span><br><span class="line">    <span class="title class_">Logger</span>.<span class="title function_">log</span>(<span class="string">&#x27;Sheet Or SpreadSheet Not Found!&#x27;</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="title class_">Error</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> _startRow = startRow;</span><br><span class="line">  <span class="keyword">let</span> _startColumn = startColumn;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 取得資料</span></span><br><span class="line">  _startRow = startRow ? startRow : <span class="title class_">SpreadSheet</span>.<span class="title function_">getLastRow</span>(); <span class="comment">// 取得有資料的最後一欄</span></span><br><span class="line">  _startColumn = startColumn ? startColumn : <span class="title class_">SpreadSheet</span>.<span class="title function_">getLastColumn</span>(); <span class="comment">// 取得有資料的最後一行</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Sheet</span>.<span class="title function_">getSheetValues</span>(_startRow, _startColumn, endRow, endColumn); <span class="comment">// 取得 startRow、startColumn、numRows 和 numColumns 從「左上儲存格至右下儲存格」中間區域所包含的儲存格數值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>setSheetInfo.gs</strong> 內容改為：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setSheetInfo</span>(<span class="params">Sheet, SpreadSheet, values</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Sheet</span> || !<span class="title class_">SpreadSheet</span>) &#123;</span><br><span class="line">    <span class="title class_">Logger</span>.<span class="title function_">log</span>(<span class="string">&#x27;Sheet Or SpreadSheet Not Found!&#x27;</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="title class_">Error</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 取得資料範圍</span></span><br><span class="line">  <span class="keyword">const</span> range = <span class="title class_">Sheet</span>.<span class="title function_">getRange</span>(<span class="title class_">SpreadSheet</span>.<span class="title function_">getLastRow</span>() + <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!range) &#123;</span><br><span class="line">    <span class="title class_">Logger</span>.<span class="title function_">log</span>(<span class="string">&#x27;Range Not Found!&#x27;</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="title class_">Error</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (values[<span class="number">0</span>] &amp;&amp; <span class="title class_">Array</span>.<span class="title function_">isArray</span>(values[<span class="number">0</span>]) &amp;&amp; values[<span class="number">0</span>].<span class="property">length</span> === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="comment">// 寫入試算表</span></span><br><span class="line">    range.<span class="title function_">setValues</span>(values);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title class_">Logger</span>.<span class="title function_">log</span>(<span class="string">&#x27;Value is Not Array!&#x27;</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="title class_">Error</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><strong>setSheetInfo.gs</strong> 原本想寫成跟 <strong>getSheetInfo.gs</strong> 一樣，透過 <strong>Props</strong> 帶入參數，動態的選擇要塞入多個內容或者單個，但因為這邊寫起來會很複雜，所以先固定寫死，如果有興趣的朋友，可以自行修改內容，如果還不太明白 <strong>JavaScript</strong> 可以先略過。*</li>
</ul>
</blockquote>
<p>請記得先把上面該帶入的 <strong>Google Excel ID</strong> 及 <strong>TG Bot Token</strong> 填入，然後點選右上角 <strong>部署 &gt; 新增部署作業</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220301/addGASWork.png" alt="新增部署作業"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20220301/GASWorkSetting.png" alt="部署作業設定"></p>
<blockquote>
<p><em>隨後請記得 <strong>選取類型</strong> 選擇 <strong>網頁應用程式</strong>，說明隨意輸入，執行身份選自己，誰可以存取選擇 <strong>所有人</strong>，然後點擊部署。</em></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20220301/GASURL.png" alt="GAS 部署結果"></p>
<blockquote>
<p><em>最後會拿到一串網址，請把這串網址記下來</em></p>
</blockquote>
<p>這時候我們要開始把 <strong>TG Bog</strong> 跟 <strong>Google Script App</strong> 串接起來，請先記得幾個基本 <strong>API</strong>，最好使用 <strong>PostMan</strong> 記錄下來：</p>
<ul>
<li><code>https://api.telegram.org/bot&#123;&#123;bot_token&#125;&#125;/setWebhook?url=&#123;&#123;google_sheet&#125;&#125;</code></li>
<li><code>https://api.telegram.org/bot&#123;&#123;bot_token&#125;&#125;/deleteWebhook</code></li>
<li><code>https://api.telegram.org/bot&#123;&#123;bot_token&#125;&#125;/getMe</code></li>
<li><code>https://api.telegram.org/bot&#123;&#123;bot_token&#125;&#125;/sendMessage</code></li>
</ul>
<blockquote>
<p><em>我們需要使用第一個 <strong>API</strong> 去把我們的 <strong>TG Bot</strong> 跟 <strong>Google Apps Script</strong> 串接起來，哪天如果不想要使用了，請記得使用第二個 <strong>API</strong> 去把串接起來的機器人取消掉；第三個 <strong>API</strong> 則是可以取得目前機器人的一些設定，這個在 <strong>TG BotFather</strong> 其實也可以看到；第四個 <strong>API</strong> 可以透過 <strong>HTTP Post</strong> 發送一些訊息到 <strong>TG</strong>。</em></p>
</blockquote>
<p>使用前還是要先解釋一下，還記得上面那張圖嗎？使用者發送訊息給 <strong>TG Bot</strong>，而 <strong>TG Bot</strong> 會告知我們，這時候要取得這些通知有兩種方法，一種是 <strong>Long Polling</strong>，另一種則是 <strong>Webhook</strong>。</p>
<p>前者是透過 <code>getUpdates()</code> 的方法去跟 <strong>TG Bot</strong> 要通知，後者則是 <strong>TG Bot</strong> 會自動透過設定好的 <strong>Webhook URL</strong> 去通知我們。</p>
<blockquote>
<p><em><strong>請記得第二種方法設定好之後，如果有設定成功，但是沒有 Return HTTP 200 給 TG Bot，TG 那邊預設會一直狂敲猛敲你的 Webhook URL，可能會造成流量問題，但目前我們這邊的範例不需要擔心(如果有誤還麻煩請幫忙指出，感激不盡)。</strong></em></p>
</blockquote>
<hr>
<h3 id="設定-Webhook"><a href="#設定-Webhook" class="headerlink" title="設定 Webhook"></a>設定 Webhook</h3><p>這邊開始我們要來設定 <strong>Webhook</strong>，透過 <strong>PostMan</strong> 或者打開網頁，把那行 <strong>API</strong> 輸入上去，<code>https://api.telegram.org/bot&#123;&#123;bot_token&#125;&#125;/setWebhook?url=&#123;&#123;google_sheet&#125;`，請記得 **"&#123;&#123;&#125;&#125;&quot;** 要刪掉，範例為 </code><a href="https://api.telegram.org/bot123456789:xxxx_xxx_xxx/setWebhook?url=https://script.google.com/macros/s/xxxxxxxx/exec%60">https://api.telegram.org/bot123456789:xxxx_xxx_xxx/setWebhook?url=https://script.google.com/macros/s/xxxxxxxx/exec`</a> 。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220301/setWebhookSuccess.png" alt="設定 Webhook"></p>
<blockquote>
<p><em>設定成功會出現 <code>&quot;description&quot;: &quot;Webhook was set&quot;</code> 。</em></p>
</blockquote>
<p>接著到 <strong>TG Bot</strong> 輸入隨意訊息 <code>哈摟你好嗎</code> ，如下圖：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220301/botTest.png" alt="機器人測試"></p>
<p>這時候到 <strong>Google Excel</strong> 查看會看到一筆紀錄：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220301/googleExcelGetBotResponse.png" alt="取得機器人回應"></p>
<p>至此你已經會透過 <strong>GAS</strong> 串接 <strong>TG Bot</strong> 把資料從 <strong>Google Excel</strong> 塞進及取出。</p>
<hr>
<h3 id="更新的一些小事"><a href="#更新的一些小事" class="headerlink" title="更新的一些小事"></a>更新的一些小事</h3><p><img src="/images/others/loading.gif" data-original="/images/20220301/GASManager.png" alt="管理部署"></p>
<p>發布後如果發現有需要更新內容，點擊 <strong>部署 &gt; 管理部屬作業</strong> 然後會彈出一個視窗，點擊右上角的編輯(<strong>一支筆</strong>)，接著點擊版本選擇 <strong>建立新版本</strong>，說明選填，然後點擊 <strong>部署</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220301/editGASWork.png" alt="編輯部署"></p>
<p>這邊需要注意的是，透過 <strong>管理部屬作業</strong> 去部署的新程式碼，網頁應用程式那串網址結果都會是一樣的，不需要再去重新 <strong>setWebhook</strong> 給 <strong>TG Bot</strong>。如果需要保留舊的版本，請選擇 <strong>部署 &gt; 新增部署作業</strong>，這樣才會 <strong>既保留舊版本，又產生新的網頁應用程式網址</strong>。</p>
<p>保留舊版本的好處是如果新的版本出問題了，可以快速換回舊版本；另外需要注意的是，確定沒有用的版本請記得封存，不然還是會算流量。</p>
<hr>
<h3 id="延伸應用"><a href="#延伸應用" class="headerlink" title="延伸應用"></a>延伸應用</h3><p>現在只要專心 <strong>Foucs</strong> 在前端即可，這幾乎是前端要做 <strong>Side Project</strong> 追求的，把重點放在前端部分。如果不需要串接 <strong>TG Bot</strong> 其實也可以寫一個簡易的訂單系統，有興趣可以參考這篇文章 <strong><a href="https://ianccy.com/googleformapi/"><em>Google sheet 試算表表單串接api</em></a></strong>，這篇文章介紹如何透過 <strong>GAS</strong> 做一個鹹酥雞訂單系統。</p>
<p>因為免除了從零開始建置後端的麻煩，只要是簡單的 <strong>CRUD</strong> 都可以輕鬆建立，串接其他機器人也都很輕鬆～</p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>這次會碰到這個應用是因為剛好工作上團隊都會點便當，但因為每次都需要透過打開網頁去 <strong>Google Excel</strong> 看需要付多少錢有點麻煩，想了一下平常團隊最常使用的軟體是 <strong>TG</strong>，所以就想想有沒有辦法可以透過串接機器人讓他告訴我現在要付多少錢，因為懶惰又學到了一些有趣的應用，果然這才是驅使工程師成長的推力。</p>
<blockquote>
<p><em>這個示範機器人會留著給大家試用，如果有興趣的話。但因為個資問題，會把 <strong>使用者名稱</strong> 及 <strong>Chat ID</strong> 改為 <strong>xxx</strong></em></p>
</blockquote>
<p><strong>TG Bot 機器人</strong> - <a href="https://t.me/sample_db_bot"><em>加入好友連結</em></a></p>
<p><strong>Google Excel 表單</strong> - <a href="https://docs.google.com/spreadsheets/d/167CxX5-SwaTDDK4u1QRaPWIIWGcpbBNKahJYYozY22A/edit#gid=0"><em>表單連結</em></a></p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><p><a href="https://www.wfublog.com/2017/01/google-apps-script-spreadsheet-write-data.html">用 Google Apps Script 操作試算表 (1)製作資料庫 + 寫入資料</a></p>
</li>
<li><p><a href="https://ianccy.com/googleformapi/">Google sheet 試算表表單串接api</a></p>
</li>
<li><p><a href="https://ithelp.ithome.com.tw/articles/10247154?sc=hot">Day 20-Telegram 回聲機器人</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>Google</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
        <tag>Google</tag>
        <tag>Google Excel</tag>
        <tag>GAS</tag>
        <tag>Google App Script</tag>
        <tag>Telegram Bot</tag>
        <tag>Telegram</tag>
      </tags>
  </entry>
  <entry>
    <title>[Git Note] - 統一團隊的 Git Commit 格式吧！不要再讓 Commit 亂糟糟</title>
    <url>/2022/03/30/20220330/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p><img src="/images/others/loading.gif" data-original="/images/20220330/git_banner.png" alt="Git"></p>
<p>這是一篇教學如何美化 <strong>git commit</strong> 及客製化檢查程式碼還有檢查 <strong>git commit</strong> 內容的文章。</p>
<span id="more"></span>

<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p>這篇文章將會透過 <strong>Husky</strong> 及 <strong>Commitizen</strong> 格式化 <strong>git Commit</strong> 佐 <strong>Commitlint</strong> 檢查 <strong>git Commit</strong> 是否符合格式</p>
<hr>
<h2 id="Commitizen-的安裝及使用流程"><a href="#Commitizen-的安裝及使用流程" class="headerlink" title="Commitizen 的安裝及使用流程"></a>Commitizen 的安裝及使用流程</h2><p><img src="/images/others/loading.gif" data-original="/images/20220330/commitizen_logo.png" alt="Commitizen"></p>
<ol>
<li><p>安裝 <strong>Commitizen</strong></p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$npm</span> install commitizen</span><br><span class="line"></span><br><span class="line">// 或</span><br><span class="line"></span><br><span class="line"><span class="variable">$yarn</span> add commitizen</span><br></pre></td></tr></table></figure>
</li>
<li><p>設定 <strong>Commitizen</strong></p>
<p> 在 <strong>package.json</strong> 加上下面的設定</p>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;commitizen&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cz-conventional-changelog&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p> (如果沒設定，之後輸入 <code>git cz</code> 會一樣以預設的 <code>git commit</code> 執行)</p>
<blockquote>
<p><em>如果有報錯找不到 <code>cz-conventional-changelog</code> 請輸入 <code>npm install cz-conventional-changelog</code> 或 <code>yarn add cz-conventional-changelog</code> 。</em></p>
</blockquote>
</li>
<li><p>輸入 <code>git cz</code> 就能出現預設的問答</p>
<p> <img src="/images/others/loading.gif" data-original="/images/20220330/git_cz.png" alt="git cz"></p>
<blockquote>
<p><em>全部輸入完可以在輸入 <code>git log</code> 查看剛剛建立的 commit</em></p>
</blockquote>
</li>
</ol>
<hr>
<h2 id="Commitlint-的安裝及使用流程"><a href="#Commitlint-的安裝及使用流程" class="headerlink" title="Commitlint 的安裝及使用流程"></a>Commitlint 的安裝及使用流程</h2><p>如果需要定義 <strong>commit</strong> 的規範及格式，可以透過使用 <em><a href="https://github.com/conventional-changelog/commitlint">Commitlint</a></em> 來客製化需要規範的 <strong>commit</strong> 條件，例如敘述不可以小於五個字等等；基本上有使用 <code>git cz</code> 的話都大致能符合基本格式，除非提交者直接使用 <code>git commit</code>，並且輸入了不符合規範的格式。</p>
<blockquote>
<p>如果不安裝使用 <strong>Commitlint</strong>，只有使用 <strong>Commitizen</strong> 將會讓這個統一規範的功能形同虛設，建議還是連同 <strong>Commitlint</strong> 一起安裝。</p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20220330/commitlint_logo.png" alt="Commitlint GitHub"></p>
<ol>
<li><p>安裝 <strong>commitlint-cli</strong> 及 <strong>config-conventional</strong></p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$npm</span> install --save-dev @commitlint/&#123;config-conventional,cli&#125;</span><br><span class="line"></span><br><span class="line">// 或</span><br><span class="line"></span><br><span class="line"><span class="variable">$yarn</span> add --save-dev @commitlint/&#123;config-conventional,cli&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>產生 <strong>commitlint.config.js</strong> 並寫入設定</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;module.exports = &#123;extends: [&#x27;@commitlint/config-conventional&#x27;]&#125;&quot;</span> &gt; commitlint.config.js</span><br></pre></td></tr></table></figure>
<blockquote>
<p><em>更多規範可參考 commitlint 的 Document → <a href="https://github.com/conventional-changelog/commitlint#config">Config</a></em></p>
</blockquote>
</li>
<li><p>使用 <strong>commitlint</strong></p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;add commitlint first&quot;</span> | npx commitlint</span><br><span class="line">&gt; ✖   subject may not be empty [subject-empty]</span><br><span class="line">&gt; ✖   <span class="built_in">type</span> may not be empty [type-empty]</span><br></pre></td></tr></table></figure>
<p> <img src="/images/others/loading.gif" data-original="/images/20220330/use_commitlint.png" alt="使用 Commitlint 檢查 git commit"></p>
<blockquote>
<p><em>如果 commit 不符合規範就會跳出錯誤，規範可參考 <a href="https://www.conventionalcommits.org/en/v1.0.0/#summary">Conventional Commits</a></em></p>
</blockquote>
</li>
<li><p>試試 <code>echo &quot;fix(package.json): add commitlint first&quot; | npx commitlint</code> 就不會報錯了</p>
</li>
</ol>
<blockquote>
<p>這邊建議繼續往下看，如果已經裝了  <strong>Commitizen</strong> 及 <strong>Commitlint</strong>，當然不能少了 <strong>Pre-commit</strong> 的檢查，請一併安裝 <strong>Husky</strong> 吧！</p>
</blockquote>
<hr>
<h2 id="Husky-的安裝及使用流程"><a href="#Husky-的安裝及使用流程" class="headerlink" title="Husky 的安裝及使用流程"></a>Husky 的安裝及使用流程</h2><p><img src="/images/others/loading.gif" data-original="/images/20220330/husky_logo.png" alt="Husky Logo"></p>
<p><strong>Husky</strong> 聽起來很可愛，就像一隻可靠忠心的狗狗。</p>
<p>這隻狗狗可以讓開發者在不同的 <strong>git hook</strong> 執行不同的動作，例如建立 <strong>commit(pre-commit)</strong> 前執行 <strong>commit message</strong> 的檢查，或者 <strong>ESLint</strong> 的檢查。</p>
<ol>
<li><p>安裝 Husky</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$npx</span> husky-init &amp;&amp; npm install</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line"><span class="variable">$npx</span> husky-init &amp;&amp; yarn</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果有使用 <strong>commitlint</strong> 的話可以搭配下面指令</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$npx</span> husky add .husky/commit-msg <span class="string">&#x27;npx --no-install commitlint --edit $1&#x27;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><em>這個指令會產生一支檔案 <code>.husky/commit-msg</code>，這個指令可以在 <strong>commit(pre-commit)</strong> 前執行檢查 <strong>commit message</strong> 有無符合 <strong>conventional commit</strong> 的規範。</em></p>
</blockquote>
<p> 使用 <strong>create-react-app</strong> 記得把 <code>.husky/pre-commit</code> 裡面的 <code>npm test</code> 改為 <code>npm test -- --watchAll=false</code> ，不然輸入 <code>git commit</code> 後會卡在下圖(因為 <strong>create-react-app</strong> 預設是執行 <strong>watch mode</strong>)：</p>
<p> <img src="/images/others/loading.gif" data-original="/images/20220330/test_error.png" alt="Test 的錯誤"></p>
<p> 修改後，成功的話會出現下圖(如果有寫 <strong>Test</strong> 的話才會跑出綠色或紅色 <strong>Icon</strong>)：</p>
<p> <img src="/images/others/loading.gif" data-original="/images/20220330/test_success.png" alt="Test 成功"></p>
</li>
<li><p>這時候輸入 <code>git commit</code>，接著在 <strong>commit</strong> 隨意輸入 <code>fix</code>，接著送出：</p>
<p> <img src="/images/others/loading.gif" data-original="/images/20220330/commit_fix.png" alt="輸入隨意的 commit message"></p>
</li>
</ol>
<p>在這邊會在建立 <strong>commit message</strong> 的時候自動使用 <strong>commitlint</strong> 去檢查格式是否正確，錯誤的話就會如下圖：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220330/commit_error.png" alt="Commit 格式錯誤"></p>
<blockquote>
<p><em>如果沒有裝 <strong>commitlint</strong> 的話也只會跑 <strong>test</strong> 而已，並不會去檢查你的 <strong>commit message</strong>。</em></p>
</blockquote>
<hr>
<h2 id="延伸應用"><a href="#延伸應用" class="headerlink" title="延伸應用"></a>延伸應用</h2><h3 id="更新日誌"><a href="#更新日誌" class="headerlink" title="更新日誌"></a>更新日誌</h3><p><img src="/images/others/loading.gif" data-original="/images/20220330/conventional_changelog_logo.png" alt="Conventional Changelog Github"></p>
<p>如果對於 <strong>git</strong> 需要更多紀錄可以使用 <strong>conventional-changelog</strong> 及 <strong>standard version</strong>，前者是紀錄所有 <strong>commit</strong> 的詳細記錄，後者則是可以產生版號紀錄，這些紀錄皆會記錄在 <code>CHANGELOG.md</code>。</p>
<h3 id="Coding-Style-Check"><a href="#Coding-Style-Check" class="headerlink" title="Coding Style Check"></a>Coding Style Check</h3><p>如果需要使用 <strong>commit</strong> 前檢查 <strong>ESLint</strong> 的一些排版，可以安裝 <strong>ESLint</strong> 搭上 <strong>Husky</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220330/lint_staged_logo.png" alt="Lint Staged GitHub"></p>
<ol>
<li><p>安裝 <strong>lint-staged</strong></p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install husky lint-staged</span><br><span class="line"></span><br><span class="line">// 或</span><br><span class="line"></span><br><span class="line">$ yarn add husky lint-staged</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果<em>已經裝了 husky 就不用再裝一次了，輸入 <code>npm install lint-staged</code> 即可</em></p>
</blockquote>
</li>
<li><p>根目錄創建 <code>.huskyrc.json</code> 然後輸入</p>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;hooks&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;pre-commit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lint-staged&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>根目錄創建 <code>.lintstagedrc.json</code> 然後輸入</p>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;*.+(js|jsx)&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;eslint --fix&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;git add&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;*.+(json|css|md)&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;prettier --write&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;git add&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p> 這樣符合規範通過檢查的檔案就會被 <code>git add</code>，如果不符合就不會。</p>
</li>
</ol>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>前份工作因為常常只有一個前端開發一個專案，所以分支很簡單，主分支、開發分支…不會有很多額外分支。因為最近工作上碰到多人開發，而且需要發 <strong>PR</strong> 及定期開 <strong>UAT、Prod</strong> 的分支，所以大家的 <strong>Git Commit</strong> 都亂成一團，剛好想起之前有研究過 <strong>Husky</strong>，這次就一起整理成一份筆記。</p>
<p>主要還是透過 <strong>Commitlint</strong> 去檢查我們定義好的 <strong>Git Commit</strong> 格式是否正確，然後透過 <strong>Commitizen</strong> 去快速的產生符合規範格式，最後透過 <strong>Husky</strong> 在推出 <strong>commit</strong> 之前先行進行格式檢查。</p>
<p>如果有興趣的話也可以搭配延伸應用，一起檢查 <strong>ESLint</strong> 是否有符合規範，整套下來相信整個團隊都整齊一致，但最重要的還是要符合團隊的開發特性，還是那句話，沒有最厲害最好的程式碼及工具，只有最符合當下情況的語言及工具。</p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><a href="https://pjchender.blogspot.com/2021/07/git-commit-message.html">透過工具建立有規範的 git commit message 吧</a></li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>Solidity</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
        <tag>Solidity</tag>
        <tag>NFT</tag>
        <tag>Mint</tag>
        <tag>OpenSea</tag>
      </tags>
  </entry>
  <entry>
    <title>[Solidity Note] - 透過工程師的方式發布 基於 ERC721 的 NFT</title>
    <url>/2022/03/10/20220310/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p><img src="/images/others/loading.gif" data-original="/images/20220310/banner.png" alt="NFT"></p>
<p>從去年開始漸漸越來越常聽到 <strong>NFT</strong>，<strong>2021年3月12日</strong>，在佳士得拍賣會現場，有一件加密藝術品 <strong>Everydays: The First 5000 Days</strong> 以 <strong>7000萬美元(約 19 億美元)</strong> 售出，讓該作品的作者 <strong>Beeple</strong> 成為了廣為人知的藝術品作家。</p>
<p>相信會看到 <strong>Solidity</strong> 智能合約文章的朋友都已經知道這是什麼了。如果你不知道，可以參考 <a href="https://newslab.pts.org.tw/video/146-NFT%E6%98%AF%E4%BB%80%E9%BA%BC%EF%BC%8C%E5%8F%AF%E4%BB%A5%E8%B3%A3%E5%88%B0%E9%80%99%E9%BA%BC%E8%B2%B4%EF%BC%9F7%E5%88%86%E9%90%98%E5%B8%B6%E4%BD%A0%E4%BA%86%E8%A7%A3%E5%8A%A0%E5%AF%86%E8%97%9D%E8%A1%93%E6%8A%95%E8%B3%87%E7%86%B1"><em>NFT是什麼，可以賣到這麼貴？7分鐘帶你了解加密藝術投資熱</em></a>。</p>
<p>這篇文章不會探討 <strong>NFT</strong> 的優缺點，也不會提供任何投資建議，很單純只會教你如何透過智能合約上架自己的 <strong>NFT</strong>，並且可以有額外的延伸發揮空間。</p>
<blockquote>
<p><em><strong>工程師就該用工程師的方式上架 NFT</strong></em></p>
</blockquote>
<span id="more"></span>

<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p>接下來將會教你怎麼自己寫一份 <strong>Solidity 智能合約</strong> 上架自己的 <strong>NFT</strong>，最文章最後也會有一分鐘懶人包快速上架 NFT。</p>
<p>本篇文章預設學習前的基本條件需求：</p>
<ul>
<li>會基本的英文</li>
<li>有不會侵權的圖片(最好是自己畫)</li>
<li>知道終端機怎麼用，且環境已經安裝 <strong>Node.js</strong> - 不清楚的人可以參考這篇文章 <a href="https://medium.com/html-test/%E5%BE%9E%E9%9B%B6%E9%96%8B%E5%A7%8B-%E4%BD%BF%E7%94%A8npm%E5%A5%97%E4%BB%B6-317beefdf182">從零開始: 使用NPM套件</a></li>
</ul>
<p>這邊可以分為幾個小節：</p>
<ol>
<li>認識 Solidity</li>
<li>認識 ERC系列</li>
<li>使用 <a href="https://remix.ethereum.org/">Remix IDE</a></li>
<li>認識且使用 OpenZeppelin</li>
<li>申請 <a href="https://www.pinata.cloud/">Pinata</a>  IPFS</li>
<li>申請 <a href="https://metamask.io/">MataMask</a></li>
<li>領取<a href="https://faucets.chain.link/rinkeby">測試幣</a></li>
<li>發布 <strong>NFT</strong> 且學會使用 <a href="https://rinkeby.etherscan.io/">Etherscan.io</a></li>
<li>使用 <a href="https://testnets.opensea.io/">OpenSea Testnet</a></li>
<li>延伸應用</li>
</ol>
<hr>
<h2 id="認識-Solidity"><a href="#認識-Solidity" class="headerlink" title="認識 Solidity"></a>認識 Solidity</h2><p><img src="/images/others/loading.gif" data-original="/images/20220310/solidity-nedir.png" alt="Solidity"></p>
<p>想進入乙太坊做想做的事情，例如發行 <strong>NFT</strong>，就必須靠以太坊內部的 <strong>EVM(註1)</strong> 幫你處理；正因為要達到 <strong>去中心化</strong>、<strong>不可竄改</strong> 和 <strong>可信任</strong> 三件事情，所以我們一但把要做的事情(<strong>智能合約</strong>)，部署到 <strong>EVM</strong> 去，就不能再做修改了。</p>
<blockquote>
<p>*註1： <strong>EVM(Ethereum Virtual Machine)</strong>：中文翻譯為「以太坊虛擬機」，是智能合約的運行環境。如果有一點點程式底子，也可以把它想像成 <strong>VM(註2)</strong> ，詳情可查看 <a href="https://www.blocktempo.com/what-is-ethereum-virtual-machine-evm/">新手科普 | 以太坊虛擬機 EVM 是什麼，有何用處？</a>*</p>
</blockquote>
<blockquote>
<p><em>註2： <strong>虛擬機器 (VM)</strong> ，這是用來建立虛擬化運算環境的技術，也是第一代雲端運算的基礎。簡單說就是一台主機，裡面可以安裝作業環境，詳情可參考 <a href="https://www.vmware.com/tw/topics/glossary/content/virtual-machine.html">什麼是虛擬機？</a></em></p>
</blockquote>
<p>直接藉由下面這張圖來講解會比較快，首先你要先確定要在什麼地方寫智能合約，並非所有的鏈都可以寫智能合約，由於我們要在 <strong>乙太鏈</strong> 上寫智能合約，編寫 <strong>乙太鏈</strong> 的智能合約其實不只有 <strong>Solidity</strong>， 但因為 <strong>Solidity</strong> 最成熟，所以我們選擇它。</p>
<blockquote>
<p>*如果想選擇其他語言寫也可以，例如 <strong>Vyper(基於 Python)、Mandala</strong> 和 <strong>Obsidian（有漏掉請見諒）</strong>，抱歉筆者只接觸過 <strong>Solidity</strong>，加上 <strong>Solidity</strong> 是基於 <strong>JavaScript</strong> 開發出來的，除了需要強型別，其他的寫法都差不多，所以這次會選擇這個語言寫智能合約*</p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/solidity_process.png" alt="智能合約運作流程"></p>
<p>這邊我先簡單介紹一下整體運作流程：</p>
<ol>
<li><p>首先透過 <strong>Solidity</strong> 或其他程式語言編寫智能合約</p>
</li>
<li><p>將智能合約上鍊，經過礦工的認證之後就有不可更改性，然後會在 <strong>EVM</strong> 上面執行</p>
</li>
<li><p>將智能合約打包產出 <strong>ABI(Application Binary Interface) 應用二進制接口</strong>，這個可以讓我們透過 <strong>ABI</strong> 上面提供的 <strong>function</strong> 去呼叫 <strong>EVM</strong> 執行 智能合約。</p>
<blockquote>
<p><em>當然這邊省略了，呼叫前還是要有智能合約地址，這次教學不會寫怎麼呼叫，有興趣可以參考 <a href="https://easonwang.gitbook.io/blockchain/dapp/web3">在網頁上使用 web3 並操作區塊鏈</a>，可以跳過 React 的部分，關鍵字為 <strong>Web3.js</strong> 或 <strong>ether.js</strong>，之後會再寫一篇介紹怎麼呼叫 <strong>Web3</strong> 世界的東西</em></p>
</blockquote>
</li>
<li><p>前端或後端使用可以呼叫 <strong>Web3</strong> 的套件去做出 <strong>Dapp(Decentralized Application) 去中心化應用程式</strong>，例如寫一個可以 <strong>Mint NFT</strong> 的網站。</p>
</li>
<li><p>使用者對網站操作，觸發呼叫 <strong>ABI</strong> 的情況。</p>
</li>
<li><p>由 <strong>Web3</strong> 的套件去呼叫 <strong>EVM</strong> 裡面的智能合約，然後操作智能合約。</p>
</li>
<li><p>智能合約回吐原本就已經寫好的程式碼(<strong>不可更改性</strong>)。</p>
</li>
</ol>
<hr>
<h3 id="認識-ERC系列"><a href="#認識-ERC系列" class="headerlink" title="認識 ERC系列"></a>認識 ERC系列</h3><p>講到這邊讀者應該按耐不住性子了，開始前我們還是必須快速認識一下 <strong>ERC-20、ERC-721</strong> 及 <strong>ERC-1155</strong>。</p>
<p>這邊直接快速懶人包：</p>
<ol>
<li><strong>ERC-20</strong> 是同質化代幣 - 例如 <strong>BTC</strong>，你的一顆等於我的一顆 <strong>BTC</strong></li>
<li><strong>ERC-721</strong> 是非同值化代幣 - 例如 <strong>NFT</strong>，一個合約只會有一個幣，<strong>NFT</strong> 其實也可以想像成一個幣(後面會講解)，只是這個合約裡面的你的一個幣跟我的一個幣不是相等的，白話說就是一個合約裡面每一個發行的號碼都有自己的 <strong>Data</strong>、<strong>屬性</strong>、<strong>圖片</strong>…等等</li>
<li><strong>ERC-1155</strong> 是使用多令牌(<strong>token</strong>)標準 - 因為 <strong>ERC-721</strong> 一個合約只能發一個幣，為了改進， <strong>ERC-1155</strong> 可以理解為 <strong>ERC-20 + ERC-721</strong>。</li>
</ol>
<p>這邊我們先選擇比較簡單的 <strong>ERC-721</strong> 來實作。</p>
<blockquote>
<p>如果想要詳細閱讀可以參考 <em><a href="https://medium.com/my-blockchain-development-daily-journey/erc-20-vs-erc-721-vs-erc-1155-ethereum-token-smart-contract-red-pill-%E9%81%B8%E6%93%87%E5%93%AA%E4%B8%80%E5%80%8B-55051e33fc45">ERC-20 vs ERC-721 vs ERC-1155 Ethereum Token Smart Contract Red Pill — — 選擇哪一個？</a></em></p>
</blockquote>
<hr>
<h3 id="使用-Remix-IDE"><a href="#使用-Remix-IDE" class="headerlink" title="使用 Remix IDE"></a>使用 Remix IDE</h3><p>接下來要開始實際操作了，開始前先說一下我們要做的目標：</p>
<ol>
<li>上架五個 <strong>NFT</strong> 各自有各自的屬性</li>
<li>需要使用一定價格才可以 <strong>MInt</strong> 這個 <strong>NFT</strong></li>
<li>最多提供 <strong>Mint</strong> 的數量</li>
<li>一次最多能 <strong>Mint</strong> 的數量</li>
<li>其他的一些查詢功能</li>
</ol>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/remixIDE.png" alt="Remix IDE"></p>
<p>寫程式都需要 <strong>IDE(Integrated Development Environment) 整合開發環境</strong>，簡單說就是編輯器。這邊我們為了方便使用及上鍊，使用線上 <strong>IDE</strong> → <a href="https://remix.ethereum.org/">Remix IDE</a>。</p>
<p>因為 <strong>Remix</strong> 裡面的檔案只是暫存在 <strong>LocalStorage</strong>，很有可能下次開啟就不見了，為了使我們寫好的合約可以下次開啟還能存在，我們需要使用 <strong>Remix</strong> 提供的教學 <a href="https://remix-ide.readthedocs.io/en/latest/remixd.html#remixd-access-your-local-filesystem">Remixd: Access your Local Filesystem</a>，使用 <strong>connect to local host</strong> 可以讓我們本地的某個資料夾與 <strong>Remix</strong> 串連。</p>
<p>首先必須要先安裝串連的套件 <code>npm install -g @remix-project/remixd</code> ，如果不想要把套件安裝到全域的話，可以把 <strong>-g</strong> 拿掉，使用 <code>npm install @remix-project/remixd</code> ，但要記得在要串連的那個資料夾內安裝。</p>
<p>這邊筆者直接使用全域安裝 <code>npm install -g @remix-project/remixd</code> ，安裝結束可以輸入 <code>remixd -v</code> ，查看是否安裝成功。</p>
<p>接著我們先在電腦隨意一個地方開啟一個資料夾，最後就可以把 <strong>Remix</strong> 串連本地資料夾了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ remixd -s &lt;absolute-path-to-the-shared-folder&gt; --remix-ide &lt;your-remix-ide-URL-instance&gt;</span><br></pre></td></tr></table></figure>

<p><code>&lt;absolute-path-to-the-shared-folder&gt;</code> 是你資料夾的位子， <code>&lt;your-remix-ide-URL-instance&gt;</code> 是 <strong>Remix IDE</strong> 的網址。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/connectToRemix.png" alt="本地資料夾連接到 Remix"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/connectToLocalhost.png" alt="選項選到 connect to localhost"></p>
<p>連上後左側下拉選項從 <strong>default_workspaces</strong> 改到 <strong>localhost</strong>，這時候會跳出彈窗詢問你是否連接。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/confirmToConnect.png" alt="同意連接"></p>
<hr>
<h3 id="認識且使用-OpenZeppelin"><a href="#認識且使用-OpenZeppelin" class="headerlink" title="認識且使用 OpenZeppelin"></a>認識且使用 OpenZeppelin</h3><p><img src="/images/others/loading.gif" data-original="/images/20220310/openZeppelin.png" alt="OpenZeppelin"></p>
<p>對於要在以太坊開發的人員來說，<a href="https://openzeppelin.com/">OpenZeppelin</a> 是重要且必須熟知的，它具有 <strong>ERC Token</strong> 的標準，所有在上面的公開合約程式碼都會經過社區審核，當然裡面也有介紹如何透過其他套件去實作智能合約(不使用 <strong>Remix</strong>)，有興趣可以查看 <a href="https://docs.openzeppelin.com/learn/developing-smart-contracts#setting-up-a-solidity-project">Developing smart contracts</a>。</p>
<p>就像大部分的套件一樣，有很多規範及工具我們可以從外部引入，透過人家已經做好的東西去利用，不用自己在造輪子，而這次我們需要使用 <a href="https://openzeppelin.com/">OpenZeppelin</a> 裡面的 <strong>ERC721</strong> 合約。</p>
<p>在我們開始使用之前必須要先安裝這個套件，所以在我們串連 <strong>Remix</strong> 的資料夾裡面先輸入 <code>npm init -y</code> ，這個指令可以幫我們快速產出 <strong>package.json</strong>，跟著指令一問一答，這邊筆者皆直接一路狂按 <strong>Enter</strong> 最後順利產生出 <strong>package.json</strong>，接著再輸入 <code>npm i @openzeppelin/contracts</code>，然後就會在 <strong>node_modules</strong> 裡面看見 <strong>@openzeppelin&#x2F;contracts</strong> 這個套件。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/openZeppelinContractDoc.png" alt="OpenZeppelin 的 Contracts 文件.png"></p>
<p>在開始使用這個套件之前，當我們點選 <a href="https://openzeppelin.com/">OpenZeppelin</a> 官網裡的 <strong>Contracts</strong> 可以看到左側有 <strong>ERC20</strong> 到 <strong>ERC1155</strong> 的合約介紹，以及 <strong>API</strong>；如上面提到的這次會用 <strong>ERC721</strong> 來開發，所以我們先點選到 <strong>Tokens</strong> 底下的 <strong><a href="https://docs.openzeppelin.com/contracts/4.x/erc721">ERC721</a></strong> 可以看到基本用法。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/basicContractUse.png" alt="ERC721 基本用法"></p>
<p>接著點選到左側 <strong>API</strong> 底下的 <strong>ERC721</strong>，這時候會看到很多基於 ERC721 的合約內容，我們這邊先忽略 <strong>IERC721</strong>，點選右側的 <strong>ERC721</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/ERC721API.png" alt="ERC721 API"></p>
<p>點選之後就會看到怎麼引用。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/ERC721APIDoc.png" alt="各種 Function"></p>
<blockquote>
<p><em>從最基本的智能合約 <strong>constructor</strong> 應用，一直到其他的 <strong>function</strong></em></p>
</blockquote>
<p>因為我們要使用查詢功能，例如查詢這個 <strong>NFT</strong> 的 <strong>MetaDate</strong> 或 持有人所持有的 <strong>NFT</strong> 有哪些，其中一個 <strong>function</strong> 會用到 <code>tokenOfOwnerByIndex()</code> 這個 <strong>API</strong>，所以我們不使用 <strong>ERC721</strong>，改為使用 <strong>ERC721Enumerable</strong>，當然這邊可以依照你的習慣或者目的不同，引入不同的 <strong>API</strong>。</p>
<p>在引入之前我們要先在剛剛串連本地的 <strong>Remix</strong> 創建一個新的合約，筆者習慣在串連的資料夾內再開一個 <strong>contracts</strong>，所以筆者會在 <strong>contracts</strong> 裡面創建一個 <strong>myFirstNFT.sol</strong> 的合約。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/myFirstNFT.png" alt="第一個合約"></p>
<p>這時候如果碰到新增之後會無法點開該合約，回去終端機查看，如果出現 <strong>permission denied</strong> 的問題，記得先中斷這個連接，在試著連接一次，只是這次前面加上 <code>sudo</code>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/premissionDenied.png" alt="權限問題"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> remixd -s &lt;absolute-path-to-the-shared-folder&gt; --remix-ide &lt;your-remix-ide-URL-instance&gt;</span><br></pre></td></tr></table></figure>

<p>可以成功新增合約之後，先點選左邊第二個圖示，然後把 <strong>Auto compile</strong> 勾起來。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/autoCompile.png" alt="自動編譯"></p>
<p>複製下面的合約內容，貼到剛剛的 <strong>myFirstNFT.sol</strong> 裡面：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.4;</span><br><span class="line"></span><br><span class="line">import &quot;@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts/utils/Counters.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts/access/Ownable.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts/utils/Strings.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract MyFirstNFT is ERC721Enumerable, Ownable &#123;</span><br><span class="line">    using Counters for Counters.Counter;</span><br><span class="line">    Counters.Counter private _tokenIdCounter;</span><br><span class="line">    </span><br><span class="line">    string public baseURI = &quot;ipfs://你的baseURI&quot;; // 這一行是 NFT 該去哪裡找你的 MetaData</span><br><span class="line">    bool public paused = false; // 可以拿來暫停或者開啟 Mint</span><br><span class="line">    uint256 public cost = 0.0001 ether; // Mint 價格</span><br><span class="line">    uint256 public maxSupply = 5; // 只有五個 NFT</span><br><span class="line">    uint256 public maxMintAmount = 1; // 一次最多只能 Mint 一個</span><br><span class="line"></span><br><span class="line">    constructor() ERC721(&quot;WoodElf&quot;, &quot;Wood&quot;) payable &#123;</span><br><span class="line">        // 剛開始我們先自己 Mint 一個</span><br><span class="line">        safeMint(msg.sender, 5);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 不用經過我們自己設定的判斷直接 Mint(設定為 private 且只有 onlyOwner 可以使用)</span><br><span class="line">    function safeMint(address to, uint256 tokenId) private onlyOwner &#123;</span><br><span class="line">        _safeMint(to, tokenId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 提供給大家 Mint 的 Function(另外加上 payable 代表這個 function 可以接收乙太幣)</span><br><span class="line">    function mint(address _to, uint256 _mintAmount) public payable &#123;</span><br><span class="line">        require(paused != true, &quot;Sale must be active&quot;); // 合約必須不是暫停</span><br><span class="line">        require(_mintAmount &gt; 0); // 每次必須鑄造超過 0 個</span><br><span class="line">        require(_mintAmount &lt;= maxMintAmount, &quot;You can only adopt 1 BigBenFun at a time&quot;); // 鑄造的數量不可以大於每次最大鑄造數量</span><br><span class="line">        require(cost * _mintAmount &lt;= msg.value, &quot;Ether value sent is not correct&quot;); // Mint 的價格不可以少於我們訂定的價格</span><br><span class="line"></span><br><span class="line">        for(uint256 i = 0; i &lt; _mintAmount; i++) &#123;</span><br><span class="line">            uint256 mintIndex = _tokenIdCounter.current();</span><br><span class="line">            // 查看接下來要 Mint 的 NFT 是否有人持有了，如果已經持有就跳過</span><br><span class="line">            while(_exists(mintIndex))&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            // 接下來如果 Mint NFT 的編號如果小於初始提供的數量就讓使用者 Mint</span><br><span class="line">            if (mintIndex &lt;= maxSupply) &#123;</span><br><span class="line">                _safeMint(_to, mintIndex);</span><br><span class="line">                _tokenIdCounter.increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 重新設定 baseURI</span><br><span class="line">    function setBaseURI(string memory _newBaseURI) public onlyOwner &#123;</span><br><span class="line">        baseURI = _newBaseURI;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 取得這個持有者有多少 NFT</span><br><span class="line">    function walletOfOwner(address _owner) public view returns (uint256[] memory) &#123;</span><br><span class="line">        uint256 ownerTokenCount = balanceOf(_owner);</span><br><span class="line">        uint256[] memory tokenIds = new uint256[](ownerTokenCount);</span><br><span class="line">        for (uint256 i; i &lt; ownerTokenCount; i++) &#123;</span><br><span class="line">            tokenIds[i] = tokenOfOwnerByIndex(_owner, i);</span><br><span class="line">        &#125;</span><br><span class="line">        return tokenIds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 查看使用者持有的 NFT MetaDate</span><br><span class="line">    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) &#123;</span><br><span class="line">        require(</span><br><span class="line">            _exists(tokenId),</span><br><span class="line">            &quot;ERC721Metadata: URI query for nonexistent token&quot;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        string memory currentBaseURI = baseURI;</span><br><span class="line">        return bytes(currentBaseURI).length &gt; 0 ? string(abi.encodePacked(currentBaseURI, &quot;/&quot;, Strings.toString(tokenId), &quot;.json&quot;)) : &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 查看總提供數量</span><br><span class="line">    function totalSupply() public view override returns (uint256) &#123;</span><br><span class="line">        return maxSupply;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 重新設定 Mint 價格</span><br><span class="line">    function setCost(uint256 _newCost) public onlyOwner() &#123;</span><br><span class="line">        cost = _newCost;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 重新設定總提供量</span><br><span class="line">    function setMaxSupply(uint256 _newMaxSupply) public onlyOwner() &#123;</span><br><span class="line">        maxSupply = _newMaxSupply;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 重新設定一次能 Mint 的數量</span><br><span class="line">    function setmaxMintAmount(uint256 _newmaxMintAmount) public onlyOwner() &#123;</span><br><span class="line">        maxMintAmount = _newmaxMintAmount;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 開關販賣開關</span><br><span class="line">    function pause() public onlyOwner &#123;</span><br><span class="line">        paused = !paused;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>2022&#x2F;03&#x2F;30 後更：後來筆者研究發現，因為 <strong>Solidity</strong> 的特性，原本 <strong>import</strong> 進來的 <strong>function</strong> 有可覆蓋特性，像是 <strong>totalSupply()</strong>，由於筆者也是邊研究別人的合約邊學習，當初以為這個是總發行數量，所以直接寫了一個 <strong>function</strong> 去 <strong>return maxSupply</strong>，其實這是錯的，因為 <strong>totalSupply()</strong> 返回的其實是已經被 <strong>Mint</strong> 出去的 <strong>NFT</strong> 數量，但因為這邊使用了 <code>Counters.sol</code> 這個套件，所以在 <strong>Mint</strong> 的時候才不會出錯，但目前範例不會出問題，還是可以使用這個範例程式碼。<br>另外有的合約範例會在建構器 constructor() 那邊帶變數進去，其實也是可以的。</p>
</blockquote>
<p>這邊簡單快速帶過，因為內容較多，基本都註解在合約內了，剩下的還是必須要由你的親自理解才能成功地寫出下一個合約。</p>
<p>首先必須宣告你的合約 <strong>License</strong>，想看詳細列表的話可以參考 <a href="https://spdx.org/licenses/">SPDX License List</a>，裡面有各種不同的 <strong>License</strong>，不宣告的話一定會噴錯。</p>
<p><strong>pragma solidity</strong> 這是宣告你合約的版本，請記得不同版本一些宣告等等的語法會不同。</p>
<p>接著會先引入我們需要使用的一些合約，像是基本的 <strong>ERC721Enumerable</strong> 和 <strong>Counters</strong>、<strong>Ownable</strong>(拿來確定是發布合約的人，方便上鍊後如果有一些設定要更改，可以確保只有合約發起人可以更改)、<strong>Strings</strong>(拿來可以讓數字轉字串用的)。</p>
<p>再下來任何一個合約都會由 <strong>contract</strong> 開頭，但一個 <code>.sol</code> 裡面可以有多個 <strong>contract</strong>。而我們有些引入進來的合約要使用就會透過 <strong>is</strong> 去繼承，有些像 <strong>Strings</strong> 這種 <strong>utils</strong> 就不需要去繼承即可使用。</p>
<p>再往下除了一些基本設定之外，像是 <code>_safeMint()</code> 這個 <strong>function</strong> 就是 <a href="https://docs.openzeppelin.com/contracts/4.x/api/token/erc721#ERC721-_safeMint-address-uint256-">ERC721 - _safeMint()</a> 提供的 <strong>API</strong>；在我們自己寫的 <code>mint()</code> 裡面我們特地加上 <code>require()</code> 來做一些判斷，像是可以開啟或關閉 <strong>Mint</strong>。</p>
<p>最重要的就是 <strong>baseURI</strong>，因為我們使用的這個合約不需要去使用 <code>_setTokenURI()</code> ，我們使用 <strong>ERC721Enumerable</strong> 所提供的 <code>tokenURI()</code>，當我們訪問這個 <strong>NFT</strong> 的時候，會自動返回我們定義好的一串網址，而返回的網址就是上面 <code>tokenURI()</code> 這個 <strong>function</strong> 的內容，等等下面會繼續介紹這串網址怎麼來，還有 <strong>MeataData</strong> 是什麼。</p>
<p>到這邊你的合約應該會出現紅色的錯誤警告，這時候就可以繼續進入下個章節啦。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/contractError.png" alt="合約錯誤"></p>
<hr>
<h3 id="申請-Pinata-IPFS"><a href="#申請-Pinata-IPFS" class="headerlink" title="申請 Pinata  IPFS"></a>申請 Pinata  IPFS</h3><p><img src="/images/others/loading.gif" data-original="/images/20220310/pinataLogo.png" alt="Pinata"></p>
<p>首先要先說說 <strong>MetaData</strong>，這個裡面就是一個 <strong>Json</strong>，由於這次我們是使用 <a href="https://testnets.opensea.io/">OpenSea Testnet</a> 上架 NFT，基本組成可以參考 <a href="https://docs.opensea.io/">Opensea Developer Platform</a> 提供的文件 <a href="https://docs.opensea.io/docs/metadata-standards">Metadata Standards</a>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/metaData.png" alt="MetaData"></p>
<p>因為我們要一次上架多個 <strong>NFT</strong>，如果是使用 <strong>ERC721</strong> 去寫智能合約，基本上設定完 <strong>baseURI</strong>，在我們查看 <strong>NFT</strong> 的時候它就會去讀取你設定的 <strong>tokenURI</strong>，而我們這邊使用 <code>tokenURI()</code> 會返回我們設定好的 <strong>URI</strong>， <code>baseURI + / + tokenId + .json</code> 。</p>
<p>而這個 <strong>Metadata</strong> 的 <strong>JSON</strong> 可以讀取的網址不止可以使用 <strong>IPFS</strong>，還可以使用自己架設的 <strong>Server</strong>，依樣可以參考 <a href="https://docs.opensea.io/">Opensea Developer Platform</a> 提供的文件 <a href="https://docs.opensea.io/docs/metadata-standards">Metadata Standards</a>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/tokenURIDoc.png" alt="關於 TokenURI 的文件解釋"></p>
<blockquote>
<p><em>所以其實你要購買的 NFT 如果是使用自己架設的 <strong>HTTP</strong>，就有可能在某一天被換掉圖片及內容的可能性，這個這邊就不多做討論了</em></p>
</blockquote>
<p>由於要有公平性，我們這邊使用 <strong>IPFS</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/IPFSLogo.png" alt="IPFS"></p>
<blockquote>
<p><em><strong>星際檔案系統(InterPlanetary File System，縮寫為IPFS)</strong> 是一個旨在實現檔案的分散式儲存、共享和持久化的網路傳輸協定。簡單一點基本概念可以把它當成是以前我們很常用的 <strong>迅雷</strong> 或者 <strong>foxy</strong>(如果沒聽過沒關係，有點年代了)，大家都會提供自己的節點，然後你的檔案會去這些提供節點的人下載</em></p>
</blockquote>
<p>關於 <strong>IPFS</strong> 可以使用的方式不止一種，這邊我們使用 <strong><a href="https://www.pinata.cloud/">Pinata</a></strong>，它提供我們免費 1GB 空間可以上傳我們的檔案，所以我們要用來上傳我們的 <strong>MetaData</strong>。</p>
<p> <strong>Pinata</strong> 可以接受一般檔案或者是文件夾，這邊我們先在桌面建立一個 <strong>NFTImg</strong>(名稱隨意) 的資料夾，然後把準備好的五個圖檔放到資料夾內，把整個資料夾上傳上去，之後會拿到一串 <strong>CID</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/CID.png" alt="拿到剛剛上傳的 CID"></p>
<blockquote>
<p><em>這時候使用 <code>https://ipfs.io/ipfs/$&#123;你剛剛上傳資料夾的 CID&#125;/0.jpg</code> 就可以看到圖檔了</em></p>
</blockquote>
<p>然後在桌面建立 <strong>NFTJson</strong>(名稱隨意) 的資料夾，然後建立 <strong>0.json</strong> 到 <strong>5.json</strong> 共五個檔案，裡面打上下面的內容(記得每一個 <strong>Json</strong> 都要有點差異)：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;WoodElf Blue&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;藍色的木頭精靈，有一雙紅眼，似乎是血輪眼.&quot;</span>,</span><br><span class="line">  <span class="string">&quot;image&quot;</span>: <span class="string">&quot;https://ipfs.io/ipfs/<span class="variable">$&#123;你剛剛上傳資料夾的 CID&#125;</span>/0.jpg&quot;</span>,</span><br><span class="line">  <span class="string">&quot;external_url&quot;</span>: <span class="string">&quot;https://ipfs.io/ipfs/<span class="variable">$&#123;你剛剛上傳資料夾的 CID&#125;</span>/0.jpg&quot;</span>,</span><br><span class="line">  <span class="string">&quot;background_color&quot;</span>: <span class="string">&quot;341f47&quot;</span>,</span><br><span class="line">  <span class="string">&quot;attributes&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;trait_type&quot;</span>: <span class="string">&quot;Level&quot;</span>, </span><br><span class="line">      <span class="string">&quot;value&quot;</span>: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;trait_type&quot;</span>: <span class="string">&quot;Eyes&quot;</span>, </span><br><span class="line">      <span class="string">&quot;value&quot;</span>: <span class="string">&quot;normal&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;trait_type&quot;</span>: <span class="string">&quot;Feature&quot;</span>, </span><br><span class="line">      <span class="string">&quot;value&quot;</span>: <span class="string">&quot;grass&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">      <span class="string">&quot;description&quot;</span>: <span class="string">&quot;WoodElf Blue&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;description&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">        <span class="string">&quot;description&quot;</span>: <span class="string">&quot;藍色的木頭精靈，有一雙紅眼，似乎是血輪眼.&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;image&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">        <span class="string">&quot;description&quot;</span>: <span class="string">&quot;https://ipfs.io/ipfs/<span class="variable">$&#123;你剛剛上傳資料夾的 CID&#125;</span>/0.jpg&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><em>每一個 <strong>Json</strong> 記得圖片的 <strong>image</strong> 一定要填寫正確，不然到時候到 <strong>OpenSea Testnet</strong> 會看不到圖片，裡面的屬性 <strong>attributes</strong> 可以參考 <a href="https://docs.opensea.io/docs/metadata-standards">Metadata Standards</a> 的 <a href="https://docs.opensea.io/docs/metadata-standards#attributes">Attributes</a> 介紹去填寫</em></p>
</blockquote>
<p>最後我們使用 <code>https://ipfs.io/ipfs/$&#123;你剛剛上傳JSON資料夾的 CID&#125;/0.json</code> 就可以看到原本填寫的檔案內容。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/metaDataJson.png" alt="MetaData Json"></p>
<blockquote>
<p><em>關於 <strong>JSON</strong> 美化排版可以考慮安裝 <strong>Google Chrome</strong> 擴充套件 <a href="https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa?hl=zh_tw">JSON Formatter</a></em></p>
</blockquote>
<p>接下來只要讓 <strong>NFT</strong> 的 <strong>baseURI</strong> 可以訪問到這串網址即可，所以我們會透過 <code>tokenURI()</code> 這個 <strong>function</strong> 的內容去返回這串網址。因為 <strong>baseURI</strong> 訪問的網址開頭可以是 <strong>HTTP</strong> 或者 <strong>IPFS</strong>，這邊我們把剛剛的 <code>string public baseURI = &quot;ipfs://你的baseURI&quot;;</code> 改為 <code>string public baseURI = &quot;ipfs://QmU....Xa5&quot;;</code> ，後面改成你的 <strong>CID</strong>，之後應該就可以成功 <strong>Compile</strong>。</p>
<hr>
<h3 id="申請-MataMask"><a href="#申請-MataMask" class="headerlink" title="申請 MataMask"></a>申請 MataMask</h3><p>在我們把合約寫好之後，就是要將合約上鏈，這邊我們需要使用 <a href="https://metamask.io/">MataMask</a> 去幫我們發布合約，不清楚狐狸錢包的可以參考 <a href="https://angeltrend.io/how-to-install-metamask/">1分鐘教你安裝MetaMask，一個你值得擁有的虛擬貨幣錢包</a>，這個錢包應該是目前多數人使用的錢包，它不止可以讓你在大多個網頁得以使用 <strong>Web3</strong> 的功能，也可以快速切換不同的鏈，因為這次我們的合約要發布在測試網上(發布在主網需要花費真的錢先去兌換乙太幣，而測試網可以免費領取測試網的乙太幣)，所以我們需要使用它來切換且發布。</p>
<p>申請好且登入之後，請在 <strong>Remix</strong> 裡面點選網頁右上方的狐狸錢包，然後點擊右上角頭像，在點擊設定。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/metaMaskSetting.png" alt="設定打開可見測試網"></p>
<p>接著點擊進階然後往下滑把 <strong>Show test networks</strong> 打開，不然你會看不到測試網路。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/metaMaskSetting.png_2.png" alt="點選進階"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/metaMaskSetting.png_3.png" alt="打開 show test networks"></p>
<p>接著我們點擊上面的 <strong>以太坊 主網路</strong>，然後會彈出下拉選項，選擇 <strong>Rinkeby 測試網路</strong></p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/rinkebyNetworks.png" alt="選擇 Rinkeby Network"></p>
<p>請記得接下來一定要使用 <strong>Rinkeby 測試網路</strong>，筆者在這之前的練習卡了好久好久，結果就是犯了文件沒看清楚的錯誤，根據 <strong>OpenSea Testnet</strong> 的 <strong>API</strong> 文件 <a href="https://docs.opensea.io/reference/rinkeby-api-overview">Testnets NFT API Overview</a>，只能接受顯示在 <strong>Rinkeby</strong> 測試網建立的 <strong>NFT</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/openSeaTestnetDoc.png" alt="關於 OpenSea 測試網的文件要好好看"></p>
<hr>
<h3 id="領取測試幣"><a href="#領取測試幣" class="headerlink" title="領取測試幣"></a>領取測試幣</h3><p><img src="/images/others/loading.gif" data-original="/images/20220310/mataMaskCoin.png" alt="MataMask 錢包"></p>
<blockquote>
<p><em>這邊要先知道我們要在乙太鏈上做任何事情都必須要花費 <strong>ETH</strong>，詳細可以參考 <a href="https://guide.blocto.app/article/gas-gas-price-gas-limit">【區塊鏈入門】到底什麼是Gas、Gas Price、Gas Limit？</a>，至於等等要領的測試幣就是拿來支付這個 <strong>ETH</strong></em></p>
</blockquote>
<p>每一個測試網路都有自己的測試幣可以領取，剛切換過來現在我們錢包裡面應該是 <strong>0 ETH</strong>，每一個測試網路領幣的方法都可以透過點擊 <strong>買</strong>，然後往下滑到 <strong>測試水管</strong> 點擊 <strong>取得乙太幣</strong> 去領取，一般領取測試幣的水管必須要發文再拿網址來換測試幣，但我們這次為了方便要透過 <strong>ChainLink</strong> 的 <a href="https://faucets.chain.link/">Request testnet LINK</a> ****去拿測試乙太幣。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/chainLink.png" alt="到 ChainLink 去領測試幣"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/successToGetTestETH.png" alt="成功領到測試幣"></p>
<p>將網路選到 <strong>Ethereum Rinkeby</strong>，然後通過機器人驗證後點選 <strong>Send request</strong>，然窗顯示後等待一陣子就能看到成功的畫面，可以點選下面的 <a href="https://rinkeby.etherscan.io/tx/0x4f1db2ba2e55ffd9016e0bc99ce6cae8d3b6476d6fd7108604e946ef62d18ea8">0x4f1db2ba2e55ffd9016e0bc99ce6cae8d3b6476d6fd7108604e946ef62d18ea8</a> 會跳到 <a href="https://rinkeby.etherscan.io/">Rinkeby 的 Etherscan</a> 去，Etherscan 是一個可以查看任何在鏈上活動詳細資料的網站，任何資料都是公開透明。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/etherscanAndMataMask.png" alt="成功領到測試幣且 Etherscan 有記錄"></p>
<blockquote>
<p><em>等一段時間後再開啟我們的錢包，會發現裡面多了 <strong>0.1ETH</strong></em></p>
</blockquote>
<hr>
<h3 id="發布-NFT-且學會使用-Etherscan-io"><a href="#發布-NFT-且學會使用-Etherscan-io" class="headerlink" title="發布 NFT 且學會使用 Etherscan.io"></a>發布 <strong>NFT</strong> 且學會使用 Etherscan.io</h3><p>在我們領取好測試幣之後就可以準備上架我們的 <strong>NFT</strong></p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/injectedWeb3.png" alt="準備上鏈"></p>
<ol>
<li>點選左側第三個圖示</li>
<li>把 <strong>ENVIRONMENT</strong> 切換到 <strong>Injected Web3</strong>，如果看到 <strong>Account</strong> 有出現你的錢包地址及餘額就是成功了</li>
<li>記得要確定 <strong>CONTRACT</strong> 是切換到你要發布的智能合約，這邊切到剛剛創建的 <strong>myFirstNFT.sol</strong></li>
<li>點擊 <strong>Deploy</strong> 發布</li>
</ol>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/confirmToWeb3.png" alt="查看需花費的 ETH 並且點選確認"></p>
<p>然後會跳出一個視窗問你要不要確認，這邊會顯示目前需要的費用，我們直接點擊確認。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/detail.png" alt="上鏈的詳細過程在下方"></p>
<blockquote>
<p>*這邊會顯示 <code>WoodElfNFT</code> 是正常的，因為筆者在創建的時候忘記把 <code>contract WoodElfNFT is ERC721Enumerable, Ownable &#123;</code> 改成 <code>contract MyFirstNFT is ERC721Enumerable, Ownable &#123;</code> *</p>
</blockquote>
<p>然後我們看 <strong>Remix</strong> 底下的小視窗，會看到正在跑建立合約，過一段時間建立成功會有綠色勾勾出來。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/deployedContracts.png" alt="所有部署過的合約都在這"></p>
<p>除了透過小視窗看有沒有部署成功，看左邊 <strong>Deployed Contracts</strong> 也可以看看有沒有部署成功的合約，成功上鏈的後面會有 <strong>BLOCKCHAIN</strong>，我們可以把 <code>WOODELFNFT AT 0XF13...F9869 (BLOCKCHAIN)</code> 這個打開，裡面會有各式各樣剛剛寫好可以用的合約 <strong>function</strong>，但是因為視窗一關閉我們的這個紀錄就會不見，所以我們點擊剛剛小視窗顯示的 <a href="https://rinkeby.etherscan.io/tx/0xc7e1067e9b9519f8bf9608cdf9da3b8b0a20ab55340517dbc1e68eae5a2c29f0">view on etherscan</a> 去查看建立的合約內容。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/etherscanDetail.png" alt="合約詳細內容"></p>
<blockquote>
<p><em>Status 是 Suucess 就代表成功了</em></p>
</blockquote>
<p>我們點擊 <code>Interacted With (To):</code> 那行的 <a href="https://rinkeby.etherscan.io/address/0xf1394843578942bad8ef798e073a0b43c62f9869">0xf1394843578942bad8ef798e073a0b43c62f9869</a> 會到 <strong>Rinkeby</strong> 的 <a href="https://rinkeby.etherscan.io/">Etherscan.io</a> 去。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/verifyAndPublish.png" alt="公開合約"></p>
<p>接著我們要公開這個合約，之後才能方便在 <a href="https://rinkeby.etherscan.io/">Etherscan.io</a> 操作一些我們寫好的 <strong>function</strong>，像上面提到的， <strong>Remix</strong> 一但關閉，<strong>Deployed Contracts</strong> 就會空了，點擊 <strong>Verify and Publish</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/veriftStepOne.png" alt="公開第一步"></p>
<blockquote>
<p><em>把該選的選一選，然後送出</em></p>
</blockquote>
<p>接下來先讓我們回去 <strong>Remix</strong>，點選左側的插頭，這裡面提供很多可以裝在 <strong>Remix</strong> 上的插件，然後再輸入匡輸入 <strong>flattener</strong>，接著點選 <strong>activate</strong> 啟動這個套件，這個套件可以幫助我們壓縮所有任何 <strong>import</strong> 進來的合約以及我們寫的合約在同一份檔案內。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/flattener.png" alt="安裝壓縮插件 Flattener"></p>
<p>然後點選左側的 <strong>flattener</strong>，再點擊 <code>Flatten contract/myFirstNFT.sol</code> ，最後點擊 <code>save</code> 。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/flattenAndSave.png" alt="開始壓縮"></p>
<p>這時候會產生出一個新的 <code>.sol</code>，這邊用意是把剛剛的合約也合併進同一個檔案，把全部內容複製起來，貼到剛剛的 <a href="https://rinkeby.etherscan.io/">Etherscan.io</a> 去。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/newSol.png" alt="所有壓縮到同一份合約內的程式碼"></p>
<p>這邊我們為了方便，記得要把下面的 <code>Constructor Arguments ABI-encoded (for contracts that were created with constructor parameters)</code> 內容全部刪掉，最後點擊最下面的 <strong>Verify and Publish</strong>，這邊 <a href="https://rinkeby.etherscan.io/">Etherscan.io</a> 會幫你做簡單的程式碼檢查。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/deleteABI.png" alt="刪除 ABI"></p>
<p>成功後再回去剛剛合約查看，可以看到合約裡面會出現源碼，這邊就達到 <strong>不可竄改</strong> 和 <strong>可信任</strong>，而 <strong>Read Contract</strong> 可以使用智能合約裡面的 <strong>Call Function</strong>，<strong>Write Contract</strong> 可以使用智能合約裡面的 <strong>Send Function</strong>，基本上 <strong>Call Function</strong> 不會改到區塊鏈的資料，不需要礦工來驗證，所以不需要花任何費用。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/contractDetail.png" alt="合約源碼"></p>
<p>如果之後你關閉了 <strong>Remix</strong> 的視窗，剛剛上面的 Deployed Contracts 部署上去的合約列表會被清空，這時候只要記得原本的合約地址即可，如果忘記也可以用你部署合約的帳號地址去 <a href="https://rinkeby.etherscan.io/">Etherscan</a> 裡面搜尋，這邊我們可以試著開啟另一個 <strong>Remix</strong> 視窗，然後輸入合約地址在 <code>At Address</code> 及可。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/at_address_contract" alt="輸入合約地址到 At Address"></p>
<blockquote>
<p>但是這邊實際測試有發現一個問題，你必須把 <strong>CONTRACT</strong> 切換你開發的那份合約，如果本地的源碼合約也消失的話，就無法把合約加進來。</p>
</blockquote>
<hr>
<h3 id="使用-OpenSea-Testnet"><a href="#使用-OpenSea-Testnet" class="headerlink" title="使用 OpenSea Testnet"></a>使用 OpenSea Testnet</h3><p><img src="/images/others/loading.gif" data-original="/images/20220310/openSeaTestnet.png" alt="OpenSea 也有提供測試網的 NFT 網站"></p>
<p>接下來讓我們到 <strong><a href="https://testnets.opensea.io/account">OpenSea Testnet Account</a></strong> 去查看我們的錢包，這邊會自動抓取你 <strong>MetaMask</strong> 錢包，因為合約上我們一開始就有先 <strong>Mint</strong> 一個 <strong>NFT</strong>，所以我們可以看到現在裡面已經有一個 <strong>NFT</strong> 了，圖片也是我們自己定義好的。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/MyOpenSeaAccount.png" alt="我在 OpenSea Testnet 的 NFT 錢包"></p>
<p>這邊也可以看到一些我們定義的 <em><strong>attributes</strong></em></p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/WoodElfNFT.png" alt="剛剛發佈合約 Mint 的 NFT"></p>
<p>會是 <strong>WoodElf V3</strong> 是因為如果發布了已經存在的 <strong>NFT</strong> 名稱，會自動變成 <strong>V2</strong>，因為我發布了第三次，所以是 <strong>V2</strong>。</p>
<p>除了可以在  <strong><a href="https://testnets.opensea.io/account">OpenSea Testnet Account</a></strong> 看到我們的 <strong>NFT</strong>，還記得每一個 <strong>NFT</strong> 都是可以代表一個 <strong>Token</strong> 對吧，讓我們打開錢包，然後把剛剛的 Ether 合約地址加進錢包內。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/importTokens.png" alt="引入 Tokens"></p>
<p>填進剛剛的合約地址，會自動帶出代幣代號，小數點精度我們填寫 <strong>0.1</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/importTokensDetail.png" alt="填寫合約地址"></p>
<p>之後回去錢包看會發現我們有一開始先 <strong>Mint</strong> 的 <strong>NFT</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220310/seeNFTToken.png" alt="NFT Token"></p>
<blockquote>
<p><em>這邊要說一下為什麼要一開始先 <strong>Mint</strong> 一個 <strong>NFT</strong> 呢？因為有些 <strong>NFT</strong> 會預留白單名額，有一種做法是我們可以在發布合約的時候預先 <strong>Mint</strong> 預定的數量，最後再透過我們轉發出去，當然這麼做有風險，這邊不多做討論</em></p>
</blockquote>
<hr>
<h3 id="延伸應用"><a href="#延伸應用" class="headerlink" title="延伸應用"></a>延伸應用</h3><p>到這邊我們應該已經成功發布 <strong>NFT</strong> 了，接下來的延伸應用滿多的，最基本的就是我們可以使用剛剛 <strong>Remix</strong> 裡面合約已經 <strong>Compile</strong> 完成後的 <strong>ABI</strong>，拿來串接前端網頁做一個 <strong>Dapp</strong>，這邊之後會再另外做介紹。</p>
<p>而合約內容可以自己寫，像是上面我們有使用 <code>require()</code> 加上 <code>paused</code> 來判斷現在是不是能 <strong>Mint</strong>，但合約真的要小心寫，如果有接觸過 NFT 一段時間一定都有聽過 Yolo Cat 偷跑事件，詳細可以參考 <a href="https://kryptocamp.tw/2022/01/11/%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D-yolo-cat-club-nft%E5%90%88%E7%B4%84%E5%81%B7%E8%B7%91%E5%95%8F%E9%A1%8C/">如何避免 YOLO-Cat-Club NFT專案合約偷跑問題?</a> 的事件的關鍵重點部分。</p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>在去年初接觸了幣圈後，一直對幣圈產生濃厚的興趣，到了年底開始接觸 <strong>NBA Topshot</strong>，那是我第一次接觸 <strong>NFT</strong>，但當時還不知道智能合約這個東西，一直到今年開始接觸 <strong>OpenSea</strong> 之後，才開始知道 <strong>Solidity</strong> 這個東西。</p>
<p>從想要自己發布一個 <strong>NFT</strong> 到 我既然是工程師，就要用工程師的方法發布 <strong>NFT</strong>，所以開始找資源找文章，然後透過寫 <strong>Solidity</strong> 去發布 <strong>NFT</strong>，過程雖然滿多地方碰壁，但真的很有趣。</p>
<p>開始慢慢研究後發現每一個 <strong>ERC721</strong> 的 <strong>NFT</strong> 其實就是一個 <strong>Token（基於 ERC20）</strong>，只是裡面的每一個 <strong>Token</strong> 都會有相對應的 <strong>MetaData（ERC721）</strong>，所以才會有 <strong>你的一塊不是我的一塊</strong> 這種很難理解的話出現。</p>
<p>我想除了 <strong>Front-end Developer</strong> 之外，又有新的地方可以前往探索了，且 <strong>Dapp</strong> 跟前端離不開，加上從以前從前端工作開始就常常體驗到工作上 <strong>80%</strong> 的時間討論跟前端都沒有八竿子關係，不論參與度，技術方面也都是感覺有一個天花板在那邊，後來一聽到區塊鏈的部分幾乎是盡量能抽離後端就抽離，因為要去中心化，所以前端比例佔比較重，讓我下定決心好好研究一番。</p>
<p>我知道發布 <strong>NFT</strong> 只是很簡易的入門智能合約的一個方式，還有很多需要學習，但這是一個很好的入門方式。</p>
<blockquote>
<p>最後如果有興趣玩看看我發布的 <strong>NFT</strong> 可以到 <a href="https://rinkeby.etherscan.io/address/0xf1394843578942bad8ef798e073a0b43c62f9869#code">Etherscan</a> 去，合約地址是 <code>0xf1394843578942bad8ef798e073A0b43c62f9869</code>。</p>
</blockquote>
<p>這份合約其實沒有寫得很好，之後會再找機會優化，其中可以優化的地方包含，盲盒機制、把錢從合約領出來的機制、合約自毀機制、合約升級、白單、新增管理員(不然只有 <strong>Ownable</strong> 可以控制合約，雖然要去中心化就要減少人為控制，但一般商業邏輯老闆肯定會希望也能控制，也希望底下的主管也可以控制)…還有很多可以優化，就當作是之後新文章的內容囉。</p>
<h3 id="一分鐘-NFT-合約-懶人包"><a href="#一分鐘-NFT-合約-懶人包" class="headerlink" title="一分鐘 NFT 合約 懶人包"></a>一分鐘 NFT 合約 懶人包</h3><p>最後如果覺得上面合約太多太麻煩，只想發布一個 <strong>NFT</strong>，可以使用下面這個智能合約(參考至 <a href="https://yulinchou.medium.com/2021-%E5%BB%BA%E7%AB%8B-erc721-%E6%A8%99%E6%BA%96%E6%99%BA%E8%83%BD%E5%90%88%E7%B4%84-%E4%B8%A6%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84-nft-99afaca68530">2021 快速建立 ERC721 標準智能合約並且 Mint NFT</a>)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.4;</span><br><span class="line"></span><br><span class="line">import &quot;@openzeppelin/contracts/token/ERC721/ERC721PresetMinterPauserAutoId.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract UUP is ERC721PresetMinterPauserAutoId &#123;</span><br><span class="line">    </span><br><span class="line">    constructor() ERC721PresetMinterPauserAutoId(&quot;WoodElf&quot;, &quot;Wood&quot;, &quot;ipfs.io/ipfs/Qm...wrG/&quot;)  </span><br><span class="line">    &#123;&#125;</span><br><span class="line">   </span><br><span class="line">    function setTokenURI(uint256 tokenId, string memory tokenURI) public &#123;</span><br><span class="line">        require(hasRole(MINTER_ROLE, _msgSender()), &quot;web3 CLI: must have minter role to update tokenURI&quot;);</span><br><span class="line"></span><br><span class="line">        setTokenURI(tokenId, tokenURI);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然後一樣把一個 <strong>NFT</strong> 的 <strong>Json</strong> 上傳到 <strong><a href="https://www.pinata.cloud/">Pinata</a></strong> 上面，然後用那個 <strong>CID</strong>，剩下就是發布，跟上面流程一樣。</p>
<h3 id="不用寫程式碼的懶人包"><a href="#不用寫程式碼的懶人包" class="headerlink" title="不用寫程式碼的懶人包"></a>不用寫程式碼的懶人包</h3><p>如果真的覺得寫程式很麻煩，可以直接參考 <strong>OpenSea</strong> 的文件 <a href="https://support.opensea.io/hc/en-us/articles/360063498313-How-do-I-create-an-NFT-">如何創建 NFT？</a> 及 <a href="https://support.opensea.io/hc/zh-tw/articles/360063498333-%E5%A6%82%E4%BD%95%E5%87%BA%E5%94%AENFT-">如何出售NFT？</a></p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><a href="https://newslab.pts.org.tw/video/146-NFT%E6%98%AF%E4%BB%80%E9%BA%BC%EF%BC%8C%E5%8F%AF%E4%BB%A5%E8%B3%A3%E5%88%B0%E9%80%99%E9%BA%BC%E8%B2%B4%EF%BC%9F7%E5%88%86%E9%90%98%E5%B8%B6%E4%BD%A0%E4%BA%86%E8%A7%A3%E5%8A%A0%E5%AF%86%E8%97%9D%E8%A1%93%E6%8A%95%E8%B3%87%E7%86%B1">NFT是什麼，可以賣到這麼貴？7分鐘帶你了解加密藝術投資熱</a></li>
<li><a href="https://www.blocktempo.com/what-is-ethereum-virtual-machine-evm/">新手科普 | 以太坊虛擬機 EVM 是什麼，有何用處？</a></li>
<li><a href="https://www.vmware.com/tw/topics/glossary/content/virtual-machine.html">什麼是虛擬機？</a></li>
<li><a href="https://easonwang.gitbook.io/blockchain/dapp/web3">在網頁上使用 web3 並操作區塊鏈</a></li>
<li><a href="https://medium.com/my-blockchain-development-daily-journey/erc-20-vs-erc-721-vs-erc-1155-ethereum-token-smart-contract-red-pill-%E9%81%B8%E6%93%87%E5%93%AA%E4%B8%80%E5%80%8B-55051e33fc45">ERC-20 vs ERC-721 vs ERC-1155 Ethereum Token Smart Contract Red Pill — — 選擇哪一個？</a></li>
<li><a href="https://remix-ide.readthedocs.io/en/latest/remixd.html#remixd-access-your-local-filesystem">Remixd: Access your Local Filesystem</a></li>
<li><a href="https://openzeppelin.com/">OpenZeppelin</a> - <a href="https://docs.openzeppelin.com/learn/developing-smart-contracts#setting-up-a-solidity-project">Developing smart contracts</a></li>
<li><a href="https://docs.opensea.io/">OpenSea Developer Platform</a></li>
<li><a href="https://angeltrend.io/how-to-install-metamask/">1分鐘教你安裝MetaMask，一個你值得擁有的虛擬貨幣錢包</a></li>
<li><a href="https://docs.opensea.io/reference/rinkeby-api-overview">OpenSea Testnet doc</a> - <a href="https://docs.opensea.io/reference/rinkeby-api-overview">Testnets NFT API Overview</a></li>
<li><a href="https://guide.blocto.app/article/gas-gas-price-gas-limit">【區塊鏈入門】到底什麼是Gas、Gas Price、Gas Limit？</a></li>
<li><a href="https://kryptocamp.tw/2022/01/11/%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D-yolo-cat-club-nft%E5%90%88%E7%B4%84%E5%81%B7%E8%B7%91%E5%95%8F%E9%A1%8C/">如何避免 YOLO-Cat-Club NFT專案合約偷跑問題?</a></li>
<li><a href="https://yulinchou.medium.com/2021-%E5%BB%BA%E7%AB%8B-erc721-%E6%A8%99%E6%BA%96%E6%99%BA%E8%83%BD%E5%90%88%E7%B4%84-%E4%B8%A6%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84-nft-99afaca68530">2021 快速建立 ERC721 標準智能合約並且 Mint NFT</a></li>
<li><a href="https://www.frank.hk/blog/nft-smart-contract/">使用 REMIX，OPENZEPPELIN 15 分鐘建立 NFT 智能合約</a></li>
<li><a href="https://medium.com/blockchainnewsroom/nft-00-d2dd573a53f3">什麼是 NFT？ERC-721？ERC-1155？新手 3 分鐘爆紅加密貨幣 NFT 懶人包</a></li>
<li><a href="https://support.opensea.io/hc/zh-tw">OpenSea Help Center</a> -  <a href="https://support.opensea.io/hc/en-us/articles/360063498313-How-do-I-create-an-NFT-">如何創建 NFT？</a> 及 <a href="https://support.opensea.io/hc/zh-tw/articles/360063498333-%E5%A6%82%E4%BD%95%E5%87%BA%E5%94%AENFT-">如何出售NFT？</a></li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>Solidity</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
        <tag>Solidity</tag>
        <tag>NFT</tag>
        <tag>Mint</tag>
        <tag>OpenSea</tag>
      </tags>
  </entry>
  <entry>
    <title>[Solidity Note] - 合約有漏洞？要升級？要修改？怎麼辦？學學部署可升級合約吧！</title>
    <url>/2022/04/05/20220405/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p><img src="/images/others/loading.gif" data-original="/images/20220405/banner.png" alt="Proxy"></p>
<p>如何部署一個可升級合約？如果我們發布了一版合約，突然想到有些漏洞或者需要進行修改，該如何不影響已經使用的 <strong>Dapp</strong> 重新部署呢？</p>
<p>這邊筆記記錄如何部署一個可升級合約，當中也記錄一些筆者碰到的問題，希望能跟各位一起成長，如果內容有誤請盡情指出，謝謝。</p>
<span id="more"></span>

<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p>最基本的 <strong>Proxy</strong> 邏輯，可參考 <a href="https://blog.openzeppelin.com/proxy-patterns/">Proxy Patterns</a>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220405/proxy_patterns.png" alt="Proxy 過程"></p>
<ol>
<li>資料存在 <strong>Proxy Contract(代理合約)</strong> 內 - <strong>Eternal Storage(資料永存)</strong></li>
<li>邏輯存在 <strong>Logic Contract(邏輯合約)</strong> 內</li>
</ol>
<hr>
<h3 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h3><p>要部署可升級合約需要準備三樣合約：</p>
<ol>
<li><p><strong>Implementation Contract(實例合約)</strong> - 又稱邏輯合約，放邏輯程式碼的地方，之後可能會有 v2 v3…等等，需注意的是新版本的變數不能更改，否則會造成合約崩潰。</p>
</li>
<li><p><strong>Proxy Admin(管理合約)</strong> - 存放代理合約的擁有者，只有 Owner 才可以進行合約升級，其實也是透過 <code>upgrade()</code> 去呼叫代理合約的 <code>upgradeTo()</code>，其中有 <code>onlyOwner</code> 的檢查。也提供了其他各種管理功能，相關可參考 <a href="https://docs.openzeppelin.com/cli/2.8/contracts-architecture#proxyadmin.sol">Openzeppelin Contract Doc - ProxyAdmin</a>。</p>
<p> <img src="/images/others/loading.gif" data-original="/images/20220405/upgrade.png" alt="更新的邏輯"></p>
</li>
<li><p><strong>Upgradeability Proxy(可升級代理合約)</strong> - 用來指向最新的 I<strong>mplementation Contract</strong> 地址，代理合約的地址永遠不變，所以可以達到升級合約的效果。</p>
</li>
</ol>
<blockquote>
<p><em>需注意邏輯合約內引入的其他合約必須是可升級合約，整份合約才可以變成可升級合約，如果是使用 <strong>Hardhat</strong> 或 <strong>Truffle</strong> 可以使用套件 <a href="https://github.com/OpenZeppelin/openzeppelin-upgrades">OpenZeppelin&#x2F;openzeppelin-upgrades</a> 檢查可升級性。</em></p>
</blockquote>
<hr>
<h3 id="如何達到資料永久化？"><a href="#如何達到資料永久化？" class="headerlink" title="如何達到資料永久化？"></a>如何達到資料永久化？</h3><p>變數的數值存在代理合約中，當中因為 <strong>Solidity</strong> 的 <strong>constructor</strong> 不是 <strong>runtime bytecode</strong> 的一部分，只會在部署的時候跑過一次，所以代理合約無法使用邏輯合約的 <strong>constructor</strong>，這邊需要使用 <code>Initializable.sol</code> 的 <code>initialize()</code>，這樣就可以在部署的時候使用，詳細可參考 <a href="https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#initializers">Writing Upgradeable Contracts - Initializers</a>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// contracts/MyContract.sol</span><br><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">import &quot;@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract MyContract is Initializable &#123;</span><br><span class="line">    uint256 public x;</span><br><span class="line"></span><br><span class="line">    function initialize(uint256 _x) public initializer &#123;</span><br><span class="line">        x = _x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="整體概念圖"><a href="#整體概念圖" class="headerlink" title="整體概念圖"></a>整體概念圖</h3><p>筆者在整理的時候整理了一下流程圖，如果內容有誤還請手下留情指出錯誤。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220405/full_process.jpg" alt="整體概念圖"></p>
<hr>
<h3 id="Remix-IDE-部署步驟"><a href="#Remix-IDE-部署步驟" class="headerlink" title="Remix IDE 部署步驟"></a>Remix IDE 部署步驟</h3><ol>
<li>部署邏輯合約</li>
</ol>
<p>透過 <strong>Remix</strong> 可以實作一個小型的可升級合約，首先到 <strong>Remix</strong> 並且串連本地，相關串聯方法可參考 <a href="https://rexhung0302.github.io/2022/03/10/20220310/">[Solidity Note] - 透過工程師的方式發布 基於 ERC721 的 NFT</a> 的 <strong>使用 Remix IDE</strong>。</p>
<p>串連本地後新增一個新合約 <code>UpgradeContract.sol</code>，內容打上下面內容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.4;</span><br><span class="line"></span><br><span class="line">import &quot;@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract UpgradeableWhiteListContract is Initializable, OwnableUpgradeable &#123;</span><br><span class="line"></span><br><span class="line">    mapping(address =&gt; bool) private whiteList;</span><br><span class="line">    mapping(address =&gt; uint256) private mintLimit;</span><br><span class="line"></span><br><span class="line">    function initialize() public initializer &#123;&#125;</span><br><span class="line"></span><br><span class="line">    function SetWhiteList(address _address, uint256 _mintLimit) external &#123;</span><br><span class="line">        whiteList[_address] = true;</span><br><span class="line">        mintLimit[_address] = _mintLimit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function GetWhiteList(address _address) public view returns (bool, uint256)&#123;</span><br><span class="line">        return (whiteList[_address], mintLimit[_address]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 自毀合約 - 使用ownerRestricted修饰符来限定只有合约的所有者才能调用该函数</span><br><span class="line">    function destructContract(address payable target) public payable &#123;</span><br><span class="line">        selfdestruct(target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中這份邏輯包含了 <strong>ProxyAdmin(管理合約)</strong>、<strong>TransparentUpgradeableProxy(代理合約)</strong>，之後選取邏輯合約後直接點擊部署，請部署在測試鏈上，不知道怎麼拿測試幣跟部署到測試鏈上一樣可參考 <a href="https://rexhung0302.github.io/2022/03/10/20220310/">[Solidity Note] - 透過工程師的方式發布 基於 ERC721 的 NFT</a> 的 <strong>領取測試幣</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220405/step1.png" alt="發佈合約"></p>
<blockquote>
<p>部署結束後請把地址存下來，這邊筆者測試地址為在 <strong>Rinkeby</strong> 測試網 的 <code>0x991c4cfc4bcc06b40a94246cffa958239fc6ce1b</code>，<a href="https://rinkeby.etherscan.io/tx/0xb325aed97d2fc93200041d541e61bf8a22298863a1d5841ce6e98bc8bcdba515">Etherscan 傳送門</a></p>
</blockquote>
<ol start="2">
<li>部署管理合約</li>
</ol>
<p>接下來必須把管理合約部署上去，一樣直接選取左邊的 <strong>CONTRACT</strong> 後，選擇 <code>ProxyAdmin.sol</code> 然後發布到測試鏈上。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220405/proxyAdmin.png" alt="發布管理合約"></p>
<blockquote>
<p>部署結束後一樣把地址記錄下來，這邊筆者測試地址為在 <strong>Rinkeby</strong> 測試網 的 <code>0x8d463795c20622ec2a4c53d3a2f9d5834c856eaf</code>，<a href="https://rinkeby.etherscan.io/tx/0xdd60734c47506a14e89df757b4e0e3e908142a8e2ffa3ff9b4f6fae30bc61928">Etherscan 傳送門</a></p>
</blockquote>
<p>請務必記得這個管理合約的地址，之後升級合約需要靠這個合約來升級，如果要轉移合約也必須靠著個合約。</p>
<ol start="3">
<li>部署代理合約</li>
</ol>
<p>最重要的合約就是我們的代理合約了，這邊代理合約只會在最初部署的時候使用一次，之後我們一律使用代理合約的地址就可以訪問到最新的邏輯合約。</p>
<p>一樣直接選取左邊的 <strong>CONTRACT</strong> 後，選擇 <code>TransparentUpgradeableProxy.sol</code> 然後填寫該填寫的 <strong>DEPLOY</strong> 參數，最後發布到測試鏈上。</p>
<ul>
<li><strong>_LOGIC</strong> 請填入邏輯合約地址 <code>0x991c4cfc4bcc06b40a94246cffa958239fc6ce1b</code></li>
<li><strong>ADMIN_</strong> 請填入管理合約地址 <code>0x8d463795c20622ec2a4c53d3a2f9d5834c856eaf</code></li>
<li><strong>_DATA</strong> 為可帶入初始化的資料，這邊筆者不填寫都會出錯，故填上網路上大部分教學的 <code>0x8129fc1c</code> 二進制碼即可成功，待解。</li>
</ul>
<p><img src="/images/others/loading.gif" data-original="/images/20220405/upgradeableProxy.png" alt="部署代理合約"></p>
<blockquote>
<p>部署結束後一樣把地址記錄下來，這邊筆者測試地址為在 <strong>Rinkeby</strong> 測試網 的 <code>0x80d83e2b9bf263279319d2c90f17c8b86ce0c774</code>，<a href="https://rinkeby.etherscan.io/tx/0xa44f21d9555629746944c2aba7bcad56f7d4914a6e25e826921715edb7a19dab">Etherscan 傳送門</a></p>
</blockquote>
<ol start="4">
<li>使用邏輯合約</li>
</ol>
<p>這邊開始要升級合約，升級前後我們必須知道差異，所以我們先把邏輯合約引入近來使用，請記得這邊是使用剛剛部署代理合約的地址 <code>0x80d83e2b9bf263279319d2c90f17c8b86ce0c774</code> 去引入合約來使用，並非用我們最一開始的合約。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220405/useUpgradeableProxy.png" alt="使用邏輯"></p>
<p>把 <strong>CONTRACT</strong> 選中邏輯合約 <code>UpgradeableWhiteListContract.sol</code>，然後在 <strong>At Adress</strong> 輸入代理合約的位置，最下方就會出現新的一行，開啟後就是我們的邏輯合約可以用的 <strong>Function</strong>。</p>
<blockquote>
<p><em>再說一次很重要，這邊 <strong>At Adress</strong> 填入的是代理合約的地址，不可以直接使用我們部署的邏輯合約。</em></p>
</blockquote>
<p>打開剛剛新增的合約，使用 <code>SetWhiteList()</code> 填入我們狐狸錢包的地址 及 <code>_mintLimit：1</code>，最後送出。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220405/setWhiteList.png" alt="_mintLimit 參數輸入 1"></p>
<blockquote>
<p>*錢包地址往上拉可以看到 <strong>ACCOUNT</strong>，或者打開狐狸錢包目前選擇的當下錢包，可以直接複製地址；*這邊送出的內容紀錄可以在 <a href="https://rinkeby.etherscan.io/tx/0x1d86c57fb2428d8750a1abb25e0a2e26eee1d6064d046a3fd391cf752796a137">Etherscan</a> 查詢到。</p>
</blockquote>
<p>過一段時間後使用 <code>GetWhiteList()</code>，填入剛剛 <code>SetWhiteList()</code> 填寫的地址，應該會看到自己已經在白名單內了。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220405/getWhiteList.png" alt="取得參數"></p>
<ol start="5">
<li>部署邏輯合約v2</li>
</ol>
<p>在以往我們部署了合約就無法更動了，如果今天使用了可升級合約的方式，在我們修改合約後可以再度透過管理合約把代理合約指向的合約位置改掉。</p>
<p>先讓我們把邏輯合約做一下修改， <code>GetWhiteList()</code> 請在後面加上 <strong>+99</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.4;</span><br><span class="line"></span><br><span class="line">import &quot;@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract UpgradeableWhiteListContract is Initializable, OwnableUpgradeable &#123;</span><br><span class="line"></span><br><span class="line">    mapping(address =&gt; bool) private whiteList;</span><br><span class="line">    mapping(address =&gt; uint256) private mintLimit;</span><br><span class="line"></span><br><span class="line">    function initialize() public initializer &#123;&#125;</span><br><span class="line"></span><br><span class="line">    function SetWhiteList(address _address, uint256 _mintLimit) external &#123;</span><br><span class="line">        whiteList[_address] = true;</span><br><span class="line">        mintLimit[_address] = _mintLimit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function GetWhiteList(address _address) public view returns (bool, uint256)&#123;</span><br><span class="line">        return (whiteList[_address], mintLimit[_address] + 99);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 使用ownerRestricted修饰符来限定只有合约的所有者才能调用该函数</span><br><span class="line">    function destructContract(address payable target) public payable &#123;</span><br><span class="line">        selfdestruct(target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然後一樣送出合約並且部署，這邊的合約我們簡稱 <strong>邏輯合約v2</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220405/logicSolV2.png" alt="邏輯合約v2"></p>
<blockquote>
<p>部署結束後一樣把地址記錄下來，這邊筆者測試地址為在 <strong>Rinkeby</strong> 測試網 的 <code>0x56e4f75ed087cc0f437ecc0f8099933891ed7083</code>，<a href="https://rinkeby.etherscan.io/tx/0xbfb124a698928fc5222adb753fa48e3aa3d55db6a81604e4e389b87f4c0dd0c4">Etherscan 傳送門</a></p>
</blockquote>
<ol start="6">
<li>升級合約</li>
</ol>
<p>剛剛部署完 <strong>邏輯合約v2</strong>，接下來就要透過管理合約讓代理合約知道它要指向的目標合約從 <strong>邏輯合約</strong> 改為 <strong>邏輯合約v2</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220405/upgradeLogicSol.png" alt="升級合約"></p>
<p>這邊使用剛開始不久部署 <code>ProxyAdmin(管理合約)</code> 的 <code>upgrade()</code> ，填入相關參數，最後送出。</p>
<ul>
<li>proxy：填入剛剛部署的代理合約地址 <code>0x80d83e2b9bf263279319d2c90f17c8b86ce0c774</code></li>
<li>implementation：填入新的 <strong>邏輯合約v2</strong> 地址 <code>0x56e4f75ed087cc0f437ecc0f8099933891ed7083</code></li>
</ul>
<blockquote>
<p><em>部署紀錄結果一樣可以在 <a href="https://rinkeby.etherscan.io/tx/0x438744e8a8e0d70f61638d9c0d69589988d50f14a8e57565ea6d16fdc3ce13ae">Etherscan</a> 查詢到</em></p>
</blockquote>
<ol start="7">
<li>使用升級合約</li>
</ol>
<p>過段時間等剛剛的動作上鏈後，再回去使用剛剛透過 <strong>At Address</strong> 帶入的代理合約的 <code>GetWhiteList()</code> 即可拿到 <strong>邏輯合約v2</strong> 返回的結果，這邊必須要特別注意，如果返回值是 <strong>99</strong> 就代表是使用了錯誤的合約，回傳的值必須是包含第一次我們操作結果的值，因為我們第一次操作 <code>SetWhiteList()</code> 的值是存在代理合約內，重新部署新的合約，並不會把我們變數的值給清掉。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220405/getWhiteListAgain.png" alt="再次取得參數"></p>
<hr>
<h3 id="疑問點"><a href="#疑問點" class="headerlink" title="疑問點"></a>疑問點</h3><p>因為先前沒有部署過任何可升級合約，目前也在研究這塊，有碰到幾個疑問點，希望能有前輩指導。</p>
<ol>
<li><p>通常合約上鏈發布後，會把源碼公開在 Etherscan 上，這邊的話我應該公布哪個合約？邏輯合約？代理合約？邏輯合約v2？</p>
</li>
<li><p>代理合約需要初始化的 data_ 除了 <code>0x8129fc1c</code> 一直填入失敗，想知道為什麼，且這邊也無法留空。</p>
</li>
<li><p>邏輯合約部署上鏈後其實還是可以直接被呼叫的，正常變數的值都存在代理合約內，想知道普通升級後的做法是會怎麼單除處理邏輯合約呢？</p>
</li>
<li><p>正常部署了新版邏輯合約會把舊版刪除嗎？</p>
</li>
<li><p>為何還需要透過 ProxyAdmin 合約去更新代理合約指向的邏輯合約地址呢？明明透過 <strong>ProxyAdmin</strong> 的 <code>upgrade()</code> 也是回去呼叫代理合約的 <code>upgradeTo()</code> </p>
<p> <img src="/images/others/loading.gif" data-original="/images/20220405/upgrade.png" alt="更新 Function"></p>
</li>
</ol>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a><strong><strong>Conclusion &amp; 結論</strong></strong></h2><p>這是一篇練習使用可升級合約的紀錄，途中還有很多不懂的，需要慢慢理解，另外練習用的合約已經透過 <code>destructContract()</code> 刪除掉，所以可以不用嘗試呼叫範例合約。</p>
<p>其實筆者一直認為與其叫升級合約不如叫替換合約，因為只是 <strong>Proxy</strong> 指向的地址換了，但最後想想，根據 <strong>openzeppelin</strong> 網站的升級限制條件指出，升級必須遵守幾點，所以把他稱為升級其實才是對的。</p>
<ol>
<li>不能改變變數的類型</li>
<li>不能改變變數的順序</li>
<li>不能在現有變數引入先的變數</li>
<li>不能刪除現有變數</li>
</ol>
<blockquote>
<p><em>詳細條件可參考 <a href="https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#modifying-your-contracts">Openzeppelin Upgrades Plugins - Modifying Your Contracts</a></em></p>
</blockquote>
<p>其實合約最重要的就是嚴謹，還有反覆測試後，確定沒有太嚴重的邏輯錯誤，標題雖然寫著 <code>合約有漏洞？要升級？要修改？怎麼辦？</code> 但其實升級合約還是必須遵守上面那些條件。</p>
<p>另外合約裡面有設定 <strong>WhiteList</strong>，在下一篇我們將會講到怎麼設定白名單，以及目前大部分的人使用的設定方式，可以大量減少花費 <strong>ETH</strong>。</p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><a href="https://fengbro.medium.com/%E5%BB%BA%E7%AB%8B%E5%8F%AF%E5%8D%87%E7%B4%9A%E7%9A%84%E4%BB%A3%E7%90%86%E5%90%88%E7%B4%84-%E4%BB%A5erc20%E7%82%BA%E4%BE%8B-upgrable-contract-proxy-contract-88769cf92be7">建立可升級的代理合約 以ERC20為例 Upgradable Contract &#x2F; Proxy Contract</a></li>
<li><a href="https://docs.openzeppelin.com/learn/upgrading-smart-contracts">Openzeppelin - Upgrading smart contracts</a></li>
<li><a href="https://learnblockchain.cn/article/2758">手动部署OpenZeppelin可升级合约</a></li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>Solidity</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
        <tag>Solidity</tag>
        <tag>NFT</tag>
        <tag>Mint</tag>
        <tag>OpenSea</tag>
      </tags>
  </entry>
  <entry>
    <title>[CI/CD Note] — 透過 Docker 快速建立及部署環境</title>
    <url>/2021/12/10/20211210/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p><strong>Docker</strong> 可以取代傳統建置 <strong>虛擬機(VM)</strong> 需要耗費大量的時間、人力成本；也因為傳統 <strong>VM</strong> 需要佔用較多空間，最後往往導致環境衝突，或是環境髒亂的後果，就可以透過 <strong>Docker</strong> 去解決。</p>
<p>在這邊我們要解決的事情很簡單，就是『<strong>讓我們要執行專案的環境，在我的電腦可以跑，也要讓它在任何地方都可以跑，而且只需要下幾行簡單指令就可以跑，不需要繁瑣的安裝流程</strong>』。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211210/docker-logo-banner.png" alt="工程師都一定聽過的 Docker"></p>
<span id="more"></span>

<blockquote>
<p><em>Docker 提供的解法是，以應用程式為核心虛擬化，取代傳統需要 Guest OS 的虛擬化技術</em></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20211210/containers-vs-virtual-machines.png" alt="虛擬機 與 Container 的差異"></p>
<p>詳細可參考：<a href="https://www.weave.works/blog/a-practical-guide-to-choosing-between-docker-containers-and-vms">Docker vs Virtual Machines (VMs) : A Practical Guide to Docker Containers and VMs</a></p>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><blockquote>
<p><em>這邊將會記錄簡單的起手式及進階一點點的 <strong>Docker</strong> 玩法。</em></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20211210/aLittle.png" alt="真的只是一點點"></p>
<blockquote>
<p><em>(沒錯就是一點點)</em></p>
</blockquote>
<p>本篇文章預設學習前的基本條件需求</p>
<ul>
<li>會使用終端機</li>
<li>知道 <strong>GitHub</strong> 是什麼有大概的概念(不知道麼操作沒關係)</li>
</ul>
<p>這邊可以簡單分為兩個小節：</p>
<ol>
<li>基本認識(適合完全不曉得怎麼操作 <strong>Docker</strong> 的新手)</li>
<li>進階用法(適合知道怎麼從 <strong>Dockerfile</strong> → <strong>Image</strong> → <strong>Container</strong> 的初心者)</li>
</ol>
<hr>
<h2 id="基本認識"><a href="#基本認識" class="headerlink" title="基本認識"></a>基本認識</h2><p>認識 <strong>Docker</strong> 之前需要先知道三寶</p>
<ol>
<li>映像檔(<strong>Image</strong>)</li>
<li>容器(<strong>Container</strong>)</li>
<li>倉庫(<strong>Registry</strong>)、(<strong>Repository</strong>)</li>
</ol>
<p><img src="/images/others/loading.gif" data-original="/images/20211210/three_things.png" alt="Docker 三寶"></p>
<p><strong>Docker</strong> 最基本就是基於 <strong>映像檔(Image)</strong> 組成的，可以想像成每一個 <strong>Image</strong> 都是一片光碟，光碟裡面已經有我們設定好的安裝參數(環境)，例如我們會把 <strong>MySQL</strong> 服務包裝成一片 <strong>光碟(Image)</strong> 、前端需要的 <strong>Node</strong> 環境包裝成一片 <strong>光碟(Image)</strong>…</p>
<p>當我們把每一個 <strong>Image</strong> 寫好之後，透過指令或是 <strong>GUI</strong> 在把每一片光碟放進 <strong>光碟機(Container)</strong> 去執行，這時候就很好理解，當同事想要跟我們一樣的服務，就把 <strong>光碟(Image)</strong> 拿去放盡 <strong>光碟機(Container)</strong> 安裝環境，當他們不想要這個服務就把 <strong>光碟(Image)</strong> 從 <strong>光碟機(Container)</strong> 退出來。</p>
<p>透過這個方法我們可以快速的安裝解除服務，也不會污染全域環境，另外也可以區隔每一個 <strong>光碟機(Container)</strong> 各自在負責什麼事情。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211210/Alcohol-120.png" alt="Alcohol-120.png"></p>
<p>我們可以把 <strong>光碟(Image)</strong> 想像成 <strong>酒精(<a href="https://zh.wikipedia.org/zh-tw/Alcohol_120%25">Alcohol 120%</a>)</strong> 的映像檔，當然我們不必真的把 <strong>光碟(Image)</strong> 燒出來拿給其他人去安裝； <strong>Docker</strong> 提供了一項類似 <strong>GitHub</strong> 的服務，稱為 **<a href="https://hub.docker.com/">Docker Hub</a> ，**我們可以透過 <strong>docker push</strong> 或 <strong>docker pull</strong> 去達成遠端推拉 <strong>光碟(Image)</strong>。</p>
<hr>
<h2 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h2><p>開始之前我們必須先安裝 <strong>Docker</strong>，透過<a href="https://docs.docker.com/get-docker/">官方文件</a>，選擇符合你作業系統的安裝方式，然後安裝。</p>
<p>與一般的專案事前準備不同，我們不需要東安裝西安裝，只需要把 <strong>Docker</strong> 安裝起來即可。接著鍵入下列指令到終端機。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> docker version</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20211210/docker-version.png" alt="Docker Version"></p>
<p>出現上圖代表安裝成功了。</p>
<hr>
<h2 id="偉大始於一顆小螺絲-映像檔"><a href="#偉大始於一顆小螺絲-映像檔" class="headerlink" title="偉大始於一顆小螺絲 - 映像檔"></a>偉大始於一顆小螺絲 - 映像檔</h2><p>學習任何東西都需要從最基礎開始，而在 <strong>Hello World</strong> 的世界裡依然如此，對於 <strong>Docker</strong> 我們需要從 <strong>映像檔(Image)</strong> 開始。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211210/docker-gui.png" alt="DOcker GUI"></p>
<h3 id="指令-V-S-圖形化介面"><a href="#指令-V-S-圖形化介面" class="headerlink" title="指令 V.S 圖形化介面"></a><strong>指令 V.S 圖形化介面</strong></h3><p>雖然官方有提供 <strong>Docker Desktop</strong> 的 <strong>GUI</strong> 介面，可以快速的建立及啟用 <strong>Docker</strong>，但一些基本指令還是必須認識一下的，畢竟真的要把專案推上 <strong>VM</strong> 總是要執行 <strong>Command Line</strong> 的對吧？</p>
<p>要寫出屬於我們自己的 <strong>映像檔(Image)</strong> 的話，我們需要先寫 <strong>Dockerfile</strong> 接著去執行它。這支檔案也會詳細敘述我們需要用到的環境，還有安裝等等的指令。</p>
<p>在我們的專案建立一個 <strong>Dockerfile</strong>，然後鍵入下列內容，這邊我們將用一個前端 <strong>React</strong> 專案來示範。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211210/code.png" alt="DockerFile"></p>
<p>這邊有幾個基本的指令</p>
<ul>
<li>FROM - 從 <strong>Docker Hub</strong> 的哪個地方抓取 <strong>映像檔(Image)</strong> 回來安裝。</li>
<li>WORKDIR - 將會指定在容器啟動時我們會待在容器的哪個地方。</li>
<li>ENV - 將會定義再 <strong>build</strong> 執行時的環境變量。</li>
<li>RUN - 執行後方指令，像是會在容器上執行 <strong>npm install</strong>。</li>
<li>COPY - 複製 ${目前本機目標位置的檔案} 到 ${容器目標位置}。</li>
<li>EXPOSE - 輸出的 <strong>Port</strong>。</li>
<li>CMD - 預設執行 <strong>Container</strong> 時會執行的指令。</li>
</ul>
<blockquote>
<p><em>更多指令可參考 <a href="https://docs.docker.com/engine/reference/builder/">Dockerfile Document</a></em></p>
</blockquote>
<blockquote>
<p><em>關於 <strong>CMD</strong> 的差異可參考 <strong><a href="https://ithelp.ithome.com.tw/articles/10252166">了解 Docker 如何啟動 process</a></strong></em></p>
</blockquote>
<p>要讓你的 <strong>光碟(Image)</strong> 放進什麼資料取決於你，在其他使用這個 <strong>光碟(Image)</strong> 的人把它放進 <strong>光碟機(Container)</strong> 後就會安裝你由 <strong>Dockerfile</strong> 組成的內容。</p>
<p><strong>Image</strong> 裡面除了可以寫自己的設定檔之外，也可以在自己的設定檔內，加上別人寫好的設定檔，然後包裝在一起，作為一個新的設定檔。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211210/myself_docker.png" alt="碰出新滋味"></p>
<p>透過這個方法我可以包裝我想要的環境，例如我可以直接抓到 <strong>Node</strong> 的環境，接著我的光碟就有 <strong>Node</strong> 的環境，加上自己的客製化(像上圖的例子)，我們可以讓前端專案順利透過 <strong>Node</strong> 環境安裝；同理我也可以輕鬆的把 <a href="https://www.mysql.com/">MySQL</a> 加上 <a href="https://www.phpmyadmin.net/">phpMyAdmin</a> 的環境裝進 <strong>Image</strong> 裡。</p>
<p>完成 <strong>Dockerfile</strong> 後，讓我們實際來用指令跑跑看吧。如果你有安裝 <strong>Docker Desktop</strong> 的話請打開它，然後鍵入下列指令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> docker images</span><br></pre></td></tr></table></figure>

<p>這時候應該會是空的，我們將建置出我們第一個 <strong>Image</strong>，繼續鍵入下列指令到終端機：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> docker build <span class="literal">-t</span> docker<span class="literal">-react</span>:dev <span class="operator">-f</span> Dockerfile . <span class="literal">--no-cache</span></span><br></pre></td></tr></table></figure>

<p>正常我們要建置 <strong>Image</strong> 的話，起手式都是 <strong>docker build</strong>，後面可帶的參數可參考 <a href="https://docs.docker.com/engine/reference/commandline/build/#options">官方指令文件</a>，但上方已經是可以符合普遍情況的簡單指令了。</p>
<ul>
<li><p>-t - 這邊將會給你的 <strong>Image</strong> 取一個名稱，後面的 <strong>react-docker</strong> 就是該 <strong>Image</strong> 的名稱；後面帶了一個冒號(<strong>:dev</strong>)，意思是給你的 <strong>Image</strong> 加上版號，也可以給他 <strong>react-docker:v1.0</strong>，如果你有同一個 <strong>Dockerfile</strong> 但是想要有一點小客製化，建置出不同的 <strong>Image</strong> 就可以依照版號去建置。</p>
</li>
<li><p>-f - 這邊是你要啟動的 <strong>Dockerfile</strong> 名稱，但通常我們都會命名為 <strong>Dockerfile</strong>，後面的空白在一個點點是路徑，如果你已經在該專案路徑就只要一個黑點即可，如果你的 <strong>Dockerfile</strong> 在上一層且名稱叫做 <strong>myDockerfile</strong>，也許你就會輸入 <strong>-f myDockerfile ..</strong>。</p>
</li>
<li><p>–no-cache - 最後面加上的 <strong>no cache</strong> 是避免在 <strong>Build Docker image</strong> 時被 <strong>cache</strong> 住，造成沒有 <strong>build</strong> 到修改過的 <strong>Dockerfile</strong>。</p>
<p>  <img src="/images/others/loading.gif" data-original="/images/20211210/docker-build.gif" alt="Docker Build"></p>
</li>
</ul>
<p>接著在終端機再輸入一次 <strong>docker Images</strong>，就會在列表看到你的 <strong>Image 名稱</strong>、<strong>版號</strong>、<strong>建立時間</strong>…等等的資訊。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211210/docker-images.png" alt="Docker Images"></p>
<p>如果你不想要某個 <strong>Image</strong> 也可以執行指令刪除，將你的 <strong>Image</strong> 名稱帶入下列指令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> docker rmi <span class="variable">$</span>&#123;image name&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="沒有彼此無法偉大-容器"><a href="#沒有彼此無法偉大-容器" class="headerlink" title="沒有彼此無法偉大 - 容器"></a>沒有彼此無法偉大 - 容器</h2><p>如果 <strong>Image</strong> 沒有 <strong>Container</strong>，它便無法被運作；同理，如果 <strong>Container</strong> 沒有 <strong>Image</strong>，他便無用武之地。</p>
<p>容器就是我們的光碟機，如何讓他運行呢？讓我們在終端機鍵入下列指令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> docker run <span class="literal">--name</span> docker<span class="literal">-react-container</span> <span class="literal">-p</span> <span class="number">3005</span>:<span class="number">3000</span> docker<span class="literal">-react</span>:dev</span><br></pre></td></tr></table></figure>

<p>正常我們要執行 <strong>Image</strong> 的話，起手式都是 <strong>docker run</strong>，後面可帶的參數可參考 <a href="https://docs.docker.com/engine/reference/commandline/run/#options">官方指令文件</a>，但上方已經是可以符合普遍情況的簡單指令了。</p>
<ul>
<li>—name - 這邊將會給你的 <strong>container</strong> 取一個名稱，後面的 <strong>docker-react-container</strong> 就是該 <strong>container</strong> 的名稱。</li>
<li>-p 是你要把當下啟動該 <strong>container</strong> 環境的哪個 <strong>Port</strong> 連結到當下啟動該 <strong>container</strong> 時該環境的 <strong>Port</strong>，之後在啟動該 <strong>container</strong> 的環境輸入 <a href="http://localhost:3005/">http://localhost:3005</a> 就可以連到這個 <strong>container</strong> 的環境(可能有些模糊，等等上圖好理解)。</li>
<li>最後加上的 <strong>react-docker:dev</strong> 就是該 <strong>Image</strong> 的名稱加版號，在你建置 <strong>Image</strong> 時就已經給取好名稱了。</li>
</ul>
<p><img src="/images/others/loading.gif" data-original="/images/20211210/docker-run.png" alt="Docker Run"></p>
<p>出現上圖就可以打開你的 <a href="http://localhost:3005/">http://localhost:3005</a> 了，查看一下就會發現頁面出現前端專案啦！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211210/docker-run-success.png" alt="成功啟動"></p>
<p>執行成功後你應該會馬上浮現兩個問題，第一個是 背景執行，第二個是 熱更新，就讓我們來學學怎麼透過參數簡單的解決這兩個問題吧。</p>
<h3 id="背景執行"><a href="#背景執行" class="headerlink" title="背景執行"></a>背景執行</h3><p>這個問題比較簡單執行，你會發現透過上面指令執行 <strong>Image</strong> 的 <strong>container</strong>，如果終端機一關掉，整個 <strong>container</strong> 就被關閉了，這邊我們對原本啟動的指令動點手腳。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> docker run <span class="literal">--name</span> docker<span class="literal">-react-container</span> <span class="literal">-d</span> <span class="literal">-p</span> <span class="number">3005</span>:<span class="number">3000</span> docker<span class="literal">-react</span>:dev</span><br></pre></td></tr></table></figure>

<p>仔細瞧瞧，好像一樣又有點不同，沒錯！就只是加上一個 <strong>-d</strong>，就可以讓這個 <strong>container</strong> 在背景執行了。</p>
<h3 id="熱更新"><a href="#熱更新" class="headerlink" title="熱更新"></a>熱更新</h3><p>在啟動後我們開始修改我們的程式碼，這時候你可能會想，那我是不是改一行程式碼，我就要重新在 <strong>build</strong> 一個 <strong>Image</strong>，然後在 <strong>run</strong> 它呢？那豈不是累死了。</p>
<p>所以這邊我們會先介紹一個參數利器 <strong>volumes</strong>，如果透過 <strong>GUI</strong> 介面你也可以清楚發現這個參數設定。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211210/docker-gui-run-setting.png" alt="Docker Gui Setting"></p>
<p>所以他到底拿來幹嘛的呢？簡單說就是讓你的 <strong>container</strong> 的其中一個資料夾跟當下啟動該 <strong>container</strong> 的環境下其中一個資料夾產生連結。</p>
<p>先說說 <strong>當下啟動該 container 的環境</strong> 是什麼意思(與 <strong>當下啟動該 Image 的環境</strong> 同理)，如果你是在本機跑 <code>docker run</code>  那你 <strong>當下啟動該 xxx 的環境</strong> 指的就是你本機，如果你把程式碼推上 <strong>虛擬機(Linode、GCP、AWS)</strong>，在該虛擬機裡面跑 <code>docker run</code>  指的 <strong>當下啟動該 xxx 的環境</strong> 就是該台虛擬機。</p>
<p>正所謂水能載舟亦能覆舟，因為 <strong>container</strong> 一停止，裡面的環境及資料都沒了，如果我們是建置出 <a href="https://www.mysql.com/">MySQL</a> 加上 <a href="https://www.phpmyadmin.net/">phpMyAdmin</a> 的環境，一但資料不見，肯定是<strong>初四了阿伯</strong>！</p>
<p>所以我們通常如果有需要保存資料，會將 <strong>container</strong> 裡某一個資料夾與當下啟動環境的某一個資料夾產生連結，就算 <strong>container</strong> 被停止了，我們一樣可以保存資料。</p>
<p>因為連結一但產生，是會隨時更新的，以在本機啟動 <strong>container</strong> 為例，如果在 <strong>container</strong> 裡面使用設定時與本地綁定 <strong>Volume</strong> 的資料夾新增了檔案 <strong>A</strong>，會同時本地產生連結的資料夾也新增檔案 <strong>A</strong>。相反的在本地綁定 Volume 的資料夾新增檔案 <strong>B</strong>，也會同時在 <strong>container</strong> 裡面綁定的資料夾產生檔案 <strong>B</strong>，如下圖。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211210/volume-intro.png" alt="關於 Volume"></p>
<p>透過這個特性，我們可以把本地的整個專案資料夾與 container 綁定，使用 <code>docker stop docker-react-container</code>  停止整個 <strong>container</strong> ，然後使用 <code>docker rm docker-react-container</code> 刪除原本的 <strong>container</strong> ，然後透過下面的指令在啟動一個新的 <strong>container</strong>：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> docker run <span class="literal">--name</span> docker<span class="literal">-react-container</span> <span class="literal">-d</span> <span class="literal">-p</span> <span class="number">3005</span>:<span class="number">3000</span> <span class="literal">-v</span> <span class="variable">$</span>&#123;<span class="built_in">pwd</span>&#125;:/app docker<span class="literal">-react</span>:dev</span><br></pre></td></tr></table></figure>

<ul>
<li>-v - 透過這個參數就是把 ${指定當下啟動環境的資料夾路徑} 與指定的 <strong>container</strong> 的資料夾路徑 產生綁定，你可以先透過終端機輸入 <code>pwd</code>  查看當下環境，這邊我的路徑正處於前端專案資料夾裡，我把該前端專案與 <strong>container</strong> 裡面的 <strong>app</strong>(註1) 資料夾產生綁定。</li>
</ul>
<blockquote>
<p><em>註1：啟動前端專案後，專案位置會位於該 <strong>container</strong> 的 <strong>app</strong> 資料夾底下。</em></p>
</blockquote>
<p>透過上面的指令，既可以在背景執行，又可以達到熱更新，這樣也不會污染到我們當下的環境，因為我們不需要這些環境(<strong>Node.js</strong>)，的時候，只要把該 <strong>container</strong> 刪除掉，就可以了。</p>
<p>如果你有同事想啟動你的專案，但又不想在他們電腦安裝 <strong>Node.js</strong> 的話，之後把整個專案包含 <strong>Dockerfile</strong> 傳給同事即可。</p>
<p>現在可以使用下列其中一個指令到終端機：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> docker <span class="built_in">ps</span> / docker container <span class="built_in">ls</span> / docker <span class="built_in">ps</span> <span class="literal">--all</span> / docker container <span class="built_in">ls</span> <span class="literal">--all</span></span><br></pre></td></tr></table></figure>

<p>最後嘗試看看修改後，畫面會不會更動吧！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211210/hot-reload-with-volume.gif" alt="熱更新成功"></p>
<p>最後如果你不想要某個 <strong>Image</strong> 或 <strong>container</strong> 也可以執行指令刪除，將你的 <strong>Image&#x2F;container</strong> 名稱帶入下列指令(記得要先停止運行該 <strong>container</strong> 才可以刪除)：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> docker rmi <span class="variable">$</span>&#123;image name&#125; // 刪除 image</span><br><span class="line"></span><br><span class="line"><span class="variable">$</span> docker <span class="built_in">rm</span> <span class="variable">$</span>&#123;container name&#125; // 刪除 container</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="前人種樹後人乘涼"><a href="#前人種樹後人乘涼" class="headerlink" title="前人種樹後人乘涼"></a>前人種樹後人乘涼</h2><p>當我們把 <strong>Docker</strong> 的 <strong>Image</strong> 建置出來後，我們可以把這個 <strong>Image</strong> 分享給其他人，不需要透過壓縮檔傳送方式，也不需要透過雲端空間，<strong>Docker</strong> 很貼心提供了 <strong>Dockerhub</strong> 的地方，讓我們可以分享及使用他人的 <strong>Image</strong>，這個空間類似我們常用的 <strong>Github</strong>。</p>
<p>關於 <strong>Docker</strong> 的 倉庫(<strong>Registry)</strong> 可以分為 <strong>公開</strong> 及 <strong>私人</strong>，兩種都可以自己架設，如果嫌麻煩，<strong>Docker</strong> 有提供 <strong>Dockerhub</strong>，如果是自己公司的專案，不方便公開 <strong>Image</strong> 的話可以自己架設一個。</p>
<blockquote>
<p><em>自行架設可參考 <a href="https://dotblogs.com.tw/kinanson/2019/10/02/101052">[Docker]自行架設私有的Docker Registry</a></em></p>
</blockquote>
<p>這邊我們要把建置好的前端專案 <strong>Image</strong> 推倒 <strong>dockerhub</strong> 上。</p>
<h3 id="申請-dockerhub-帳號密碼"><a href="#申請-dockerhub-帳號密碼" class="headerlink" title="申請 dockerhub 帳號密碼"></a>申請 <strong>dockerhub</strong> 帳號密碼</h3><p><img src="/images/others/loading.gif" data-original="/images/20211210/dockerhub-website.png" alt="Docker 官網"></p>
<p>首先需要上 <a href="https://hub.docker.com/">dockerhub 官網</a> 申請帳號密碼。</p>
<h3 id="登入"><a href="#登入" class="headerlink" title="登入"></a>登入</h3><p>接著我們需要登入我們申請好的帳號密碼，鍵入下列指令到終端機：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> docker login</span><br></pre></td></tr></table></figure>

<p>接著按照指示輸入帳號密碼即可，如果是透過 <strong>GUI</strong>，也可以點擊 <strong>Icon</strong> 圖示登入，這邊使用 <strong>Mac</strong> 示範：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211210/mac-tools-bar.png" alt="工具列"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20211210/docker-gui-login-dockerhub.png" alt="透過 GUI 登入"></p>
<h3 id="新增-Repository"><a href="#新增-Repository" class="headerlink" title="新增 Repository"></a>新增 Repository</h3><p>和 <strong>Github</strong> 一樣，想上傳你的 程式碼(<strong>Image</strong>)，就必須要先建立一個 <strong>Repository</strong>，到 <a href="https://hub.docker.com/">dockerhub 官網</a> 登入帳號密碼後，應該會看到目前是空的，點擊藍色按鈕(<strong>Create Repository</strong>)新增 <strong>Repository</strong> 。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211210/docker-repository-step-1.png" alt="步驟一"></p>
<p>接著輸入相關資訊，請先設定為公開的 <strong>Repository</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211210/docker-repository-step-2.png" alt="步驟二"></p>
<p>建立完成後會看到目前 <strong>Repository</strong> 裡面都是空的，代表建立成功了。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211210/docker-repository-step-3.png" alt="完成建立 Repository"></p>
<blockquote>
<p><em>旁邊依然很貼心提醒您相關指令</em></p>
</blockquote>
<h3 id="上版號-上傳-Image"><a href="#上版號-上傳-Image" class="headerlink" title="上版號 &amp; 上傳 Image"></a>上版號 &amp; 上傳 Image</h3><p>仔細看旁邊會發現 <strong>docker</strong> 很貼心的提醒你必須要上 <strong>tag</strong> 版號。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211210/tag-intro.png" alt="貼心的提醒"></p>
<p>接著在終端機上鍵入 <code>docker images</code>  查看我們前端專案的 <strong>Image</strong> 的 <strong>ID</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211210/docker-images-check.png" alt="再度查看 Images"></p>
<p>再鍵入下列指令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> docker tag <span class="variable">$</span>&#123;IMAGE ID&#125; <span class="variable">$</span>&#123;docker 帳號&#125;/<span class="variable">$</span>&#123;docker repository 名稱&#125;</span><br></pre></td></tr></table></figure>

<p>再輸入 <code>docker images</code>  你會發現多了一筆資料，因為我們沒有給版號，所以會出現 TAG 是 latest 的樣子，代表最新版本。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211210/docker-images-check-2.png" alt="完成確認"></p>
<p>如果想加入版號可以稍微修改上面的指令(記得 <strong>${}</strong> 要拿掉，裡面換上你該填入的資訊)：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> docker tag <span class="variable">$</span>&#123;IMAGE ID&#125; <span class="variable">$</span>&#123;docker 帳號&#125;/<span class="variable">$</span>&#123;docker repository 名稱&#125;:<span class="variable">$</span>&#123;版號&#125;</span><br></pre></td></tr></table></figure>

<p>最後一步就是推 <strong>Image</strong> 上去了，跟 <strong>Github</strong> 一樣，使用 <strong>push</strong> 推上 <strong>dockerhub</strong>：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> docker push <span class="variable">$</span>&#123;docker 帳號&#125;/<span class="variable">$</span>&#123;docker repository 名稱&#125;:<span class="variable">$</span>&#123;版號&#125;</span><br></pre></td></tr></table></figure>

<p>讓我們再回去 <strong>dockerhub</strong> 瞧瞧，會發現現在已經把 <strong>Image</strong> 推上去囉！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211210/docker-repository-done.png" alt="完成上傳"></p>
<p>因為 <strong>dockerhub</strong> 只是單純拿來存放 <strong>Image</strong> 的地方，不像 <strong>Github</strong> 會把整個專案上傳，所以要怎麼啟動，或是專案怎麼擺放，通常大家都會另外再把相關程式碼或是專案整包在傳道 <strong>Github</strong>，最後寫在 <strong>dockerhub</strong> 的 <strong>Readme</strong>。</p>
<p>雖然目前我們沒有把專案丟到 <strong>Github</strong>，但可以讓我們來寫啟動指令，讓其他人知道大概蓋怎麼執行。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211210/docker-readme.png" alt="寫個易懂的簡介吧"></p>
<h3 id="嘗試下載"><a href="#嘗試下載" class="headerlink" title="嘗試下載"></a>嘗試下載</h3><p>推上去之後我們就可以來試試看下載了，先把原本的 Image 清除：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> docker rmi <span class="variable">$</span>&#123;docker 帳號&#125;/<span class="variable">$</span>&#123;docker repository 名稱&#125;</span><br></pre></td></tr></table></figure>

<p>然後下載我們推上 <strong>dockerhub</strong> 的 <strong>Image：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> docker pull <span class="variable">$</span>&#123;docker 帳號&#125;/<span class="variable">$</span>&#123;docker repository 名稱&#125;:<span class="variable">$</span>&#123;版號&#125;</span><br></pre></td></tr></table></figure>

<p>最後啟動它：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> docker run <span class="literal">--name</span> <span class="variable">$</span>&#123;container name&#125; <span class="literal">-d</span> <span class="literal">-p</span> <span class="number">3005</span>:<span class="number">3000</span> <span class="variable">$</span>&#123;docker 帳號&#125;/<span class="variable">$</span>&#123;docker repository 名稱&#125;:<span class="variable">$</span>&#123;版號&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20211210/docker-run-download-images.png" alt="成功啟動"></p>
<p>大功告成！</p>
<h3 id="嘗試搜尋"><a href="#嘗試搜尋" class="headerlink" title="嘗試搜尋"></a>嘗試搜尋</h3><p>當然我們也可以搜尋其他人的 <strong>Image</strong>，鍵入下列指令到終端機：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> docker search <span class="operator">-f</span>=stars=<span class="number">100</span> <span class="variable">$</span>&#123;image&#125;:<span class="variable">$</span>&#123;版號&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>-f - 這邊後面可以階篩選條件，詳細可參考 <a href="https://docs.docker.com/engine/reference/commandline/search/#options">官方文件</a>，<strong>-f</strong> 是 <strong>—filter</strong> 的縮寫</li>
</ul>
<h3 id="大膽假設"><a href="#大膽假設" class="headerlink" title="大膽假設"></a>大膽假設</h3><p>這邊筆者大膽想了一個做法，雖然還沒有實踐，但理論上應該是可以達到下圖這個目的，如果你辦到了，歡迎下面留言告訴筆者。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211210/possible-docker.png" alt="截圖 2021-12-08 下午5.48.11.png"></p>
<p>在某個 <strong>Container</strong> 裡面起 <strong>Nginx</strong>，透過掛載不同的 <strong>Port</strong>，然後把 <strong>Nginx</strong> 的 <strong>Root</strong> 指向前端專案與本地綁定的 <strong>Volume</strong> 資料夾內，達到一件部署的可能性。</p>
<blockquote>
<p><em>尚待實驗成功</em></p>
</blockquote>
<hr>
<h2 id="進階用法"><a href="#進階用法" class="headerlink" title="進階用法"></a>進階用法</h2><p>會了基本的用法，大概大家這時候都會開始往進階的地方探索，小小的功能可能已經無法滿足你的需求。</p>
<p>舉例來說，你或許會覺得前端我要起一個專案，後端我要起一個專案，資料庫我要起一個專案，這樣不是太累了嗎？而且我到底該怎麼讓前端與後端溝通，後端能連接到資料庫呢？</p>
<p>其實原本的指令參數有提供方法，但指令肯定沒有直接寫成設定檔來得容易，所以……</p>
<p>這時候救星就出現了，<strong>Docker Compose</strong>！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211210/docker-compose-logo.png" alt="docker compose"></p>
<p>就像 <strong>Logo</strong> 一樣，藍色的箱子就是你的 <strong>Container</strong>，章魚是 <strong>docker compose</strong>，他可以將不同的 <strong>Container</strong> 組合成一個 <strong>Container。</strong></p>
<h3 id="基本安裝"><a href="#基本安裝" class="headerlink" title="基本安裝"></a>基本安裝</h3><p>首先要安裝 <strong>docker compose</strong>，依照 <a href="https://docs.docker.com/compose/install/#install-compose">官方安裝文件</a> 一步一步安裝，接著鍵入下列指令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> docker<span class="literal">-compose</span> version</span><br></pre></td></tr></table></figure>

<p>順利的話會看見 <code>docker-compose version 1.29.2, build 5becea4c</code>  這行文字。</p>
<h3 id="關於網路-Network"><a href="#關於網路-Network" class="headerlink" title="關於網路(Network)"></a>關於網路(Network)</h3><p>再說怎麼讓 <strong>Container</strong> 互相溝通前必須提到 <strong>docker</strong> 的網路，但是這邊不會深入討論。</p>
<p>正常我們透過 <strong>run</strong> 不同的 <strong>Image</strong>，會得到不同的 <strong>Container</strong>，最後會像下圖一樣。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211210/docker-network.png" alt="關於 Network"></p>
<p>仔細看會發現 <strong>Container</strong> 不能直接性的溝通，但如果我們使用 <strong>docker-compose</strong> 建置的話，<strong>Container</strong> 都會預設使用一個叫做 <strong>Bridge Network</strong> 的網路橋，所以互相的專案得以溝通。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211210/docker-network-default.png" alt="預設的 docker network"></p>
<blockquote>
<p><em>上方的圖如果不是透過 <strong>docker-compose</strong> 建置的話，是必須要自己手動把 <strong>Container</strong> 連結在一起，詳細可參考 <a href="https://ithelp.ithome.com.tw/articles/10241642"><strong>使用 Network 連結 container</strong></a>。</em></p>
</blockquote>
<p>如果你是透過 <strong>docker-compose</strong> 建置的話，預設 <strong>docker</strong> 除了把你設定檔內使用到的 <strong>dockerfile</strong> 建置個別的 <strong>Container</strong> 之外，也會一併的把他們組起來。</p>
<p>這時候你可以把一些 <strong>Image</strong> 透過 <strong>docker-compose</strong> 組合起來，也可以在另外單獨起別的 <strong>Image</strong>，類似下圖。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211210/docker-network-custome.png" alt="客製化 Docker 設定組合"></p>
<p>這邊會發現網路如果不同，就無法互相溝通，所以設定檔怎麼寫就很重要！</p>
<blockquote>
<p><em>關於網路這邊筆者大力推薦可以參考 <a href="https://godleon.github.io/blog/Docker/docker-network-bridge/">[Docker] Bridge Network 簡介</a>，作者說的很詳細，而且有圖解大推！</em></p>
</blockquote>
<h3 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h3><p>前面說了很多終於要來寫我們的設定檔，我們可以簡單理解要使用 <strong>docker-compose</strong>，我們必須要有 <strong>docker-compose.yml</strong> 這支檔案，而這支檔案可以把不同的 <strong>Image</strong> 或是 <strong>Dockerfile</strong> 整合進來。</p>
<p>這邊使用 <strong>mariadb + adminer + react + nginx</strong> 組成的 <strong>Container</strong> 作為範例。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211210/docker-compose-setting.png" alt="docker-compose 設定檔"></p>
<p>其實基本上配置都和 <strong>Dockerfile</strong> 差異不大，相關設定也都能爬到文，這邊就不贅述。可以簡單理解為，我在一個目錄底下，去把各個 <strong>Dockerfile</strong> 引進來使用(<strong>React、Nginx</strong>)，甚至有使用到 <strong>Dockerhub</strong> 上面的 <strong>Image</strong>(<strong>mariadb、adminer</strong>)。</p>
<p>類似組積木的方式，就像 <strong>Logo</strong> 一樣，一隻鯨魚承載著不同的貨櫃。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211210/docker-logo.png" alt="Docker logo"></p>
<p>寫好設定檔後就可以啟動了(請記得要位於設定檔的目錄底下)：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> docker<span class="literal">-compose</span> up <span class="literal">-d</span></span><br></pre></td></tr></table></figure>

<p>啟動結束還是可以透過 <code>docker ps --all</code>  查看是否正常啟動了，如果想暫停可以鍵入下列指令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> docker<span class="literal">-compose</span> stop</span><br></pre></td></tr></table></figure>

<p>但有時候我們會想連 <strong>Image</strong> 一併刪除，可能因為 <strong>Dockerfile</strong> 沒寫好，這時候就可以使用下列指令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> docker<span class="literal">-compose</span> down <span class="literal">--rmi</span> all</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="課後複習"><a href="#課後複習" class="headerlink" title="課後複習"></a>課後複習</h2><p>整個 <strong>Docker</strong> 流程大致可以分為以下的流程(當然我們省略了很多小細節)。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20211210/docker-finally.png" alt="大致流程"></p>
<ol>
<li>透過 <strong>公開</strong> 或 <strong>私人</strong> 倉庫，拉取 <strong>Image</strong> 下來使用，配上自己寫的 <strong>Image</strong>。</li>
<li>使用 <strong>docker-compose</strong> 把各個 <strong>Image</strong> 組合成 <strong>Container</strong>。</li>
<li>把自己寫好的設定檔組成新的 <strong>Image</strong>，創建好 <strong>Repository</strong> 之後，推上公開或私有倉庫。</li>
<li>可以選配 <strong>CI&#x2F;CD</strong>，達到一鍵部署的效果。</li>
</ol>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>其實一直想研究 <strong>Docker</strong> 很久了，有陣子都在亂點技能樹，但對於自動部署的領域，筆者自己認為不管哪一端都必須要了解，畢竟工程師就是喜歡越懶越好。</p>
<p>這次的 Docker 入門班雖然很淺很淺談，但我相信會熟能生巧的。</p>
<p>趁著這次工作研究 <strong>Docker</strong>，又讓我學到了一課，慢慢進步的感覺，很棒！</p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><p>官方文件 - <a href="https://storybook.js.org/">StoryBook</a></p>
</li>
<li><p><a href="https://www.notion.so/chromatic-2f9e608544574281b0ddbc62839a0c21">透過 chromatic 發布成果</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>CI/CD</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>Tools</tag>
        <tag>CI</tag>
        <tag>CD</tag>
      </tags>
  </entry>
  <entry>
    <title>[Solidity Note] - 在區塊鏈上最好的白名單實作方式？試試看 Merkle Tree 吧</title>
    <url>/2022/04/11/20220411/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p><img src="/images/others/loading.gif" data-original="/images/20220411/outOfGas.png" alt="Mint Fail"></p>
<p>相信玩 <strong>NFT</strong> 一段時間的人一定都聽過嘟嘟房事件，這篇文章將會記錄該怎麼處理 <strong>NFT</strong> 白名單的方法，且可以避開高額的氣費。</p>
<blockquote>
<p><em>如果不知道這是什麼，可以參考 <strong>Rex</strong> 前輩寫的文章 <a href="https://medium.com/fuly-ai-%E6%99%BA%E8%83%BD%E6%8A%95%E8%B3%87%E7%AD%96%E7%95%A5%E6%A9%9F%E5%99%A8%E4%BA%BA-bitfinex-%E6%94%BE%E8%B2%B8%E6%A9%9F%E5%99%A8%E4%BA%BA/%E5%98%9F%E5%98%9F%E6%88%BFnft%E5%87%BA%E5%8C%85%E4%BA%8B%E4%BB%B6%E6%87%B6%E4%BA%BA%E5%8C%85-4a4acd7fe0c2">嘟嘟房NFT出包事件懶人包</a>，如果簡單說就是智能合約的白名單寫法沒有寫好，導致持有白名單的人 <strong>Pre-Mint</strong> 發生了需要支付高額的氣費，而且還 <strong>Mint</strong> 失敗。</em></p>
</blockquote>
<span id="more"></span>

<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p>這篇文章不會檢討或探討這個事件的問題，只會記錄透過這個事件筆者開始學習關於紀錄白名單的方法心得。</p>
<p>本篇文章預設學習前的基本條件需求：</p>
<ul>
<li>會基本的英文</li>
<li>會使用 <a href="https://remix.ethereum.org/">Remix IDE</a></li>
</ul>
<p>本篇文章將會學到：</p>
<ol>
<li>花費少許 <strong>ETH</strong> 即可達到對智能合約的白名單列表的驗證及儲存</li>
<li>每次對智能合約更新白名單不需要再花費高額的 <strong>ETH</strong></li>
</ol>
<hr>
<h3 id="白名單？"><a href="#白名單？" class="headerlink" title="白名單？"></a>白名單？</h3><p>在 <strong>NFT</strong> 開始火紅之後越來越多人從 <strong>Web2</strong> 進入到 <strong>Web3</strong> 世界，相信大部分的人都沒有什麼區塊鏈的知識，例如筆者…</p>
<p>在台灣越來越多團隊開始發行 <strong>NFT</strong> 之後，幾乎常常都有可以學習的地方，筆者相信不是壞事，畢竟越來越多人願意接觸甚至開始有公司願意出資在這上面，代表越多的人來研究這塊，一開始的 <strong>Web2</strong> 肯定也是有很多問題是後來慢慢被克服的。</p>
<p>在發行 <strong>NFT</strong> 之後，大部分的團隊都會碰到一個問題，我需要保留一些名額給特定的人，讓他們保證可以買到，或者保留一部分的名額，給其他的 <strong>KOL</strong> 抽獎，這些一定可以 <strong>Mint</strong> 到 <strong>NFT</strong> 的名額簡稱白名單。</p>
<blockquote>
<p><em><a href="https://www.youfind.hk/blog/kol.html">KOL中文是什麼意思？如何分辨「網紅」與「KOL」？</a></em></p>
</blockquote>
<p>這些白名單通常不是小數目，可能幾十位，甚至幾百位，但這些名單我應該怎麼讓合約知道，而且在合約程式碼判斷的時候可以做檢查呢？在 <strong>Web2</strong> 的做法就是去打 <strong>API</strong> 跟後端拿白名單，在 <strong>Web3</strong> 肯定很多人一開始的想法都是把這些名單直接寫在合約內。</p>
<p>雖然 <strong>Web3</strong> 也可以透過 <strong>ChainLink</strong> 去打外部 <strong>API</strong>，但這邊先不討論。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220411/chainLink.png" alt="預言機 Chain Link"></p>
<p>玩了一陣子以太鏈的人一定都知道，不管呼叫合約或者做任何交易都需要支付一定的氣費，而這些費用會依造你交易的複雜程度決定。</p>
<blockquote>
<p><a href="https://www.blocktempo.com/6-important-things-to-know-about-gas-fee-ch-a5074adddf43/"><em>【新手必讀｜加密小知識】關於礦工費（Gas Fee），你不可不知的 6 件事</em></a></p>
</blockquote>
<p>這件事情就從這裡拉開序幕，由於嘟嘟房的合約犯了智能合約很嚴重的錯誤，把白名單存在陣列裡面儲存，在持有白名單的人 <strong>Mint</strong> 的時候，就會去跑迴圈檢查陣列，由於陣列長度可能很長，這時候氣費計算出來就需要花費較高的以太才可能交易成功。</p>
<p>可以觀察一下嘟嘟房的<a href="https://etherscan.io/address/0xae122962331c2b02f837b2aa501d3c5d903ed28a#code">合約</a>，合約的白名單存在一個叫 <strong>whitelistedAddresses</strong> 的陣列，這就是這篇文章出現的原因。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220411/arrayWhiteList.png" alt="陣列存放白名單"></p>
<p>在嘟嘟房當天白名單可以先 <strong>Mint</strong> 發生了 <strong>Out Of Gas</strong> 的事情之後，許多群組都開始討論這個，筆者決定著手研究大部分處理白名單的方式都如何處理。</p>
<hr>
<h3 id="解決方案一"><a href="#解決方案一" class="headerlink" title="解決方案一"></a>解決方案一</h3><p>大部分寫智能合約會避開使用 <strong>Array</strong> 去存資訊，也會避免使用迴圈去跑陣列，主要都是為了避免花費大量的氣費，在白名單使用陣列的替代方案最快速的方式就是使用 <strong>mapping</strong>。</p>
<p>mapping 寫起來會感覺很像是陣列，但其實他是類似 <a href="https://en.wikipedia.org/wiki/Hash_table">hash tables</a>，詳細可以參考 <a href="https://ithelp.ithome.com.tw/articles/10204297">開發智能合約 - mapping 型別 (Day16)</a>，這邊就不仔細探討。</p>
<p>要解決前面提到可能花費高昂氣費的白名單問題，需要解決兩件事情：</p>
<ol>
<li>把大量的名單存在智能合約內上鏈，需要花費不少的費用去存這些資訊</li>
<li>跑陣列一筆一筆檢查你是否在白名單內，會造成礦工難以預估你的氣費，造成容易 <strong>Out Of Gas</strong></li>
</ol>
<p>解決方案一只能解決第二項，就是使用 <strong>mapping</strong>，解決方法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 改用 mapping 存放白名單</span><br><span class="line">mapping(address =&gt; bool) public whitelistedAddresses;</span><br><span class="line"></span><br><span class="line">// 檢查是否在白名單內(修改原本嘟嘟房的函示)</span><br><span class="line">function isWhitelisted(address _user) public view returns (bool) &#123;</span><br><span class="line">    return whitelistedAddresses[_user];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這邊甚至可以優化一下原本的合約檢查方式，改用 <strong>modifier</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 優化檢查使用 modifier</span><br><span class="line">modifier checkWhiteList() &#123;</span><br><span class="line">	require(whitelistedAddresses[msg.sender], &quot;user is not whitelisted&quot;);</span><br><span class="line">	_;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 任何一個想檢查白名單的 Function</span><br><span class="line">function preSaleMint(uint256 _mintAmount) public payable checkWhiteList &#123;</span><br><span class="line">	//...略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="解決方式二"><a href="#解決方式二" class="headerlink" title="解決方式二"></a>解決方式二</h3><p>這個就是本篇的重點了，原本的解決方式一只能解決 <strong>Out Of Gas</strong>，但在剛開始存白名單還是不能避免花掉一些 ETH，如果你的白名單很少，那就無所謂，但如果你像嘟嘟房的白名單有 <strong>898</strong> 筆那就很可觀，尤其在以太坊壅塞的時候。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220411/898WhiteList.png" alt="898筆白名單存放在陣列內"></p>
<blockquote>
<p><em>陣列從 0 開始，所以是 0-897，總共 898 筆，交易紀錄可以看這邊 <a href="https://etherscan.io/tx/0x8c259c8b199826c9820c72c608fa61e52b687877e416073f9daa97138bfb2301">0x8c259c8b199826c9820c72c608fa61e52b687877e416073f9daa97138bfb2301</a></em></p>
</blockquote>
<p>嘟嘟房 <strong>Mint NFT</strong> 的時候剛好是 <strong>NFT</strong> 比較冷清的時候，那時候 <strong>Gas Fee</strong> 還算低，就已經需要花費 <strong>0.689</strong> ETH 去上傳白名單，以當時的價格約莫在四萬八接近五萬台幣。</p>
<p>想像一下今天小幫手上傳白名單之後，啊，不小心漏掉一筆，怎麼辦？只好再傳一次，也許十萬就這樣沒了～</p>
<p>這時候就該本篇紀錄主角出現了，<strong>Merkle Tree</strong>！</p>
<hr>
<h3 id="什麼樹？"><a href="#什麼樹？" class="headerlink" title="什麼樹？"></a>什麼樹？</h3><p><img src="/images/others/loading.gif" data-original="/images/20220411/MerkleTreeBanner.png" alt="Merkle Tree"></p>
<p><strong>Merkle Tree</strong> 又被稱為雜湊樹，是一個存儲 <strong>Hash</strong> 值的一棵樹，其實 <strong>Merkle Tree</strong> 不止在白名單才被利用，早在密碼學就很常出現，然後像是 <strong>比特幣</strong> 的交易資訊。</p>
<blockquote>
<p>*詳細可參考 <a href="https://inf.news/zh-tw/tech/1cd27fc5497a340fc05da2dca9fbcaa2.html">Merkle tree–默克爾樹</a> *******<em>文章的 <strong><strong>merkle tree的數據結構</strong></strong></em></p>
</blockquote>
<p>要說 <strong>Merkle Tree</strong> 提供了什麼好處？簡單說就是可以把好幾筆資料透過 <strong>SHA-256</strong> 的計算後，最後產出一個 <strong>Merkle Root</strong>，也就是上圖的 <strong>Top Hash</strong>，在區塊鏈礦工可以不用一次下載全部的交易紀錄，只需要透過某些節點即可驗證這筆交易是不是真的或者假的，後面我們會再說說怎麼驗證的。</p>
<p>首先通常這棵樹都是顛倒顯示的，根在頂部，葉子在底部；要了解 <strong>Merkle Tree</strong> 要先知知道這棵樹的基本概念，這棵樹有三種類型節點：</p>
<ol>
<li><p><strong>葉節點(Leaf Nodes)</strong> - 位於整棵樹的最底部，通常指資料經過 <strong>SHA-256</strong> 的計算後產出的結果層，像是上圖 <strong>Hash 0-0、0-1、1-0、1-1</strong> 那層。</p>
</li>
<li><p><strong>父節點(Parent Nodes)</strong> - 可位於樹的不同層級，但一定都是在 <strong>葉節點(Leaf Nodes)</strong> 之上，從 <strong>葉節點(Leaf Nodes)</strong> 出來之後會兩兩一組組成一個 <strong>父節點(Parent Nodes)</strong>，直到最後剩下最後一個節點，父節點只會有最多兩個子節點，最少一個。</p>
<blockquote>
<p><em>如果存在基數的筆數資料，將會複製自己的節點，然後在計算 <strong>SHA-256</strong> 產出的結果，如下圖</em></p>
<p><img src="/images/others/loading.gif" data-original="/images/20220411/CardinalityOfMarkleTree.png" alt="基數的筆數"></p>
</blockquote>
</li>
<li><p><strong>根節點(Root Node)</strong> - 位於整棵樹的最頂端，也就是最後算出來的那個 <strong>SHA-256</strong> 總和，任何一棵 Merkle Tree 都只會有一個 <strong>根節點(Root Node)</strong>，而我們需要的就是這個 <strong>根節點(Root Node)</strong>。</p>
</li>
</ol>
<h3 id="怎麼計算？"><a href="#怎麼計算？" class="headerlink" title="怎麼計算？"></a>怎麼計算？</h3><p>在說怎麼使用之前要先說說這棵樹怎麼來的，最簡單就是看圖解釋，先看看下圖。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220411/MerkleTreeSample.png" alt="樹的長出方式"></p>
<p>每一筆資料都會先經過 <strong>SHA-256</strong> 去計算，運算結果，是一個 <strong>64 bytes</strong> 的 **HEX（十六進位）**字串。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HA = SHA256( SHA256(TxA) )</span><br><span class="line">HB = SHA256( SHA256(TxB) )</span><br></pre></td></tr></table></figure>

<p>然後在兩兩一組，先把二個字串連接**（concat）*<em>在一起，變成一個 *<em>64</em>2&#x3D;128 bytes*</em> 的字串，再透過 <strong>double SHA-256</strong> 計算，以次類推，多筆資料就這樣一直 <code>SHA256()</code> 上去，直到最後拿到根節點。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HAB = SHA256( SHA256(HA + HB) )</span><br></pre></td></tr></table></figure>

<p>正因為我們都是透過 <code>SHA256()</code> 去計算拿到字串結果，只要資料稍微有點不一樣，就會影響整棵樹最後的 <strong>根節點(Root Node)</strong>，這時候我們便可以拿著 <strong>根節點(Root Node)</strong> 去驗證我們起始的資料正不正確。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220411/MerkleTreeChanged.png" alt="改變資料後計算結果會錯誤"></p>
<blockquote>
<p><em>只要中間被動過，最後結果就會不一樣，像是 <code>TxG</code> 被改為 <code>TxP</code> 最後結果就會從 <code>Habcdefgh</code> 變成 <code>Habcdefph</code></em></p>
</blockquote>
<hr>
<h3 id="如何驗證？"><a href="#如何驗證？" class="headerlink" title="如何驗證？"></a>如何驗證？</h3><p>聰明的你一定想到了最底層的資料就是我們的白名單列表，每一個地址我們都會透過 <code>SHA256()</code>，最後組出 <strong>Merkle Tree</strong> 並且拿到 <strong>根節點(Root Node)</strong> 又稱 <strong>Merkle Root</strong>。</p>
<p>但是 <strong>Merkle Tree</strong> 會怎麼驗證呢？我們可以簡單透過下圖了解驗證方式。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220411/MerkleTreeVerify.png" alt="驗證所需要提供的值"></p>
<p>假如我們有一個地址 <code>TxG</code> 想要驗證是不是在白名單內，我們必須要先持有 <code>Hh</code> <code>Hef</code> <code>Habcd</code>，這三個用 <code>SHA256()</code> 產出的結果(<strong>藍色框框</strong>)，然後依然按造上面我們說的產生方式，把 <code>TxG</code> 去 <code>SHA256()</code> 產出 <code>Hg</code> 再透過產出的結果跟 <code>Hh</code> 產出下一個字串，最後看看我們拿到的 <strong>Merkle Root</strong> 是否符合我們原本預期的結果。</p>
<p>你可能會想，為何不把所有 <strong>葉節點(Leaf Nodes)</strong> 一次透過 <code>SHA256()</code> 去計算出 <strong>Merkle Root</strong> 呢？大部分的文章都會告訴你因為這樣我們只需要持有部分節點即可，就像 <strong>比特幣</strong> 如果自創節點，我可以使用 <strong>輕節點</strong>(註1) 去建立，不需要創建完整的整份節點，這種解釋對新手(如筆者)可能會比較難以理解，但如果使用白名單的概念來告訴你，你並不需要持有整份白名單直接去算出 <strong>Merkle Root</strong>，只需要拿某一個地址去驗證即可，就方便理解許多。</p>
<blockquote>
<p><em>註1：簡易支付驗證節點，SPV(Simplified Payment Verification) node，不需運行完全節點也可以驗證支付，使用者只需要保存所有的 block header，詳細可參考 <a href="https://www.itread01.com/content/1544927595.html">《詳解比特幣白皮書》-Simplified Payment Verification(簡化的交易驗證(SPV))</a></em></p>
</blockquote>
<p>在這方便的年代我們不需要自己去造輪子，不需要我們自己把 <code>Hh</code> <code>Hef</code> <code>Habcd</code> 手動挑出來送去驗證，這個工作只要透過套件即可創建並且驗證 <strong>Merkle Tree</strong>，接下來就是進入我們實作的部分。</p>
<hr>
<h3 id="實際上陣"><a href="#實際上陣" class="headerlink" title="實際上陣"></a>實際上陣</h3><p>在開始前我們先懶人包知道一下我們需要做什麼：</p>
<ol>
<li>透過 <strong>Merkle Tree</strong> 去對白名單列表產出 <strong>Merkle Root</strong></li>
<li>把 <strong>Merkle Root</strong> 儲存在智能合約上</li>
<li>在 <strong>Mint Function</strong> 執行前透過驗證檢查該地址是否在白名單中</li>
<li>不需花費高額 <strong>ETH</strong> 去更新白名單列表</li>
</ol>
<h3 id="透過-Merkle-Tree-去對白名單列表產出-Merkle-Root"><a href="#透過-Merkle-Tree-去對白名單列表產出-Merkle-Root" class="headerlink" title="透過 Merkle Tree 去對白名單列表產出 Merkle Root"></a>透過 <strong>Merkle Tree</strong> 去對白名單列表產出 <strong>Merkle Root</strong></h3><p>首先我們為了方便先打開 <a href="https://codepen.io/pen/">CodePen</a> 的畫面，這也是一個線上 <strong>IDE</strong>，方便的是如果你有登入，儲存後下次進來程式碼還會在，並且可以把完成的程式碼分享給其他人看，如果修改程式碼並不會影響到你的存檔，他如果儲存的話在自動另外自己存一份他的版本</p>
<p>我們會需要用到 <a href="https://github.com/miguelmota/merkletreejs">merkletreejs</a> 去幫我們產生樹，另外還需要透過 <a href="https://github.com/miguelmota/keccak256">keccak256</a> 去幫我們做 <strong>散列</strong>(註2)，目前 <strong>比特幣</strong> 使用 <strong>SHA256</strong> 而 <strong>以太坊</strong> 使用 <strong>Keccak256</strong>。</p>
<blockquote>
<p><em>註2：散列又稱雜湊，意指透過雜湊函示(Hash Function)，詳細可參考 <a href="https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B8">維基百科 - 雜湊函式</a></em></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20220411/merkletreejs.png" alt="merkletreejs"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20220411/keccak256.png" alt="以太坊使用 keccak256 而 比特幣 使用 SHA256"></p>
<p>點擊 <strong>JS</strong> 那欄的齒輪，把這兩個套件透過 <strong>Github</strong> 文章上的 <strong>CDN</strong> 網址引入使用</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220411/codePen.png" alt="CodePen"></p>
<p>接著點擊 <strong>Save &amp; Close</strong></p>
<p><img src="/images/others/loading.gif" data-original="/images/20220411/saveAndClose.png" alt="儲存並關閉"></p>
<p>對準備好的白名單的列表，進行散列且產出 <strong>Merkle Tree</strong>，這邊產出樹的第三個參數大部分教學都有寫需要加上去，筆者有加沒加似乎都可以，如果你沒有加上去卻發生了問題，可以試看看加 <code>&#123; sortPairs: true &#125;</code> 上去會不會解決</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 白名單列表，可寫死，可從後端拿</span></span><br><span class="line"><span class="keyword">const</span> whitelistedAddresses = [</span><br><span class="line">  <span class="string">&quot;0xE09Eb3a29358dBDE39FE5f77F6597e1Dee0ceb97&quot;</span>,</span><br><span class="line">  <span class="string">&quot;0x7b399B9c5bb519D4258e61100cC5ef2F4Bd9c873&quot;</span>,</span><br><span class="line">  <span class="string">&quot;0x54Ac1F0366724cf30a6E91f32769D95540a18203&quot;</span>,</span><br><span class="line">  <span class="string">&quot;0xdC1Ca18bEeB3DFAEfCEe4aa91491B365A6F5aE12&quot;</span>,</span><br><span class="line">  <span class="string">&quot;0xe5A7B3B752d93514a97a23A9e134aBF6CF01DC6e&quot;</span>,</span><br><span class="line">  <span class="string">&quot;0x59734A5500faDCd7c64B3212538442Cfd26416Cb&quot;</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 對所有名單進行雜湊 - SHA256</span></span><br><span class="line"><span class="keyword">const</span> leafOfNodes = whitelistedAddresses.<span class="title function_">map</span>(<span class="function"><span class="params">address</span> =&gt;</span> <span class="title function_">keccak256</span>(address));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 產生出 Merkle Tree</span></span><br><span class="line"><span class="keyword">const</span> merkleTree = <span class="keyword">new</span> <span class="title class_">MerkleTree</span>(leafOfNodes, keccak256, &#123; <span class="attr">sortPairs</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(merkleTree.<span class="title function_">toString</span>());</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20220411/merkleTreeToString.png" alt="MerkleTree toString"></p>
<p>那串 <code>3263cb94bd59231d2efe63bbad8915f59119fff6a872fa0fa7513f37fb19f141</code> 就是我們需要拿去放在智能合約裡的 <strong>Merkle Root</strong></p>
<p>使用 <code>getRoot()</code> 也可以拿到 <strong>merkleTree</strong> 的 <strong>Root</strong>，將上面的程式碼改一下</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 白名單列表，可寫死，可從後端拿</span></span><br><span class="line"><span class="keyword">const</span> whitelistedAddresses = [</span><br><span class="line">  <span class="string">&quot;0xE09Eb3a29358dBDE39FE5f77F6597e1Dee0ceb97&quot;</span>,</span><br><span class="line">  <span class="string">&quot;0x7b399B9c5bb519D4258e61100cC5ef2F4Bd9c873&quot;</span>,</span><br><span class="line">  <span class="string">&quot;0x54Ac1F0366724cf30a6E91f32769D95540a18203&quot;</span>,</span><br><span class="line">  <span class="string">&quot;0xdC1Ca18bEeB3DFAEfCEe4aa91491B365A6F5aE12&quot;</span>,</span><br><span class="line">  <span class="string">&quot;0xe5A7B3B752d93514a97a23A9e134aBF6CF01DC6e&quot;</span>,</span><br><span class="line">  <span class="string">&quot;0x59734A5500faDCd7c64B3212538442Cfd26416Cb&quot;</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 對所有名單進行雜湊 - SHA256</span></span><br><span class="line"><span class="keyword">const</span> leafOfNodes = whitelistedAddresses.<span class="title function_">map</span>(<span class="function"><span class="params">address</span> =&gt;</span> <span class="title function_">keccak256</span>(address));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 產生出 Merkle Tree</span></span><br><span class="line"><span class="keyword">const</span> merkleTree = <span class="keyword">new</span> <span class="title class_">MerkleTree</span>(leafOfNodes, keccak256, &#123; <span class="attr">sortPairs</span>: <span class="literal">true</span> &#125;); <span class="comment">// 拿整棵樹</span></span><br><span class="line"><span class="keyword">const</span> merkleRoot = merkleTree.<span class="title function_">getRoot</span>().<span class="title function_">toString</span>(<span class="string">&#x27;hex&#x27;</span>); <span class="comment">// 直接拿 Root</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(merkleTree.<span class="title function_">toString</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(merkleRoot);</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20220411/merkleRoot.png" alt="取得 Merkle Root"></p>
<h3 id="把-Merkle-Root-儲存在智能合約上"><a href="#把-Merkle-Root-儲存在智能合約上" class="headerlink" title="把 Merkle Root 儲存在智能合約上"></a>把 <strong>Merkle Root</strong> 儲存在智能合約上</h3><p>拿到 <strong>Root</strong> 後我們需要著手下去寫合約，透過修改之前我們的合約，把 <strong>Mint Function</strong> 多加上一個 <strong>modifier</strong>，如果不曉得怎麼創建合約並且推上鏈，可以先參考之前的文章 <a href="https://rexhung0302.github.io/2022/03/10/20220310/#more">[Solidity Note] - 透過工程師的方式發布 基於 ERC721 的 NFT</a>。</p>
<p>在合約內我們需要引入 <strong>MerkleProof.sol</strong>，接著我們會寫幾項功能：</p>
<ol>
<li>把 <strong>Merkle Root</strong> 存在合約上的變數，以及可以替換這個變數的 <strong>Function</strong></li>
<li>透過 <strong>modifier</strong> 加上 <strong>require</strong> 去驗證我們的地址是否在白名單內</li>
</ol>
<p>請複製以下的程式碼，這是部分程式碼，但還是可以 <strong>Work</strong>，如果需要完整的合約程式碼可以到 <a href="https://rinkeby.etherscan.io/address/0x31bf20772514551cbc7b897914321d98559a9ff9#code">0x31BF20772514551CBC7B897914321D98559a9FF9</a> 去複製，完整的合約包含 設定 <strong>ERC721</strong> 合約及代幣名稱、限制一定金額才能 Mint、盲盒階段、新增刪除控制人員、領出合約餘額、刪除合約…等等。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.4;</span><br><span class="line"></span><br><span class="line">import &quot;@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts/access/Ownable.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts/utils/Strings.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts/utils/cryptography/MerkleProof.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract WhiteListByMerkeleTree is ERC721Enumerable, Ownable &#123;</span><br><span class="line">    string public baseURI;</span><br><span class="line">    string public baseExtension = &quot;.json&quot;;</span><br><span class="line"></span><br><span class="line">    bytes32 public merkleRoot;</span><br><span class="line"></span><br><span class="line">    uint256 public cost = 0.0001 ether; // Mint 價格</span><br><span class="line">    uint256 public maxSupply = 5;</span><br><span class="line">    uint256 public maxMintAmount = 1; // 一次最多只能 Mint 一個</span><br><span class="line"></span><br><span class="line">    constructor(</span><br><span class="line">        string memory _name,</span><br><span class="line">        string memory _symbol,</span><br><span class="line">        string memory _initBaseURI,</span><br><span class="line">    ) ERC721(_name, _symbol) </span><br><span class="line">        baseURI = _initBaseURI;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _baseURI() internal view override returns (string memory) &#123;</span><br><span class="line">        return baseURI;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // public</span><br><span class="line">    function mint(address _to, uint256 _mintAmount, bytes32[] calldata _merkleProof)</span><br><span class="line">        public </span><br><span class="line">        payable</span><br><span class="line">        isContractAvailable</span><br><span class="line">        checkWhiteList(_to, _merkleProof, merkleRoot)</span><br><span class="line">    &#123;</span><br><span class="line">            uint256 supply = totalSupply();</span><br><span class="line">            require(_mintAmount &gt; 0); // 每次必須鑄造超過 0 個</span><br><span class="line">            require(_mintAmount &lt;= maxMintAmount, &quot;You can only adopt 1 BigBenFun at a time&quot;); // 鑄造的數量不可以大於每次最大鑄造數量</span><br><span class="line">            require(supply + _mintAmount &lt;= maxSupply); // 鑄造的數量和當前發行量加起來，不可以超過最大總發行量</span><br><span class="line">            require(cost * _mintAmount &lt;= msg.value, &quot;Ether value sent is not correct&quot;);</span><br><span class="line"></span><br><span class="line">            for(uint256 i = 0; i &lt; _mintAmount; i++) &#123;</span><br><span class="line">                uint256 mintIndex = supply + i;</span><br><span class="line">                while(_exists(mintIndex))&#123;</span><br><span class="line">                    mintIndex++;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if (mintIndex &lt;= maxSupply) &#123;</span><br><span class="line">                    _safeMint(_to, mintIndex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 查看使用者持有的 NFT MetaDate</span><br><span class="line">    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) &#123;</span><br><span class="line">        require(</span><br><span class="line">            _exists(tokenId),</span><br><span class="line">            &quot;ERC721Metadata: URI query for nonexistent token&quot;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        string memory currentBaseURI = _baseURI();</span><br><span class="line">        return bytes(baseURI).length &gt; 0</span><br><span class="line">            ? string(abi.encodePacked(currentBaseURI, Strings.toString(tokenId), baseExtension))</span><br><span class="line">            : &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 檢查是否在白名單內</span><br><span class="line">    modifier checkWhiteList (address _to, bytes32[] calldata _merkleProof, bytes32 _merkleRoot) &#123;</span><br><span class="line">        require(</span><br><span class="line">            MerkleProof.verify(</span><br><span class="line">                _merkleProof,</span><br><span class="line">                _merkleRoot,</span><br><span class="line">                keccak256(abi.encodePacked(_to))</span><br><span class="line">            ), &quot;Address does not exist in WL&quot;);</span><br><span class="line">        _; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 賦值給 Merkle Root</span><br><span class="line">    function setMerkleRoot(bytes32 _merkleRoot) public onlyOwner &#123;</span><br><span class="line">        merkleRoot = _merkleRoot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這邊快速解釋一下，正常我們可以透過 <code>MerkleProof.sol</code> 去幫我們驗證傳進來的地址是不是在白名單內，會需要 <strong>Merkle Root</strong>，這個參數我們存在合約內不寫死，透過 <code>setMerkleRoot()</code> 可以讓我們隨時修改，之後如果有新增餐除白名單，都可以在透過這個 <strong>Function</strong> 去更新，由於更新近來不再是一整段陣列，所以費用會少很多。</p>
<p>在檢查白名單部分這邊使用 <strong>modifier</strong> 把檢查包起來，方便之後其他 <strong>Function</strong> 使用，裡面就是 <code>MerkleProof.sol</code> 的使用方式，需要傳入三個參數，第一個就是我們之前上面提到的，如果需要驗證某個資料是不是正確的，就要把當初跟他是一組的對面那個參數拿出來，像上面的 <code>Hh</code> <code>Hef</code> <code>Habcd</code> 這三個值，把他組成陣列丟進來，怎麼拿出來等等會再說。</p>
<p>第二個參數是我們樹的 <strong>Merkle Root</strong>，如剛剛所提，這個值我們隨時可以透過 <code>setMerkleRoot()</code> 隨時去更改，達到隨時可以更新白名單。</p>
<p>第三個參數是要驗證的白名單地址，需要先透過散列 <code>keccak256()</code> 去把它轉成 bytes32，才能丟進 <code>MerkleProof.verify()</code> 去驗證。</p>
<p>最後只需要在 <code>mint()</code> 的後面加上 <strong>modifier</strong> <code>checkWhiteList()</code> 即可，不知道 <strong>modifier</strong> 用法的可以參考 <a href="https://codingnote.cc/zh-hk/p/321055/">solidity的函數修改器(modifier)</a> 這篇文章。</p>
<p><strong>tokenURI</strong> 這個 <strong>Function</strong> 就是 <strong>ERC721</strong> 一定會有的 <strong>Function</strong>，主要是返回你指定 <strong>Token ID</strong> 的 <strong>URL</strong>，這個 <strong>URL</strong> 會指向 <strong>一張圖</strong> 或 一個 <strong>.json</strong>，詳細也可以參考之前的文章 <a href="https://rexhung0302.github.io/2022/03/10/20220310/#more">[Solidity Note] - 透過工程師的方式發布 基於 ERC721 的 NFT</a>，這邊如果要刪掉也可以，只是最後去 <a href="https://testnets.opensea.io/">Test OpenSea</a> 查看圖會是空的。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220411/baseURI.png" alt="tokenURI &amp; baseURI"></p>
<blockquote>
<p>*這邊是 <a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol#L93">ERC721.sol</a> *******<em>的程式碼，不複寫之後呼叫 tokenURI 就會回傳空字串</em></p>
</blockquote>
<h3 id="在-Mint-Function-執行前透過驗證檢查該地址是否在白名單中"><a href="#在-Mint-Function-執行前透過驗證檢查該地址是否在白名單中" class="headerlink" title="在 Mint Function 執行前透過驗證檢查該地址是否在白名單中"></a>在 <strong>Mint Function</strong> 執行前透過驗證檢查該地址是否在白名單中</h3><p>前面有提到我們要 <strong>Mint</strong> 的時候需要丟 <strong>MerkleProof</strong> 近來，我們先來改寫一下剛剛的 <strong>CodePen</strong> 程式碼。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 白名單列表，可寫死，可從後端拿</span></span><br><span class="line"><span class="keyword">const</span> whitelistedAddresses = [</span><br><span class="line">  <span class="string">&quot;0xE09Eb3a29358dBDE39FE5f77F6597e1Dee0ceb97&quot;</span>,</span><br><span class="line">  <span class="string">&quot;0x7b399B9c5bb519D4258e61100cC5ef2F4Bd9c873&quot;</span>,</span><br><span class="line">  <span class="string">&quot;0x54Ac1F0366724cf30a6E91f32769D95540a18203&quot;</span>,</span><br><span class="line">  <span class="string">&quot;0xdC1Ca18bEeB3DFAEfCEe4aa91491B365A6F5aE12&quot;</span>,</span><br><span class="line">  <span class="string">&quot;0xe5A7B3B752d93514a97a23A9e134aBF6CF01DC6e&quot;</span>,</span><br><span class="line">  <span class="string">&quot;0x59734A5500faDCd7c64B3212538442Cfd26416Cb&quot;</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 對所有名單進行雜湊 - SHA256</span></span><br><span class="line"><span class="keyword">const</span> leafOfNodes = whitelistedAddresses.<span class="title function_">map</span>(<span class="function"><span class="params">address</span> =&gt;</span> <span class="title function_">keccak256</span>(address));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 產生出 Merkle Tree</span></span><br><span class="line"><span class="keyword">const</span> merkleTree = <span class="keyword">new</span> <span class="title class_">MerkleTree</span>(leafOfNodes, keccak256, &#123; <span class="attr">sortPairs</span>: <span class="literal">true</span> &#125;); <span class="comment">// 拿整棵樹</span></span><br><span class="line"><span class="keyword">const</span> merkleRoot = merkleTree.<span class="title function_">getRoot</span>().<span class="title function_">toString</span>(<span class="string">&#x27;hex&#x27;</span>); <span class="comment">// 直接拿 Root</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面已經拿到 MerkleRoot 了，這邊我們需要拿驗證的 MerkleProof</span></span><br><span class="line"><span class="keyword">const</span> mintUserLeaf = <span class="title function_">keccak256</span>(<span class="string">&quot;0xE09Eb3a29358dBDE39FE5f77F6597e1Dee0ceb97&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> mintUserProof = merkleTree.<span class="title function_">getHexProof</span>(mintUserLeaf);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mintUserProof:&quot;</span>, mintUserProof);</span><br></pre></td></tr></table></figure>

<p>大概如下面的概念，我們需要驗證 <code>0xE09Eb3a29358dBDE39FE5f77F6597e1Dee0ceb97</code> 是否在白單內，要先把他散列，然後透過 <strong>merkleTreejs</strong> 提供的 <code>getHexProof()</code>，去拿到藍色框框部分的值，這些結果會是一串陣列。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220411/merkleTreeVerifyAddress.png" alt="驗證地址"></p>
<p>拿到這串陣列就是我們需要的 <strong>MerkleProof</strong>，之後需要丟到合約內讓 <code>MerkleProof.verify()</code> 去驗證。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220411/MerkleProof.png" alt="要拿來驗證的陣列"></p>
<h3 id="不需花費高額-ETH-去更新白名單列表"><a href="#不需花費高額-ETH-去更新白名單列表" class="headerlink" title="不需花費高額 ETH 去更新白名單列表"></a>不需花費高額 <strong>ETH</strong> 去更新白名單列表</h3><p>回到合約這邊來，我們已經知道隨時可以產生新的 <strong>Merkle Root</strong> 去更新白名單，這時候我們先透過 <code>setMerkleRoot()</code> 去把 <strong>CodePen</strong> 的 <strong>Merkle Root</strong> 傳進去。</p>
<p>請記得 <strong>merkleTreejs</strong> 產生出來的值我們需要在前面加上 <code>0x</code> 才可以設定到合約內，這邊將 <code>0x5636657f8352b2652e3a43c07a6e8e7413d37f553633f901fd22c01cf605f9cf</code> 設定進去合約。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220411/setMerkleRoot.png" alt="隨時可以更改 Merkle Root 達到隨時更新白名單又不用花高額氣費需求"></p>
<blockquote>
<p><em>記錄在 <a href="https://rinkeby.etherscan.io/tx/0xd4c7bb2fb1cd2f0a08957c2f1ad6b2764304f40dde4a15d226cb86dcb217ff11">0xd4c7bb2fb1cd2f0a08957c2f1ad6b2764304f40dde4a15d226cb86dcb217ff11</a></em></p>
</blockquote>
<p>設定完記得再去看一下是不是有成功</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220411/getMerkleRoot.png" alt="取得 MerkleRoot"></p>
<p>接下來就可以執行 <code>mint()</code> 了，把相關參數帶進去，這邊帶入地址 <code>0xE09Eb3a29358dBDE39FE5f77F6597e1Dee0ceb97</code> 還有 <strong>Mint</strong> 數量一個，加上剛剛從 <strong>CodePen</strong> 那邊拿到的 <strong>Proof</strong> 陣列，<code>[&quot;0xff5222b3eecfb5315af7137810edbf828ba4069a2dcb427f4567c271e2d9cc20&quot;,&quot;0x64024fbe99ce8546990c17ddf281ceb42af726f7ff8aeae82ef56d6eeafa5dac&quot;,&quot;0x91a14a4390ff7871c7544a0533850a620de989cca0eb04658b885c63e645178b&quot;]</code> </p>
<p><img src="/images/others/loading.gif" data-original="/images/20220411/mintFunc.png" alt="Mint NFT"></p>
<p>送出交易後檢查並成功 <strong>Mint</strong> 紀錄 <a href="https://rinkeby.etherscan.io/tx/0x3dc271c7dd217387cab97c3649d71b34212b9c5a621b6cba13907489c4bca59a">0x3dc271c7dd217387cab97c3649d71b34212b9c5a621b6cba13907489c4bca59a</a></p>
<p><img src="/images/others/loading.gif" data-original="/images/20220411/mintSuccessEtherScan.png" alt="成功紀錄"></p>
<h3 id="仿造錯誤流程"><a href="#仿造錯誤流程" class="headerlink" title="仿造錯誤流程"></a>仿造錯誤流程</h3><p>為了驗證是否不對的地址會失敗，我們這邊傳入不在剛剛 <strong>codePen</strong> 上 <strong>whitelistedAddresses</strong> 陣列內的地址 <code>0xf14cc09860DA951B0310d8192f74Ca1dB7a27C92</code> ，結果會拿到空陣列</p>
<p><img src="/images/others/loading.gif" data-original="/images/20220411/errorMerkleProof.png" alt="錯誤的 Address 拿到錯誤的 Merkle Proof"></p>
<p>但如果發起交易者聰明一點，直接使用你的合約 <strong>Function</strong> 去 <strong>Mint</strong>，自己造假白名單，這邊我們也可以來嘗試一下。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 造假的白名單 只有一開始兩筆一樣 其餘都不同</span></span><br><span class="line"><span class="keyword">const</span> fake_whitelistedAddresses = [</span><br><span class="line">  <span class="string">&quot;0xE09Eb3a29358dBDE39FE5f77F6597e1Dee0ceb97&quot;</span>,</span><br><span class="line">  <span class="string">&quot;0x7b399B9c5bb519D4258e61100cC5ef2F4Bd9c873&quot;</span>,</span><br><span class="line">  <span class="string">&quot;0xf14cc09860DA951B0310d8192f74Ca1dB7a27C92&quot;</span>,</span><br><span class="line">  <span class="string">&quot;0xC87aC2a4Cec03e1913f13ce6fED4Dd4d880362AB&quot;</span>,</span><br><span class="line">  <span class="string">&quot;0x09a8Ba0EEaaA0D5c81ebf0E1C15C771FB3149f80&quot;</span>,</span><br><span class="line">  <span class="string">&quot;0x052EA8Ec718Ac9Bca7E37A9c91717ED219155B1f&quot;</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 對所有假名單進行雜湊 - SHA256</span></span><br><span class="line"><span class="keyword">const</span> fake_leafOfNodes = fake_whitelistedAddresses.<span class="title function_">map</span>(<span class="function"><span class="params">address</span> =&gt;</span> <span class="title function_">keccak256</span>(address));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 產生出假的 Merkle Tree</span></span><br><span class="line"><span class="keyword">const</span> fake_merkleTree = <span class="keyword">new</span> <span class="title class_">MerkleTree</span>(fake_leafOfNodes, keccak256, &#123; <span class="attr">sortPairs</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拿假的 Proof</span></span><br><span class="line"><span class="keyword">const</span> mintUserLeaf = <span class="title function_">keccak256</span>(<span class="string">&quot;0xE09Eb3a29358dBDE39FE5f77F6597e1Dee0ceb97&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fake_mintUserProof = fake_merkleTree.<span class="title function_">getHexProof</span>(mintUserLeaf);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fake_mintUserProof:&quot;</span>, fake_mintUserProof);</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20220411/fakeMarkelProof.png" alt="仿造錯誤的白名單拿 Proof"></p>
<p>這時候會拿到一串陣列， <code>[&quot;0xff5222b3eecfb5315af7137810edbf828ba4069a2dcb427f4567c271e2d9cc20&quot;,&quot;0x76c410014698a9fed99b4053e2389e27c1ea14a0e5cbf4e3a0bdfbc4a7c8daa1&quot;,&quot;0xb536b4e32056b0e9000f4c0b2af31adceb92f637390dfdcaf606ca65a5902f8a&quot;]</code> 與原本的相比明顯就不同了，這時候我們繼續把他送進去 <code>mint()</code> </p>
<p><img src="/images/others/loading.gif" data-original="/images/20220411/mintFail.png" alt="Mint 失敗"></p>
<p>這時候就會跳出錯誤警告，這筆失敗交易記錄在 <a href="https://rinkeby.etherscan.io/tx/0xac16bec0714adf0c9077428a3d7d42e290487cc7b43dd73dd62dbc149b7ffa61">0xac16bec0714adf0c9077428a3d7d42e290487cc7b43dd73dd62dbc149b7ffa61</a></p>
<hr>
<h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p><img src="/images/others/loading.gif" data-original="/images/20220411/allProcess.png" alt="整體流程"></p>
<p>了解完整個過程其實過程是算很簡單的，開發者先行設定 <strong>Merkle Root</strong> 到合約上，隨時也都可以做更改，<strong>Merkle Root</strong> 就像是一個寶箱。</p>
<p>使用者在前端操作 Mint 的時候，前端網站從後端拿白名單，透過 <strong>merkleTreejs</strong> 提供的 <code>getHexProof()</code> 拿到 <strong>msg.sender</strong>(交易發起人) 的 <strong>Merkle Proof</strong>。</p>
<p>最後把這個 <strong>msg.sender</strong> 及 <strong>Proof</strong> 傳進合約內去，透過 <code>MerkleProof.sol</code> 去幫我們驗證是否可以打開寶箱，這個過程也就猶如拿了你給他的材料去鑄造一把鑰匙。</p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>每一次的錯誤都在使我們成長，不過有些教訓是真的滿貴的，嘟嘟房後續看起來是滿有心處理，但也花費了許多錢去補償，透過這個教訓這次也讓筆者學到了怎麼去實作白名單。</p>
<p>這次的完整合約 <a href="https://rinkeby.etherscan.io/address/0x31bf20772514551cbc7b897914321d98559a9ff9#code">0x31BF20772514551CBC7B897914321D98559a9FF9</a> 修正了一些之前第一次發布的問題，像是 <code>totalSupply()</code> 筆者一直認為是總發行數，結果是已經發行出去的數量，筆者也還在努力學習中，如果這篇文章中有任何錯誤，還請不吝嗇指出，感謝各位前輩，也希望和之前在學習前端時一樣，能跟一群志同道合的前端夥伴一起前進。</p>
<p>另外在 <strong>MerkleTree</strong> 的網站也有提供方便的生成器，如果不習慣用 CodePen 的人，也可以使用 <a href="https://lab.miguelmota.com/merkletreejs/example/">MerleTree.js example</a> 去直接產出 <strong>Proof</strong>。</p>
<blockquote>
<p><em>合約裡面有一個判斷寫錯了，關於盲盒的部分，判斷應該是 <code>if(blindBoStep == true)</code> 才對，但我寫反了，後來有透過 <code>SetBlindBoxStep()</code> 把變數改成 <code>false</code>…如果有看到的前輩請手下留情</em></p>
</blockquote>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><a href="https://mirror.xyz/qiwihui.eth/HRifb9gziR1UvVmRcMjDfDvQ9mq7o7FA6BNuCJMFT00">使用 Merkle 树做 NFT 白名单验证</a></li>
<li><a href="https://medium.com/my-blockchain-development-daily-journey/%E5%B0%87-merkle-trees%E7%94%A8%E6%96%BC-nft-%E7%99%BD%E5%90%8D%E5%96%AE-248a5c2c1570">將 Merkle Trees用於 NFT 白名單</a></li>
<li><a href="https://codepen.io/rexhung0302/pen/yLppWmZ?editors=0011">本次白名單的 Proof 產出 CodePen 範例</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10215108?sc=rss.iron">Day13|密碼學初探(6)：Merkle Tree</a></li>
<li><a href="https://www.zhihu.com/question/62844713">区块链中merkle树是如何验证的，它的具体运行机制是？</a></li>
<li><a href="https://academy.binance.com/zt/articles/merkle-trees-and-merkle-roots-explained">Merkle Tree 和 Merkle Root 介紹</a></li>
<li><a href="https://codingnote.cc/zh-hk/p/321055/">solidity的函數修改器(modifier)</a></li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>Solidity</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
        <tag>Solidity</tag>
        <tag>NFT</tag>
        <tag>Mint</tag>
        <tag>OpenSea</tag>
      </tags>
  </entry>
  <entry>
    <title>[Next Note] - 把 TypeScript、ESLint、Prettier、Alias 摻再一起做沙尿牛丸</title>
    <url>/2022/11/06/20221106/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p><img src="/images/others/loading.gif" data-original="/images/20221106/banner.png" alt="Next.js + TS + ESLint + Prettier"></p>
<p>你開發使用 <strong>Tab</strong> 還是 <strong>Space</strong> 縮排呢？兩格還是四格？單引號還是雙引號？</p>
<p>哎呀，<code>git pull</code> 下來怎麼排版又跑掉了…</p>
<p>這個 <strong>function</strong> 傳進來的參數到底是 <strong>string</strong> 還是 <strong>number</strong>？</p>
<p>來吧！這篇文章將你的痛處一次解決。</p>
<span id="more"></span>

<p>如果你剛好想配置專案的 <strong>Alias</strong>，但對於 <strong>ESlint</strong> 及 <strong>TypeScript</strong> 怎麼設定毫無頭緒，也適合這篇文章的閱讀，最後文章會附上 <strong>Source Code</strong>。</p>
<blockquote>
<p><em><strong>統一團隊的 Coding Style 吧，筆者認為 TS + ESLint + Prettier 可以稱為前端規範三劍客</strong></em></p>
</blockquote>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p>這篇文章預設讀者已經有基本的 <code>npm install</code> 能力，或是已經涉略過一點 <strong>CRA</strong> 框架。</p>
<p>本篇文章預設學習前的基本條件需求：</p>
<ul>
<li>會基本的英文</li>
<li>會使用 <strong><a href="https://www.npmjs.com/">npm</a> install</strong> (或 <strong><a href="https://yarnpkg.com/">yarn</a></strong>)</li>
<li><strong>node</strong> 版本 &gt;&#x3D;16.0.0</li>
<li>有一顆熱忱且耐心的心</li>
</ul>
<p>本篇文章將會學到：</p>
<ol>
<li>如何將團隊的 <strong>Coding Style</strong> 規範統一</li>
<li>解決一些可能會碰到的痛點</li>
<li>避免踩到關於規範套件的坑(也許會慢慢更新上來)</li>
</ol>
<hr>
<h3 id="為何要寫這篇"><a href="#為何要寫這篇" class="headerlink" title="為何要寫這篇"></a>為何要寫這篇</h3><p>最近在建置公司的新專案，有鑒於之前工作時，到後期多個前端一起開發後，常常不同的人有不同的 <strong>VSCode</strong> 配置，有的人希望使用雙引號，有的人希望使用單引號。</p>
<p>或許單引號雙引號是小事，或許你曾經碰過有人幫你 <strong>Code Review</strong> 後，修改了一點你的邏輯，但是你發現怎麼改了幾百幾千行？只因為他的縮排跟你不同</p>
<p>為了解決這個情況，在開始接觸 <strong>ESLint</strong> 後，筆者就決定之後的專案要使用了；而講到專案規範也不得不提 <strong>TypeScript</strong>，這次將會使用一個新的專案示範如何將 <strong>ESLint、TypeScript</strong> 還有 <strong>Prettier</strong> 摻在同一個專案變成完美多汁的沙尿牛丸。</p>
<p>順帶一提，這次不使用 <strong>CRA (Create React App)</strong> 建立普通專案是因為剛好在新的專案中筆者需要使用 <strong>Next</strong>，如果你要使用 <strong>CRA</strong> 或者其他 <strong>SSR、CSP</strong> 也是可以的，安裝起來其實大同小異。</p>
<p>另外處使這篇文章的產生也是因為筆者在配置 Alias 的路徑時發生一些錯誤，所以想將過程記錄下來。</p>
<blockquote>
<p><em><strong>備註：這邊需要提及一下，這篇文章將會適合初始化專案沒有使用預設推薦安裝的人，現在安裝 <strong>Next.js</strong> 的時候會詢問是否要一併安裝，下面將會說到兩種安裝方式。</strong></em></p>
</blockquote>
<hr>
<h3 id="Next-是什麼？"><a href="#Next-是什麼？" class="headerlink" title="Next 是什麼？"></a>Next 是什麼？</h3><blockquote>
<p><em><strong>如果你已經會使用 Next 且知道這是什麼了，這段可以跳過</strong></em></p>
</blockquote>
<p>相信會看到這篇的讀者一定大部分都知道 <strong>Next</strong> 了，但可能有些讀者只有使用過 <strong>CRA</strong>，不用太擔心，如果你使用 <strong>CRA</strong> 也可以照著這篇的方式去安裝。</p>
<p><strong><a href="https://nextjs.org/">Next</a></strong> 是基於 <strong>React</strong> 的框架，同時支援 <strong>SSR (Server Side Rendering)</strong> 與 <strong>SSG (Static Side Generation)</strong> 兩種方法，如果你還不清楚什麼是 <strong>SSR、SSG、CSP</strong>…等等的話，可以參考這篇 <a href="https://israynotarray.com/other/20210529/2519649612/">淺談 SPA、CSR、SSR、MPA、SSG 專有名詞</a> 文章。</p>
<p>這篇文章就不著墨於這邊太多，簡單說一下通常會使用 <strong>Next.js</strong> 的絕大多情況，當你學習並且使用 <strong>CRA</strong> 在工作上都穩穩妥妥的，在某天風和日麗的情況下，老闆或 <strong>PM</strong> 突然跟你說 <strong>『欸欸，我們來優化一下網站的 SEO 吧！！』</strong>，相信大部分會開始研究 Next 的夥伴們都是從這邊開始的。</p>
<p>接下來就留給讀者去研究了，如果你有興趣也可以參考這篇鐵人賽文章 - <a href="https://ithelp.ithome.com.tw/users/20110504/ironman/4269">從零開始學習 Next.js</a>，除了為什麼需要使用及 <strong>CSR、SSR</strong> 等等，也會介紹一系列的使用方式</p>
<hr>
<h3 id="安裝方式一"><a href="#安裝方式一" class="headerlink" title="安裝方式一"></a>安裝方式一</h3><p>這是相對簡單的安裝方式，如果你是使用 <strong>CRA</strong> 或者你的專案已經存在一段時間，這時候想要中途加入這些套件，請參照安裝方式二。</p>
<p>首先初始化專案，這個步驟猶如 <strong>Hello World</strong>，都是各位將建立出偉大專案的第一步，參照 <strong>Next.js</strong> 官網的 <strong><a href="https://nextjs.org/docs/api-reference/create-next-app">Create Next App</a></strong> 安裝方式。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npx create-next-app@latest</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yarn create next-app</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pnpm create next-app</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20221106/install_next_way_one.png" alt="安裝方式一"></p>
<p>輸入結束後，<strong>Next.js</strong> 將會詢問三個問題，分別是 <strong>專案名稱</strong>、是否使用 <strong>TypeScript</strong> 以及 是否使用 <strong>ESLint</strong>，如果你都接受使用，這就是安裝最簡單的方式。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20221106/next_architecture.png" alt="專案架構"></p>
<p>建立成功後會像上圖，該需要的設定檔都會出現了。</p>
<p>介紹完第二個安裝方式後，將會介紹如何去簡單配置一些設定，還有如何安裝 <strong>Prettier</strong> 及配置 <strong>Alias</strong>。</p>
<hr>
<h3 id="安裝方式二"><a href="#安裝方式二" class="headerlink" title="安裝方式二"></a>安裝方式二</h3><p>這個方式適用於專案初始時沒有安裝 <strong>TS、ESLint</strong> 的人，或許剛開始你的專案像下圖一樣起始時沒有安裝這些規範套件的。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20221106/install_next_way_two.png" alt="安裝方式二"></p>
<h4 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h4><p>先確定路徑在專案內，接著先安裝 <strong>TypeScript</strong>，如果你還不知道 TS 是什麼可以參考 <strong><a href="https://willh.gitbook.io/typescript-tutorial/introduction/what-is-typescript">什麼是 TypeScript</a></strong>，這邊就不多做介紹。</p>
<p>在終端機內輸入底下指令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yarn add -D typescript</span></span><br></pre></td></tr></table></figure>

<p>這時候不會有什麼變化，在設定 <strong>TS</strong> 及 <strong>ESLint</strong> 的時候，都有一個共通點就是需要透過 <strong>Config</strong> 來設定，所以需要先初始化一個設定檔。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20221106/init_tsc.png" alt="初始化設定檔"></p>
<p>你可以選擇安裝全域的 <strong>TypeScript</strong> 之後使用指令初始化，也可以透過專案裡 <strong>node_modules</strong> 去初始化，如下指令：</p>
<ul>
<li>透過全域初始化</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">全域安裝 TS</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yarn add -g typescript</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在專案目錄底下初始化 TS</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tsc --init</span></span><br></pre></td></tr></table></figure>

<ul>
<li>透過 <strong>node_modules</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在專案目錄底下初始化 TS 設定檔</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./node_modules/.bin/tsc --init</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><em><strong>關於設定檔的內容配置，可以參考 TypeScript 的<a href="https://www.typescriptlang.org/tsconfig">官方文件</a></strong></em></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20221106/next_has_ts_config.png" alt="專案架構"></p>
<p>這時候看一下專案架構，會發現多了一個 <strong>tsconfig.json</strong>，往後關於一些 <strong>JS</strong> 的規範就可以設定在這裡面。</p>
<p>接下來我們需要手動把檔案改成 <strong>.tsx</strong> 結尾，這樣 <strong>TypeScript</strong> 才能監測並且檢查檔案有沒有符合規範。</p>
<p>把專案底下的檔案改完之後，會發現出現很多條紅色蚯蚓，剛開始使用 <strong>TS</strong> 或許會很頭痛，但是日後開發上會幫助很大。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20221106/ts_error_one.png" alt="錯誤一"><br><img src="/images/others/loading.gif" data-original="/images/20221106/ts_error_two.png" alt="錯誤二"></p>
<p>仔細看一下修改完的檔案出現的錯誤，這時候就要開始去修改 <strong>tsconfig.json</strong> 的配置。</p>
<p>如果你使用 <strong>Next</strong> 先安裝一下幾個 <strong>types</strong>，有時候程式碼會報錯也是因為套件找不到該程式碼定義的 <strong>types</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add -D @types/node @types/react @types/react-dom</span><br></pre></td></tr></table></figure>

<p>將 <strong>tsconfig.json</strong> 的配置改為下列：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;dom&quot;</span><span class="punctuation">,</span> <span class="string">&quot;dom.iterable&quot;</span><span class="punctuation">,</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;forceConsistentCasingInFileNames&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noEmit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;isolatedModules&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;preserve&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;incremental&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;next-env.d.ts&quot;</span><span class="punctuation">,</span> <span class="string">&quot;**/*.ts&quot;</span><span class="punctuation">,</span> <span class="string">&quot;**/*.tsx&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;node_modules&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然後重啟專案或者透過 <code>command + p</code> 打開 <strong>VSCode</strong> 的搜尋欄位，輸入 <code>&gt;TypeScript</code> 會有一個重啟 <strong>TS</strong> 的選項可以選擇</p>
<p><img src="/images/others/loading.gif" data-original="/images/20221106/restart_ts.png" alt="重啟 TS"></p>
<p>如果你是使用 <strong>Next.js</strong> 這時候會有第一個需要排解的地方，打開 pages&#x2F;index.tsx 會發現引入 <code>import styles from &#39;../styles/Home.module.css&#39;</code> 底下出現紅紅的蚯蚓，要解決的方法就是在專案底下建立 <strong>next-env.d.ts</strong>，然後內容輸入：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;next&quot; /&gt;</span></span><br><span class="line"><span class="comment">/// &lt;reference types=&quot;next/image-types/global&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> This file should not be edited</span></span><br><span class="line"><span class="comment">// see https://nextjs.org/docs/basic-features/typescript for more information.</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20221106/ts_css_error.png" alt="CSS 的錯誤"></p>
<p>這時候再重啟即可，之後的配置可以隨著專案需求慢慢新增或者修改。</p>
<h4 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h4><p>裝完 <strong>TS</strong> 接下來就是要安裝 <strong>ESLint</strong>，如果你還不知道這是什麼的話可以參考 <strong><a href="https://hackmd.io/@oooooo/eslint">ESLint 是什麼？</a></strong>。</p>
<p>打開終端機，確定目前路徑在專案底下，輸入以下指令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yarn add -D eslint eslint-config-airbnb eslint-plugin-jsx-a11y</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果你的專案是 Next 才需要底下這行</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yarn add -D eslint-config-next</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><em><strong>是否要多安裝 <strong>Airbnb</strong> 可以看使用需求，這是一個 <strong>ESLint</strong> 的規範風格，裡面有定義好一些預設的規範，通常較多人使用，但是也比較嚴格，其餘還有 <strong>Standard</strong> 及 <strong>Google</strong> 可以選擇，有興趣的讀者也可以</strong>餵狗(Google)<strong>搜尋一下或參考這篇文章 <a href="https://israynotarray.com/javascript/20210218/4003233584/">五分鐘快速替專案加上 ESLint</a> 文章底下有介紹各種不同的風格差異，這邊就不多做介紹</strong></em></p>
</blockquote>
<p>接下來一樣要初始化 <strong>ESlint</strong> 的設定檔，你可以選擇安裝全域的 <strong>ESLint</strong> 之後使用指令初始化，也可以透過專案裡 <strong>node_modules</strong> 去初始化，如下指令：</p>
<ul>
<li>透過全域初始化</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">全域安裝 ESLint</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yarn add -g eslint</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在專案目錄底下初始化 ESLint</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">eslint --init</span></span><br></pre></td></tr></table></figure>

<ul>
<li>透過 <strong>node_modules</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在專案目錄底下初始化 ESLint 設定檔</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./node_modules/.bin/tsc --init</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20221106/init_eslint.gif" alt="初始化 ESLint"></p>
<p>初始化的時候會分別問一些 <strong>ESLint</strong> 的問題，這些依照專案需求即可，舉例有下面幾個問題，像是你想在什麼情況下使用 <strong>ESLint、專案是用什麼模式導入模組、專案使用哪個框架</strong>…等等</p>
<ul>
<li>✔ How would you like to use ESLint? · problems</li>
<li>✔ What type of modules does your project use? · esm</li>
<li>✔ Which framework does your project use? · react</li>
<li>✔ Does your project use TypeScript? · No &#x2F; Yes</li>
<li>✔ Where does your code run? · browser</li>
<li>✔ What format do you want your config file to be in? · JSON</li>
</ul>
<p>The config that you’ve selected requires the following dependencies:</p>
<p>eslint-plugin-react@latest @typescript-eslint&#x2F;eslint-plugin@latest @typescript-eslint&#x2F;parser@latest</p>
<ul>
<li>✔ Would you like to install them now? · No &#x2F; Yes</li>
<li>✔ Which package manager do you want to use? · yarn</li>
</ul>
<p>這時候再回去看專案，裡面會多出一支 <strong>.eslintrc.json</strong>，副檔名會依照 <code>What format do you want your config file to be in?</code> 這個問題而不同。</p>
<p>我們稍微修改一下裡面的設定，改為下面的設定，如果你想客製化可以參考 <strong>ESLint</strong> 的 <strong><a href="https://eslint.org/docs/latest/user-guide/configuring/">官網設定</a></strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;browser&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;es2021&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="comment">// 有安裝 eslint-config-airbnb 才需要多配置 &quot;airbnb&quot;</span></span><br><span class="line">        <span class="string">&quot;airbnb&quot;</span><span class="punctuation">,</span> <span class="string">&quot;next/core-web-vitals&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;overrides&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;parser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@typescript-eslint/parser&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;parserOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;ecmaVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;latest&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sourceType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;react&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;@typescript-eslint&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="comment">// 0 = off, 1 = warn, 2 = error</span></span><br><span class="line">        <span class="comment">// suppress errors for missing &quot;import React&quot; in files</span></span><br><span class="line">        <span class="attr">&quot;react/react-in-jsx-scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">// file extension rule</span></span><br><span class="line">        <span class="attr">&quot;react/jsx-filename-extension&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;extensions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;.ts&quot;</span><span class="punctuation">,</span> <span class="string">&quot;.tsx&quot;</span><span class="punctuation">,</span> <span class="string">&quot;.css&quot;</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;quotes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span> <span class="string">&quot;double&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;jsx-quotes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;error&quot;</span><span class="punctuation">,</span> <span class="string">&quot;prefer-double&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;prefer-arrow-callback&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;allowNamedFunctions&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;indent&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;semi&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span> <span class="string">&quot;always&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;operator-linebreak&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="number">2</span><span class="punctuation">,</span> <span class="string">&quot;after&quot;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;overrides&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;?&quot;</span><span class="punctuation">:</span> <span class="string">&quot;before&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;:&quot;</span><span class="punctuation">:</span> <span class="string">&quot;before&quot;</span> <span class="punctuation">&#125;</span> <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;max-len&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">180</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tabWidth&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ignoreComments&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ignoreTemplateLiterals&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;array-element-newline&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;multiline&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;array-bracket-newline&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">// eslint-disable-next-line no-dupe-keys</span></span><br><span class="line">        <span class="attr">&quot;arrow-body-style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;react/function-component-definition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;@typescript-eslint/no-non-null-assertion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;@typescript-eslint/no-unused-vars&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;react/require-default-props&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;react/jsx-no-useless-fragment&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;no-shadow&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;import/no-extraneous-dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;error&quot;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>這時候再回去開你的 <code>/pages/index.tsx</code>，會發現熟悉的紅色毛毛蟲又回來了。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20221106/eslint_error.png" alt="ESLint 錯誤"></p>
<p>如果使用 <strong>VSCode</strong> 可以把滑鼠指向紅色蚯蚓，點選 <strong>快速修復…(⇧⌘ㄡ)</strong>，就可以全部一次依照 <strong>ESLint</strong> 的設定檔規範修正</p>
<p><img src="/images/others/loading.gif" data-original="/images/20221106/fix_all_eslint_error.gif" alt="VSCode 一鍵修復"></p>
<p>此外我們也可以修改一下 <strong>package.json</strong> 的配置，將 <strong>“scripts”</strong> 那塊加上兩行程式碼：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;next lint&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;lint:fix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint --fix --ext .js,.jsx,.tsx .&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20221106/package_add_eslint_setting.png" alt="加入 ESlint 設定程式碼"></p>
<p>接著在終端機輸入 <code>yarn lint</code> 或 <code>npm run lint</code>，就可以檢測程式碼有無符合規範，沒有就會出現下圖。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20221106/run_lint_error.png" alt="ESLint 檢測出錯誤"></p>
<p>而透過 <code>yarn lint:fix</code> 或 <code>npm run lint:fix</code> 則是可以把整個專案包含 <code>.js,.jsx,.tsx</code> 的檔案一次修復。</p>
<p>修復成功如果都無誤就會出現 <code>✔ No ESLint warnings or errors</code>。</p>
<hr>
<h3 id="Prettier"><a href="#Prettier" class="headerlink" title="Prettier"></a>Prettier</h3><p>雖然我們已經有了程式碼的書寫規範，但身為工程師還是會想到更懶的問題，為什麼不能在儲存的時候就幫我們排版排好呢？還要一個一個解決問題或點 <strong>快速修復…(⇧⌘ㄡ)</strong> 太麻煩了吧。</p>
<p>這時候就要發揮工程師精神，讓我們繼續往下安裝：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yarn add -D prettier eslint-config-prettier eslint-plugin-prettier eslint-plugin-react-hooks</span></span><br></pre></td></tr></table></figure>

<p>裝完後接著在新建兩支檔案，分別為 <strong>.prettierrc</strong> 及 <strong>.prettierignore</strong>，前者同樣為設定檔，後者為 <strong>prettier</strong> 要忽略不涵蓋的檔案。</p>
<p><strong>.prettierrc</strong> 的內容改為：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;trailingComma&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tabWidth&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;printWidth&quot;</span><span class="punctuation">:</span> <span class="number">180</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;semi&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;singleQuote&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jsxSingleQuote&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;bracketSpacing&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;endOfLine&quot;</span><span class="punctuation">:</span> <span class="string">&quot;auto&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;arrowParens&quot;</span><span class="punctuation">:</span> <span class="string">&quot;avoid&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>.prettierignore</strong> 的內容改為：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">package.json</span><br><span class="line">package-lock.json</span><br><span class="line">yarn.lock</span><br><span class="line">dist</span><br><span class="line">public</span><br><span class="line">node_nodules/</span><br><span class="line"># 如果專案是 Next.js 才需要配置</span><br><span class="line">.next</span><br></pre></td></tr></table></figure>

<p>然後把 <strong>package.json</strong> 的 <strong>scripts</strong> 做一下修改：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;next dev&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;next build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;next start&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 加入下面三行</span></span><br><span class="line">    <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;next lint&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lint:fix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint --fix --ext .js,.jsx,.tsx .&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prettier --write --ext .js,.jsx,.tsx --config ./.prettierrc&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<p>之後我們就可以先用 <code>yarn lint</code> 檢查程式碼是否符合規範，然後再用 <code>yarn lint:fix</code> 去全域依照 <strong>ESLint</strong> 及 <strong>Prettier</strong> 去修正程式碼。</p>
<h4 id="說好的自動修正呢？"><a href="#說好的自動修正呢？" class="headerlink" title="說好的自動修正呢？"></a>說好的自動修正呢？</h4><p>你一定會有疑問，不是說好要在儲存後就自動修正嗎？沒錯，如果你是使用 VSCode 的話，請在專案底下新增 <code>.vscode/settings.json</code>，然後在 <strong>settings.json</strong> 裡面寫上下面的內容：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.codeActionsOnSave&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;source.fixAll.eslint&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eslint.validate&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;javascript&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>之後儲存就會自動修正了！</p>
<hr>
<h3 id="Alias"><a href="#Alias" class="headerlink" title="Alias"></a>Alias</h3><p>其實 <strong>Alias</strong> 才是促使本篇產出的重點，先說說這是什麼，以往我們在專案中會引入一些靜態文件或者 <strong>Components</strong>，大部分使用的時候我們都是會寫 <code>import Header from &#39;../../components/Header&#39;</code>，但是當我們檔案一多，資料夾一多，就可能會產生出 <code>import Header from &#39;../../../../../components/Header&#39;</code>，在另一個檔案可能又變成 <code>import Header from &#39;../../../components/Header&#39;</code>，可能這個例子比較誇張一點，但這樣確實不美觀且寫起來不舒服啊。</p>
<p>所以就有了 <strong>Alias</strong> 可以使用，使用了之後上面的情況可以統一變成 <code>import Header from &#39;@components/Header&#39;</code>，這就是模板的概念。</p>
<p>首先我們修改一下 <strong>tsconfig.json</strong>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;dom&quot;</span><span class="punctuation">,</span> <span class="string">&quot;dom.iterable&quot;</span><span class="punctuation">,</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;forceConsistentCasingInFileNames&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noEmit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;isolatedModules&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;preserve&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;incremental&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@components/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;components/*&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@pages/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;pages/*&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;next-env.d.ts&quot;</span><span class="punctuation">,</span> <span class="string">&quot;**/*.ts&quot;</span><span class="punctuation">,</span> <span class="string">&quot;**/*.tsx&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;node_modules&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>多了 <strong>baseUrl</strong> 讓 <strong>TS</strong> 知道我們的基本路徑從哪裡開始，下面的 <strong>paths</strong> 則是設定 <strong>Alias</strong> 的部分，我們先這樣設定，然後在專案底下多建立一個 <strong>components</strong> 的資料夾，裡面建立一支 <strong>Header.tsx</strong> 的檔案，內容打上：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Header</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span>Header<span class="tag">&lt;/&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Header</span>;</span><br></pre></td></tr></table></figure>

<p>目前專案架構會如下圖</p>
<p><img src="/images/others/loading.gif" data-original="/images/20221106/add_new_components.png" alt="專案架構"></p>
<p>然後回到 <code>/pages/index.tsx</code> 或者隨便一個 <code>.tsx</code> 檔案裡面，在最上面輸入 <code>import Header from &quot;@components/Header&quot;;</code>，會發現紅色蚯蚓又出來了。</p>
<h4 id="踩坑之旅"><a href="#踩坑之旅" class="headerlink" title="踩坑之旅"></a>踩坑之旅</h4><p>這次碰到最大的問題就是關於引入報錯，依照 <strong><a href="https://devrsi0n.com/articles/eslint-typescript-import-unsolve">ESLint 检查 TypeScript 时报 “Unable to resolve path to module ‘xxx’” 错误</a></strong> 一文指出 <em><strong>『eslint-plugin-import 原本只支持 ES6 模块，从 README 文档也可以看出默认只支持 .js, .jsx 后缀的这类 JS 社区常见的文件。TypeScript 使用的 .ts 和 .tsx 自然是不支持的，更不用说 import 插件还需要相应的 parser 来解决 TypeScript 解析问题。』</strong></em> 我們可以了解到如果使用了 <strong>TS</strong> 及 <strong>ESLint</strong> 再去使用 <strong>Alias</strong> 會被紅色蚯蚓噴得體無完膚。 </p>
<p><img src="/images/others/loading.gif" data-original="/images/20221106/import_alias_error.png" alt="引入錯誤"></p>
<p>目前 <strong>ESLint</strong> 不認得這個路徑，所以我們必須讓它認得，我們只需要安裝幾個套件，讓程式碼規範套件讀得懂即可：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yarn add -D eslint-import-resolver-alias eslint-import-resolver-typescript eslint-plugin-import</span></span><br></pre></td></tr></table></figure>

<p>上面的安裝是為了解決 <strong>ESLint</strong> 不認得我們在 <strong>TS</strong> 設定 <strong>Alias</strong> 的錯誤，安裝完畢後修改 .<code>.eslintrc.json</code> 的內容：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;browser&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;es2021&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;airbnb&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;next/core-web-vitals&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;plugin:@typescript-eslint/recommended&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;overrides&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;parser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@typescript-eslint/parser&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;parserOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;ecmaVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;latest&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sourceType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;import&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;react&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;@typescript-eslint&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;react-hooks&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;prettier&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="comment">// 解決 eslint-plugin-import 只支持 ES6 模块的問題，原本只支援 .js, .jsx</span></span><br><span class="line">        <span class="attr">&quot;import/parsers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;@typescript-eslint/parser&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;.ts&quot;</span><span class="punctuation">,</span> <span class="string">&quot;.tsx&quot;</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        <span class="attr">&quot;import/resolver&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;typescript&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;alwaysTryTypes&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="comment">// ...略</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>透過上面的修改後，就可以正常的讓 <strong>TypeScript</strong> 及 <strong>ESLint</strong> 讀懂我們設定的 <strong>Alias</strong> 模板，也能知道我們要引入的檔案是不是真的存在了。</p>
<hr>
<h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p><strong>TS + ESLint + Prettier</strong> 對於前端可以設置一個很好的團隊規範，也能有效地防止每個人有每個人的寫法造成 <strong>Code Review</strong> 需要去花更多時間解決不必要的衝突。</p>
<p>有了 <strong>ESLint</strong> 我們也可以搭配之前文章 <a href="https://rexhung0302.github.io/2022/03/30/20220330/">[Git Note] - 統一團隊的 Git Commit 格式吧！不要再讓 Commit 亂糟糟</a> 裡提過的 <strong>Husky</strong>，在我們做 <strong>pre-commit</strong> 的時候就先去幫我們跑一次 <strong>Lint</strong>，如果不符合規範就拒絕開發者 <strong>git push</strong>，實在時居家旅行….</p>
<p><img src="/images/others/loading.gif" data-original="/images/20221106/good_medicine.png" alt="必備良藥"></p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>隔了好一段時間沒有寫文章了，這段時間剛好經歷了工作的變動，一些生活上的調整等等，好一段時間都還在思索接下來的規劃。</p>
<p>剛好到了新的工作崗位上碰到了更多新的挑戰，最近卡在這個 <strong>Alias</strong> 上一段時間，當下心裡第一時間想的是一定要把它記錄回來部落格，希望有人因為這個卡關時，可以剛好看到這篇文章。</p>
<p>其中還是要特別謝謝我的大學室友，沒有他可能我這個問題還在卡關呢。</p>
<p>這次因為新專案加上朋友委託筆者幫忙建置 <strong>Electron</strong> 的緣故，碰到了一直很想摸索的 <strong>Next.js</strong>，我想接下來又有更多的東西可以去玩了，下次有機會就來介紹一下 <strong>Electron</strong> 這個酷東西。</p>
<p><strong>Source Code: <a href="https://github.com/RexHung0302/next-ts-exlint-prettier-demo">請點我</a></strong></p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><a href="https://israynotarray.com/other/20210529/2519649612/">淺談 SPA、CSR、SSR、MPA、SSG 專有名詞</a></li>
<li><a href="https://ithelp.ithome.com.tw/users/20110504/ironman/4269">從零開始學習 Next.js</a></li>
<li><a href="https://willh.gitbook.io/typescript-tutorial/introduction/what-is-typescript">什麼是 TypeScript</a></li>
<li><a href="https://israynotarray.com/javascript/20210218/4003233584/">五分鐘快速替專案加上 ESLint</a></li>
<li><a href="https://devrsi0n.com/articles/eslint-typescript-import-unsolve">ESLint 检查 TypeScript 时报 “Unable to resolve path to module ‘xxx’” 错误</a></li>
<li><a href="https://github.com/librarylai">我的前端好夥伴 - Library</a></li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>Next</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
        <tag>React</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>[Tool Note] - 讓 SonarQube 成為你的糞 Code 守門員</title>
    <url>/2022/12/12/20221212/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p><img src="/images/others/loading.gif" data-original="/images/20221212/sonarqube_page_demo.png" alt="SonarQube 糞 Code 守門員"></p>
<p>『奇怪怎麼程式碼越寫越大包？』『同事的 PR 一次常常都幾百幾千行，到底怎麼看？』『專案的技術債越來越重啊…』</p>
<p>你是不是曾經有過這樣的時候呢？當專案越來越多人的時候，發現技術債越來越龐大時，似乎已經來不及了，有沒有什麼好方法呢？</p>
<p>這篇文章將會帶你簡單入門 <strong>SonarQube</strong> ，讓你在代碼審視上更加輕鬆。</p>
<span id="more"></span>

<p><em><strong>這次世足大家都看 <del>買好買滿</del>(看好看滿) 了嗎？ <strong>SonarQube</strong> 將會像是克羅埃西雅強大的守門員一樣，幫你守住重重困難，直到勝利到手。</strong></em></p>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p>這篇文章預設讀者已經有基本的 <code>docker</code> 能力。</p>
<p>本篇文章預設學習前的基本條件需求：</p>
<ul>
<li>會基本的英文</li>
<li>會使用 Terminal</li>
<li>會基本的 Docker 指令(選配)</li>
<li>會使用 Docker Compose(選配)</li>
<li>有一顆熱忱且耐心的心</li>
</ul>
<p>本篇文章將會學到：</p>
<ol>
<li>基礎認識 - 何謂 SonarQube</li>
<li>事前準備 - 安裝環境準備</li>
<li>開始安裝 - 環境安裝及設定</li>
<li>多分支設定 - 套件安裝</li>
</ol>
<p><em><strong>備註：如果不會 Docker 也無妨，SonarQube 官方也有提供下載檔案方式安裝，但是透過 Docker 會更省事，有興趣也可以參考筆者的另一篇文章 <a href="https://rexhung0302.github.io/2021/12/10/20211210/#more">[CI&#x2F;CD Note] — 透過 Docker 快速建立及部署環境</a>。</strong></em></p>
<hr>
<h3 id="為何要寫這篇"><a href="#為何要寫這篇" class="headerlink" title="為何要寫這篇"></a>為何要寫這篇</h3><p>在開始前要先說一下為什麼要寫這篇文章，最近在幾個朋友間的談論，無意間討論到有個工程師常常需要幫同事 <strong>Code Review</strong> ，雖然這個滿正常的，但他說每次的 <strong>PR</strong> 都是幾千行起跳，他都快跪下來了。</p>
<p>先撇除公司的制裁，該工程師詢問有無其它的方法可以解決這個問題，就在這時候有個朋友就跳出來說，試試看 <strong>SonarQube</strong> 啊！</p>
<p>基於好康道相報的原因，筆者將此物分享給公司同事，剛好就獲得一個技術分享的機會，順道將過程記錄下來，方便日後複習，也方便有更多有興趣的人一起研究。</p>
<hr>
<h3 id="基礎認識"><a href="#基礎認識" class="headerlink" title="基礎認識"></a>基礎認識</h3><p><img src="/images/others/loading.gif" data-original="/images/20221212/sonarqube_logo.png" alt="SonarQube Logo v9.7"></p>
<p>這邊就廢話不多說，直接介紹本日主角 <strong>SonarQube</strong> ，這是一款開源的程式碼檢測平台，雖然目前有很多的檢測工具軟體，但滿多都還是需要花費價格，對於一些資金吃緊的團隊來說，這往往只是可替代性的東西，雖然方便，但我們先共體時艱辛苦一下用肉眼檢測就可以解決了對吧？</p>
<p><strong>SonarQube</strong> 是基於 <strong>Java</strong> 開發的程式碼檢測與品質管理系統，因為 <strong>Java</strong> 的關係，是可以跨平台使用的。</p>
<p>先說一下要使用這套工具最後還會搭配一個叫做 <strong>SonarScanner</strong> 的分析工具，整體流程大概會像是下圖一樣，我們會有一台伺服器專門拿來放置 <strong>SonarQube</strong> ，然後會在想要檢測程式碼的那一個專案的伺服器環境內安裝 <strong>SonarScanner</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20221212/sonarscanner_demo.png" alt="大致概念圖"></p>
<p>基於這樣的設定，我們可以在不同專案內建置 <strong>SonarScanner</strong> ，只要最後將掃描後的結果傳遞至放置 <strong>SonarQube</strong> 的伺服器內產出報告即可。</p>
<hr>
<h3 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h3><h4 id="關於-Docker"><a href="#關於-Docker" class="headerlink" title="關於 Docker"></a>關於 Docker</h4><p>這次我們會將 <strong>SonarQube</strong> 透過 <strong>Docker</strong> 的方式安裝在本地，如果你有一台 <strong>VM</strong> 可以放置 <strong>SonarQube</strong> 的話當然更好。</p>
<p>如果你不會或者沒有使用 <strong>Docker</strong> 的話，官方也提供另一種直接安裝的方式，只是這種方式需要注意一下環境的部分，詳細可參考官方文件 <a href="https://docs.sonarqube.org/latest/setup/get-started-2-minutes/">Installing a local instance of SonarQube</a>。</p>
<p>先透過 <strong>Docker</strong> 官網下載安裝 <a href="https://www.docker.com/products/docker-desktop/">Docker Desktop</a>，如果你是 <strong>Win10</strong> 之前的版本，可以參考這篇文章 <a href="https://devconnected.com/how-to-install-docker-on-windows-7-8-10-home-and-pro/">How To Install Docker on Windows 7&#x2F;8&#x2F;10 Home and Pro</a>。</p>
<p><em>備註：如果是 <strong>Win10</strong> 安裝 <strong>Docker Desktop</strong> 也要記得注意一下  <strong>WSL2</strong> 的問題，可參考 <a href="https://learn.microsoft.com/zh-tw/windows/wsl/tutorials/wsl-containers">在 WSL 2 上開始使用 Docker 遠端容器</a></em>。</p>
<p>另外我們會使用到 <strong>Docker Compose</strong> ，這邊就不詳述安裝方式，可參考 <a href="https://www.runoob.com/docker/docker-compose.html">Runoob.com 的 Docker Compose 介紹簡介</a>，內有各種環境安裝介紹。</p>
<h4 id="關於-SonarQube"><a href="#關於-SonarQube" class="headerlink" title="關於 SonarQube"></a>關於 SonarQube</h4><p><img src="/images/others/loading.gif" data-original="/images/20221212/download_sonarqube_doc.png" alt="官網 SonarQube 各版本介紹頁面"></p>
<p><strong>SonarQube</strong> 有幾個版本(詳細可查看 <a href="https://www.sonarqube.org/downloads/">Download SonarQube Document</a>)，基本上分為免費的開源版本及付費的商業版本，這邊我們使用免費的開源版本，不過不用點擊下載，因為我們要透過 <strong>Docker</strong> 來安裝。</p>
<h4 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h4><p>這邊對於 <strong>M1&#x2F;M2</strong> 晶片請用不同安裝方式，由於官方提供的安裝方式會直接安裝到 <strong>AMD64</strong> 的版本，速度會很慢，所以請改透過使用 <a href="https://hub.docker.com/r/mwizner/sonarqube/tags">mwizner&#x2F;sonarqube</a> 這個 <strong>Docker Image</strong> 來安裝。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20221212/arm64_docker.png" alt="ARM64 的 Docker Image"></p>
<p>我們先不操作，如果透過官網查看 <strong>Docker</strong> 的安裝的方式會發現非常簡單。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20221212/docker_install_sonarqube.png" alt="Install SonarQube with Docker"></p>
<p>只要裝好 <strong>Docker Desktop</strong> 後，執行下列代碼後打開網頁輸入 <a href="http://localhost:9000/">http://localhost:9000</a> 訪問即可使用：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -d --name sonarqube -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=<span class="literal">true</span> -p 9000:9000 sonarqube:latest</span></span><br></pre></td></tr></table></figure>

<p>但是呢，透過上面的安裝方式非 <strong>M1&#x2F;M2 Mac</strong> 的朋友應該會用的滿痛苦的，就如上方提到，官網提供的 <a href="https://hub.docker.com/_/sonarqube/">Docker Image - sonarqube</a> 對於使用 <strong>ARM</strong> 晶片的果粉們會速度慢得很痛苦，所以清改用接下來下面的方式。</p>
<hr>
<h3 id="開始安裝"><a href="#開始安裝" class="headerlink" title="開始安裝"></a>開始安裝</h3><h4 id="步驟一"><a href="#步驟一" class="headerlink" title="步驟一"></a>步驟一</h4><ul>
<li><strong>M1&#x2F;M2 Mac</strong> 請使用：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker pull mwizner/sonarqube:latest</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -d -p 9000:9000 --name sonarqube -it mwizner/sonarqube:latest</span></span><br></pre></td></tr></table></figure>

<p><em>備註：版本可自行設定，或者帶入 <strong>latest</strong> 取得最新版</em></p>
<ul>
<li><strong>Window</strong> 系統或非 <strong>M1&#x2F;M2 Mac</strong> 請再隨意的地方創建一支 <code>sonarqube-composer.yml</code> 檔案，然後內容請輸入：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  sonarqube:</span><br><span class="line">    image: sonarqube:lts-community</span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line">    environment:</span><br><span class="line">      SONAR_JDBC_URL: jdbc:postgresql://db:5432/sonar</span><br><span class="line">      SONAR_JDBC_USERNAME: sonar</span><br><span class="line">      SONAR_JDBC_PASSWORD: sonar</span><br><span class="line">    networks:</span><br><span class="line">      - sonarQubeNet</span><br><span class="line">    volumes:</span><br><span class="line">      - sonarqube_data:/opt/sonarqube/data</span><br><span class="line">      - sonarqube_conf:/opt/sonarqube/conf</span><br><span class="line">    expose:</span><br><span class="line">      - 9000</span><br><span class="line">    ports:</span><br><span class="line">      - 9000:9000</span><br><span class="line">  db:</span><br><span class="line">    image: postgres</span><br><span class="line">    ports:</span><br><span class="line">      - 5432:5432</span><br><span class="line">    networks:</span><br><span class="line">      - sonarQubeNet</span><br><span class="line">    environment:</span><br><span class="line">      POSTGRES_USER: sonar</span><br><span class="line">      POSTGRES_PASSWORD: sonar</span><br><span class="line">    volumes:</span><br><span class="line">      - postgresql:/var/lib/postgresql</span><br><span class="line">      - postgresql_data:/var/lib/postgresql/data</span><br><span class="line">  adminer:</span><br><span class="line">    image: adminer</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - 8085:8080</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  sonarQubeNet:</span><br><span class="line">    driver: bridge</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  sonarqube_conf:</span><br><span class="line">  sonarqube_data:</span><br><span class="line">  sonarqube_extensions:</span><br><span class="line">  sonarqube_bundled-plugins:</span><br><span class="line">  postgresql:</span><br><span class="line">  postgresql_data:</span><br></pre></td></tr></table></figure>

<p><em><strong>備註：adminer 的部分可有可無，只是方便使用圖形化介面查看，此外因為 sonarQube 8.0 版本以上不支持 MySQL，所以大部分的教學都會改為使用 PostgreSQL 資料庫</strong></em></p>
<p>儲存後，開啟終端機輸入 <code>docker-compose -f sonarqube-composer.yml up</code>，如果想要讓 <strong>sonarQube</strong> 跑在背景程式裡，參數可以多加一個 <code>-d</code>，改為輸入 <code>docker-compose -f sonarqube-composer.yml up -d</code> 即可。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20221212/sonarqube_docker_composer_demo.gif" alt="跑起來"></p>
<p>之後等待一小段時間，讓 <strong>sonarQube</strong> 服務運行起來，再去瀏覽器輸入 <a href="http://localhost:9000/">http://localhost:9000</a>，就會看到畫面了，如果出現找不到畫面，可能是服務還沒起起來，可以再稍等一下在刷新頁面。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20221212/sonarqube_login.png" alt="登入畫面"></p>
<p>第一次登入帳號密碼都是 <strong>admin</strong> ，登入後系統會要求你改密碼。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20221212/change_pwd.png" alt="更改密碼"></p>
<p>最後可以點開 <strong>Docker Desktop</strong> 查看服務是否都成功啟動了。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20221212/docker_desktop.png" alt="Docker Desktop"></p>
<p><em><strong>備註：如果進入 <a href="http://localhost:9000/">http://localhost:9000</a> 發現有正在更新的圖示，表示架構需要更新，直接到 <a href="http://localhost:9000/setup">http://localhost:9000/setup</a> 就會顯示可以更新的內容了</strong></em></p>
<p><img src="/images/others/loading.gif" data-original="/images/20221212/sonarqube_setup.png" alt="更新系統"></p>
<p><em><strong>備註2：如果服務啟動後掛了，可以參考一下 Terminal 是否有顯示 <code>memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</code> 這種錯誤訊息，是的話代表記憶體不足，詳細解決方式可參考 <a href="https://github.com/SonarSource/docker-sonarqube/issues/282">Sonarqube crashed still with latest image #282</a>，其實只要提高 Docker 映像檔記憶體上線即可，輸入 <code>sysctl -w vm.max_map_count=262144</code>，之後重啟 Container</strong></em></p>
<h4 id="步驟二"><a href="#步驟二" class="headerlink" title="步驟二"></a>步驟二</h4><p><img src="/images/others/loading.gif" data-original="/images/20221212/sonarqube_add_project.png" alt="創建專案"></p>
<p>在接著繼續下去之前我們先在 <strong>sonarQube</strong> 上創建專案，一般免費版是不支援多分支掃描，所以有的教學文章會請你一個分支創建一個 <strong>Project</strong> ，不過等等後面我們會透過安裝插件的方式解決。</p>
<p>登入後應該正常都是空的，點擊 <strong>Add a project</strong> 按鈕。</p>
<p>接下來我們選擇 <strong>Manually</strong> ，筆者沒記錯的話，在 <strong>Community</strong> 版本中，專案類型只支援手動(<strong>Manually</strong>) 的方式。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20221212/sonarqube_create_project_by_manually.png" alt="Manually"></p>
<p>這邊需要再輸入專案的 <strong>Key</strong> ，可以使用 <strong>英文、數字、連字線（-）、底線（_）、句點（.）或 冒號（:）</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20221212/sonarqube_project_key.png" alt="Project Key"></p>
<p>接著會需要設定一個 <strong>Token</strong> 名稱，然後按下 <strong>Generate</strong> 按鈕，產生一個新的 <strong>Token</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20221212/sonarqube_add_token_name.png" alt="新建 Token"></p>
<p>這時候會產生一組 <strong>Token</strong> ，請自行保管好，不要外洩，這就相當於是專案的密碼。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20221212/sonarqube_get_token.png" alt="產出 Token"></p>
<p>產生完 <strong>Token</strong> 之後，點擊 <strong>Continue</strong> 會跳到 <strong>Run analysis on your project</strong> ，這邊會簡單的詢問要跑 <strong>Scanner</strong> 的環境是什麼，也會請你查看 <strong>official documentation of the Scanner</strong> 頁面安裝 <strong>sonar-scanner</strong> ，下面會簡單產出掃描的指令。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20221212/sonarqube_project_select_env.gif" alt="依要分析的專案當下環境去選擇"></p>
<p>這時候就可以繼續下一步啦。</p>
<h4 id="步驟三"><a href="#步驟三" class="headerlink" title="步驟三"></a>步驟三</h4><p><img src="/images/others/loading.gif" data-original="/images/20221212/sonarScanner_download_doc.png" alt="Sonar Scanner"></p>
<p>安裝完 <strong>sonarQube</strong> 之後，就要安裝主角之一的 <strong>sonar-scanner</strong> ，安裝方式有兩種，一種直接將 <strong>sonar-scanner</strong> 下載到本地（如果之後是在 <strong>VM</strong> 上請安裝到 <strong>VM</strong> 的全域環境，還記得嗎？我們上面的圖有說明道，不同專案可以透過 <strong>sonar-scanner</strong> 將掃描報告輸出到 <strong>sonarQube</strong> 去），另一種則是透過 <strong>Docker</strong>。</p>
<p><em>備註：<strong>M1&#x2F;M2 Mac</strong> 的人建議使用 <strong>Mac OS X 64-bit</strong> 的下載點直接安裝，不要透過 <strong>Docker</strong> ，掃描速度會非常慢</em></p>
<h4 id="安裝方式一：Docker"><a href="#安裝方式一：Docker" class="headerlink" title="安裝方式一：Docker"></a>安裝方式一：Docker</h4><p>第一種安裝方式比較簡單；我們先拿隨便一個專案來試試手，選好專案後取得該專案的路徑，然後在 <strong>Terminal</strong> 裡輸入以下內容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    --rm \</span><br><span class="line">    --network=host \</span><br><span class="line">    -e SONAR_HOST_URL=&#x27;http://127.0.0.1:9000&#x27; \</span><br><span class="line">    -e SONAR_SCANNER_OPTS=&quot;-Dsonar.projectKey=$&#123;站台創建的 Project 名稱&#125; -Dsonar.inclusions=/src/*&quot; \</span><br><span class="line">    -e SONAR_LOGIN=&quot;$&#123;站台創建 Token&#125;&quot; \</span><br><span class="line">    -v &quot;$&#123;專案路徑&#125;:/usr/src&quot; \</span><br><span class="line">    sonarsource/sonar-scanner-cli</span><br></pre></td></tr></table></figure>

<ul>
<li><code>$&#123;站台創建的 Project 名稱&#125;</code> 對應到剛剛步驟二的內容為 <strong>local:web-admin</strong></li>
<li><code>$&#123;&#123;站台創建 Token&#125;</code> 對應到剛剛步驟二的內容為那一長串 <strong>Token</strong></li>
<li><code>$&#123;專案路徑&#125;</code> 對應到你要掃描的專案路徑</li>
</ul>
<p><img src="/images/others/loading.gif" data-original="/images/20221212/sonar_scanner_start.gif" alt="跑起來"></p>
<p>在 <strong>SONAR_SCANNER_OPTS</strong> 後面可以加上一些設定，在這邊加上的 inclusions 是指定要掃描的範圍，不指定就會整個資料夾都跑過，詳細可參考 <a href="https://docs.sonarqube.org/latest/project-administration/narrowing-the-focus/">SonarQube Doc</a>。</p>
<p>設定的部分最常見可以設定這幾個</p>
<ol>
<li>exclusions - 需跳檔案設定</li>
<li>inclusions - 涵蓋範圍設定</li>
<li>tests - 測試檔案所在位子</li>
<li>sources - 掃描目錄</li>
</ol>
<h4 id="安裝方式二：本機安裝"><a href="#安裝方式二：本機安裝" class="headerlink" title="安裝方式二：本機安裝"></a>安裝方式二：本機安裝</h4><p>本機安裝按照官方的方式走，裝完之後把掃描命令加到全域去。</p>
<ul>
<li><p><strong>Mac</strong> 新增方式請使用 <code>vi ~/.bash_profile</code> 或 <code>vi ~/.zshrc</code> 後在裡面新增 <code>export PATH=&quot;$HOME/Desktop/sonar-scanner-4.7.0.2747-macosx/bin:$PATH&quot;</code></p>
</li>
<li><p><strong>Window</strong> 新增方式可參考 <a href="https://www.java.com/zh-TW/download/help/path_zh-tw.html">我要如何設定或變更 PATH 系統變數？</a> 或 <a href="https://shaochien.gitbooks.io/command-line-and-environment-variable-tutorial/content/environment-variable.html">環境變數 (Environment Variable)</a></p>
</li>
</ul>
<p><em>備註：如果 <strong>Token</strong> 遺忘了，可以透過 <strong>My Account</strong> 裡面的 <strong>Security</strong> 再去 <strong>Generate</strong> 一個 <strong>Token</strong></em></p>
<p><img src="/images/others/loading.gif" data-original="/images/20221212/generate_token.png" alt="產生新 Token"></p>
<h4 id="步驟四"><a href="#步驟四" class="headerlink" title="步驟四"></a>步驟四</h4><p>在跑完分析後，我們就可以刷新 <a href="http://localhost:9000/">http://localhost:9000</a> 頁面，這時候看一下剛剛新增的 <strong>Project</strong> ，應該會長得不一樣，點擊該 <strong>Project</strong> 進去，可以查看更多訊息。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20221212/after_scanner_project.png" alt="掃描結束"></p>
<p>點擊進入後，我們可以看到更多的訊息，包含**技術債、Code Smells…**等等，其中這邊會有兩個頁籤，一個為 <strong>New Code</strong> 一個為 <strong>Overall Code</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20221212/scanner_new_code_and_over_call_code.png" alt="頁籤切換"></p>
<p>下面會有線圖可以看，這個可以很清楚地看到技術債是否有被解決或者越來越嚴重，另外也可以看到目前測試的涵蓋率。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20221212/scanner_report.gif" alt="技術債及測試涵蓋率"></p>
<hr>
<h3 id="多分支設定"><a href="#多分支設定" class="headerlink" title="多分支設定"></a>多分支設定</h3><p>當我們一個專案多人開發，不太可能會只有掃描 <strong>Develop</strong> 或者 <strong>Master</strong> ，我們可能會想要在同事發 <strong>PR</strong> 時就先檢測一次，這時候請安裝 <strong>Community</strong> 版本分支套件。</p>
<p>下面將會有三個步驟來安裝這個套件，如果你覺得不好理解或者不知道怎麼操作，也可以參考官方的指南 <strong><a href="https://github.com/mc1arke/sonarqube-community-branch-plugin#installation">Manual Install</a></strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20221212/manual_install_doc.png" alt="套件安裝步驟"></p>
<h4 id="步驟一-1"><a href="#步驟一-1" class="headerlink" title="步驟一"></a>步驟一</h4><p>這邊需要先到套件 <a href="https://github.com/mc1arke/sonarqube-community-branch-plugin">Sonarqube Community Branch Plugin - GitHub</a> 去查看目前適用於你 <strong>SonarQube</strong> 版本的掃描分支套件，不同版本必須安裝不同版本的掃描套件版本。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20221212/sonarqube_community_branch_plugin_version.png" alt="查看適用的版本"></p>
<p>因為我們剛剛安裝的 <strong>SonarQube Version</strong> 為 <strong>lts</strong> ，所以查看版本的方式可以直接到 <a href="http://localhost:9000/">http://localhost:9000</a> 頁面的底部看。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20221212/sonarqube_version.png" alt="版本在此"></p>
<p>對應 <strong>8.9.10</strong> 我們必須要安裝 <strong>Plugin Version</strong> 為 <strong>1.8.2</strong> 的版本，請到 <a href="https://github.com/mc1arke/sonarqube-community-branch-plugin/releases">sonarqube-community-branch-plugin - Release</a> 去下載 <strong>1.8.2</strong> 的 <strong>jar</strong> 檔。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20221212/sonarqube_plugin_release.png" alt="請找到對應版本的 Release，下載 .jar 檔"></p>
<h4 id="步驟二-1"><a href="#步驟二-1" class="headerlink" title="步驟二"></a>步驟二</h4><p>安裝的壓縮要複製一份放到 <strong>SonarQube</strong> 的 <strong>Docker</strong> 映像檔中，輸入 <code>docker cp $&#123;檔案位置&#125; sonarqube_sonarqube_1:/opt/sonarqube/extensions/plugins</code></p>
<p><img src="/images/others/loading.gif" data-original="/images/20221212/sonarqube_docker_container.png" alt="將壓縮檔放到這裡面去"></p>
<p>筆者這邊最後輸入為 <code>docker cp /Users/rexHung/Downloads/sonarqube-community-branch-plugin-1.8.2.jar sonarqube_sonarqube_1:/opt/sonarqube/extensions/plugins</code>。</p>
<p>輸入結束後透過 <strong>Docker</strong> 終端機進到 <strong>SonarQube</strong> 映像檔去看是否有成功複製進去。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20221212/docker_cli_terminal.png" alt="進入終端機"></p>
<p>進入終端機輸入 <code>cd /extensions/plugins/</code> 接著輸入 <code>ls</code>，如果有出現剛剛下載的 <strong>.jar</strong> 檔，就是成功了</p>
<p><img src="/images/others/loading.gif" data-original="/images/20221212/terminal_ls.png" alt="查看套件資料夾"></p>
<h4 id="步驟三-1"><a href="#步驟三-1" class="headerlink" title="步驟三"></a>步驟三</h4><p>然後輸入 <code>cd ../../</code> 回到外層，再輸入 <code>cd conf</code>，接著輸入 <code>vi sonar.properties</code>，在滑到檔案最底部，貼上下面兩行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sonar.web.javaAdditionalOpts=-javaagent:./extensions/plugins/sonarqube-community-branch-plugin-1.8.2.jar=web</span><br><span class="line">sonar.ce.javaAdditionalOpts=-javaagent:./extensions/plugins/sonarqube-community-branch-plugin-1.8.2.jar=ce</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20221212/vi_sonar_properties.png" alt="修改設定檔"></p>
<p>結束後重啟這個映像檔，再次輸入 <a href="http://localhost:9000/">http://localhost:9000</a> 進入到站台頁面，這時候應該會看到跳出警示，點擊 <strong>I understand the risk</strong> 按鈕。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20221212/installation_of_plugins.png" alt="我了解風險！！"></p>
<p>之後點擊上面的 <strong>Administration</strong> 之後，點擊 <strong>Marketplace</strong> ，點擊底下的 <strong>Installed</strong> ，確認套件已安裝成功。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20221212/confirm_plugin_installed.png" alt="確認套件已經安裝成功了"></p>
<h4 id="步驟四-1"><a href="#步驟四-1" class="headerlink" title="步驟四"></a>步驟四</h4><p>最後我們需要更改掃描的命令，還有切換到即將發 <strong>PR</strong> 的分支，然後在 <strong>Terminal</strong> 上輸入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    --rm \</span><br><span class="line">    --network=host \</span><br><span class="line">    -e SONAR_HOST_URL=&#x27;http://127.0.0.1:9000&#x27; \</span><br><span class="line">    -e SONAR_SCANNER_OPTS=&quot; \</span><br><span class="line">    -Dsonar.projectKey=$&#123;站台創建的 Project 名稱&#125; \</span><br><span class="line">    -Dsonar.inclusions=/src/* \</span><br><span class="line">    -Dsonar.pullrequest.key=$&#123;輸入隨意數字&#125; \</span><br><span class="line">    -Dsonar.pullrequest.branch=$&#123;分支名稱&#125; \</span><br><span class="line">    -Dsonar.pullrequest.base=master&quot; \</span><br><span class="line">    -e SONAR_LOGIN=&quot;$&#123;站台創建 Token&#125;&quot; \</span><br><span class="line">    -v &quot;$&#123;專案路徑&#125;:/usr/src&quot; \</span><br><span class="line">    sonarsource/sonar-scanner-cli</span><br></pre></td></tr></table></figure>

<p>這邊一樣也可以使用 <strong>Local</strong> 指令的方式去掃描：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sonar-scanner \</span><br><span class="line">    -D&quot;sonar.projectKey=$&#123;站台創建的 Project 名稱&#125;&quot; \</span><br><span class="line">    -D&quot;sonar.sources=.&quot; \</span><br><span class="line">    -D&quot;sonar.host.url=http://localhost:9000&quot; \</span><br><span class="line">    -D&quot;sonar.login=$&#123;站台創建 Token&#125;&quot; \</span><br><span class="line">    -D&quot;sonar.inclusions=*/**/*_src.js&quot; \</span><br><span class="line">    -D&quot;sonar.pullrequest.key=$&#123;輸入隨意數字&#125;&quot; \</span><br><span class="line">    -D&quot;sonar.pullrequest.branch=$&#123;分支名稱&#125;&quot; \</span><br><span class="line">    -D&quot;sonar.pullrequest.base=master&quot;</span><br></pre></td></tr></table></figure>

<p>掃描結束後刷新 <a href="http://localhost:9000/">http://localhost:9000</a> 頁面去看一下專案裡的分支，點擊下拉後就會發現一個新的分支出現了，也就是剛剛掃描的分之，就此，大功告成！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20221212/branch_plugin_working.png" alt="新分支出現了"></p>
<hr>
<h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>其實這次一聽到有工具可以檢測程式碼是否有 <strong>Code Smell</strong> 且可以整合到 <strong>CI&#x2F;CD</strong> 內就非常吸引我，抓了時間就研究起來，這套工具不只是可以單純手動跑檢測，如果搭配 <strong>Git Pre-commit</strong> 的指令，或是 <strong>GitLab Pipeline</strong> ，肯定都能發揮莫大用處。</p>
<p>筆者一直想要摸索 <strong>CI&#x2F;CD</strong> 的領域，從 <strong>Docker</strong> 入門後突然地接觸到這套工具，讓我有了點方向，我想下次就可以來玩玩 **Docker + SonarQube + Bot 推播…**等等的 <strong>Side Project</strong>。 </p>
<p>依照官網的介紹，還能搭配 <strong>SonarLint</strong> 做一個全方位的檢測，從程式碼的書寫規則檢測一直到技術方面的檢測，其中能搭配 <strong>Jenkins</strong> 等等打出一套組合拳，真的是相當香啊！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20221212/sonar_dev_cycle.png" alt="Dev Cycle"></p>
<p><strong>備註：如果沒有要使用 SonarQube 的時候，請記得要把 Docker Container 關閉，不然這個工具其實很吃資源的，這大概是這工具唯一的缺點，畢竟他會把你整份代碼 Clone 下來去分析</strong></p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>這次只是在本地部署，下次會開始嘗試部署到服務器上去，到時候或許又會碰到不一樣的坑，不過寫程式的樂趣就在這邊，解決問題的同時或的成就感，同時筆記下來或許能幫助到下一個也正要啟程的勇者，希望本篇文章能幫助到你&#x2F;妳。</p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><a href="https://ithelp.ithome.com.tw/articles/10215842">開源程式碼檢測平台：SonarQube</a></li>
<li><a href="https://medium.com/starbugs/%E5%8E%9F%E4%BE%86%E7%A8%8B%E5%BC%8F%E7%A2%BC%E5%93%81%E8%B3%AA%E4%B9%9F%E5%8F%AF%E4%BB%A5%E8%A2%AB%E6%AA%A2%E6%B8%AC-%E5%88%9D%E6%8E%A2-sonarqube-14e99687806e">原來程式碼品質也可以被檢測：初探 SonarQube</a></li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>SonarQube</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
        <tag>SonarQube</tag>
        <tag>SonarScanner</tag>
        <tag>CI/CD</tag>
      </tags>
  </entry>
  <entry>
    <title>[Life Note] - LINE TAIWAN TechPulse 2023</title>
    <url>/2023/02/19/20230219/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p><img src="/images/others/loading.gif" data-original="/images/20230219/LINE_TechPulse_2023.gif" alt="LINE TAIWAN TechPulse 2023"></p>
<p>因為疫情關係，繼上次 <strong><a href="https://rexhung0302.github.io/2020/12/19/20201219/">LINE TAIWAN TechPulse 2020</a></strong> - LINE 開發者大會結束後，終於又迎來了實體的線下 <strong>2023</strong> 年的開發者大會，這次消息一出來就趕緊報名了，一起來瞧瞧今年都說了些什麼吧。</p>
<span id="more"></span>

<p>這次的開發者大會如果筆者沒記錯，是第八屆，場地這次移動到了 <strong>台北市復興南路一段39號</strong> 的 <strong>微風廣場Breeze</strong>，相對之前的 <strong>臺北和平籃球館</strong> 及 <strong>南港展覽館二館</strong> 又小了更多，之前 2020 因為疫情的關係場地縮小了，今年不確定是不是因為疫情關係又更小了，這次的大會也沒有會中餐點及會後紀念品，不過該有的技術攤位還是有。</p>
<blockquote>
<p><em>嚴重提醒：本篇也是以筆記及心得為主的文章，如果內容有誤，敬請不吝社指出也請多多海涵，感謝各路大神！另外圖片會有模糊問題因為當天臨時靠手機拍攝，且會傾斜是因為位置為隨機入座，筆者在側邊，還請各位大神見諒。</em></p>
<p><em><strong>另外每位講者筆者皆有做一些重點筆記，內容或許不完全正確，如果有誤還很歡迎在下方留言告知，感激不盡。</strong></em></p>
</blockquote>
<hr>
<h3 id="本次重點"><a href="#本次重點" class="headerlink" title="本次重點"></a>本次重點</h3><p><img src="/images/others/loading.gif" data-original="/images/20230219/check_in.JPEG" alt="今年報導方式從簡了"></p>
<p>每年的開發者大會都會圍繞一些主題，而在會場都會看見相關應用，例如 <strong>2019 的 LINE貼文串推薦系統(Timeline Post Recommender System)、2020 的 AI 人臉辨識系統</strong>，但今年似乎就…一切從簡，往年都會用一些新技術來消化入場速度，甚至報名都是隨機抽籤，不一定能入場的，今年則是有報有獎，但沒有線上轉播。</p>
<blockquote>
<p><em><strong>我想 LINE 是不是發現搞來搞去傳統的方式最方便？！省時省力又快速</strong></em></p>
</blockquote>
<p>今年一樣分為 <strong>上半場</strong> 及 <strong>下半場</strong>，下半場分為 <strong>A（在地化技術分享）</strong> 及 <strong>B（創新技術分享）</strong> 兩廳分開進行。</p>
<ul>
<li><strong>LINE台灣公司總經理 - 陳立人(Roger Chen)</strong></li>
<li><strong>LINE台灣資深技術總監 - 陳鴻嘉(Marco Chen)</strong></li>
<li><strong>高層主管及員工</strong> 介紹 <strong>公司目前近況</strong>、<strong>碰到的問題及挑戰</strong> 及 <strong>解決方式</strong></li>
<li><strong>前端團隊的 Infra 開發介紹 - Colin Lin</strong></li>
</ul>
<p>-&gt; 簡單給個重點：</p>
<ol>
<li><p><strong>LINE這一年的進度及未來展望</strong></p>
</li>
<li><p><strong>我們碰到什麼問題以及我們如何解決應對的</strong></p>
</li>
<li><p><strong>介紹 AI 相關的 NLP 模型，以訊息查證為例介紹如何透過訓練模型來精簡文章摘要</strong></p>
</li>
<li><p><strong>實習生的心路歷程(B廳)</strong></p>
</li>
</ol>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/LINE_2023_start.JPEG" alt="準備好就開始了"></p>
<hr>
<h3 id="報到"><a href="#報到" class="headerlink" title="報到"></a>報到</h3><p>今年改為馬上報名馬上有入場資格，入場時也是直接出示手機報名後系統給的序號就可以拿卡片入場。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/line_sign_in.jpg" alt="報名方式"></p>
<p>拿著卡片入場後就可以隨機著個位子坐下了，今年的會廳看起來小了不少。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/car_view.JPEG" alt="入場卡"></p>
<blockquote>
<p><em><strong>再次讚賞這次的人臉辨識入場，現在很多場所都開始類似的裝置了，可能有人會擔心安全問題，下面會在提及。</strong></em></p>
</blockquote>
<p>滿幸運的是活動當天天氣很好，沒有下雨。</p>
<hr>
<h3 id="上半場"><a href="#上半場" class="headerlink" title="上半場"></a>上半場</h3><h5 id="第一位-LINE台灣總經理-陳立人-Roger-Chen"><a href="#第一位-LINE台灣總經理-陳立人-Roger-Chen" class="headerlink" title="第一位(LINE台灣總經理 - 陳立人(Roger Chen))"></a>第一位(LINE台灣總經理 - 陳立人(Roger Chen))</h5><p><img src="/images/others/loading.gif" data-original="/images/20230219/roger_key_note.JPEG" alt="Key Note"></p>
<blockquote>
<p><em>今年談論主要著重在 <strong>『開發治理』、『資料治理』及『文化養成』</strong> 三個面向優化管理系統，加上 <strong>標準化前端開發流程、導入 DevOps 思維、DORA 四大指標、優化內部可觀察性技術架構</strong>，讓團隊在研發上更敏捷且不失安全性。 - 資料來源可參考 <a href="https://today.line.me/tw/v2/article/JP3DqVx">LINE Today 文章</a></em></p>
</blockquote>
<p>今年一樣是由 Roger 開場，從 資安、開發、資料處理、27001 27701 資案保證（對外）、遠端開發、零信任架構、工程師提供代碼透過自動化（Smart Test)追蹤確保代碼品質、在資安即安全的保證下保持高效開發，一直到 APIM 、LINE Bank 作為整場會議的序章開幕。</p>
<hr>
<h5 id="第二位-LINE台灣資深技術總監-陳鴻嘉"><a href="#第二位-LINE台灣資深技術總監-陳鴻嘉" class="headerlink" title="第二位(LINE台灣資深技術總監 - 陳鴻嘉)"></a>第二位(LINE台灣資深技術總監 - 陳鴻嘉)</h5><p><img src="/images/others/loading.gif" data-original="/images/20230219/marco.JPEG" alt="Key Note"></p>
<p>過程重點提及 <strong>資料治理</strong> 的重要性，因為 LINE 是擁有廣大使用者的平台，所以資安團隊持續強化 <strong>『零信任架構』</strong>；實作的方面從 <strong>LINE Invoice、LINE Sticker、直播購物（LINE LIVE Commerce Assistant App）</strong>，甚至這幾年開始火紅的 <strong>NFT</strong> 相關平台 <strong>DOSI</strong>，還有前端 <strong>Infra</strong> 團隊建立出的開發 <strong>Flow</strong>…等等，先提及了一遍上午會議的重點核心，讓聽眾先能抓到整場會議的脈絡。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/DORA.JPEG" alt="DORA"></p>
<p>為了應應更龐大的組織架構及使用者，<strong>LINE</strong> 開始注重在規劃治理的方面，較不同與往年技術為重，結合了 <strong>DepOvs</strong> 的技術能力，還有透過導入 <strong>DORA</strong> 四大指標去檢視內部技術主管與產品關係人的開發品質。</p>
<blockquote>
<ol>
<li><p>Lead time for changes - 改版的前置時間：從原始碼交付到成功上線運行的間隔時間。</p>
</li>
<li><p>Deployment frequency - 部署頻率：在指定時間之內，提交並部署正式上線的Production版本的多寡。</p>
</li>
<li><p>Time to restore service - 服務恢復時間：從災後停機狀態恢復服務所花的平均時間（MTTR）。</p>
</li>
<li><p>Change failure rate – 改版失敗率：藉由計算Production（產出版）部署的成敗比值，測量Production部署失敗發生的頻率並立刻採取補救措施（例如Rollback回溯）。</p>
</li>
</ol>
<p>資料來源 - <a href="https://www.find.org.tw/index/wind/browse/836046f75d299e20a75e994535f411d0/"><br>DORA DevOps四大關鍵指標和成熟度等級之探討</a></p>
</blockquote>
<p>在 <strong>Marco</strong> 上台開始後，與接下來的另為兩位講者 <strong>Bryan Lin(DevOps)</strong> 及 <strong>John Lin(SRE)</strong> 穿插式的開始帶入每一項議題的內容。</p>
<hr>
<h5 id="第三位-DevOps-Bryan-Lin"><a href="#第三位-DevOps-Bryan-Lin" class="headerlink" title="第三位(DevOps - Bryan Lin)"></a>第三位(DevOps - Bryan Lin)</h5><p><img src="/images/others/loading.gif" data-original="/images/20230219/DevOps.JPEG" alt="Bryan"></p>
<p>今年因為重點在資料治理的部分，所以由 <strong>Bryan</strong> 在 <strong>DevOps</strong> 的角度出發，點出開發團隊往往 <strong>開發通常會先陷入先開發的問題，程式碼品質相對落後，且依照紙本規範很難讓全體質量統一</strong>，所以開發團隊從 **Branch management 的 Flow 管理、Source Code Review、Security Check（使用者資料及安全性）及 Testing strategies…**等等，及導入 <strong>CI&#x2F;CD</strong> 方式提升開發品質，確保某些可規範的條件再一致性內。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/Difficulties.JPEG" alt="Difficulties"></p>
<p>以往的一些紙本規範難以確保團隊品質一制性。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/SornaQube.JPEG" alt="SonarQube"></p>
<p><strong>Bryan</strong> 提到他們使用了例如 <strong>SonarQube</strong> 這個工具，透過 <strong>CI&#x2F;CD</strong> 去自動檢測每次的 <strong>PR</strong> 是否有影響 <strong>SEO</strong> 及 <strong>Code Smell</strong>，這些都能統整出一個分數，再加上可視化的 <strong>DashBoard</strong>，讓分數來當一個準則評判這次的改動是否是 <strong>符合效益</strong> 或 <strong>有淺在的危機</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/PR_check.JPEG" alt="PR Check"></p>
<p>在 <strong>CI&#x2F;CD</strong> 的部分，透過工具輔助可以大大淺少人工審核的成本及失誤，也可以提昇整體團隊的開發一制性。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/converage.JPEG" alt="Coverage"></p>
<p>最後 <strong>Bryan</strong> 也有提到，他們並非是一系之間導入所有的測試或者規範，在初期他們都是 <strong>先求有再求好</strong>，但此先求有非彼先求有，多數專案開發時，都會被 <strong>PM</strong> 及 <strong>老闆</strong> 要求先有東西後面再來改，<strong>LINE</strong> 團隊的有則是先能覆蓋大範圍的測試目標，確保團隊在統一基準上，再慢慢補齊小範圍的測試，在 <strong>A&#x2F;B Testing</strong> 的幫助下，團隊至少都能保持在一定的水準之上，畢竟人們常說的，數據數字會說話。</p>
<blockquote>
<p><em><strong>Bryan 也提到團隊文化很重要，好還要更好，才能使程式碼品質卓越。</strong></em></p>
</blockquote>
<blockquote>
<p><em>筆者重點小筆記：可觀測性工程文化、八條依據 十五條準則、往往開發通常會先陷入先開發，但品質相對落後，依照紙本規範很難讓全體質量統一，所以需要依靠 CICD、準則舉例 Branch management 即 Source Code Review 要求你只需要符合規範 不在意你怎麼做、先要求有再求好、Security Check（使用者資料及安全性）、Testing strategies 儘量在 Pull request 自動跑完所有測試、Task for release AB Testing、做到卓越不比做到菁英困難</em></p>
</blockquote>
<hr>
<h5 id="第四位-SRE-John-Lin"><a href="#第四位-SRE-John-Lin" class="headerlink" title="第四位(SRE - John Lin)"></a>第四位(SRE - John Lin)</h5><p><img src="/images/others/loading.gif" data-original="/images/20230219/John.JPEG" alt="John"></p>
<p>前部分 <strong>Bryan</strong> 著重在開發的流程部分，而 <strong>John</strong> 則著重在操作的部分，前面有提到 LINE 團隊將各種數據做成可視化的 <strong>DashBoard</strong>，方便開發者觀測，</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/Monitoring_to_Observability.JPEG" alt="Monitoring to Observability"></p>
<p>透過可觀測性的平台，讓開發者直接一眼明瞭目前的各個專案狀況如何，也利於 <strong>Outage handling</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/Outage_process.JPEG" alt="Outage Process"></p>
<p>透過有效的觀測平台搭配上錯誤的處理流程，可以快速的 <strong>Handle</strong> 意外的發生，使用者應該也不會想要在某天使用 <strong>LINE</strong> 的時候，發生意外錯誤，而且這個錯誤修復必須要大半天吧（對於每一個產品都是這樣的）？</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/governance_flow.JPEG" alt="Governance Flow"></p>
<p>最後由 <strong>LINE台灣資深技術總監 - 陳鴻嘉</strong> 透過一張 <strong>LINE</strong> 目前 <strong>Data Governance</strong> 架構圖為 <strong>DevOps</strong> 的章節作為一個 <strong>Ending</strong>。</p>
<blockquote>
<p><em>筆者重點小筆記：Monitoring、應用指標實作進系統、必須清楚定義目標以得到告警、IMON2、remote-writing、Prometheus 改進、Outage Handling、開發人員必須要互有聯絡方式，發現問題能清楚定位問題點 MTTR、介紹故障的處理流程</em></p>
</blockquote>
<hr>
<h5 id="第五位-Data-Dev-Shawn-Tsai"><a href="#第五位-Data-Dev-Shawn-Tsai" class="headerlink" title="第五位(Data Dev - Shawn Tsai)"></a>第五位(Data Dev - Shawn Tsai)</h5><p><img src="/images/others/loading.gif" data-original="/images/20230219/AI_platform.JPEG" alt="AI"></p>
<blockquote>
<p>每年都不免俗的要談到關於 <strong>AI</strong> 的部分，在 <strong>技術總監 - 陳鴻嘉</strong> 的一張投影片結束之後由下一位講者 <strong>Shawn</strong> 開始相關介紹。</p>
<p><em><strong>接下來兩位講者皆是前幾年也會出席的資料工程團隊成員</strong></em></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/NLP.JPEG" alt="NLP"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/NLP_2.JPEG" alt="NLP 2"></p>
<blockquote>
<p><em><strong>在 AI 方面工程團隊則以三大要素，Data（資料）、NLP Models（自然語言處理模型）、Service Integration（服務整合）建構出 NLP（自然語言處理 賦能的應用。每個服務皆有各自的 NLP Tasks（自然語言處理任務需求），而有些任務的需求共通，為了更有效率地使用 NLP Models，且可通用於 LINE 旗下不同的服務領域，工程團隊提出「自然語言處理即服務」（NLPaaS）的概念，將自然語言處理（NLP）賦能應用的建構流程標準化，快速建構出不同的NLP Models，加速自然語言的處理，因此研發出「SmartText自然語言處理平台」。 - 重點節錄至 LINE Today 文章 <a href="https://today.line.me/tw/v2/article/JP3DqVx">LINE TAIWAN TECHPULSE 2023 年度開發者大會重磅登場</a></strong></em></p>
</blockquote>
<p><strong>LINE</strong> 研發的 <strong>SmartText 2.0</strong> 是 <strong>1.0</strong> 的進階版，初版 <strong>SmartText</strong> 自然語言處理平台可透過模型進行例如 <strong>文件分類（Classifier）、多標籤分類（Multi-label Classifier）、主題偵測（Topic Detection）</strong>…等等，經過 <strong>2.0</strong> 的優化，平台計畫可執行更多元的 <strong>NLP</strong> 任務，包括 <strong>文章摘要、換句話說、問答、客製化廣告文案生成</strong>…等等。</p>
<p>上面聽起來很複雜，舉個會議上的實際例子來說，圖隊他們必須在一些訊息上進行審核，從原本的需要一個一個人工審核，在 smartText 1.0 時可以利用模型的幫忙，進行 <strong>文章分類（Classifier）</strong>，在對文章內容做 <strong>多標籤分類（Multi-label Classifier）</strong>，最後給予文章相對應的 <strong>Hash 標籤（Topic Detection）</strong>，接著在 <strong>SmartText 2.0</strong> 的優化之後加上視覺化平台 <strong>Smart Text NLPaas</strong> 的操作下，可以快速的對文章進行摘要分析，甚至在客服對話時，能夠在 <strong>NLP Tasks（自然語言處理任務需求</strong>）的目標上，快速回應對方他期待的答覆，協助處理各種文字自動化複雜需求。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/how_we_build_it.JPEG" alt="How we build it"></p>
<blockquote>
<p>而團隊如何做到就是接下來第六位講者會帶到的部分</p>
</blockquote>
<blockquote>
<p><em>筆者重點小筆記：Text is everywhere、特定服務領域 與 NLP 模型、需要 資料 模型 獨特領域資料 包裝應用 整合應用 太麻煩了 所以中間三項改為 準備適當材料（node code)、適當分類有助於快速找到該領域的專家去審查是否描述適當、先讓標籤審核過濾，方便小編快速篩選文章、透過 Hash Tag 快速分類，作為使用者搜尋的推薦、長篇文章透過文章摘要來作為訓練模型，以 Api 形式提供給內部使用、透過換句話說讓 AI 機器人可以知道如何提供使用者多個相關選擇、透過問與答來訓練某個特定領域的知識</em></p>
</blockquote>
<hr>
<h4 id="第六位-Data-Dev-Penny-Sun"><a href="#第六位-Data-Dev-Penny-Sun" class="headerlink" title="第六位(Data Dev - Penny Sun)"></a>第六位(Data Dev - Penny Sun)</h4><p><img src="/images/others/loading.gif" data-original="/images/20230219/LP_Platform_Architecture.JPEG" alt="Penny Sun"></p>
<p><strong>Penny</strong> 也是在之前大會上出席過的講者，由她來介紹這整個過程是如何運作，以及該 <strong>NLP</strong> 未來的發展方向。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/NLP_pipeline.JPEG" alt="NLP Pipeline"></p>
<p>透過這張圖 <strong>Penny</strong> 讓大家快速了解 <strong>NLP</strong> 是如何運作，在基本的三個步驟 <strong>Data Preparation（資料準備）、Modeling（Mode 準備） 及 Evaluation（資料分析）</strong>，搭配自動化工具，完成一整個 <strong>NLP Tasks（自然語言處理任務需求）</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/beyond_NLP.JPEG" alt="Beyond NLP"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/NLP_evolution_process.JPEG" alt="NLP Evolution process"></p>
<p>最後在 <strong>Beyond NLP</strong> 的投影片之後，<strong>Penny</strong> 請我們想像並且向我們講解接下來的 <strong>NLP</strong> 發展。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/NLP_life.JPEG" alt="NLP Life"></p>
<p>從起床透過文字需求請模型分析出今天的新聞文章摘要出來，到上班分享簡報時的文章重點分類，然後下午接到朋友傳來的訊息，透過應該回應的文字去搜尋圖片，透過圖片回應，最後回家請模型及語音播放，閱讀童書給小孩子聽。</p>
<blockquote>
<p><em>筆者重點小筆記：介紹如何透過 NPL 查證訊息、舉例用 LINE 訊息查證為需求，透過使用分類器去訓練 NLP 模型，餵入資料，之後其他服務也可以使用 分類器 模型、之後把服務包成 API 也轉成 UI 介面，讓非工程師也能使用、避免 Garbage in garbage，打造 UI、Smart Text 1.0 -&gt; Beyond NLP</em></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/next_10_year_reboot.JPEG" alt="Next 10 Year Reboot"></p>
<p>最後一樣由 Marco（陳鴻嘉）來做一個結尾，這將是接下來 LINE 的 10 年展望。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/AI_web3.JPEG" alt="AI &amp; Web3"></p>
<p>當然一定脫離不了 <strong>AI</strong> 的主題，不過還多了 <strong>Web3</strong> 的部分，筆者自己私心認為， <strong>Web3</strong> 的部分應該不會佔那麼重，甚至未來不會是重點也有可能，畢竟台灣這邊也是輔助開發 <strong>DOSI</strong>，在 <strong>Web3</strong> 的方面還是有許多需要克服的技術及現實層面問題（就舉最簡單的 中心化 及 去中心化 問題，詳細這邊不討論），不過總結還是讓人非常期待依 <strong>LINE</strong> 的技術 <strong>Web3</strong> 會搞出什麼火花。</p>
<hr>
<h4 id="第七位-LINE-Bank-資訊長-Leo-Weng"><a href="#第七位-LINE-Bank-資訊長-Leo-Weng" class="headerlink" title="第七位(LINE Bank 資訊長 - Leo Weng)"></a>第七位(LINE Bank 資訊長 - Leo Weng)</h4><p><img src="/images/others/loading.gif" data-original="/images/20230219/Leo.JPEG" alt="Leo Weng"></p>
<p><strong>Leo</strong> 主要介紹關於 <strong>LINE Bank</strong> 的生態系介紹，我們的生活食衣住行育樂，一定透脫離不了錢的部分，支付就是這一切的核心。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/line_bank_ecosystem.JPEG" alt="LINE Bank Ecosystem"></p>
<p>在這部分 <strong>LINE</strong> 也是出了很多關於 <strong>LINE Bank</strong> 的 <strong>API</strong>，對於 <strong>B2B</strong> 及 <strong>B2C</strong> 都是很好利用的一個功能。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/LINE_Bank_APIM.JPEG" alt="LINE Bank APIM"></p>
<p>這邊 <strong>Leo</strong> 也介紹了一些使用 <strong>LINE API</strong> 的業者，還有介紹如何輕鬆串接 <strong>LINE Bank</strong> 的功能。</p>
<blockquote>
<p><em>筆者重點小筆記：LINE Bank、經融生態圈願景（中心為 LINE Bank 周圍為許多產品）、實現技術策略（Internal 及 External，分為 B2B 及 B2C）、API 管理系統（APIM、各種銀行的 API 管理）、LINE 開發及串接介紹（內外部使用者都可以透過 APIM）</em></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/LINE_Bank_next_10_reboot.JPEG" alt="Next 10 years"></p>
<blockquote>
<p><em><strong>最後一樣有接下來 10 年的展望</strong></em></p>
</blockquote>
<hr>
<h4 id="第八位-LINE-Infra-Team-Colin-Lin"><a href="#第八位-LINE-Infra-Team-Colin-Lin" class="headerlink" title="第八位(LINE Infra Team - Colin Lin)"></a>第八位(LINE Infra Team - Colin Lin)</h4><p><img src="/images/others/loading.gif" data-original="/images/20230219/colin.JPEG" alt="Colin"></p>
<p>這位講者要講的主題一直是筆者很有興趣的，主要筆者專注於前端，但對於前端規範及統籌一直覺得資源來的不如後端多，所以一直很期待這個部分。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/Single-repo.JPEG" alt="Single Repo Monolith"></p>
<p>以前端的架構來說，前後端分離或許可以說是近幾年才開始流行的，所幸筆者剛加入前端行列的時候，業界已經開始吹起前後端分離的號角，但由於前端不管技術再怎麼玩，最終都還是需要回歸到 <strong>網頁三寶（HTML、JS、CSS）</strong>，在大部分情況，我們都只需要將 <strong>HTML</strong> 放上機器，透過渲染到網頁的方式就可以看到內容，我們也不需要單獨去租一台伺服器放前端的專案，所以大部分公司都做法都還是前端有把畫面切出來就好，甚至有的不管你用什麼技術，反正最後丟上去，能顯示就好（這邊先不討論公司政策或者團隊文化），相對在開發規範上不如後端來的嚴謹。</p>
<p>在前端分離出來後，漸漸的大部分公司都開始使用需要會框架去作為新人的門檻，而框架專案的管理及檔案規模，又不如普通網頁三寶來得小，所以很快的大部分公司都是每個不同前端專案分開管理，好處是各自管理，互不相干，不會因為別人的修正改動而出錯，你只需要跟負責你專案的團隊一起處理問題就好。</p>
<p>但，專案一但龐大了呢？又或者，公司業務量暴增，越來越多專案了呢？</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/Monorepo.JPEG" alt="Monorepo"></p>
<p>所以之後又有了 <strong>Polyrepo</strong> 及 <strong>Monorepo</strong>，這個概念適用於前端也適用於後端，總的來署都是為了要解決維護困難的問題，最近漸漸的越來越多團隊開始改用 <strong>Monorepo</strong> 了，真的是合久必分分久必合呢。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/detecting_affected.JPEG" alt="Detecting Affected"></p>
<p>由於專案自動化建置可以省下不少時間成本，所以 <strong>LINE Infra</strong> 團隊也定義出一連串的部署過程，包括中間的 <strong>Unit Test</strong>、<strong>E2E Test</strong>、<strong>SonarQube</strong>…等等。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/Nx.JPEG" alt="Nx"></p>
<p><strong>Colin</strong> 也指出團隊利用 <a href="https://nx.dev/getting-started/intro">Nx</a>，來作為分析工具使用。</p>
<blockquote>
<p><em><strong>不曉得 SonarQube 是什麼的朋友，推薦可以看一下筆者的另一篇文章 <a href="https://rexhung0302.github.io/2022/12/12/20221212/">[Tool Note] - 讓 SonarQube 成為你的糞 Code 守門員</a></strong></em></p>
<p><em>筆者重點小筆記： 如何有效管理管理眾多 API、有限人力獲得最大化開發、從單一 Repo 改到 Polyrepo，最後改為 Monorepo、NX 開發使用介紹</em></p>
</blockquote>
<hr>
<h3 id="中場休息"><a href="#中場休息" class="headerlink" title="中場休息"></a>中場休息</h3><p><img src="/images/others/loading.gif" data-original="/images/20230219/lunch.JPEG" alt="Lunch"></p>
<p>很快到了中午的休息時間，今年並沒有中場活動，所以筆者就出去晃晃順便醒醒腦，這邊推薦一下會場附近的一間拉麵店，<a href="https://www.facebook.com/%E5%8D%9A%E5%A4%9A%E5%B9%B8%E9%BE%8DHakata-KORYU-1994391200597943/?paipv=0&eav=AfYOu0w_-mOyiU-Xq7MFmz1Ljlve9-eryN1EFewQUP94lna8vp2UPhZstQknkprwmKg">博多幸龍拉麵</a>。</p>
<blockquote>
<p><em>筆者重點小筆記：點餐後拉麵要等滿久的，位子及空間很小，但整體價位份量 Ok</em></p>
</blockquote>
<hr>
<h3 id="下半場"><a href="#下半場" class="headerlink" title="下半場"></a>下半場</h3><p><img src="/images/others/loading.gif" data-original="/images/20230219/LINE_2023.JPEG" alt="2023"></p>
<p>下半場筆者挑了 <strong>B廳</strong>，主要筆者對於實際應用比較有興趣。</p>
<h4 id="Flex-開發者-戴均民"><a href="#Flex-開發者-戴均民" class="headerlink" title="Flex 開發者 - 戴均民"></a>Flex 開發者 - 戴均民</h4><p><img src="/images/others/loading.gif" data-original="/images/20230219/flex_bot.JPEG" alt="Flex Bot"></p>
<p>第一位講者是戴均民，開發了一個幫助開發者的機器人，以往我們需要得知使用者傳送過來是什麼，可能需要實際在街上 <strong>webhook</strong> 後，在後端 <strong>log</strong> 出 <strong>LINE</strong> 那邊的一些接收回應格式，透過這個機器人可以方便的得知一些資訊。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/flex_reply.JPEG" alt="Flex Bot"></p>
<p>透過這些預期會接收到的資訊格式，方便使用者可以更快速的開發，另外機器人也適用於群組內，講者說了一個非常方便的情境，將 <strong>android</strong> 及 <strong>ipad</strong> 還有 <strong>Web</strong> 端的三方用戶拉近群組，透過預期會傳送的模板程式碼內容傳遞出去，可以馬上知道三個裝置接收到的展示差異。</p>
<blockquote>
<p><em>關於講者 FLex 的簡報有興趣可以參考<a href="https://github.com/taichunmin/line-techpulse-2023">此處</a></em></p>
<p><em>筆者重點小筆記：Flex 開發人員工具，透過機器人回傳 Event 的 Json</em></p>
</blockquote>
<hr>
<h4 id="As-an-Engineers-let’s-build-the-CRM-system-via-LINE-Official-Account-2-0-Caesar-Chi"><a href="#As-an-Engineers-let’s-build-the-CRM-system-via-LINE-Official-Account-2-0-Caesar-Chi" class="headerlink" title="As an Engineers, let’s build the CRM system via LINE Official Account 2.0 - Caesar Chi"></a>As an Engineers, let’s build the CRM system via LINE Official Account 2.0 - Caesar Chi</h4><p><img src="/images/others/loading.gif" data-original="/images/20230219/caesar_chi.JPEG" alt="Caesar Chi"></p>
<p>第二位講者則是介紹關於 <strong>CRM</strong> 的一些串接實作內容、透過 <strong>Liff</strong> 與 <strong>LINE OA</strong> 實作出 <strong>CRM</strong>、<strong>Rocket Chat</strong> 訊息傳輸還有轉拋功能、 <strong><a href="https://www.jkg.tw/p3609/">n8n</a></strong> 及 <strong><a href="https://www.zendesk.tw/">zendesk</a></strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/translate_service.JPEG" alt="訊息轉拋"></p>
<p>內容並不是太創新的應用，但過程內容非常扎實，介紹如何透過 <strong>Rocket Chat</strong> 去做到轉拋客戶給另一位客服的功能，甚至不需要自己 <strong>Coding</strong> 就能創建出 <strong>CRM</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/caesar_chi_profile.JPEG" alt="Caesar Chi Profile"></p>
<blockquote>
<p>有興趣的讀者可以關注一下這個講者</p>
<p><em>筆者重點小筆記：ORM 系統打造介紹、LINE OA 介紹、Messaging API 及 Liff 整合、Rocket chat（ORM 讓非工程人員可以方便上手）、轉拋的問題（Middleware）N8N</em></p>
</blockquote>
<hr>
<h4 id="Mini-app-Alan-Peng"><a href="#Mini-app-Alan-Peng" class="headerlink" title="Mini-app - Alan Peng"></a>Mini-app - Alan Peng</h4><p><img src="/images/others/loading.gif" data-original="/images/20230219/Alan.JPEG" alt="Alan"></p>
<p>第三位講者主要提及關於 <strong>Mini-app</strong> 及 <strong>Liff</strong> 的差異，還有說明一下目前 <strong>Mini-app</strong> 的申請模式為推薦制，所以也不是想使用就可以使用，不過未來如果開放使用，確實會像是加強版的 <strong>LIFF</strong>，其中可以透過 <strong>Service Message</strong> 回覆制定過的格式訊息給用戶，不過會有數量上限及格式必須先通過 <strong>LINE</strong> 審核就是了。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/mini-app-tool.JPEG" alt="Mini App 才有的"></p>
<p>這是 <strong>Mini-app</strong> 才有的功能。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/mini-app-apply.JPEG" alt="Mini App 申請"></p>
<p>申請必須經過層層審核，相關的 <strong>Reply Message</strong> 也是必須經過 <strong>LINE</strong> 審核，並無法像 <strong>LINE OA</strong> 後台制定好就可以。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/partner_contact.JPEG" alt="Mini App 聯繫"></p>
<p>雖然目前為申請制，不過如果有興趣還是可以透過掃描 <strong>QRCode</strong> 去聯繫相關的人員。</p>
<blockquote>
<p><em>筆者重點小筆記：Mini-app、回顧，上線案例，常見問題、Mini-app 與 Liff 差異，都是基於 Liff 框架做出來的，mini-app 可以整合 LINE 內部服務（In-line Search, pin to home page, service message 不可客製化 推播有限制）、mini-app 需透過內部審核才能發佈、目前台灣為邀請制、message template 為下拉式、mini-app 可以不需要透過要求先加入官方帳號 快速與 Line Official Account 整合</em></p>
</blockquote>
<hr>
<h4 id="Approach-to-New-Year’s-traffic-of-LINE-Sticker-Koji-Lin"><a href="#Approach-to-New-Year’s-traffic-of-LINE-Sticker-Koji-Lin" class="headerlink" title="Approach to New Year’s traffic of LINE Sticker - Koji Lin"></a>Approach to New Year’s traffic of LINE Sticker - Koji Lin</h4><p><img src="/images/others/loading.gif" data-original="/images/20230219/Koji.JPEG" alt="Koji"></p>
<p>這位講者主要透過過年大家會傳送大量貼圖碰到的問題，導出他們如何在活動開始事先防範，以及活動進行中的應對，還有發生緊急問題的處理方式，也是落實前面提到的 <strong>開發治理</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/average_growth_rate.JPEG" alt="成長率評判"></p>
<p>在活動開始前透過之前的 <strong>API</strong> 使用情況，來推論某個時間點或者尖峰時段，會需要能接受多少的壓力，即使之前沒有相同的 <strong>API</strong>，也可以找類似相關的 <strong>API</strong> 來判斷。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/testing_on_prod.JPEG" alt="正式環境測試"></p>
<p>另外他們也會在上線前找來相關的人員（<strong>LINE</strong> 的各個功能由不同的團隊負責），主要找重要的 <strong>API</strong> 而非全部，例如發送貼圖的時候需要用到 <strong>LINE Message</strong> 團隊的 <strong>API</strong>，他們會把相關的人員找來模擬一次流程。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/Monitoring.JPEG" alt="監控"></p>
<p>活動開始後避免不了重要崗位的工程師 <strong>on call</strong> 之外，也使用 <strong>Monitor</strong> 來快速瀏覽目前重點機器狀況。</p>
<blockquote>
<p><em>筆者重點小筆記：貼圖流量的控制與預防、新年的貼圖活動（日本新年抽籤舉例）會碰到流量問題，自己 Team 的流量與其他 Team API 流量控制、拆開馬上所需要知道改變的 API 請求 與 不需要馬上知道的 API 解決流量過高問題、貼圖有創作者使用與一般使用者使用、透過往年的流量去估出接下來可能的流量，如果沒有往年紀錄，就用類似的 Service 去預估、伺服器 CPU 抓 70%、On call team 處理突然的流量問題、模擬高峰關 API 會發生什麼事情，用一個 work shop 叫各 Team 人員來模擬。</em></p>
</blockquote>
<hr>
<h4 id="LINE-Today-A-B-Testing-Wilson-Wang"><a href="#LINE-Today-A-B-Testing-Wilson-Wang" class="headerlink" title="LINE Today A&#x2F;B Testing - Wilson Wang"></a>LINE Today A&#x2F;B Testing - Wilson Wang</h4><p><img src="/images/others/loading.gif" data-original="/images/20230219/wilson_wang.JPEG" alt="Wilson"></p>
<p><strong>Wilson</strong> 則是講到了他們如何透過 <strong>A&#x2F;B Testing</strong> 來自動推薦相關的內容給 <strong>LINE Today</strong> 的使用者，過程包含使用者常點擊的區域、查看內容的喜好…等等，於幾年前的會議 <strong>LINE</strong> 講者也有提到類似的內容，今年也算是看到功能更完善了。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/A_B_testing_cycle.JPEG" alt="Testing Cycle"></p>
<h4 id="How-JS-task-force-improve-the-quality-of-projects-in-LINE-Taiwan-Tom-Wu"><a href="#How-JS-task-force-improve-the-quality-of-projects-in-LINE-Taiwan-Tom-Wu" class="headerlink" title="How JS task-force improve the quality of projects in LINE Taiwan - Tom Wu"></a>How JS task-force improve the quality of projects in LINE Taiwan - Tom Wu</h4><p><img src="/images/others/loading.gif" data-original="/images/20230219/Tom_wu.JPEG" alt="Tom Wu"></p>
<p><strong>Tom</strong> 介紹了他們為了 <strong>Test</strong> 打造的一系列功能，<strong>Integration Test</strong>、<strong>Unit Test</strong> 及 <strong>End-to-end test</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/Js_task_Monitoring.JPEG" alt="JS Task Monitoring"></p>
<p>當然也免不了監控，透過上線前的各種 <strong>Test</strong>，可以有效的評估出你的程式碼是否夠完善，有了這些數字的輔助，你可信心指數會更高，而且內容也提及，切勿重複 <strong>Test</strong> 你的 <strong>Code</strong>，需要重點測試。 </p>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/lighhouse.JPEG" alt="LightHouse"></p>
<p>透過分數能更明確知道自己的該次 <strong>PR</strong> 異動是對專案有所提升還是下降，也能比較優跟劣兩者差異是為什麼，另外這個過程也可以避免掉需要定義出一個硬邦邦又可能不準確的規範，例如我們的標準就是 60 分，透過每次分數不同高低的差異分析，才能更明確知道問題所在。</p>
<blockquote>
<p><em>筆者重點小筆記：Test 打造統一的 Test guild line、最少的 Code 打造最高的信心指數、不要重複 Test 你的 Code、先用 Integration test 大範圍覆蓋測試產品，在用 Unit Test 測試一些重點 performance，需要定義出這些 Code 的重點、利用 SonarQube 去測試覆蓋率、Grafana 測試 pull request 的覆蓋率及 code small、串接 LighhouseCI去測試、測試 NPM 的 Security，使用 Renovate 去測試你的 dependencies 是否有問題，使用 SonarQube 做靜態掃描，使用ZAP動態把你的網站起起來後去攻擊的你網站，尋找並發現缺陷。</em></p>
</blockquote>
<hr>
<h4 id="SwiftUI-Jason-Liang"><a href="#SwiftUI-Jason-Liang" class="headerlink" title="SwiftUI - Jason Liang"></a>SwiftUI - Jason Liang</h4><p><img src="/images/others/loading.gif" data-original="/images/20230219/Jason_Liang.JPEG" alt="Jason"></p>
<p>在最後四位新星計畫開發者介紹他們的產品前，最後由 <strong>Jason</strong> 帶來他們如何透過 <strong>SwiftUI</strong> 去打造直播購物的介面。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/skills.JPEG" alt="Skills"></p>
<blockquote>
<p><em><strong>接著他們就在一張很屌的我們用了一堆技術的圖片下結束公司技術分享。</strong></em></p>
</blockquote>
<hr>
<h3 id="LINE-ProtoStar"><a href="#LINE-ProtoStar" class="headerlink" title="LINE ProtoStar"></a>LINE ProtoStar</h3><p><img src="/images/others/loading.gif" data-original="/images/20230219/protoStar.JPEG" alt="ProtoStar"></p>
<table>
<thead>
<tr>
<th align="center">產品名稱</th>
<th align="center">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">CARE724</td>
<td align="center">看護保母照護預約</td>
</tr>
<tr>
<td align="center">自由食間</td>
<td align="center">無人商店 透過 LINE Pay 或信用卡結帳</td>
</tr>
<tr>
<td align="center">PackAge+配客嘉</td>
<td align="center">可回收性宅配包裹外包裝，透過 LINE 掃描歸還包裝</td>
</tr>
<tr>
<td align="center">TWODAT</td>
<td align="center">美甲美睫預約</td>
</tr>
</tbody></table>
<blockquote>
<p><em>有興趣都可以參考 LINE Today 的<a href="https://today.line.me/tw/v2/article/WBWyENa">詳細簡短介紹</a></em></p>
</blockquote>
<p>整體這些創新的應用都脫離不了 LINE Message 及 LINE Pay 的部分，不過還是滿開心能看到有這麼多應用的。</p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>上次參加是 <strong>2020</strong>，在 <strong>2019</strong> 第一次參加的時候最期待的部分就是新創團隊的分享，隔年沒有新創的分享，但是今年又回來了，其實滿開心的，整體聽下來第一個反應是今年似乎沒什麼改變呢？有點像 <strong>Apple</strong> 的發表會，我們的裝置快今年又更快的概念，但仔細想想，一間公司規模越來越大，該專注地也許已經不是新的產品或者技術突破，還是有許多的部分需要好好審視一番，像是技術債。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230219/See_you.JPEG" alt="ProtoStar"></p>
<p>不過今年整體而言還是讓我感覺好像是倉促準備的感覺，又或者 <strong>LINE</strong> 意識到以往舉辦的規模太大了？好像很多東西都逐年在縮減縮小，連最後的結尾也是一張回饋表的 <strong>QRCode</strong>，讓我頓時間產生，蛤？已經結束了嗎的感覺（但整體還是很棒的）。</p>
<p>今年無法用紀念品來結尾了，不過還是滿期待明年的開發者大會又會有什麼內容。</p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><p>LINE - <a href="https://techpulse.line.me/">報名網站</a></p>
</li>
<li><p>LINE Today — <a href="https://today.line.me/tw/v2/article/JP3DqVx">LINE TAIWAN TECHPULSE 2023 年度開發者大會重磅登場</a></p>
</li>
<li><p>LINE Today — <a href="https://today.line.me/tw/v2/article/WBWyENa">4個LINE好友試試　可訂午餐約美甲
</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>LINE</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>Other</tag>
        <tag>Life</tag>
        <tag>LINE</tag>
        <tag>TechPulse</tag>
      </tags>
  </entry>
  <entry>
    <title>[Next Note] - 在 Next/React 使用 CASL 執行乾淨俐落的權限管理方案</title>
    <url>/2023/03/25/20230325/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p><img src="/images/others/loading.gif" data-original="/images/20230325/CASL_logo.png" alt="CASL 權限管理系統"></p>
<p>你的專案是否曾經碰過以下的需求：</p>
<ul>
<li>這個畫面需要管理者才能刪除，一般的用戶不能刪除</li>
<li>我需要依照帳號角色來決定要顯示什麼</li>
<li>這麼多地方要寫判斷能不能顯示畫面，一堆 <code>if-else</code> 好醜啊，怎麼美化</li>
</ul>
<p>如果剛好你有需要做權限的需求，剛好要碰到權限判斷，那 <strong>CASL</strong> 真的是完全符合你的選擇，</p>
<p>接下來我將記錄一篇怎麼在 <strong>Next</strong> 使用這套 <strong>Plugins</strong> 的過程。</p>
<p><strong><a href="https://casl.js.org/v6/en/guide/intro">CASL</a></strong> 可以在 <strong>Server端</strong> 及 <strong>Client端</strong> 安裝使用，如果你使用 <strong>Express、Koa、NestJS</strong> 或 <strong>前端三大框架(Vue、React、Angular)</strong> 皆可以使用，方法也差不多。</p>
<span id="more"></span>

<p><em><strong>CASL 是一個權限管理套件，它提供了一種 DSL（Domain Specific Language），讓開發者可以使用類似自然語言的方式來定義權限控制規則。它支持將權限控制的邏輯集中管理，可以在多個地方重複使用。另外，CASL 還提供了可視化的能力，可以將權限控制規則轉換為圖形化的形式，便於開發者閱讀和維護。</strong></em></p>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p>本篇文章預設學習前的基本條件需求：</p>
<ul>
<li>需要會使用 Npm install</li>
<li>需要會 JavaScript(本篇文章以 React 生態框架下去紀錄)</li>
</ul>
<p>本篇文章將會學到：</p>
<ol>
<li>基礎認識 - CASL 可以做什麼</li>
<li>開始安裝 - 環境安裝及設定</li>
<li>使用方法 - 套件使用方法</li>
</ol>
<p><em><strong>備註：截至文章發表前，套件目前更新至 <a href="https://casl.js.org/v6/en/guide/intro">CASL V6</a> 版本，有些文章搜尋後點擊跳轉的連結會跑到 v5 甚至 v3 去，需要特別注意一下</strong></em></p>
<hr>
<h3 id="為何要寫這篇"><a href="#為何要寫這篇" class="headerlink" title="為何要寫這篇"></a>為何要寫這篇</h3><p>老樣子還是需要說一下為什麼需要寫這篇文章，之前工作大部分接觸的後台系統，都不太需要做權限管理，有只是簡單的 <code>超級管理員</code> 跟 <code>一般用戶</code>，</p>
<p>也不會有太多頁面需要做隱藏顯示的判斷，剛好前陣子自己寫的 <strong>Side Project</strong> 以及自己工作上真的開始碰到了後台系統需要做權限管控，</p>
<p>因為之前就有從前同事口中聽過 <strong>CASL</strong> 這套插件，所以當下二話不說就直接選擇這套。</p>
<p><strong>But</strong>，因為在官方的範例中 <strong>React</strong> 使用的是 <strong>useContext</strong> 的方法(非 <strong>React</strong> 使用者可以忽略這段)，筆者想研究如何把這套件丟到 <strong>Redux</strong> 中，畢竟可以丟到 <strong>Redux</strong> 就可以少寫一個 <strong>Context</strong> 的 <strong>Provider</strong>，也方便統一管理，何樂不為呢？所以這篇紀錄文就誕生了，希望能跟相同情境的使用者交流。</p>
<hr>
<h3 id="基礎認識"><a href="#基礎認識" class="headerlink" title="基礎認識"></a>基礎認識</h3><p><img src="/images/others/loading.gif" data-original="/images/20230325/next_CASL_logo.png" alt="CASL Ft. Next"></p>
<p>在前端專案上我們要實現權限檢查很可能充斥著以下這種代碼：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (user.<span class="property">role</span> === <span class="string">&#x27;admin&#x27;</span> || user.<span class="property">id</span> === article.<span class="property">authorId</span>) &#123;</span><br><span class="line">  <span class="comment">// ... Can Do Something</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// ... Hidden DOM </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一來程式碼可能很雜亂，二來不好維護，邏輯一複雜了，可能就出現很多層的 <code>if-else</code>，而對於權限來說始終脫離不了 <strong>主體、角色、權限…(RBAC)</strong> ，</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230325/CASL_DSL.png" alt="CASL DSL 介紹"></p>
<p>而 <strong>CASL</strong> 提供了我們更細粒度的控制，<strong>CASL</strong> 可以讓你使用更直觀的 <strong>DSL（Domain-Specific Language）</strong> 來表示對於不同角色或者用戶的權限控制，而不是像 <strong>RBAC</strong> 一樣使用角色權限進行管理，如官方在 <strong><a href="https://casl.js.org/v6/en/guide/define-rules">Define Rules</a></strong> 文內所述。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230325/login_CASL_process.png" alt="流程圖"></p>
<p>可以用上面的流程圖大概想一下，如果我們有好幾個頁面都需要判斷，是不是會充斥著一大堆的 <code>if-else</code>，但這些程式碼都可以交由 <strong>CASL</strong> 來做到。</p>
<h4 id="Basic-Rules"><a href="#Basic-Rules" class="headerlink" title="Basic Rules"></a>Basic Rules</h4><p>先讓我們來一些基本認識吧！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230325/basic_rules.png" alt="基本規則"></p>
<p>基本上 <strong>CASL</strong> 的核心架構脫離不了四種規則，但通常我們比較常使用到的是 <strong>User Action</strong> 及 <strong>Subject</strong>。</p>
<ul>
<li><p><strong>User Action</strong>：通常用來放使用者操作的能力是什麼，例如 <strong><a href="https://zh.wikipedia.org/zh-tw/%E5%A2%9E%E5%88%AA%E6%9F%A5%E6%94%B9">CRUD</a></strong> 。</p>
</li>
<li><p><strong>Subject</strong>：用來檢查使用者操作的項目，通常會是一個 <strong>主題</strong> 或 <strong>實體</strong>，例如 <strong>Post</strong> 或者 <strong>article-list</strong>(下面會在說到用法)。</p>
</li>
<li><p><strong>Fields</strong>：這個可以理解成 <strong>Subject</strong> 的補充，如果 <strong>Subject</strong> 是一個大項目，例如文章列表，那 <strong>Fields</strong> 可以想成小項目，例如文章列表裡面的 <strong>Title</strong> 或 <strong>Description</strong>。</p>
</li>
<li><p><strong>Conditions</strong>： 使用這個可以更精準的匹配使用者是否符合該權限，如果用上一個 <strong>Fields</strong> 的條件來擴充，可以在使用這個方法去做更複雜的驗證，例如我想要達到使用者只能更新自己的文章。</p>
</li>
</ul>
<p>綜合以上四中基本規則，你會得到以下的物件格式(<strong>Fields</strong> 及 <strong>Conditions</strong> 是非必填的)：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">usrAbility</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">action</span>: <span class="string">&#x27;Read&#x27;</span>,</span><br><span class="line">    <span class="attr">subject</span>: <span class="string">&#x27;article-list&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">action</span>: <span class="string">&#x27;Update&#x27;</span>,</span><br><span class="line">    <span class="attr">subject</span>: <span class="string">&#x27;article-list&#x27;</span>,</span><br><span class="line">    <span class="attr">fields</span>: [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;description&#x27;</span>],</span><br><span class="line">    <span class="attr">conditions</span>: &#123;</span><br><span class="line">      <span class="attr">authorId</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><strong>根據上面的範例，代表我們賦予這個使用者的權限為可以閱讀(action: ‘Read’)文章列表(subject: ‘article-list’)、可以編輯(action: Update)作者 ID 為 1(conditions:{authorId: 1}) 文章裡的 Title(fields: [‘title’, ‘description’]) 及 Description。</strong></p>
<p><img src="/images/others/loading.gif" data-original="/images/20230325/fields_patterns.png" alt="Fields Patterns"></p>
<p>當然這只是一個很簡單的範例，當中其實可以有更複雜的用法，像是 <strong>fields</strong> 可以使用 <strong>patterns</strong>，如上圖，但這邊就先不深入討論這個。</p>
<h4 id="Define-Rules"><a href="#Define-Rules" class="headerlink" title="Define Rules"></a>Define Rules</h4><p>當我們賦予目標用戶擁有的權限後，該怎麼在套件上將這些權限做使用呢，<strong>CASL</strong> 的核心之一即是 <strong>能力(Ability)</strong></p>
<p>而 <strong>CASL</strong> 定義能力的方式有三種，這邊我們使用第一種 <strong>defineAbility</strong>，另外兩種有興趣也可以參考官方網站 <strong><a href="https://casl.js.org/v6/en/guide/define-rules">Define Rules</a></strong> 的介紹。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230325/define_rules.png" alt="Define Rules"></p>
<p>我們稍微修改一下官網提供的範例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ability.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineAbility &#125; <span class="keyword">from</span> <span class="string">&#x27;@casl/ability&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">usrAbility</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">action</span>: <span class="string">&#x27;Read&#x27;</span>,</span><br><span class="line">    <span class="attr">subject</span>: <span class="string">&#x27;article-list&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">action</span>: <span class="string">&#x27;Update&#x27;</span>,</span><br><span class="line">    <span class="attr">subject</span>: <span class="string">&#x27;article-list&#x27;</span>,</span><br><span class="line">    <span class="attr">fields</span>: [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;description&#x27;</span>],</span><br><span class="line">    <span class="attr">conditions</span>: &#123;</span><br><span class="line">      <span class="attr">authorId</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineAbility</span>(<span class="function">(<span class="params">can, cannot</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; usrAbility.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      action,</span><br><span class="line">      subject,</span><br><span class="line">      fields,</span><br><span class="line">      conditions</span><br><span class="line">    &#125; = usrAbility.<span class="property">length</span>[i];</span><br><span class="line">    <span class="title function_">can</span>(action, subject, fields || [], conditions || <span class="literal">undefined</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// someComponent.js</span></span><br><span class="line"><span class="keyword">import</span> ability <span class="keyword">from</span> <span class="string">&#x27;./ability.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mockArticleList = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">authorId</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">    <span class="attr">description</span>: <span class="string">&#x27;456&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">authorId</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">    <span class="attr">description</span>: <span class="string">&#x27;456&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;</span></span><br><span class="line"><span class="language-xml">        ability.can(&#x27;Read&#x27;, &#x27;article-list&#x27;) ? (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            mockArticleList.map((article) =&gt; (</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;article.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>Title: &#123;article.title&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>description: &#123;article.description&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;</span></span><br><span class="line"><span class="language-xml">                  ability.can(&#x27;Update&#x27;, &#x27;article-list&#x27;) &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                      <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">                        // ... Do Something</span></span><br><span class="line"><span class="language-xml">                      &#125;&#125;</span></span><br><span class="line"><span class="language-xml">                    &gt;Edit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  )</span></span><br><span class="line"><span class="language-xml">                &#125;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            ))</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        )</span></span><br><span class="line"><span class="language-xml">      &#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Home</span>;</span><br></pre></td></tr></table></figure>

<p>上方只是一個很基礎簡單的範例，但可以明顯發現我們能力都包裹在 <strong>Ability</strong> 之中，透過 <strong>definedAbility</strong> 提供的 <strong>can()</strong> 方法，去驗證我們目前定義的能力能不能使用，該方法定義的 <strong>Type</strong> 是 <code>(method) can(...args: [action: any] | [action: any, subject: any, field?: string | undefined]): boolean</code>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230325/defineAbilityFor.png" alt="DefineAbilityFor"></p>
<p>而創建 <strong>Ability</strong> 的方法也可以在包裹一層 <strong>function</strong>，透過傳入參數的方式，讓 <strong>conditions</strong> 裡面使用 <strong>user</strong> 傳遞進來的參數，例如上圖。</p>
<hr>
<h3 id="開始安裝"><a href="#開始安裝" class="headerlink" title="開始安裝"></a>開始安裝</h3><p>前面我們有提到，該篇文章將會以 <strong>Next</strong> 的角度下去紀錄，但其實透過上面的範例，普通的 <strong>JS</strong> 已經可以使用這個套件達到基本效果了。</p>
<p><em><strong>提醒：這邊還是需要提醒一下，因為官方的範例是使用 useContext 的方式，而官方有提供一個 <Can /> 的組件可以檢查 conditions，而我自己使用的方式是類似上述範例，輸出 Ability.js 之後，使用 ability.can() 的方式，如前面提到該方法定義的 Type 為 <code>(method) can(...args: [action: any] | [action: any, subject: any, field?: string | undefined]): boolean</code>，因為該方法無法直接帶入 conditions，所以筆者還在研究如何帶入驗證，接下來的範例不會包含 Fields 及 Conditions 的部分，很抱歉！</strong></em></p>
<p><img src="/images/others/loading.gif" data-original="/images/20230325/react_package.png" alt="React Package"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20230325/CASL_react_install_way.png" alt="CASL Install Way"></p>
<p>首先我們到官網後，看到左側選擇你目前使用的環境，這邊筆者選擇 <strong>CASL React</strong>，接著內文其實都介紹得滿清楚的了，怎麼安裝及使用：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230325/CASL_v5.png" alt="CASL V5"></p>
<p>再次提醒，一定要注意看 <strong>CASL</strong> 的版本喔，如果你查看的官網為 <strong>v4</strong> 或 <strong>v5</strong> 版本，左上角下拉點開後不會有 <strong>v6</strong>，按照官網安裝方式現在裝的一定會是 <strong>v6</strong> 版本，網址需要自己輸入 <strong><a href="https://casl.js.org/v6/en/package/casl-react">https://casl.js.org/v6/en/package/casl-react</a></strong> 去查看 <strong>v6</strong> 的文件，因為 <strong>v6</strong> 已經棄用 <code>import &#123; Ability &#125; form &#39;@casl/ability&#39;;</code> 了。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230325/ability_already_remove.png" alt="Ability Type Deprecated"></p>
<p>如果有在使用 <strong>ChatGPT</strong> 的工程師們，一定會發現它給你的範例都是使用這個方法。</p>
<h4 id="React-js-With-useContext-and-CASL"><a href="#React-js-With-useContext-and-CASL" class="headerlink" title="React.js With useContext and CASL"></a>React.js With useContext and CASL</h4><p><em><strong>&gt;文章的最後會有一個 <strong>Demo</strong> 及 <strong>範例程式碼</strong>，筆者以自行理解的方式將 <strong>CASL</strong> 融入 <strong>Redux</strong> 之中，如果有誤，還請各路大神手下留情，底下可以留言告知筆者。</strong></em></p>
<p>在 <strong>React</strong> 使用 <strong>CASL</strong> 官方的方法為 <strong><a href="https://casl.js.org/v6/en/package/casl-react">useContext</a></strong> ，我們先使用這種方式介紹：</p>
<ol>
<li>首先創建一支檔案為 <strong>ability.ts(可是自己的情況改為 .js)</strong> ，筆者放在專案目錄 <code>/utils/casl/ability.tsx</code></li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineAbility &#125; <span class="keyword">from</span> <span class="string">&#x27;@casl/ability&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createContextualCan &#125; <span class="keyword">from</span> <span class="string">&#x27;@casl/react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newAbility = <span class="title function_">defineAbility</span>(<span class="function">(<span class="params">can</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 基本權限 可以隨意新增 內容也可以為空</span></span><br><span class="line">  <span class="title function_">can</span>([<span class="string">&#x27;Create&#x27;</span>, <span class="string">&#x27;Read&#x27;</span>, <span class="string">&#x27;Update&#x27;</span>, <span class="string">&#x27;Delete&#x27;</span>], <span class="string">&#x27;Home&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">AbilityContext</span> = <span class="title function_">createContext</span>(newAbility); <span class="comment">// 此處參數也可為空</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Can</span> = <span class="title function_">createContextualCan</span>(<span class="title class_">AbilityContext</span>.<span class="property">Consumer</span>);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>接著修改 <strong>main.tsx</strong> 或 <strong>app.tsx</strong>，將 <strong>context</strong> 包裹著整個專案</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AbilityContext</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@utils/casl/ability&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ability <span class="keyword">from</span> <span class="string">&#x27;@utils/casl/config/ability&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;@/App&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)!).<span class="title function_">render</span>(</span><br><span class="line">  <span class="comment">// &lt;React.StrictMode&gt;</span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">AbilityContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;ability&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">AbilityContext.Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line">  <span class="comment">// &lt;/React.StrictMode&gt;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>使用方式為兩種方式</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ability <span class="keyword">from</span> <span class="string">&#x27;@utils/casl/config/ability&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Can</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@casl/react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ability.<span class="title function_">can</span>([<span class="string">&#x27;Read&#x27;</span>, <span class="string">&#x27;Create&#x27;</span>], <span class="string">&#x27;Home&#x27;</span>));</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> mockUserInfo = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;RexHung&#x27;</span></span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      Home Page</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Can</span> <span class="attr">I</span>=<span class="string">&quot;Edit&quot;</span> <span class="attr">a</span>=<span class="string">&quot;Home&quot;</span> <span class="attr">ability</span>=<span class="string">&#123;ability&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>Edit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Can</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Can</span> <span class="attr">I</span>=<span class="string">&quot;Delete&quot;</span> <span class="attr">a</span>=<span class="string">&quot;Home&quot;</span> <span class="attr">this</span>=<span class="string">&#123;mockUserInfo&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>Delete<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Can</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Can</span> <span class="attr">I</span>=<span class="string">&quot;Delete&quot;</span> <span class="attr">a</span>=<span class="string">&quot;Home&quot;</span> <span class="attr">field</span>=<span class="string">&quot;article&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>Create<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Can</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Home</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20230325/react_can_component.png" alt="CASL React Can Component"></p>
<p>兩種方式分別為直接使用核心 <code>ability.can()</code> 及使用套件幫你包裝好的 <code>&lt;Can /&gt;</code>，前面筆者有提到自行使用 <strong>Redux</strong> 定義之後，無法使用 <code>ability.can()</code> 帶入 <strong>conditions</strong>，這個組件可以幫你解決這個問題。</p>
<p>在不同的框架套件封裝的組件傳參方式都不同，例如 <strong>Vue</strong> 是 <code>&lt;Can do=&quot;read&quot; :on=&quot;post&quot; field=&quot;title&quot;&gt;...&lt;/Can&gt;</code> 而 <strong>Angular</strong> 是 <code>&lt;div *ngIf=&quot;&#39;create&#39; | able: &#39;Post&#39;&quot; /&gt;</code>，但是目的都是要把 <strong>Basic Rules</strong> 那些當作條件傳遞進去給 ability 驗證是否合法，最後返回布林。</p>
<p>以上三個步驟是不是非常簡單呢？</p>
<h4 id="Next-js-With-Redux-and-CASL"><a href="#Next-js-With-Redux-and-CASL" class="headerlink" title="Next.js With Redux and CASL"></a>Next.js With Redux and CASL</h4><p>使用 <strong>Redux</strong> 主要原因為筆者覺得在最外層需要包裹兩層 <strong>Provider</strong> 有點醜，想要融合再一起，但筆者需要在聲明一次，截至文章發表前，筆者目前還沒有找到 <code>ability.can()</code> 可以傳遞 <strong>conditions</strong> 進去的方式。</p>
<ol>
<li>我們跳過 <strong>Redux</strong> 的安裝，在 <strong>Redux</strong> 新增一個 <strong>authSlice.tsx</strong></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSlice &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppState</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@/store&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">HYDRATE</span> &#125; <span class="keyword">from</span> <span class="string">&quot;next-redux-wrapper&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AnyMongoAbility</span>, defineAbility &#125; <span class="keyword">from</span> <span class="string">&quot;@casl/ability&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> interface <span class="title class_">AuthState</span> &#123;</span><br><span class="line">  <span class="attr">ability</span>: <span class="title class_">AnyMongoAbility</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initial state</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">initialState</span>: <span class="title class_">AuthState</span> = &#123;</span><br><span class="line">  <span class="attr">ability</span>: <span class="title function_">defineAbility</span>(<span class="function">(<span class="params">can</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 基本權限</span></span><br><span class="line">    <span class="title function_">can</span>([<span class="string">&#x27;Create&#x27;</span>, <span class="string">&#x27;Read&#x27;</span>, <span class="string">&#x27;Update&#x27;</span>, <span class="string">&#x27;Delete&#x27;</span>], <span class="string">&#x27;Home&#x27;</span>);</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">IPermission</span> &#123;</span><br><span class="line">  <span class="attr">action</span>: <span class="title class_">Array</span>&lt;<span class="string">&quot;Create&quot;</span> | <span class="string">&quot;Read&quot;</span> | <span class="string">&quot;Update&quot;</span> | <span class="string">&quot;Delete&quot;</span>&gt;;</span><br><span class="line">  <span class="attr">subject</span>: string;</span><br><span class="line">  fields?: <span class="title class_">Array</span>&lt;string&gt;;</span><br><span class="line">  conditions?: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">IDefineAbilitiesFor</span> &#123;</span><br><span class="line">  <span class="attr">user</span>: <span class="title class_">IUser</span>;</span><br><span class="line">  <span class="attr">permissions</span>: <span class="title class_">IPermission</span>[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">defineAbilitiesFor</span> = (<span class="params">&#123;user, permissions&#125;: IDefineAbilitiesFor</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">defineAbility</span>(<span class="function">(<span class="params">can</span>) =&gt;</span> &#123;</span><br><span class="line">    permissions.<span class="title function_">map</span>(<span class="function">(<span class="params">permission</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 這邊如果沒有 fields 但是有定義 conditions 傳遞進來，如果 fields 沒有寫入 Undefined 的話，conditions 會存不進去，</span></span><br><span class="line">      <span class="comment">// 所以如果沒有 fields 必須要給一個空陣列</span></span><br><span class="line">      <span class="title function_">can</span>(permission.<span class="property">action</span>, permission.<span class="property">subject</span>, permission.<span class="property">fields</span> || [], permission.<span class="property">conditions</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> authSlice = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;auth&quot;</span>,</span><br><span class="line">  initialState,</span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">    <span class="title function_">setAbility</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> permission = action.<span class="property">payload</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// pass userInfo and get New Ability</span></span><br><span class="line">      <span class="keyword">const</span> newAbility = <span class="title function_">defineAbilitiesFor</span>(&#123;</span><br><span class="line">        <span class="attr">permissions</span>: permission</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      state.<span class="property">ability</span> = newAbility;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">setClearAbility</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      state.<span class="property">ability</span> = state.<span class="property">ability</span>.<span class="title function_">update</span>([]);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// HYDRATE 這整段可以不需要管，這是因為在 Next.js 使用 Redux 需要另外加上的</span></span><br><span class="line">  <span class="attr">extraReducers</span>: <span class="function">(<span class="params">builder</span>) =&gt;</span> &#123;</span><br><span class="line">    builder.<span class="title function_">addCase</span>(<span class="variable constant_">HYDRATE</span>, <span class="function">(<span class="params">state, action: any</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        ...action.<span class="property">payload</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; setAbility, setClearAbility &#125; = authSlice.<span class="property">actions</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">selectAbility</span> = (<span class="params">state: AppState</span>) =&gt; state.<span class="property">auth</span>.<span class="property">ability</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> authSlice.<span class="property">reducer</span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>接著就可以在專案上使用了</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; selectAbility &#125; <span class="keyword">from</span> <span class="string">&quot;@/store/reducers/authSlice&quot;</span>;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">IArticleManagerProps</span> &#123;</span><br><span class="line">  <span class="attr">propsPosts</span>: <span class="title class_">IPost</span>[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ArticleManager</span> = (<span class="params">&#123;</span></span><br><span class="line"><span class="params">  propsPosts</span></span><br><span class="line"><span class="params">&#125;: IArticleManagerProps</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> ability = <span class="title function_">useSelector</span>(selectAbility);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ability.<span class="title function_">can</span>(<span class="string">&#x27;Read&#x27;</span>, <span class="string">&#x27;Home&#x27;</span>));</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span>...略<span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ArticleManager</span>;</span><br></pre></td></tr></table></figure>

<p>如同前面一直提到的，筆者還在研究怎麼在 <strong>can</strong> 帶入 <strong>conditions</strong>，如果有大神知道的話還麻煩下面留言告知一下，非常感謝，筆者修改後會第一時間上來更新內容。</p>
<p>因為少了使用 <code>import &#123; Can &#125; from &#39;@casl/react&#39;;</code> 這段，所以其實使用 <strong>Redux</strong> 的話可能需要自行封裝傳入 <strong>conditions</strong> 方法，這邊筆者會繼續爬文。</p>
<hr>
<h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><p>按照慣例這邊附上實作好的 Demo：</p>
<p>Source Code: <a href="https://github.com/RexHung0302/casl-redux-app">傳送門</a></p>
<p>Demo: <a href="https://casl-redux-app.vercel.app/">傳送門</a></p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>之前還沒有得知這套插件的時候還是一直使用 <code>if-else</code> 去判斷使用者的權限，有了這個套件，雖然免不了要在程式碼內寫一些客製化判斷，但基本上我們將邏輯都縮小到了 <strong>ability.js</strong> 裡 <code>defineAbility()</code> 的範圍內，算是方便統一維護及管理。</p>
<p>筆者藉著這次機會，順便第一次使用了 <strong>Next.js</strong> 來做一個簡易的後台，帳號密碼都是寫死在專案內的 <strong>API</strong>，畫面渲染可能會有點不佳，目前筆者還在持續學習當中，請各路大神手下留情，也希望這篇文章可以幫助到正在製作權限功能路上苦惱的工程師們。</p>
<p><em><strong>備註：如果你是使用 Vue.js 也非常推薦查閱這篇文章 <a href="https://juejin.cn/post/6844903588926324744">基于Vue.js开发的应用程序如何管理用户权限</a>，內容非常扎實及完整，有興趣可以參考看看。</strong></em></p>
<p><img src="/images/others/loading.gif" data-original="/images/20230325/vercel_deployments.png" alt="Vercel Deployment"></p>
<p>最後離題的推薦一下，使用 <strong>Next.js</strong> 除了解決路由的一些問題外，雖然滿多地方需要摸索的，但在部署上 <strong><a href="https://vercel.com/">Vercel</a></strong> 真的超級方便啊，只要將程式碼更新上 <strong>Github</strong> 後，就會自動進行部署，解決了需要自己實作 <strong>CD (Continuous Deployment)</strong> 的部分。</p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><a href="https://casl.js.org/v6/en">CASL</a></li>
<li><a href="https://juejin.cn/post/6882645988293640200">基于CASL的前端应用权限管理方案</a></li>
<li><a href="https://juejin.cn/post/6844903588926324744">基于Vue.js开发的应用程序如何管理用户权限</a></li>
<li><a href="https://chat.openai.com/">ChatGPT</a> &lt;- 雖然幫助真的不大，給予的內容不是鬼打牆就是錯誤或者舊的寫法，但還是有給我一些思路上的幫助</li>
<li><a href="https://vercel.com/">Vercel</a></li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>Next</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
        <tag>React</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>[Vue Note] - Vue 佐 JSX/TSX，在 JS 中切版吧</title>
    <url>/2023/04/18/20230418/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p><img src="/images/others/loading.gif" data-original="/images/20230418/logo.png" alt="CASL 權限管理系統"></p>
<p>你是否接觸過 <strong>React</strong> 呢？在 <strong>JavaScript</strong> 裡面寫 <strong>HTML</strong> 的格式已經很習慣了吧！</p>
<p>如果你正在接觸 <strong>Vue</strong> 但是苦惱怎麼在 <strong>Script</strong> 裡寫 <strong>JSX</strong>，可以參考一下這篇文章。</p>
<blockquote>
<p><em><strong>如果你正初學 Vue.js 或者還沒接觸框架也可以參考一下，後續會介紹 JSX 是什麼。</strong></em></p>
</blockquote>
<span id="more"></span>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好，世界！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>『這個有趣的標籤語法不是一個字串也不是 HTML。』- React Document</strong></p>
</blockquote>
<p>在 <strong>React</strong> 文件裡是這麼介紹的，讓我偷懶引用一下</p>
<blockquote>
<p><em>這個語法叫做 JSX，是一個 JavaScript 的語法擴充。我們推薦你在寫 React 的時候透過這個語法來描述使用者介面的外觀。 JSX 可能為讓你想到一些樣板語言，但不一樣的地方是 JSX 允許你使用 JavaScript 所有的功能。</em></p>
</blockquote>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p>本篇文章預設學習前的基本條件需求：</p>
<ul>
<li>需要會創建及使用 Vue (了解基本的用法)</li>
<li>需要會 Npm 用法</li>
<li>需要了解 JSX 是什麼</li>
</ul>
<p>本篇文章將會學到：</p>
<ol>
<li>基礎認識 JSX&#x2F;TSX</li>
<li>在 Vue 裡使用 JSX&#x2F;TSX</li>
</ol>
<p><em><strong>備註：如果你真的不了解 JSX 是什麼，下面會簡單介紹，但如果你已經了解了，可以跳過基礎認識</strong></em></p>
<hr>
<h3 id="為何要寫這篇"><a href="#為何要寫這篇" class="headerlink" title="為何要寫這篇"></a>為何要寫這篇</h3><p>筆者約莫在幾年前斷斷續續的利用閒暇時間做自己的 <strong>Side Project</strong>，在這期間經歷了換工作的時期，因為第一份工作筆者最早接觸的框架是 <strong>Vue.js</strong>，所以在筆者想好好了解前後端怎麼運作的時候，決定前端框架使用 <strong>Vue.js</strong>。</p>
<p>筆者在結束第一份工作後，當時大部分的工程師普遍都認為 <strong>Vue.js</strong> 易學好入門，但是大部分大公司都還是採用 <strong>React.js</strong>，所以業界大部分其實還是後者框架居多。</p>
<p>在筆者進入第二份工作時，也被告知公司是會採用 <strong>React.js</strong>，所以筆者其實後來就一直處在使用 <strong>React.js</strong> 的時間居多，剛開始著實不太習慣，但寫久了也能慢慢抓到兩個框架各自的優點。</p>
<p>這邊不討論兩者框架的優缺點，普遍使用 <strong>React.js</strong> 的人應該(絕對吧？)都不能避免接觸 <strong>JSX</strong>。</p>
<p>就在筆者學習了一陣子 React.js 後回頭來繼續完成 <strong>Side Project</strong> 時，想要客製化自己的 <strong>Components</strong>，並且傳入 <strong>HTML</strong>，這時候筆者發現以前寫了兩年多的 <strong>Vue.js</strong>，我竟然從來沒有這樣傳遞過，霎那間覺得 <strong>Vue.js</strong> 可以在 <strong>Script</strong> 裡面寫 <strong>HTML</strong> 該有多好啊！</p>
<p>顧這篇文章就用來記錄我怎麼在 <strong>Vue.js</strong> 使用 <strong>JSX</strong> 的吧，老樣子希望能幫到你。</p>
<blockquote>
<p><em><strong>備註：JSX 及 TSX 是一樣的東西，差別在於後者加入了 TypeScript，如果不了解 TypeScript 是什麼可以參考 <a href="https://willh.gitbook.io/typescript-tutorial/">TypeScript 新手指南</a>，簡單說 TypeScript 就是 JavaScript 的超集，JavaScript 屬於弱型別，當今天我們賦予一個變數字串，我們可以隨時把這個變數改為數字型別，但如果今天使用了 TypeScript 就會報錯。</strong></em></p>
</blockquote>
<hr>
<h3 id="基礎認識-JSX-TSX"><a href="#基礎認識-JSX-TSX" class="headerlink" title="基礎認識 JSX&#x2F;TSX"></a>基礎認識 JSX&#x2F;TSX</h3><p><img src="/images/others/loading.gif" data-original="/images/20230418/jsx-compiler-step.png" alt="JSX 編譯過遲"></p>
<p>這邊我們借用 <strong>React.js</strong> 的渲染過程來解釋，大部分的人接觸到 <strong>JSX</strong> 應該都是從接觸 <strong>React.js</strong> 開始，但為什麼我們要使用 <strong>JSX</strong> 呢？</p>
<ol>
<li>關注點分離</li>
</ol>
<p>在 <strong>React.js</strong> 的<a href="https://zh-hant.legacy.reactjs.org/docs/introducing-jsx.html">介紹文章</a>有提到，以往我們前端開發都是 <strong>HTML、JS、CSS</strong> 去做開發，但 <strong>React.js</strong> 是以 <strong>components</strong> 做為開發核心，每一個 <strong>components</strong> 包含這些東西，內容可以是純字串，也可以是包含邏輯的。</p>
<p>剛開始接觸或者還沒接觸 <strong>React.js</strong> 的人可能不能接受將標籤與法寫在 <strong>JavaScript</strong> 裡面，但確實這種包再一起的方式可以讓你把關注點鎖在商業邏輯內。</p>
<p>舉例來說下面一段 <strong>React.js</strong> 程式碼就是在寫一個 <strong>component</strong>，裡面包涵畫面的呈現，這個 <strong>component</strong> 主要用於顯示使用者的資訊。</p>
<blockquote>
<p><em>不了解下面程式碼的用法沒關係，只要瀏覽過知道為什麼要用 TSX 就行。</em></p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">IUser</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: string;</span><br><span class="line">  <span class="attr">age</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserComponent</span> = (<span class="params">&#123;</span></span><br><span class="line"><span class="params">  userInfo</span></span><br><span class="line"><span class="params">&#125;: IUser</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>User Info:<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>name: &#123;userInfo.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>age: &#123;userInfo.age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上面的這串 <strong>TSX</strong> 會被編譯為下面程式碼：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; jsx <span class="keyword">as</span> _jsx &#125; <span class="keyword">from</span> <span class="string">&quot;react/jsx-runtime&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; jsxs <span class="keyword">as</span> _jsxs &#125; <span class="keyword">from</span> <span class="string">&quot;react/jsx-runtime&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserComponent</span> = (<span class="params">&#123;</span></span><br><span class="line"><span class="params">  userInfo</span></span><br><span class="line"><span class="params">&#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="comment">/*#__PURE__*/</span><span class="title function_">_jsxs</span>(<span class="string">&quot;div&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">children</span>: [<span class="comment">/*#__PURE__*/</span><span class="title function_">_jsx</span>(<span class="string">&quot;h2&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">children</span>: <span class="string">&quot;User Info:&quot;</span></span><br><span class="line">    &#125;), <span class="comment">/*#__PURE__*/</span><span class="title function_">_jsxs</span>(<span class="string">&quot;ul&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">children</span>: [<span class="comment">/*#__PURE__*/</span><span class="title function_">_jsxs</span>(<span class="string">&quot;li&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">children</span>: [<span class="string">&quot;name: &quot;</span>, userInfo.<span class="property">name</span>]</span><br><span class="line">      &#125;), <span class="comment">/*#__PURE__*/</span><span class="title function_">_jsxs</span>(<span class="string">&quot;li&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">children</span>: [<span class="string">&quot;age: &quot;</span>, userInfo.<span class="property">age</span>]</span><br><span class="line">      &#125;)]</span><br><span class="line">    &#125;)]</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><em><strong>編譯網站可參考 <a href="https://babeljs.io/repl/#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=JYOwLgpgTgZghgYwgAgJIFUDO1kG8BQyyIcAthAFzKZhSgDmA3IcnPZcQK6kBG0zAX3z4EAexA1kWaAGFRpAA7iI4ZAF5kACgJFO2KKhAxR-AVQz6AlOoB8eFsKJQIYTlBBaWRADwATYABuNl5EyN4AFgBMNtJQaEaiFN4A9FHBoaHenAA26RmZ2cA2JORUuHrQhsYAdCUQAimFeflhTWwc5fpVotXtDclNIT7JOc1hyf5BLJamjEA&debug=false&forceAllTransforms=false&modules=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=react%2Ctypescript&prettier=false&targets=&version=7.22.9&externalPlugins=&assumptions=%7B%7D">Babeljs.io</a></strong></em></p>
</blockquote>
<p>你能發現我們只要專注在處理 <strong>顯示使用者資訊</strong> 這件事情上即可，雖然剛開始你會納悶為什麼東西都塞成一大包，但透過上面的轉譯我們能知道 <strong>TSX</strong> 幫我們處理了 <strong>JavaScript</strong> 的這一段，如果你曾經寫過原生 <strong>JavaScript</strong>，一定不能忘記頻繁的操作 <strong>DOM</strong> 吧 (淚！</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> userBox = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;userBox&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Rex&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">userBox.<span class="property">innerHTML</span> = <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;ul&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;name: <span class="subst">$&#123;user.name&#125;</span>&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;age: <span class="subst">$&#123;user.age&#125;</span>&lt;/li&gt;</span></span><br><span class="line"><span class="string">  &lt;/ul&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><em>別忘了寫完 <strong>Javascript</strong> 邏輯你還要去處理 <strong>HTML</strong> 畫面呢…</em></p>
</blockquote>
<ol start="2">
<li>提供更加語意化且易懂的標籤</li>
</ol>
<p>一般我們處理一些顯示邏輯，會像下方使用 <strong>命令式(Imperative)</strong> 去做判斷：</p>
<blockquote>
<p><em>假如我們需要判斷使用者成年沒去相對應顯示一些適合的東西</em></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_">userIsAdult</span>(user)) &#123;</span><br><span class="line">  <span class="title function_">canSeeSomeExcitingThing</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="title function_">showYouNotAToughGuy</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20230418/exciting.png" alt="比遊戲還刺激"></p>
<p>但如果我們透過 <strong>聲明式(Declarative)</strong> 則是：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">userIsAdult</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">ExcitingComponent</span> /&gt;</span></span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">ChildrenComponent</span> /&gt;</span></span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>是不是更佳清晰易懂了呢？</p>
<ol start="3">
<li>與 JavaScript 語法碰出新滋味</li>
</ol>
<p><strong>JSX</strong> 非一種全新的語言，而是一種語法糖，有點類似 <strong>ES6&#x2F;7&#x2F;8</strong> 那種語法糖，如果你寫過 <strong>Vue.js</strong>，可以想像今天你在使用 <strong>v-for、v-if</strong> 的概念，你能處理畫面的同時，又能處理商業邏輯。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Rex&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Mike&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">32</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Joanne&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">24</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">IUser</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: number;</span><br><span class="line">  <span class="attr">name</span>: string;</span><br><span class="line">  <span class="attr">age</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserComponent</span> = (<span class="params">&#123;</span></span><br><span class="line"><span class="params">  users</span></span><br><span class="line"><span class="params">&#125;: IUser[]</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Users Info:<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;</span></span><br><span class="line"><span class="language-xml">          users.map((user) =&gt; (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Fragment</span> <span class="attr">key</span>=<span class="string">&#123;user.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">li</span>&gt;</span>name: &#123;user.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">li</span>&gt;</span>age: &#123;user.age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/&gt;</span></span></span><br><span class="line"><span class="language-xml">          ))</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>說了這麼多也許你還不能體驗到優點，沒關係我們就開始安裝使用吧！</p>
<hr>
<h3 id="在-Vue-裡使用-JSX-TSX"><a href="#在-Vue-裡使用-JSX-TSX" class="headerlink" title="在 Vue 裡使用 JSX&#x2F;TSX"></a>在 Vue 裡使用 JSX&#x2F;TSX</h3><p>想在 <strong>Vue.js</strong> 裡面使用 <strong>JSX&#x2F;TSX</strong> 其實很簡單，甚至在一般的 <strong>HTML</strong> 你也能使用，不過我們先來講講今天的重點 <strong>Vue.js</strong> 如何使用吧。</p>
<p>一般的 <code>.vue</code> 檔案內容大概會長這樣：</p>
<blockquote>
<p><em><strong>這邊容許我使用 Vue3 作為示範，但不會影響我們使用的過程及結果</strong></em></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是內容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;line-message-template-preview&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">user</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>: <span class="string">&#x27;Rex&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">age</span>: <span class="number">18</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>普通的邏輯處理都還能順利的書寫，但今天我們想要從 <strong>script</strong> 處取得 <strong>API</strong> 資訊後，把拿到的資訊包含畫面邏輯再放回 <strong>template</strong> 渲染呢？</p>
<p>舉例來說，我們今天透過 <strong>age</strong> 取得使用者的資訊後，我們想要依照使用者的年齡去渲染相對應的畫面顯示，這時候就會有點棘手(其實應該是說要多寫一些程式碼去處理渲染的邏輯部分)。</p>
<p>我們先來看看下面這張圖，這張圖使用的是 <strong>Vue + Element-plus</strong>：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230418/element-plus-formatter-demo.png" alt="渲染排序邏輯"></p>
<blockquote>
<p><em>這段程式碼的範例可以參考 Element-plus 的 <a href="https://element-plus.org/zh-CN/component/table.html#%E6%8E%92%E5%BA%8F">Table Document</a></em></p>
</blockquote>
<p>你可以觀察到 <code>el-table-column</code> 提供了一個 <strong>formatter</strong> 的方法，裡面可以傳入客製化的內容，但一般的 <strong>vue</strong> 沒有安裝 <strong>JSX</strong> 套件下我們只能傳入字串。</p>
<p>像是範例中透過 <code>function formatter()</code> 去做的事情。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">formatter</span> = (<span class="params">row: User, column: TableColumnCtx&lt;User&gt;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> row.<span class="property">address</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>但假如今天我的邏輯想要傳入一些 <strong>UI Component</strong> 呢？例如我想要加上 <a href="https://element-plus.org/zh-CN/component/tag.html">Tag UI</a>。</p>
<p>這時候如果你把上面的 <strong>formatter()</strong> 改為這樣可是會出錯的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">formatter</span> = (<span class="params">row: User, column: TableColumnCtx&lt;User&gt;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">el-tag</span>&gt;</span>&#123;row.address&#125;<span class="tag">&lt;/<span class="name">el-tag</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>別急，讓我們來安裝 <strong>JSX&#x2F;TSX</strong> 吧！</p>
<h4 id="安裝及設定"><a href="#安裝及設定" class="headerlink" title="安裝及設定"></a>安裝及設定</h4><ol>
<li>安裝套件</li>
</ol>
<p>使用 <strong>Vue2</strong> 請在專案輸入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install @vue/babel-preset-jsx @vue/babel-helper-vue-jsx-merge-props</span><br></pre></td></tr></table></figure>

<p>使用 <strong>Vue3</strong> 請在專案輸入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install @vue/babel-plugin-jsx -D</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>設置套件</li>
</ol>
<p>打開專案根目錄的 <code>.babelrc(babel.config.js)</code>(沒有請自行創建)，並且加入配置：</p>
<p>使用 <strong>Vue2</strong> 請配置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [</span><br><span class="line">    <span class="string">&#x27;@vue/cli-plugin-babel/preset&#x27;</span>,</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&#x27;@vue/babel-preset-jsx&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&#x27;injectH&#x27;</span>: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>使用 <strong>Vue3</strong> 請配置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&#x27;@vue/babel-plugin-jsx&#x27;</span>],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>使用套件</li>
</ol>
<p>把 <strong>Vue</strong> 的 <code>&lt;script&gt;&lt;/script&gt;</code> 改為 <code>&lt;script lang=&quot;jsx&quot;&gt;&lt;/script&gt;</code>，如果使用 <strong>typescript</strong> 請改為 <code>&lt;script lang=&quot;tsx&quot;&gt;&lt;/script&gt;</code>。</p>
<p>就是這麼簡單，之後你便可以正常地在 <strong>Script</strong> 裡面寫一些 <strong>UI</strong> 邏輯了。</p>
<blockquote>
<p>關於 Vue2 的套件可以參考 <a href="https://github.com/vuejs/babel-preset-vue">babel-preset-vue</a></p>
<p>關於 Vue3 的套件可以參考 <a href="https://github.com/vuejs/babel-plugin-jsx">babel-plugin-jsx</a></p>
</blockquote>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>雖然文章漏漏長，但大多是想解釋一下 <strong>JSX&#x2F;TSX</strong> 是什麼，其實安裝過程簡單到不需要幾分鐘，使用也是很簡單，主要都是透過 <strong>Babel</strong> 去編譯的，和 <strong>ESLint</strong> 差不多，其實只要專案有吃到設定，基本上都能正常編譯使用。</p>
<p>上面有提到一些範例，可能不是那麼好懂也不是那麼適合，希望各路前輩包含，也希望這篇文章能幫助到需要的人。</p>
<p>最後想提一下如果今天想在 HTML 裡面使用 JSX&#x2F;TSX 的話，可以參考 <a href="https://blog.techbridge.cc/2016/04/21/react-jsx-introduction/">一看就懂的 JSX 簡明入門教學指南</a> 一文的 <strong>二、用法摘要</strong>，裡面介紹的滿詳細的。</p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><a href="https://blog.techbridge.cc/2016/04/21/react-jsx-introduction/">一看就懂的 JSX 簡明入門教學指南</a></li>
<li><a href="https://segmentfault.com/a/1190000040712149">手把手教你在 Vue 中使用 JSX，不怕学不会！【建议收藏】</a></li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
        <tag>FrameWork</tag>
        <tag>Vue</tag>
        <tag>JSX</tag>
        <tag>TSX</tag>
      </tags>
  </entry>
  <entry>
    <title>[Life Note] - WebConf Taiwan 2023 技術研討會 Part 2</title>
    <url>/2023/08/12/20230812/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p><img src="/images/others/loading.gif" data-original="/images/20230812/banner.png" alt="Webconf Logo"></p>
<p>經歷了十年，Webconf 又重啟了一次會議，這次場地在 <strong>台北張榮發國際會議中心</strong>，這是一個什麼會議呢？</p>
<p>『WebConf 不僅僅關注過去，還關注網頁的未來趨勢和新興技術，並提供業界趨勢及發展方向，以協助企業更好地了解未來網頁發展的方向。』 - 引述官方網站的話，基本就是介紹這數十年以及現在還有未來網頁相關的議題。</p>
<p>接下來筆者將會將所聽到一些比較有趣的內心紀錄在此處，有興趣的歡迎繼續看下去。</p>
<blockquote>
<p><em><strong>這篇是第二天的心得紀錄</strong></em></p>
</blockquote>
<span id="more"></span>

<p>由於議程的進行方式為一個時段為四十到四十五分鐘不等，一個時段同時會有三個講者，所以只能挑一個議題進去聆聽，下面筆者會說自己挑了哪些議程進去聽，主要偏前端。</p>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p>本次紀錄不會太過詳細紀錄每個講者講過的話及內容，但會把筆者覺得有意思的點記錄下來，更詳細的內容可以直接參考官方提供的 『<a href="https://hackmd.io/@webconf/BkImQ0Ds3/%2FwHBNj8NPQamxPecU9VXoHQ?utm_source=badge&utm_medium=badge&utm_campaign=webconf2023">共筆</a>』</p>
<p>會議也有提到這次有跟講者們討論過後，決定以不論影的方式進行，故後續只有共筆紀錄演講過程。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230812/scheduleOne.png" alt="scheduleOne"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20230812/scheduleTwo.png" alt="scheduleTwo"></p>
<blockquote>
<p><em>筆者將有去聽的議程用紅框圍起來，如果有同步聯播的，就會三廳的人一起聽到，不會分場次。</em></p>
</blockquote>
<table>
<thead>
<tr>
<th>時間</th>
<th>議程內容</th>
</tr>
</thead>
<tbody><tr>
<td>09:00-09:45</td>
<td><a href="https://hackmd.io/@webconf/BkImQ0Ds3/%2FL5K9cqp6S0-7549MXXSb_g?utm_source=badge&utm_medium=badge&utm_campaign=webconf2023">淺談 Vue.js 的狀態管理模式</a></td>
</tr>
<tr>
<td>09:55-10:05</td>
<td>引言</td>
</tr>
<tr>
<td>09:55-10:40</td>
<td><a href="https://hackmd.io/@webconf/BkImQ0Ds3/%2FSVsZ1haXR-2bUhfcf_OYnA?utm_source=badge&utm_medium=badge&utm_campaign=webconf2023">鳳‧極意？！</a></td>
</tr>
<tr>
<td>10:50-11:35</td>
<td><a href="https://hackmd.io/@webconf/BkImQ0Ds3/%2FCZTO4WGbRcuCcQfWgGkuig?utm_source=badge&utm_medium=badge&utm_campaign=webconf2023">從零打造前端效能監測系統</a></td>
</tr>
<tr>
<td>11:45-12:30</td>
<td><a href="https://hackmd.io/@webconf/BkImQ0Ds3/%2FB9EywGzUTzicd9WTaFvyNg?utm_source=badge&utm_medium=badge&utm_campaign=webconf2023">藝術界線超進化-從創作到實踐，探索生成式藝術與前端互動技術的共舞</a></td>
</tr>
<tr>
<td></td>
<td>午餐時間</td>
</tr>
<tr>
<td>13:30-14:15</td>
<td><a href="https://hackmd.io/@webconf/BkImQ0Ds3/%2FhUfiJkrySvqn9ptbjSOSgA?utm_source=badge&utm_medium=badge&utm_campaign=webconf2023">資訊架構設計新體驗：在需求情境中運用領域事件分析描述結構化內容</a></td>
</tr>
<tr>
<td>14:25-15:10</td>
<td><a href="https://hackmd.io/@webconf/BkImQ0Ds3/%2FdHqj5RnATgOFO_0F8JWq8g?utm_source=badge&utm_medium=badge&utm_campaign=webconf2023">無密碼時代降臨！使用 Passkeys 打造無密碼驗證服務</a></td>
</tr>
<tr>
<td>15:20-16:05</td>
<td><a href="https://hackmd.io/@webconf/BkImQ0Ds3/%2F-mWY8npJSIaaxLrYaQ0Nvg?utm_source=badge&utm_medium=badge&utm_campaign=webconf2023">酷！玩！啥鬼CSS！</a></td>
</tr>
<tr>
<td>16:15-17:00</td>
<td><a href="https://hackmd.io/@webconf/BkImQ0Ds3/%2Fpk7crlHPTQumx2NzjWTdBQ?utm_source=badge&utm_medium=badge&utm_campaign=webconf2023">Beyond Technology 技術之外 - 從個人身心安頓到人類福祉追求</a></td>
</tr>
</tbody></table>
<hr>
<h3 id="淺談-Vue-js-的狀態管理模式"><a href="#淺談-Vue-js-的狀態管理模式" class="headerlink" title="淺談 Vue.js 的狀態管理模式"></a>淺談 Vue.js 的狀態管理模式</h3><p>今天第一場選的 <strong>Kuro</strong> 大的 <strong>Vue.js</strong>，相信這位講者是大多人接觸甚至沒接觸過 <strong>Vue.js</strong> 都可能會聽到的名子。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230812/pinia.png" alt="鳳梨"></p>
<p>這場內容主要談的是<a href="https://pinia.vuejs.org/">鳳梨(Pinia)</a>，為什麼會叫 <strong>Pinia</strong> 呢？可以參考官方網站的<a href="https://pinia.vuejs.org/introduction.html#Why-Pinia">介紹</a>：</p>
<blockquote>
<p><em>Pinia (pronounced &#x2F;piːnjʌ&#x2F;, like “peenya” in English) is the closest word to piña (pineapple in Spanish) that is a valid package name. A pineapple is in reality a group of individual flowers that join together to create a multiple fruit. Similar to stores, each one is born individually, but they are all connected at the end. It’s also a delicious tropical fruit indigenous to South America.</em></p>
</blockquote>
<p><strong>Vue3</strong> 其實也出來一陣子了，雖然可以向下相容 <strong>Vue2</strong>，但有許多的工具也在推陳出新，這次 <strong>Kuro</strong> 帶來的是 <strong>Pinia</strong> 這套工具的介紹。</p>
<blockquote>
<p><em>說 Kuro 是傳教士真的不為過，每次來都要推銷東西啊</em></p>
</blockquote>
<p>如果有使用過 <strong>VueX</strong> 或者寫 <strong>React.js</strong> 的夥伴有使用過 <strong>Redux(聽說也漸漸式微了？！)</strong>，可能可以比較好理解，這套就是一個狀態管理庫。</p>
<p>其中要解決幾點問題</p>
<ul>
<li>props與events 一層一層傳遞</li>
<li>event-bus 跨元件事件傳遞(請忘記它)</li>
<li>project-inject 跨層級傳遞(必須在同一條元件樹上)</li>
</ul>
<blockquote>
<p><em>Project-inject <strong>依賴注入</strong> 或 <strong>提供注入</strong> 可以參考<a href="https://cn.vuejs.org/guide/components/provide-inject.html#provide">官方文章</a></em><br>使用 React.js 的夥伴可以理解為 useHook，的改念</p>
</blockquote>
<p>而 <strong>Pinia</strong> 也想要解決一些 <strong>VueX</strong> 的痛點，例如 <strong>TypeScript</strong> 的額外設定比較麻煩，<strong>VueX</strong> 的 <strong>Store</strong> 也無法直接使用 <strong>Composable</strong></p>
<hr>
<h3 id="鳳‧極意？！"><a href="#鳳‧極意？！" class="headerlink" title="鳳‧極意？！"></a>鳳‧極意？！</h3><blockquote>
<p><strong>鳳 也就是 html form</strong></p>
</blockquote>
<p>這位講者滿厲害的，光看他的<a href="https://blog.lalacube.com/mei/Reveal_phoenix_the_gokui.php">簡報</a>就可以發現。</p>
<blockquote>
<p><em>小吐槽，用 Chrome 無法正常開啟 QQ</em></p>
</blockquote>
<p>內容講了很多，但都是關於 <strong>Form</strong> 的應用，甚至是使用者體驗都可以透過很基本的原生 <strong>JS</strong> 或者 <strong>HTML</strong> 達到，簡單介紹 <strong>Form element</strong>，<code>&lt;input /&gt;(date, rang, checkbox, radio)</code> 的檢查及方便的使用，原生支援。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230812/UseCaseOne.png" alt="Use Case One"></p>
<p>首先講者用了兩個簡單的 <strong>Use Case</strong> 來介紹怎麼透過 <strong>Form</strong> 就能做到這些強大功能，第一個為圓餅圖，第二個則是 <strong>Video</strong> 的 <strong>Control bar</strong> 透過 <strong>range input</strong>。</p>
<p>而我們大部分的人做網頁應該都會用到 <code>:hover</code>，其實可以先透過 <code>@media (hover: hover)</code> 來判斷裝置是否支援，像是行動裝置就不需要，這時候就不會吃到裡面的變數。</p>
<p><code>@media (prefers-color-schema: dark)</code> 也能快速做到黑暗模式；<code>focus-visible vs focus:</code> 前者是只有在用鍵盤操作 <strong>tab</strong> 去 <strong>focus</strong> 時才會觸發；最後我們應該盡量避免做出合成獸這種東西，像是 <strong>checkRadio</strong> 或是 <strong>radioButton</strong>。</p>
<p>在一些 <strong>Input</strong> 我們也會放上 <strong>Icon</strong> 去讓使用者點擊後跳出像是日曆或者顏色選擇器之類的東西，我們可以透過 <strong>showPicker()</strong> 去達到，有更好的使用者體驗。</p>
<p>在數字輸入框我們可能會透過框架的幫助取對數字加一減一，但如果原生我們可以透過 <code>stepUp()</code> 及 <code>stepDown()</code> 去達到，不需要再用 <strong>document</strong> 的語法去取出值變化後再塞回去。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230812/attribute.png" alt="Attribute"></p>
<p>最後需要善用 <strong>attribute</strong> 的方式去檢查輸入內容是否正確，<strong>input</strong> 有許多的 <strong>attribute</strong> 可以使用，詳細可以參考 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input">MDN</a>。</p>
<blockquote>
<p>以前 PM 可能滿常會提 Input 我要帶有搜尋功能，現在透過 <code>input(type=“list”)</code> 可以輕鬆達到。</p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20230812/recap.png" alt="重點節錄"></p>
<p>重點節錄</p>
<hr>
<h4 id="從零打造前端效能監測系統"><a href="#從零打造前端效能監測系統" class="headerlink" title="從零打造前端效能監測系統"></a>從零打造前端效能監測系統</h4><p><img src="/images/others/loading.gif" data-original="/images/20230812/fromZeroTest.png" alt="從零打造前端效能測試"></p>
<p>這場內容非常之精實，我覺得應該直接貼上 <strong>Summer</strong> 大的<a href="https://www.cythilya.tw/2023/08/12/build-front-end-performance-monitoring-mechanism-from-scratch-webconf-tw-2023/">逐字稿</a>給大家看。</p>
<p>離題想說一下， <strong>Summer大</strong> 跟 <strong>莫大</strong> 是我來這次講座一直非常想聽的講者之一，原因不外乎自己一路一直都是純前端工作者，工作內容離不開切版串接 <strong>API</strong> 太遠，但時常的會讓我自己想到我還會什麼？像是奶綠茶大提到的，如果今天 <strong>JS</strong> 像 <strong>Flash</strong> 一樣，說掰掰就掰掰了呢？</p>
<p>故對於切版串 <strong>API</strong> 之外，又不會離前端太遠的東西我都非常有興趣，而這次講者提到的內容也讓我有了一些方向可以去研究。</p>
<p>會碰測試的人不外乎寫程式一陣子開始會注重到效能或者功能是否正常的人，講者則是提了之前在 <strong>Loading</strong> 太久的例子當作開場白。</p>
<p>講者提到我們會有一系列的各種 <strong>unit test</strong>、<strong>integration test</strong> 或 <strong>e2e test</strong> 的自動化測試的 <strong>test case</strong>，但我們不會將效能測試放入其中，也可能我們每次修改功能或 <strong>Bug</strong> 後又出現了。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230812/howToTest.png" alt="如何做測試"></p>
<p>如果要將效能測試融入其中，這是講者覺得最合適的方式。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230812/sentry.png" alt="Sentry"></p>
<p>這套測試就是講者這次會提到的核心內容，主要能監控兩種我們可衡量的效能指標</p>
<ul>
<li>Loading Performance 載入效能</li>
<li>Rendering Performance 渲染效能</li>
</ul>
<p>該套件也提供了 <strong>API</strong> 甚至介面可以讓使用者得知一些效能指標。</p>
<p>遺憾的是前面有提到理想情況是發生事情可以發出通知即時告訴我們，而這項功能在 <strong>Sentry</strong> 是需要付費的，但是講者提到另一套工具可以做到通知的功能且免費。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230812/sentryVsNewRelic.png" alt="Sentry VS New Relic"></p>
<p><strong>New Relic</strong> 比較像是 <strong><a href="https://aws.amazon.com/tw/what-is/application-performance-monitoring/">APM (application performance monitoring)</a></strong>，它還提供來自不同 <strong>region</strong> 存取網站的選項。</p>
<blockquote>
<p><em>突然發現，Relic 一直存在我手機的頁籤裡面，但是一直沒有去深入研究過，實在是像是 Ruddy 老師說的，囤積知識啊…</em></p>
</blockquote>
<hr>
<h3 id="藝術界線超進化-從創作到實踐，探索生成式藝術與前端互動技術的共舞"><a href="#藝術界線超進化-從創作到實踐，探索生成式藝術與前端互動技術的共舞" class="headerlink" title="藝術界線超進化-從創作到實踐，探索生成式藝術與前端互動技術的共舞"></a>藝術界線超進化-從創作到實踐，探索生成式藝術與前端互動技術的共舞</h3><p><img src="/images/others/loading.gif" data-original="/images/20230812/wuCheYu.png" alt="吳哲宇"></p>
<p>這場是由 <a href="https://www.youtube.com/channel/UCHX_XMhPrtvOmgGOnA2eTmA">老闆來點寇汀</a> 的吳哲宇來演講的，其中技術層面沒有深入提到太多，但講者有說了滿多他之前的作品。</p>
<p>由前端延伸到藝術去也是講者一直在思考前端還能應用在哪些東西上面，所以中間說了滿多應用層面的東西。</p>
<p>而在講者稱自己為生成式藝術家之前，在許久之前就在網路上教學很多前端互動框架及庫了，例如 <strong>p5.js、Canvas</strong> 甚至透過 <strong>WebSocket</strong> 實作出可以與人互動的藝術裝置。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230812/wuQRCode.png" alt="Profile"></p>
<p>有興趣的夥伴可以直接到講者的 <a href="https://www.youtube.com/channel/UCHX_XMhPrtvOmgGOnA2eTmA">Youtube</a> 去看看看，滿精彩的！</p>
<hr>
<h3 id="午餐時間"><a href="#午餐時間" class="headerlink" title="午餐時間"></a>午餐時間</h3><p><img src="/images/others/loading.gif" data-original="/images/20230812/bandon.png" alt="便當"></p>
<p>中午便當</p>
<ul>
<li>疲勞 -1</li>
<li>飢餓程度 -1</li>
<li>快樂 +1</li>
</ul>
<hr>
<h3 id="資訊架構設計新體驗：在需求情境中運用領域事件分析描述結構化內容"><a href="#資訊架構設計新體驗：在需求情境中運用領域事件分析描述結構化內容" class="headerlink" title="資訊架構設計新體驗：在需求情境中運用領域事件分析描述結構化內容"></a>資訊架構設計新體驗：在需求情境中運用領域事件分析描述結構化內容</h3><p><img src="/images/others/loading.gif" data-original="/images/20230812/DDDBanner.png" alt="資訊架構投影片"></p>
<p>時常畫面與需求都是我們開始一個專案或者功能的起頭，而大部分的循環都會卡在 <strong>PM</strong> 請你先弄畫面，而你想先確認功能是什麼，才能做出有邏輯的畫面。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230812/fight.png" alt="討論與爭鬥"></p>
<p>上面圖片有些許被擋住了，但應該其實大家都看過這個梗圖；其實大部分時候我們需要的是輔助討論的圖像溝通方法而非精美畫面。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230812/kitchen.png" alt="架構需求"></p>
<p>講者使用餐廳比喻，我們需要食材、工具，之後經過加工流程，才能誕生出結果；有時候討論會專注在功能需求方面，但往往我們卻很少討論內容(資訊)哪裡來，需要為什麼需要？</p>
<h4 id="需求膨脹會成為資訊垃圾場"><a href="#需求膨脹會成為資訊垃圾場" class="headerlink" title="需求膨脹會成為資訊垃圾場"></a>需求膨脹會成為資訊垃圾場</h4><p>要有一個好的廚房流程，我們需要先整理我們的餐具，我們總不能使用各種不同的餐具去承裝我們要供應給客人的食物吧？</p>
<p>用餐具來比喻 <strong>資訊收納（關於分類、收納、整理）</strong>：</p>
<ul>
<li>資訊整理 先從觀察基本單位開始，準備餐具</li>
<li>再開始收納餐具</li>
<li>舉例會場擺設，把收納好的一整組餐具開始擺設</li>
</ul>
<p><img src="/images/others/loading.gif" data-original="/images/20230812/container.png" alt="長榮海運我沒買到"></p>
<p>好的分類像是海運貨櫃一樣，可以省掉許多不必要的成本。</p>
<h4 id="釐清需求及具體化需求"><a href="#釐清需求及具體化需求" class="headerlink" title="釐清需求及具體化需求"></a>釐清需求及具體化需求</h4><p><img src="/images/others/loading.gif" data-original="/images/20230812/useCaseForUIUX.png" alt="具體化需求"></p>
<p>使用案例預約訂位來示範怎麼具體化需求（規劃時需要一位對專案是比較熟的），我們需要熟悉需求的人來跟我們討論，而我們可以將需求具體化，方便確定後續我們都在同一個頻道上對話。</p>
<p>內容模型的討論情境，請對方回答一些細節情境，順便看一下過程合不合理；我們也可以特用真實的假資料，假資料拿來測試設計的架構對不對。</p>
<p>最後沒有畫出 <strong>Mock-up</strong> 就能產出需求圖，但其實重點一直都是需求方需要有想法，沒有明確想法的想法，只是一個飄渺的目標，你怎麼做客戶都不會滿意的啦！</p>
<p>畫出架構圖是重要的（例如類似 <strong>DB</strong> 的設計圖），情境的方案探討是很重要的，我們可以從簡單的情境延伸到複雜的情境。</p>
<hr>
<h3 id="無密碼時代降臨！使用-Passkeys-打造無密碼驗證服務"><a href="#無密碼時代降臨！使用-Passkeys-打造無密碼驗證服務" class="headerlink" title="無密碼時代降臨！使用 Passkeys 打造無密碼驗證服務"></a>無密碼時代降臨！使用 Passkeys 打造無密碼驗證服務</h3><p><img src="/images/others/loading.gif" data-original="/images/20230812/keypassBanner.png" alt="PassKeys"></p>
<p>這場非常實用，有興趣的夥伴可以看看講者的<a href="https://www.slideshare.net/ssuser35b57e/passkeys-259810514">簡報</a>。</p>
<p>現今我們使用的服務越來越多，也會產生出無數服務有無數密碼需要記憶，但這麼多密碼，真的安全嗎？</p>
<h4 id="WebAuthn-Web-Authentication"><a href="#WebAuthn-Web-Authentication" class="headerlink" title="WebAuthn(Web Authentication)"></a>WebAuthn(Web Authentication)</h4><p><img src="/images/others/loading.gif" data-original="/images/20230812/webAuthn.png" alt="WebAuthn"></p>
<p>這是 <strong>FIDO</strong> 聯盟與 <strong>W3C</strong> 聯合提出的驗證標準，利用非對稱金鑰的方式進行驗證，類似於我們在 <strong>Git</strong> 上使用的 <strong>SSH</strong> 密鑰。</p>
<p>五分鐘小教室不囉唆直接上圖：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230812/authnOne.png" alt="教學一"><br><img src="/images/others/loading.gif" data-original="/images/20230812/authnTwo.png" alt="教學二"><br><img src="/images/others/loading.gif" data-original="/images/20230812/authnThree.png" alt="教學三"></p>
<p>這種方式優點是密鑰會直接存在你的裝置上，在登入時你還是需要開發商提供的方式去驗證，例如 <strong>iPhone</strong> 就是 <strong>FaceID</strong>、<strong>Mac</strong> 使用 <strong>TouchID</strong>…等等。</p>
<p>而且使用了這種方式，像是微軟就比較激進一點，他會直接把你的密碼從 <strong>DB</strong> 移除，而 <strong>Apple</strong> 及 <strong>Google</strong> 還是會存一份，防止你的私鑰真的不見。</p>
<p>缺點顯而易見，就是裝置壞了或是不見了，你密碼就不見了，但相對的，以往我們太多密碼也會寫下來或者存在硬碟裡，不見就不見了，筆者自己的長輩就是如此，通常密碼都不會記得的。</p>
<h3 id="SigUp-及-SignIn"><a href="#SigUp-及-SignIn" class="headerlink" title="SigUp 及 SignIn"></a>SigUp 及 SignIn</h3><p><img src="/images/others/loading.gif" data-original="/images/20230812/webAuthnSignUp.png" alt="註冊"></p>
<p>我們可以透過簡單的程式碼做到註冊裝置，讓我們的網站也能存有使用者的 <strong>Public Key</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> publicKeyCredentialCreationOptions = &#123;</span><br><span class="line">  <span class="attr">challenge</span>: <span class="title class_">Uint8Array</span>.<span class="title function_">from</span>(</span><br><span class="line">    <span class="string">&quot;challenge from server&quot;</span>, <span class="function">(<span class="params">c</span>) =&gt;</span> c.<span class="title function_">charCodeAt</span>(<span class="number">0</span>)</span><br><span class="line">  ), <span class="comment">// 從伺服器產生的隨機字串，避免[重播攻擊](https://zh.wikipedia.org/zh-hk/%E9%87%8D%E6%94%BE%E6%94%BB%E5%87%BB)</span></span><br><span class="line">  <span class="attr">rp</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;FullStackLadder&quot;</span>,</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&quot;fullstackladder.dev&quot;</span></span><br><span class="line">  &#125;, <span class="comment">// relying party 資訊，通常也就是驗證伺服器的資訊，id 需要與網域名稱相符，避免釣魚網站的攻擊</span></span><br><span class="line">  <span class="attr">user</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="title class_">Uint8Array</span>.<span class="title function_">from</span>(<span class="string">&quot;User Id&quot;</span>, <span class="function">(<span class="params">c</span>) =&gt;</span> c.<span class="property">charCodeAt</span> (<span class="number">0</span>)), <span class="attr">name</span>: <span class="string">&quot;mike@fullstackladder.dev&quot;</span>,</span><br><span class="line">    <span class="attr">displayName</span>: <span class="string">&quot;Mike Huang&quot;</span>,</span><br><span class="line">  &#125; <span class="comment">// 目前要註冊裝置的使用者資訊</span></span><br><span class="line">  <span class="attr">pubKeyCredParams</span>: [&#123; <span class="attr">alg</span>: -<span class="number">7</span>, <span class="attr">type</span>: <span class="string">&quot;public-key&quot;</span> &#125;], <span class="comment">// 指定允許使用的簽章演算法，目前有幾種演算法可以拿取你的私鑰去算出是不是正確的，為 -8(Ed25519) -7(ES256) -257(RS256)</span></span><br><span class="line">  <span class="attr">authenticatorSelection</span>: &#123;</span><br><span class="line">    <span class="attr">authenticatorAttachment</span>: <span class="string">&quot;cross-platform&quot;</span></span><br><span class="line">  &#125;, <span class="comment">// (非必要)用來限定可以使用的驗證氣來源</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">60000</span>, <span class="comment">// 註冊流程到期時間(毫秒)</span></span><br><span class="line">  <span class="attr">attestation</span>: <span class="string">&quot;direct&quot;</span>, <span class="comment">// 是否要回傳驗證氣資訊給伺服器</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> credential = <span class="keyword">await</span> navigator.<span class="property">credentials</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">publicKey</span>: publicKeyCredentialCreationOptions,</span><br><span class="line">&#125;); <span class="comment">// 產生公鑰及相關認證資訊，這些資訊可以存到服務端的 DB</span></span><br></pre></td></tr></table></figure>

<p>產生的相關認證為下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">PublicKeyCredential</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;ADSU11KQmbqdGtpu4sjseh4cg2TxSvrbcHDTBsv4NSSX9...&#x27;</span>, <span class="comment">// 產生的認證 ID</span></span><br><span class="line">  <span class="attr">rawId</span>: <span class="title class_">ArrayBuffer</span> (<span class="number">59</span>), <span class="comment">// 也是認證 ID，只是為 [binary 格式(二進制文件)](https://zh.wikipedia.org/zh-hant/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6)</span></span><br><span class="line">  <span class="attr">response</span>: <span class="title class_">AuthenticatorAttestationResponse</span> &#123;</span><br><span class="line">    <span class="attr">clientDataJSON</span>: <span class="title class_">ArrayBuffer</span>(<span class="number">121</span>), <span class="comment">// 瀏覽器與驗證氣之間傳遞的資料</span></span><br><span class="line">    <span class="attr">attestationObject</span>: <span class="title class_">ArrayBuffer</span>(<span class="number">306</span>), <span class="comment">// 驗證器相關資料，包含公鑰等資訊</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;public-key&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20230812/webAuthnSignIn.png" alt="登入驗證"></p>
<p>驗證我們可以透過下面的方式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> publicKeyCredentialRequestOptions = &#123;</span><br><span class="line">  <span class="attr">challenge</span>: <span class="title class_">Uint8Array</span>.<span class="title function_">from</span>(</span><br><span class="line">    <span class="string">&quot;challenge from server&quot;</span>, <span class="function">(<span class="params">c</span>) =&gt;</span> c.<span class="title function_">charCodeAt</span>(<span class="number">0</span>)),</span><br><span class="line">  <span class="attr">allowCredentials</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="title class_">Uint8Array</span>.<span class="title function_">from</span>(</span><br><span class="line">        <span class="string">&quot;credential id&quot;</span>,</span><br><span class="line">        <span class="function">(<span class="params">c</span>) =&gt;</span> c.<span class="title function_">charCodeAt</span>(<span class="number">0</span>)),</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;public-key&quot;</span>,</span><br><span class="line">      <span class="attr">transports</span>: [<span class="string">&quot;internal&quot;</span>],</span><br><span class="line">    &#125;</span><br><span class="line">  ], <span class="comment">// (非必要)允許使用的驗證資訊，可用來限定登入裝置</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">60000</span>, <span class="comment">// 登入流程的到期時間(毫秒)</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> assertion = <span class="keyword">await</span> navigator.<span class="property">credentials</span>.<span class="title function_">get</span>(&#123;</span><br><span class="line">  <span class="attr">publicKey</span>: publicKeyCredentialRequestOptions,</span><br><span class="line">&#125;); <span class="comment">// 取得註冊的裝置資訊，以及相關簽章結果</span></span><br></pre></td></tr></table></figure>

<p>產生的相關認證資訊為下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">PublicKeyCredential</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;ADSUIlKQmbqdGtpu4sjseh4cg2T×SvrbcHDTBsv4NSSX9...&#x27;</span>,</span><br><span class="line">  <span class="attr">rawId</span>: <span class="title class_">ArrayBuffer</span>(<span class="number">59</span>),</span><br><span class="line">  <span class="attr">response</span>:</span><br><span class="line">    <span class="title class_">AuthenticatorAssertionResponse</span> = &#123;</span><br><span class="line">      <span class="attr">authenticatorData</span>: <span class="title class_">ArrayBuffer</span>(<span class="number">191</span>), <span class="comment">// 用來完成這次驗證的裝置資訊(注意：不會包含公鑰資訊)</span></span><br><span class="line">      <span class="attr">clientDataJSON</span>: <span class="title class_">ArrayBuffer</span>(<span class="number">118</span>),</span><br><span class="line">      <span class="attr">signature</span>: <span class="title class_">ArrayBuffer</span>(<span class="number">70</span>), <span class="comment">// 由驗證器私鑰產生的簽章資訊，Client 端根據特定規則產生簽章，Server 端使用已註冊的公鑰驗證簽章</span></span><br><span class="line">      <span class="attr">userHandle</span>: <span class="title class_">ArrayBuffer</span> (<span class="number">10</span>), <span class="comment">// 由驗證器提供的額外使用者資訊</span></span><br><span class="line">    &#125;,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;public-key&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Library"><a href="#Library" class="headerlink" title="Library"></a>Library</h4><p><img src="/images/others/loading.gif" data-original="/images/20230812/webAuthnLibrary.png" alt="Library"></p>
<p>而現在有許多的套件都有提供這種驗證方式，不用自己手刻，有興趣參考程式碼可以看一下講者的簡報，挺有趣的，而筆者自己則找到了 <a href="https://www.corbado.com/passkeys/react?gad=1&gclid=CjwKCAjw_uGmBhBREiwAeOfsdyNfoySOhQofoUpVM9s6aJz2jq72h40yl31allEjXfyriuHvL2x44hoCutYQAvD_BwE">Corbado</a> 這套套件，相信不久後會越來越多服務商提供這種登入方式，既簡單又快速。</p>
<h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><p>有興趣者夥伴可以直接 <strong>Clone</strong> 講者的 <a href="https://github.com/wellwind/webconf23-passkeys-demo">Code</a> 下來玩。</p>
<hr>
<h3 id="下午茶時間"><a href="#下午茶時間" class="headerlink" title="下午茶時間"></a>下午茶時間</h3><p><img src="/images/others/loading.gif" data-original="/images/20230812/teaTime.png" alt="下午茶時間"></p>
<p>其實兩天都有，但是第一天的不知道為什麼數量比較少，去的時候很多東西都被夾光了</p>
<ul>
<li>疲勞 -100</li>
<li>飢餓程度 -100</li>
<li>快樂 +100</li>
</ul>
<hr>
<h3 id="酷！玩！啥鬼CSS"><a href="#酷！玩！啥鬼CSS" class="headerlink" title="酷！玩！啥鬼CSS"></a>酷！玩！啥鬼CSS</h3><p><img src="/images/others/loading.gif" data-original="/images/20230812/amos.png" alt="AMOS"></p>
<p>**Amos！**有學習過 <strong>CSS</strong> 的人大概都會聽過他，這場不外乎就是講了一些必用甚至是新穎的 <strong>CSS</strong>，其中重點摘要為：</p>
<ol>
<li>邏輯屬性</li>
</ol>
<ul>
<li>Block inline 屬性</li>
</ul>
<ol start="2">
<li>首字放大</li>
</ol>
<ul>
<li>first letter</li>
</ul>
<ol start="3">
<li>父層選取器</li>
</ol>
<ul>
<li>:has()</li>
</ul>
<ol start="4">
<li>媒體查詢</li>
</ol>
<ul>
<li>@container 可以不必使用 @media</li>
</ul>
<ol start="5">
<li>級聯層</li>
</ol>
<ul>
<li>@layer 改變順序 上蓋下 後蓋前</li>
</ul>
<p><img src="/images/others/loading.gif" data-original="/images/20230812/2023CSS.png" alt="2023 新穎 CSS"><br><img src="/images/others/loading.gif" data-original="/images/20230812/2023CSSWithText.png" alt="2023 新穎 CSS 附上英文字"></p>
<p>前面除了講者自己回顧之前做過的一些閒暇時做的作品(真的很屌)，有興趣可以參考他的 <a href="https://www.youtube.com/watch?v=ZavL9y4Adrk&list=PLqivELodHt3iL9PgGHg0_EF86FwdiqCre&ab_channel=CSScoke">Youtube - 金魚都能懂系列</a></p>
<hr>
<h3 id="Beyond-Technology-技術之外-從個人身心安頓到人類福祉追求"><a href="#Beyond-Technology-技術之外-從個人身心安頓到人類福祉追求" class="headerlink" title="Beyond Technology 技術之外 - 從個人身心安頓到人類福祉追求"></a>Beyond Technology 技術之外 - 從個人身心安頓到人類福祉追求</h3><p><img src="/images/others/loading.gif" data-original="/images/20230812/beyound.png" alt="Beyond Technology"></p>
<p>這場真的是技術之外的心得談，人常說家有一老如有一寶(筆者不是在攻擊講者)，非常有道理，因為他們身上蘊含的都是智慧，而這些智慧是經過生活及歷練孕育出來的。</p>
<p>講者提出三個規劃，讓你的人生不會太過的焦慮也能感到幸福：</p>
<ol>
<li>過去 - 感恩</li>
<li>現在 - 安頓</li>
<li>未來 - 目標</li>
</ol>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>這是第二天的內容，其實筆者覺得每一場會議時間太過剪短，以致於一些比較深入的東西很難聽到，但不能否認這整個會議的目標就是暢談這十年以及最近的 <strong>Web</strong> 趨勢，理所當然會是心得居多。</p>
<p>而講者需要技巧，聽者也需要技巧，如何整理收納並吸收這些知識就是我們聽者需要做的，不過常聽演講的夥伴應該也能知道，如何區分一位好的講者，聽聽他是不是照著 <strong>PPT Show</strong> 出來的東西念就對了，好的講者應該是更應該把精力放在如何把觀眾帶入到他自己的觀點中，透過講者得角度帶領聽眾去理解及獲得他想傳遞的東西。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230812/endStatistics.png" alt="結果統計"></p>
<p>最後還是要感謝主辦方主辦這麼一場很精彩的會議，但我想現在是個言論自由的國度，有些東西還是可以說出來的吧，是吧？！</p>
<p>我覺得有幾點是會議之後可以改善的</p>
<ol>
<li>場地太小 - 很多比較熱門的議程，過多的人去聽，導致很多人需要站著(雖然有人會不認同，但請繼續往下看)</li>
<li>時程太緊湊 - 每一個議程時程大約都只有 40-45 min，個人覺得太短，很多東西都只是被皮毛帶過(雖然有人會不認同，但請繼續往下看)</li>
<li>分流同時段進行卻沒有錄影回放 - 雖然主辦方有說過他們在開始前有問過講者，是不是不錄影，他們演講會比較自然，最後他們採用不錄影的方式，但一個時段有三個議程，我想要三個議程都聽到，這時候只能挑其中一個，剛好如果你又是選擇障礙者，會很困擾(雖然有人會不認同，但請繼續往下看)</li>
<li>這點講出來可能會被噴，但看完這點請繼續往下看 - 紀念品太過簡單(雖然有人會不認同，但請繼續往下看)</li>
</ol>
<p>好，說完缺點來說說為什麼吧。</p>
<p>首先主辦方有提到他們十年前有舉辦過，而他們吸取不好的教訓去改善，保留好的東西，他們有提到之前也有發生人太多導致很多人需要站著或坐著，但這次竟然又發生了，我想如果有這種情況，應該是一開始就能避免，因為人數及位子是一開始就能掌握的，而非賣超過的票，然後讓觀眾忍耐一下，畢竟這場會議也是不便宜啊。</p>
<p>再來是時程太緊湊，雖然有人覺得人的精力只能專注在幾十分鐘內，太長的話你根本專注不下去，但舉例來說，有一場會議筆者想聽 <strong>K8s</strong> 的議程，但整場幾乎都是在聽他們為什麼要導入，怎麼導入(沒有太多的實作舉例)，然後他們解決了啥，個人覺得像是花錢去聽了公司就會有的技術心得分享會，聽同事試圖說服我他之前用過什麼很好用，然後要我導入，但請我自己去開官方文件來研究。</p>
<p>第三點是分流進行沒有錄影，還是那點，我覺得花了錢了，應該是能取得最大的效益，當然你也許會秉持著熱情，或者不同的看法，我都尊重，但是我覺得講者及參加者應該都需要被尊重，而非講者統一決定了之後，讓參與者直接接受做法，我不確定是前是不是有什麼地方有公告，但至少在報名流程上我沒有看見(歡迎打臉我，我就是說說自己的想法)，如果今天我是免費近來聽，那我尊重！</p>
<p>最後一點是紀念品的部分，其實說到這邊可能會有人覺得，啊你不就花錢想當大爺，但說真的我今天不是去做公益，我覺得花了錢，我就會有預期心理，而沒有得到你的預期報酬，你當然會有不滿足的地方，不然怎麼會有消基會呢？不然你怎麼不跟老闆談理想呢？對吧！</p>
<p>雖然前面說了很多缺點，但其實我也只是想要做到 <strong>Ruddy</strong> 老師說的，你覺得操作者體驗不好？那就說出來啊，你不說，怎麼會有人知道呢！</p>
<p>自己期許下一屆的 <strong>Webconf</strong> 會更好，我還是很感謝主辦方辛苦主辦這一切，但你知道的，完美並不完美，如果這世界都只有一種聲音，就不正常了是吧。</p>
<p>另外筆記內容可能不是那麼正確，可以參考官方提供的 <a href="https://hackmd.io/@webconf/BkImQ0Ds3/%2FwHBNj8NPQamxPecU9VXoHQ?utm_source=badge&utm_medium=badge&utm_campaign=webconf2023">共筆</a>，裡面記錄的很詳細。</p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><a href="https://webconf.tw/">Webconf Taiwan 2023</a></li>
<li><a href="https://hackmd.io/@webconf/BkImQ0Ds3/%2FwHBNj8NPQamxPecU9VXoHQ?utm_source=badge&utm_medium=badge&utm_campaign=webconf2023">Webconf Taiwan 2023 共筆</a></li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>WebConf</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>Other</tag>
        <tag>Life</tag>
        <tag>WebConf</tag>
      </tags>
  </entry>
  <entry>
    <title>[Life Note] - WebConf Taiwan 2023 技術研討會</title>
    <url>/2023/08/11/20230811/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p><img src="/images/others/loading.gif" data-original="/images/20230811/banner.png" alt="Webconf Logo"></p>
<p>經歷了十年，Webconf 又重啟了一次會議，這次場地在 <strong>台北張榮發國際會議中心</strong>，這是一個什麼會議呢？</p>
<p>『WebConf 不僅僅關注過去，還關注網頁的未來趨勢和新興技術，並提供業界趨勢及發展方向，以協助企業更好地了解未來網頁發展的方向。』 - 引述官方網站的話，基本就是介紹這數十年以及現在還有未來網頁相關的議題。</p>
<p>接下來筆者將會將所聽到一些比較有趣的內心紀錄在此處，有興趣的歡迎繼續看下去。</p>
<span id="more"></span>

<p>由於議程的進行方式為一個時段為四十到四十五分鐘不等，一個時段同時會有三個講者，所以只能挑一個議題進去聆聽，下面筆者會說自己挑了哪些議程進去聽，主要偏前端。</p>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p>本次紀錄不會太過詳細紀錄每個講者講過的話及內容，但會把筆者覺得有意思的點記錄下來，更詳細的內容可以直接參考官方提供的 『<a href="https://hackmd.io/@webconf/BkImQ0Ds3/%2FwHBNj8NPQamxPecU9VXoHQ?utm_source=badge&utm_medium=badge&utm_campaign=webconf2023">共筆</a>』</p>
<p>會議也有提到這次有跟講者們討論過後，決定以不論影的方式進行，故後續只有共筆紀錄演講過程。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230811/scheduleOne.png" alt="scheduleOne"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20230811/scheduleTwo.png" alt="scheduleTwo"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20230811/scheduleThree.png" alt="scheduleThree"></p>
<blockquote>
<p><em>筆者將有去聽的議程用紅框圍起來，如果有同步聯播的，就會三廳的人一起聽到，不會分場次。</em></p>
</blockquote>
<table>
<thead>
<tr>
<th>時間</th>
<th>議程內容</th>
</tr>
</thead>
<tbody><tr>
<td>09:00-09:45</td>
<td><a href="https://hackmd.io/@webconf/BkImQ0Ds3/%2F7QQ9xke6RpipDG2QOYb14A?utm_source=badge&utm_medium=badge&utm_campaign=webconf2023">改進容器化部署：成功導入 K8S 的經驗與挑戰</a></td>
</tr>
<tr>
<td>09:55-10:05</td>
<td>引言</td>
</tr>
<tr>
<td>10:05-10:50</td>
<td><a href="https://hackmd.io/@webconf/BkImQ0Ds3/%2FTz4XDh74SqGDDZiGcWBaKg?utm_source=badge&utm_medium=badge&utm_campaign=webconf2023">AI 驅動下的開發者體驗</a></td>
</tr>
<tr>
<td>11:00-11:45</td>
<td><a href="https://hackmd.io/@webconf/BkImQ0Ds3/%2FqY9O-dlVTgWWUbrgsYdf4w?utm_source=badge&utm_medium=badge&utm_campaign=webconf2023">WebComponent 的好，用過的都知道</a></td>
</tr>
<tr>
<td>11:55-12:40</td>
<td><a href="https://hackmd.io/@webconf/BkImQ0Ds3/%2FcPQikssETpSBS33EgKkQKw?utm_source=badge&utm_medium=badge&utm_campaign=webconf2023">成為前端建築師吧！透過 Frontend Infra 為前端應用打造穩健且高效率的開發體驗</a></td>
</tr>
<tr>
<td></td>
<td>午餐時間</td>
</tr>
<tr>
<td>13:30-14:15</td>
<td><a href="https://hackmd.io/@webconf/BkImQ0Ds3/%2FvE_e1uiJTZyNVTjeKPmlJg?utm_source=badge&utm_medium=badge&utm_campaign=webconf2023">堆砌你獨一無二的專業價值 - 鈦坦設計師的開放式技能地圖分享</a></td>
</tr>
<tr>
<td>14:25-15:10</td>
<td><a href="https://hackmd.io/@webconf/BkImQ0Ds3/%2FmRsVX_zeSia-A19Zda2C3w?utm_source=badge&utm_medium=badge&utm_campaign=webconf2023">跳脫技術職與管理職的二分選擇，技術管理職讓職涯無限寬廣</a></td>
</tr>
<tr>
<td>15:20-16:05</td>
<td><a href="https://hackmd.io/@webconf/BkImQ0Ds3/%2FGmg_L6YOT-yMko_qZ_pEeg?utm_source=badge&utm_medium=badge&utm_campaign=webconf2023">那些理所當然，卻像空氣般重要的小事：談開發流程、程式架構與職涯發展</a></td>
</tr>
<tr>
<td>16:15-17:00</td>
<td><a href="https://hackmd.io/@webconf/BkImQ0Ds3/%2F00roPb7NQKOEHNoFGT6hig?utm_source=badge&utm_medium=badge&utm_campaign=webconf2023">從專業到商業：十年軟體架構變遷</a></td>
</tr>
</tbody></table>
<hr>
<h3 id="入場"><a href="#入場" class="headerlink" title="入場"></a>入場</h3><p><img src="/images/others/loading.gif" data-original="/images/20230811/entry.png" alt="會場入口"></p>
<p>聽說上一次會場在中研院，那時候筆者還沒開始工程師之路，所以無從比較，但這次入門後看起來一樓還滿大的。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230811/scheduleBoard.png" alt="電子佈告欄"></p>
<p>在旁邊也明確寫著今天會議的場地分別在十樓及十一樓。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230811/checkIn.png" alt="報到"></p>
<p>報導的方式採用刷 <a href="https://www.accupass.com/">ACCUPASS</a> 的票券確認後，會發識別名牌及一份紀念品袋子給你，然後就可以上樓了</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230811/bag.png" alt="紀念品袋子"></p>
<p>當天給的紀念品是一個滿實用的袋子，以及入場還有兌換兩天餐點使用的名牌</p>
<p>報到開始時間為八點半再多一點，整體還算滿流暢的，後面就直接上樓去了，然後挑到你想要聽的會議廳入場，有點像是在上課。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230811/fullSchedule.png" alt="行程表"></p>
<p>這邊再次補上 8&#x2F;11 整日的行程表。</p>
<hr>
<h3 id="改進容器化部署：成功導入-K8S-的經驗與挑戰"><a href="#改進容器化部署：成功導入-K8S-的經驗與挑戰" class="headerlink" title="改進容器化部署：成功導入 K8S 的經驗與挑戰"></a>改進容器化部署：成功導入 K8S 的經驗與挑戰</h3><p>第一個場次筆者選擇這個會議去聆聽，因為筆者也滿想要在工作上融入自動化流程，而簡介上寫著兩點適合聽眾。</p>
<ol>
<li>尚未使用 K8S，但想導入 K8S 的開發團隊。</li>
<li>對於 DevOps 或 基礎建設有興趣的任何技術人。</li>
</ol>
<p>實際上聽確實有符合又好像沒有符合，講者大概就是說說他們團隊從完全不懂 <strong>K8s</strong>，一直到引入並且通過 <strong>AWS</strong> 的相關認證是怎麼走過來的。</p>
<blockquote>
<p><em><strong>因為剛開始主持人有請大家不要拍照，但後來還是滿多人拍照的，故我的照片會滿少的，基本上會議還是專心在聆聽，所以要請觀看筆記心得的人見諒了</strong></em></p>
</blockquote>
<p>講者的演講核心內容其實是說該怎麼從對一件大方向不知道該怎麼做的事情，透過縮小目標，從小地方開始達成著手，慢慢的可以完成最終目標。</p>
<p>講者提到他們最剛開始其實都是相對簡單的環境流程 <strong>User -&gt; Elastic Load Balance -&gt; Docker container</strong></p>
<p>他們會開始考慮到要導入 <strong>K8s</strong> 以及更換環境配置的原因為：</p>
<ol>
<li>考慮到缺點</li>
</ol>
<ul>
<li>擴充性差</li>
<li>資源利用差(財務方面)</li>
<li>人力資源介入</li>
<li>無法快速建立多個 sandbox 環境(換架構或更版等等)</li>
</ul>
<ol start="2">
<li>產品特性</li>
<li>評估未來需求</li>
</ol>
<p>而他們怎麼開始做：</p>
<ul>
<li>評估並拆分目標(工程師)</li>
<li>尋求專業幫助(公司方)</li>
<li>定目標時程</li>
<li>分享會</li>
</ul>
<p>有點像是 <strong>5W1H</strong> 那種概念。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230811/k8sSaaSArchitecture.png" alt="架構圖"></p>
<blockquote>
<p>圖片截錄來自講者的 <a href="https://drive.google.com/file/d/1O900PsB-v3LClFoU88gQLDCPGjUXv5EB/view">PPT</a></p>
</blockquote>
<p>這是最後他們規劃出來的流程圖，整體可以看得出來很精細，也不容易被攻擊，這似乎也是大部分想要做好自動化以及資安的團隊想要達到的效果之一。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230811/takeMyMoney.png" alt="架構隨著企業 BUsiness Model 調整"></p>
<p>但是講者有特別提到一點很重要的點：</p>
<p>千萬不要剛開始就想要全部的自動化直上，因為 『<strong>架構是隨著企業 Business Model 逐步調整</strong>』，而好的架構通常都是需要錢堆出來的，如果剛開始你就想搞 <strong>K8s</strong> 想搞 <strong>AWS</strong> 認證，可能都還沒賺到錢，就先燒了一堆錢掉。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230811/recommend.png" alt="最後給新創的建議"></p>
<hr>
<h3 id="AI-驅動下的開發者體驗"><a href="#AI-驅動下的開發者體驗" class="headerlink" title="AI 驅動下的開發者體驗"></a>AI 驅動下的開發者體驗</h3><blockquote>
<p><em><strong>這邊雖然跳過引言，但主辦的高見龍龍哥有提到一件很重要的事情，千萬不要把這次會議當作來上課，來交朋友！或許你身邊做的都是一些很厲害的人。</strong></em></p>
</blockquote>
<p>主講為 <strong>Ruddy</strong> 老師，內容實在滿清彩的，讓我覺得短短四十幾分鐘真的不夠的講者。</p>
<p>其中內容從 <strong>ChatGPT</strong> 作為範例講述我們碰到 <strong>AI</strong> 之後是不是應該當一個 <strong>Good Enough 先生&#x2F;女士</strong> 就好？一直到內化知識、開發者體驗、最後到 <strong>AI</strong> 探討未知。</p>
<h4 id="開發者體驗定義"><a href="#開發者體驗定義" class="headerlink" title="開發者體驗定義"></a>開發者體驗定義</h4><p>首先談到人們一般使用到 <strong>API</strong> 的感覺，講者使用廣義及狹義的定義來解釋，而在專案開始之初需要看到全貌，但也需要時常反思及提問自己，這是一個看到全貌的好方法，千萬不要當一個 <strong>剛好先生&#x2F;女士(Mr.&#x2F;Miss Good Enough)</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230811/goodEnough.png" alt="Good Enough"></p>
<h4 id="AI驅動變革的核心思維"><a href="#AI驅動變革的核心思維" class="headerlink" title="AI驅動變革的核心思維"></a>AI驅動變革的核心思維</h4><p><strong>ChatGPT</strong> ，起初講者也是很擔心這類應用的橫空出世，但是因為他看見了每個人都在因為 <strong>AI</strong> 應用的出現而逼得自己需要開始成長而不擔心甚至高興。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230811/whereIsAI.png" alt="AI 在哪裡"></p>
<p>其中也有提到 <strong>ChatGPT</strong> 我們不能一昧地把它當成 <strong>Good Enough</strong> 工具，因為在我們以往的搜索資料流程，我們是透過接收 <strong>Google</strong> 提供給我們的資料，一邊學習、一邊組織自己的知識，如果我們用 <strong>ChatGPT</strong>，但不能夠有質疑他且有自己組織答案的能力，那就必須要改變你的使用方式。</p>
<p>另外還有提到 <strong>艾賓豪斯遺忘曲線</strong></p>
<p><img src="/images/others/loading.gif" data-original="/images/20230811/forgettingCurve.png" alt="艾賓豪斯遺忘曲線"></p>
<p>沒錯，我已經是學習過後的九小時後了，大約遺忘了 <strong>64%</strong> 左右…</p>
<blockquote>
<p><em><strong>也許超過了…</strong></em></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20230811/noteWithStudy.png" alt="將筆記放在學習路徑上"></p>
<p>講者多次提到，將知識內化，用自己的語調重新講一次，然後放在未來要行進的路徑上，否則只是囤積知識。</p>
<h4 id="AI-時代的新開發者體驗"><a href="#AI-時代的新開發者體驗" class="headerlink" title="AI 時代的新開發者體驗"></a>AI 時代的新開發者體驗</h4><p>內容跟前一個小節非常像，也是提到需要去審視 <strong>AI</strong> 給予你的答案，而不是直接當成答案吸收。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230811/IPs.png" alt="IPs"></p>
<p>講者提到我們都應該有 <strong>IPs(Intermediate Packets)</strong> 的思維，與其從任務的角度來學習成長，不如從既有的知識資產視角看待工作。</p>
<h4 id="運用-AI-探討未知"><a href="#運用-AI-探討未知" class="headerlink" title="運用 AI 探討未知"></a>運用 AI 探討未知</h4><p><img src="/images/others/loading.gif" data-original="/images/20230811/DKEffect.png" alt="IPs"></p>
<p>最後提到 <strong>達克效應</strong>，講者希望我們可以藉由 <strong>AI</strong> 去探索未知的未知，我們可能都看過一張 <strong>愚昧之巔、絕望之谷 及 開悟山坡</strong> 的圖，我們可以透過 <strong>AI</strong> 去讓我們更好的一虧全貌，探討未知。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230811/aiWithUnknown.png" alt="Unknown"></p>
<p>這個矩陣中四個分別可以怎麼透過 <strong>AI</strong> 去持續改善並且加強我們自己呢？各位可以好好思考一下</p>
<hr>
<h3 id="WebComponent-的好，用過的都知道"><a href="#WebComponent-的好，用過的都知道" class="headerlink" title="WebComponent 的好，用過的都知道"></a>WebComponent 的好，用過的都知道</h3><p><img src="/images/others/loading.gif" data-original="/images/20230811/milkmidi.png" alt="奶綠茶大"></p>
<p>這場終於讓我見到聞名已久的奶綠茶大大，整個很精彩啊，講者提到了現今大多人使用的都已經是 <strong>Vue &#x2F; React &#x2F; AG…</strong> 等等的三大框架，那如果我們今天有頁面是比較舊的，有包含 <strong>jQuery</strong> 的，或是簡單的頁面，不需要太繁瑣的渲染的，我們該怎麼好管理呢？</p>
<p>藉由 <a href="https://johnnywang1994.github.io/book/articles/js/web-component.html">Web Component 學習筆記</a> 一文的內容來簡單展示使用方式：</p>
<p>我們概念一樣就是以 <strong>Component</strong> 去拆分，今天將會用到的元件使用 <strong>Component</strong> 去拆分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-button</span>&gt;</span><span class="tag">&lt;/<span class="name">my-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以看到 <strong>wc-element</strong> 就是我們拉出來要做 <strong>Web Component</strong> 的部分，隨後我們再拉一份 <strong>JS</strong> 去寫這個元件的實際內容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 創建 Custom Element</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyButton</span> <span class="keyword">extends</span> <span class="title class_ inherited__">HTMLElement</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 一定要先繼承</span></span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="comment">// this 指向創建的 dom 節點</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;button&gt;按鈕&lt;/button&gt;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">customElements.<span class="title function_">define</span>(<span class="string">&#x27;my-button&#x27;</span>, <span class="title class_">MyButton</span>);</span><br></pre></td></tr></table></figure>

<p>有興趣的都可以直接上網找範例以及用法，會議內容沒有太過詳細的去帶入，另外還有看見講者的貓咪照片以及無情工商。</p>
<hr>
<h3 id="成為前端建築師吧！透過-Frontend-Infra-為前端應用打造穩健且高效率的開發體驗"><a href="#成為前端建築師吧！透過-Frontend-Infra-為前端應用打造穩健且高效率的開發體驗" class="headerlink" title="成為前端建築師吧！透過 Frontend Infra 為前端應用打造穩健且高效率的開發體驗"></a>成為前端建築師吧！透過 Frontend Infra 為前端應用打造穩健且高效率的開發體驗</h3><p><img src="/images/others/loading.gif" data-original="/images/20230811/kelyMo.png" alt="莫大"></p>
<p>這一場也是筆者一直期待很久的，筆者一直不想將自己侷限在前端範疇，所以能有往外延伸的機會是幾乎不拒絕的。</p>
<p>這場會議中講了很多關於 <strong>Front-end Infra</strong> 的相關議題，而怎麼樣可以算是 <strong>Front-end Infra</strong> 呢？</p>
<p>『 Frontend Infra 這個詞通常被用來描述為了提升「開發效率」和「產品質量」而導入的一套系統、流程或工具，並且常常包括一些關於如何使用這些工具和系統的最佳實踐或標準。』- 這是講者給的答案</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230811/CICDStep.png" alt="CI&#x2F;CD"></p>
<p>講者建議我們可以把自己部署流程化一個流程圖出來，這樣你就能比較清楚知道在什麼地方可以去做什麼事情。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230811/DevSecOps.png" alt="DevSecOps"></p>
<p>而現在前後端界線也越來越模糊了，甚至可以說是出現了 <strong>DevSecOps</strong> 的崗位。</p>
<blockquote>
<p><em><strong>其中也沒有太過深入談到一些工具應用，有興趣可以參考筆者的 <a href="https://slides.com/oldmo860617/minimal">PPT</a></strong></em></p>
</blockquote>
<hr>
<h3 id="午餐時間"><a href="#午餐時間" class="headerlink" title="午餐時間"></a>午餐時間</h3><p><img src="/images/others/loading.gif" data-original="/images/20230811/bandon.png" alt="便當"></p>
<p>中午便當</p>
<ul>
<li>疲勞 -1</li>
<li>飢餓程度 -1</li>
<li>快樂 +1</li>
</ul>
<hr>
<h3 id="堆砌你獨一無二的專業價值-鈦坦設計師的開放式技能地圖分享"><a href="#堆砌你獨一無二的專業價值-鈦坦設計師的開放式技能地圖分享" class="headerlink" title="堆砌你獨一無二的專業價值 - 鈦坦設計師的開放式技能地圖分享"></a>堆砌你獨一無二的專業價值 - 鈦坦設計師的開放式技能地圖分享</h3><p>這堂講座我選的其實有點猶豫，原本想聽講者 <strong>劉艾霖 (AILIN LIOU)</strong> 的 <strong>建立高效的遠端協作團隊：策略和實踐</strong>，但最後還是挑了這堂，因為我其實對開放式技能地圖滿有興趣的，<strong>But</strong>，這堂會議跟我想的有點落差。</p>
<p>會議中大致再說泰坦科技怎麼去評分一個人的技能分數，他們會挑半年或者一年去評估，其中他們透過以下幾點方式去評估分析每一個人的現況分數：</p>
<ol>
<li>透過 Ikigai 分析現況分數</li>
<li>定時檢視目標</li>
<li>縮小目標範圍 - 從小到大</li>
</ol>
<p><img src="/images/others/loading.gif" data-original="/images/20230811/ikigai.png" alt="Ikigai"></p>
<p>整天過程可以簡化為，<strong>確認現況 - 訂定目標 - 檢視調整</strong>。</p>
<hr>
<h3 id="跳脫技術職與管理職的二分選擇，技術管理職讓職涯無限寬廣"><a href="#跳脫技術職與管理職的二分選擇，技術管理職讓職涯無限寬廣" class="headerlink" title="跳脫技術職與管理職的二分選擇，技術管理職讓職涯無限寬廣"></a>跳脫技術職與管理職的二分選擇，技術管理職讓職涯無限寬廣</h3><p><img src="/images/others/loading.gif" data-original="/images/20230811/techOrManager.png" alt="技術或管理職？"></p>
<p>這個會議也挺有趣的，一般我們工程師到一個年紀都會選擇之後要走的路，但一路人不免如好像大家都會說，你要選 <strong>技術職</strong> 還是 <strong>管理職</strong>？</p>
<p>講者說，為什麼你會區分那麼開來？那問問你，架構分析師是前者還是後者呢？</p>
<p>先說答案，其實是中間，這好像有說又好像沒說，但我覺得整場會議囊括下來的重點就是：</p>
<ul>
<li>不要把自己侷限在某一個區塊裡，多學習商業思維，即使你只是個工程師</li>
<li>為何要學商業思維 - 拒絕參與政治的結果 就是被糟糕的人統治</li>
<li>有再好的技術，如果沒有有效的管理技術價值，那就不能創造價值</li>
</ul>
<p>講者也有給工作者的三個職涯建議，容許我從共筆引用過來：</p>
<ol>
<li>把自己放到離價值近的地方</li>
</ol>
<ul>
<li>架構師</li>
<li>Tech Lead：不一定是行政職，作為 senior 帶領 junior 也可以</li>
<li>Decisional roles</li>
</ul>
<ol start="2">
<li>帶人一定要趁早</li>
</ol>
<ul>
<li>Senior：獨當一面，帶領 junior 完成任務</li>
<li>Architect：考量商業目的，規劃架構，協同軟體工程師完成開發工作。</li>
<li>Tech lead：資源分配的工作，承接任務、排定計畫、帶領團隊、完成任務、達成目標。</li>
</ul>
<blockquote>
<p><em><strong>能帶人比較容易被 Promote，Promote 不一定是升主管，但一定會人見人愛</strong></em></p>
</blockquote>
<ol start="3">
<li>精進自己的管理能力</li>
</ol>
<p>追求更快、更好、更有價值，講者使用夜班維運問題來舉例，客服接到電話就會打電話叫工程師起來，但其實伺服器是會重啟的，可能有裝 <strong>K8s</strong> 之類的，所以工程師就會被吵醒後又回去睡，也沒辦法做什麼事情幫忙，所以後來講者幫客服做了一顆重啟按鈕，短期內可以做的先治標，長期則慢慢努力去做到治本。</p>
<hr>
<h3 id="那些理所當然，卻像空氣般重要的小事：談開發流程、程式架構與職涯發展"><a href="#那些理所當然，卻像空氣般重要的小事：談開發流程、程式架構與職涯發展" class="headerlink" title="那些理所當然，卻像空氣般重要的小事：談開發流程、程式架構與職涯發展"></a>那些理所當然，卻像空氣般重要的小事：談開發流程、程式架構與職涯發展</h3><p>這場印象最深刻就是講者說了『聽君一席話，如聽一席話』，不知道為什麼整場聽下來有點這種感覺，不過先說不是批評，就覺得好像有點道理，但卻又不知道該怎麼抓重點。</p>
<p>這堂大致也是脫離不了不要把自己侷限在某一個區塊內，你現在做的，也許公司不會在意到，但你的生涯可是會反映在以後的，能自動化的東西就不要手動去做，也避免手寫文件，這是你可能在建置環境或者訂定寫作風格規範的第一步，但也請把它當作最後一步，可以讓 <strong>Bot</strong> 去做的事情，就讓 <strong>Bot</strong> 去規範。</p>
<hr>
<h3 id="從專業到商業：十年軟體架構變遷"><a href="#從專業到商業：十年軟體架構變遷" class="headerlink" title="從專業到商業：十年軟體架構變遷"></a>從專業到商業：十年軟體架構變遷</h3><p>這場果然是壓軸，整場精華滿滿，從 專業 跟 商業，一直講到 PHP 死透沒，隨然幾十分鐘很短暫，但講者還是用了滿滿的精華帶過。</p>
<p>以下節錄幾個還停留在記憶內的重點：</p>
<ul>
<li>選擇還是努力重要(兩者都需要重視)<ol>
<li>選擇提高上限</li>
<li>努力提高下限</li>
</ol>
</li>
<li>架構師的誕生，需要有能力影響組織</li>
<li>你是 棋手 或 棋子</li>
<li>畫出組織圖就能找出該組織的核心人物，也許那個人不一定是會議上最常發言的，如果核心人物離職你會很難受，就像掃地阿姨</li>
<li>前端與後端的界線越來越模糊，全端 &#x3D; 前端 + 後端 + DevOps…</li>
<li>Next.js - PHP? PHP 透過這種方式復活了嗎?</li>
<li>Front page - no code</li>
</ul>
<p><img src="/images/others/loading.gif" data-original="/images/20230811/threeWayDeveloper.png" alt="路線圖"></p>
<p>最後筆者最有印象的是，很多人都說要做全端，而上面是全端的路線圖</p>
<p>然後現在的全端界線越來越模糊了，如果你想做全端，現在的全端大概像下面這樣</p>
<p>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.</p>
<p><img src="/images/others/loading.gif" data-original="/images/20230811/onePiece.png" alt="海軍三將"></p>
<blockquote>
<p><em><strong>現場笑噴了</strong></em></p>
</blockquote>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>這是第一天的心得整理，其實過程筆者盡量讓自己專注在演講當中，所以也比較少筆記，想避免掉筆記的途中，又漏掉一些精彩的內容。</p>
<p>這次會議真的是講者分享心得居多，我覺得如果想在其中獲得怎麼實用或者深入的技能知識，我覺得可能很難，但你可以透過講者的經歷去得知一些有趣的過往或者實例。</p>
<p>第一天整理得有點昌促，因為是在回休息處臨時整理的，不過如果真的有興趣的朋友，真的很歡迎直接查看官方的 <a href="https://hackmd.io/@webconf/BkImQ0Ds3/%2FwHBNj8NPQamxPecU9VXoHQ?utm_source=badge&utm_medium=badge&utm_campaign=webconf2023">共筆</a>，裡面記錄的很詳細。</p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><a href="https://webconf.tw/">Webconf Taiwan 2023</a></li>
<li><a href="https://hackmd.io/@webconf/BkImQ0Ds3/%2FwHBNj8NPQamxPecU9VXoHQ?utm_source=badge&utm_medium=badge&utm_campaign=webconf2023">Webconf Taiwan 2023 共筆</a></li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>WebConf</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>Other</tag>
        <tag>Life</tag>
        <tag>WebConf</tag>
      </tags>
  </entry>
  <entry>
    <title>[Life Note] - 近視雷射</title>
    <url>/2024/03/18/20240318/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p><img src="/images/others/loading.gif" data-original="/images/20240318/banner.jpeg" alt="Banner"></p>
<p>講了好久想要寫一些生活文章，剛好在近期跑去做了近視雷射，恰巧身邊滿多朋友有興趣，就來寫一下心得。</p>
<span id="more"></span>

<p>整篇文章是筆者自己的心得，實際體驗還是會依照不同的體質產生不同的體驗，如果文內有錯誤的地方，還請盡情指出。</p>
<blockquote>
<p><em><strong>注意：筆者所體驗的技術皆截至 2024&#x2F;03&#x2F;18 左右的時間，科技日新月異，往後有不同的做法或者體驗，是有可能的</strong></em></p>
</blockquote>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><blockquote>
<p>本來想說生活文章就輕鬆打，但也不想過於隨便，這邊還是會簡單分類一下摘要</p>
</blockquote>
<ol>
<li>什麼是近視雷射</li>
<li>近視雷射的種類</li>
<li>體驗心得</li>
</ol>
<p><em><strong>備註：再次強調，筆者所體驗的技術皆截至 2024&#x2F;03&#x2F;18 左右的時間，科技日新月異，往後有不同的做法或者體驗，是有可能的</strong></em></p>
<p>另外筆者沒有收取業配費用，一切皆是因為朋友有興趣，所以打算寫一篇文章介紹一下，順便記錄一下自己的心得。</p>
<hr>
<h3 id="什麼是近視雷射"><a href="#什麼是近視雷射" class="headerlink" title="什麼是近視雷射"></a>什麼是近視雷射</h3><p>近視雷射在維基百科其實全名叫做 <strong>雷射屈光手術</strong>，大多的人應該都有聽過，早期或許技術沒有那麼發達，手術的人比較少，但近幾年來因為技術的發展，越來越多的人都會去進行雷射手術。</p>
<p>要說近視雷射必須要先說說人的眼睛構造，以及為什麼近視會看不太到。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240318/type.png" alt="Type"></p>
<blockquote>
<p>圖片來源：<a href="https://www.eyelasik.com.tw/%E8%BF%91%E8%A6%96%E9%9B%B7%E5%B0%84%E7%9F%AF%E6%AD%A3%E5%8E%9F%E7%90%86.htm">白佳欣眼科</a></p>
</blockquote>
<p>圖片可以看到近視的人焦點不會聚焦在視網膜上，而是在視網之前，而透過近視雷射可以將我們的焦點重新調整至視網膜上。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240318/eyes.png" alt="Eyes"></p>
<blockquote>
<p>圖片來源：<a href="https://pansci.asia/archives/327055">泛科學</a></p>
</blockquote>
<p>透過上圖中間可以看到人的眼睛有分好幾層，而近視雷射大部分都是會透過切除掉或是雷射掉基質層去讓你的眼睛能重新正確的對焦到焦點上。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240318/eyes2.png" alt="Eyes"></p>
<blockquote>
<p>圖片來源：<a href="https://www.wishvision.com.tw/">濰視眼科</a></p>
</blockquote>
<p>上圖更明確地介紹了跟手術最相關的三層眼睛的構造</p>
<hr>
<h3 id="近視雷射的種類"><a href="#近視雷射的種類" class="headerlink" title="近視雷射的種類"></a>近視雷射的種類</h3><p>以前的近視手術還沒有這麼先進的時候，有一種方式是透過滴譨溶解角膜的液體在眼睛上，之後再用手術專用的刀去刮開你的角膜；另一種方式則是直接透過鑽石刀在角膜上畫出放射狀刀痕。</p>
<p>但是現在這手術都很進步了，大家幾乎都是選擇雷射，優點顯而易見，最大的好處就是幾乎不需要醫生操刀直接碰觸到你的眼睛，而是改由機器直接去執行，快速且品質較統一，不會因為醫生的技術或者當天的心情起伏影響手術過程。</p>
<p>講這麼多筆者覺得不如直接上圖，這邊筆者要先說一下近期大家比較常聽到的幾家手術眼科，由於筆者在台中，故提出來的會是台中比較常聽到的。</p>
<ul>
<li><a href="https://www.eyelasik.com.tw/">白佳欣眼科</a></li>
<li><a href="https://www.wishvision.com.tw/">濰視眼科</a></li>
<li><a href="https://www.eyedoctor.com.tw/smile?utm_source=GooglePlan&utm_medium=Pmax&utm_campaign=%E8%91%89%E6%9E%97%E9%86%AB%E7%94%9F&gad_source=1">大學眼科</a></li>
</ul>
<p>這邊不會比較哪一間比較優秀，也不會強烈推薦去哪一間，猶如前面的註解，筆者還是以自己的體驗分享為主。</p>
<p>這次筆者選擇的是 <a href="https://www.wishvision.com.tw/">濰視眼科</a>，原因有幾點</p>
<ol>
<li>身邊有親友選擇且做過，評價不錯</li>
<li>檢查詳細，諮詢師夠專業，有問必答</li>
<li>特價中</li>
</ol>
<p>其實最主要還是第一項跟第三項，因為親友剛做完且恢復良好，加上眼科說今年有專案特惠價，就選擇了。</p>
<blockquote>
<p>這邊要先說一下雷射手術價格的區間，普遍目前詢問跟聽到的幾乎都是 10~13萬左右，因為 <a href="https://www.wishvision.com.tw/">濰視眼科</a> 今年有專案價優惠中，低於 10萬的價格，且又能分六期零利率，我覺得對於小資族來說是大大的減輕負擔。</p>
</blockquote>
<p>因為筆者是選擇 <a href="https://www.wishvision.com.tw/">濰視眼科</a>，所以這邊會放一些他們的廣告圖片來作為解釋。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240318/compare.png" alt="Compare"></p>
<blockquote>
<p>圖片來源：<a href="https://www.wishvision.com.tw/">濰視眼科</a><br>如圖如果不夠詳細可以參考 <a href="https://www.wishvision.com.tw/about2/6.htm">濰視眼科 - 近視雷射手術比較</a></p>
</blockquote>
<p>進食雷射目前大致可以分為這三類，就筆者了解的， <a href="https://www.wishvision.com.tw/">濰視眼科</a> 為 <strong>Smart</strong>，<a href="https://www.eyelasik.com.tw/">白佳欣眼科</a> 及 <a href="https://www.eyedoctor.com.tw/smile?utm_source=GooglePlan&utm_medium=Pmax&utm_campaign=%E8%91%89%E6%9E%97%E9%86%AB%E7%94%9F&gad_source=1">大學眼科</a> 為 <strong>Smile Pro</strong>。</p>
<p>其實結果都差不多的，都是讓你的眼睛可以恢復到近視前的度數(註一)，但恢復期真的就是比較看個人。</p>
<blockquote>
<p>註一：諮詢師有說到每個人的最佳視力不太一樣，但大多手術過後都能恢復到 1.5</p>
</blockquote>
<hr>
<h3 id="體驗心得"><a href="#體驗心得" class="headerlink" title="體驗心得"></a>體驗心得</h3><p>因為筆者是選擇前者，剛好身邊有前同事選擇後者，這邊可以大致說一下兩者得心得。</p>
<p>你可能會疑惑前面只提到了差異表格，但是好像仔細看又不太確定真的差異在哪裡，其實筆者要告訴你，真的差不多，差異就是差在恢復期。</p>
<p>但有一個差異比較大的可能是檢查的精細度，因為雷射是會看你的瞳孔大小決定要雷射的深度，如果比較大，可能需要雷射比較深，依照咨詢師的說法是雷射後的眼睛角膜需要有一定的厚度，諮詢師說全球的標準是 250~300㎛ 區間，但 <a href="https://www.wishvision.com.tw/">濰視眼科</a> 會比較嚴格計算，需要符合切割完還有高於 350㎛ 的厚度才能執行手術。</p>
<h4 id="手術過程"><a href="#手術過程" class="headerlink" title="手術過程"></a>手術過程</h4><p><a href="https://www.wishvision.com.tw/">濰視眼科</a> 的過程大概如下，需要先約一天至眼科檢查眼睛，因為會點散瞳劑，眼科會建議搭車前往，筆者當天確實有體驗到散瞳劑點完後幾乎無法聚焦，很像老花眼的感覺，強烈建議需要朋友載或者搭車前往。</p>
<p>檢查結束後會需要等一天再去跟醫師領報告，同時領報告那天會在檢查一次，確定合格才會再約一天進行手術，所以其實總共前面會需要去三趟。</p>
<p>手術當天過程其實很快，前面一樣會簡單進行檢查，然後換上手術服，進入小房間等待，整個過程都是很輕鬆愉快的，不會有給你很緊張的壓迫感。</p>
<p>在等待時會滴兩三次麻醉到眼睛裡面，然後就會到手術室，這邊要誇獎一下手術室的床，上面有一件算滿保暖的厚被子，也有一顆可以伸手進去的枕頭，同時裡面也會播放音樂，把你的緊張感消除到最低。</p>
<blockquote>
<p>因為筆者手術前兩天台中設備被檢測出有異常，院方建議筆者可以改天或者前往台北手術，筆者想要快點手術所以選擇前往台北，而高鐵來回及回程到家的計程車(NT$300)都有補助，這點要給五顆星。</p>
</blockquote>
<p>手術執行的雖然是機器，但全程都會有醫生以及旁邊的一兩個醫護人員一起陪你執行手術，幫筆者手術的是台中的院長，院長親切的像是家裡的爺爺一樣，過程也不會讓你乾等，旁邊的醫護人員也會不時地跟你說現在步驟到哪裡了，還剩幾秒結束這個步驟，讓你整格過程都很清楚知道在幹嘛。</p>
<p>而過程就是躺下盯著綠色的雷射光，然後手術開始就會分別從一眼開始雷射，再換另一眼，不會同時，不時也會聞到燒焦味。</p>
<p>結束後會幫你戴上一片醫療用的隱形眼鏡，這個隱形眼鏡約莫在第一次回診就會取下，順帶一提，在約手術日期時，眼科人員就會順便幫你把後續回診日期都一起約（如果沒有的話也可能在手術後跟你預約回診時間），前四次回診是強烈要求的，第一次四天後，第二次七天，再來就會拉長，之後半年就是看個人要不要回診都可以。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240318/one.png" alt="One"><br><img src="/images/others/loading.gif" data-original="/images/20240318/two.png" alt="Two"></p>
<blockquote>
<p>結束後會拿到一帶他們的醫療用品，這個在手術前都會介紹怎麼術後保養。順帶一提，手術結束後因為親友跟筆者說麻藥退後會很痛喔，所以就直接吞了兩顆 EVE (笑</p>
<p>另外術前會抽三管血，用途是會拿去做成血清，術後可以拿來滴在眼睛裡面，這個可以加速你眼睛恢復，因為是需要冰在冰箱內，他們也建議能點就常常點，筆者三十分鐘就點一次，冰冰涼涼的真的很爽，這個也會有有效期限，要儘早使用完畢</p>
</blockquote>
<p>其實痛苦的應該是手術結束後，有的人麻醉藥退了就開始痛了，身邊親友是這樣，但是通第一天晚上後就正常了，畏光的情況每個人或多或少都會有，親友是到第三才能開燈，看手機比較不吃力。</p>
<p>筆者自己是完全不會痛，手術結束後還在台北高鐵等車等了一個小時，到家已經是兩三個小時後的事情了，但是筆者第一第二天眼睛的異物感很重，又會畏光，整個都在想張眼，想閉眼的交替中，甚至第二天每睡半小時就起床，幾乎沒睡，真的很痛苦，卻又不是很痛的那種痛苦，難以形容。</p>
<p>術後視力恢復會在第一次回診又迎來一次重置期，醫療用隱形眼鏡拔除後，整體又會回到之前霧茫茫的情況，這時候恢復期就很看個人，身邊親友兩週就恢復的差不多，但醫生說這算是特例，有些人恢復期會拉長到七週，筆者也恢復算慢，但是手術後約莫一週大致上看東西都差不多，開車騎車沒問題。</p>
<p>這邊建議要手術的話，保底還是需要休息四天，不要逞強，畢竟眼睛真的不便宜啊！！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240318/three.png" alt="Three"></p>
<p>另外比較需要注意的是，術後平常出門或者工作地方會接觸室外的光源，需要帶著這種防護眼鏡，防止紫外線，如果不會畏光了就戴白色的就行，兩個功用其實是一樣的。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240318/four.png" alt="Four"></p>
<p>最麻煩的大概是眼科會建議睡覺會需要大上這個白色的護目鏡，但是需要自己拿膠帶黏，要持續一個月，主要是保護自己晚上不會下意識地去揉眼經</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240318/five.png" alt="Five"></p>
<p>第二次回診後主要都是人工淚液了，術後眼睛會很乾，一定要記得常常點。</p>
<h4 id="同場加碼"><a href="#同場加碼" class="headerlink" title="同場加碼"></a>同場加碼</h4><p>在筆者手術過後剛好前同事也去 <a href="https://www.eyedoctor.com.tw/smile?utm_source=GooglePlan&utm_medium=Pmax&utm_campaign=%E8%91%89%E6%9E%97%E9%86%AB%E7%94%9F&gad_source=1">大學眼科</a> 做了雷射，他告訴我第二天就能正常上班了，看東西也正常，不確定是不是技術不同，但如果因為 <a href="https://www.wishvision.com.tw/">濰視眼科</a> 的 350㎛ 厚度限制不能施作的話，不仿可以考慮看看大學眼科。</p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>這次會去雷射其實也不是想很久的事情，之前偶爾有念頭閃過，但每次就忘記了，只會在吃麵、騎車、要一直找眼鏡的時候又想起這件事情，這時候就會覺得戴眼睛真的超級麻煩，而且又需要一直花錢買隱形眼鏡。</p>
<p>剛好跟身邊親友提過，親友的速度之快，詢問完剛好有專案價，就直接預約了，所以筆者就緊隨其後，這邊建議各位，真的可以做就儘早做一做，越年輕恢復越快，而且以前常想，之後科技進步，這種東西普遍一定會變便宜。</p>
<p>沒有！！越安全、科技越薪，只會越貴…</p>
<p>很多朋友做完的心得都是，真的應該早一點去做；這邊還是提供一下筆者的心得給各位，如果有興趣，不妨可以先去眼科詢問看看。</p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><a href="https://www.eyelasik.com.tw/">白佳欣眼科</a></li>
<li><a href="https://www.wishvision.com.tw/">濰視眼科</a></li>
<li><a href="https://www.eyedoctor.com.tw/smile?utm_source=GooglePlan&utm_medium=Pmax&utm_campaign=%E8%91%89%E6%9E%97%E9%86%AB%E7%94%9F&gad_source=1">大學眼科</a></li>
<li><a href="https://pansci.asia/archives/327055">泛科學</a></li>
</ul>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hexschool Backend experience camp] — 資料庫體驗營</title>
    <url>/2024/11/20/20241120/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p><img src="/images/others/loading.gif" data-original="/images/20241120/banner.png" alt="Banner"></p>
<blockquote>
<p><em>小節作業於摘要第五點，如果只想參照作業的部分可以快轉跳至 <a href="#%E5%B0%8F%E7%AF%80%E4%BD%9C%E6%A5%AD%EF%BC%9A%E5%AE%B6%E5%85%B7%E5%BA%97%E7%9A%84%E8%8F%9C%E9%9B%9E%E9%8A%B7%E5%94%AE%E5%A5%87%E9%81%87%E8%A8%98">小節作業：家具店的菜雞銷售奇遇記</a></em></p>
</blockquote>
<p>隔了好一段時間沒有自我進修，趁著最近六角學院在特價課程，去摸一下後端世界的樣子。</p>
<p>接下來會有幾篇紀錄上課的過程，以及中間的一些心得、作業筆記。</p>
<span id="more"></span>

<p><em><strong>整篇文章是筆者自己的心得，如果文內有錯誤的地方，還請盡情指出。</strong></em></p>
<p><img src="/images/others/loading.gif" data-original="/images/20241120/schedule.png" alt="Schedule"></p>
<p>課程總共會有四堂直播課，其中不包含學院已經上傳的課程影片，約莫 50 個小短片。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20241120/videos.png" alt="Videos"></p>
<p>本篇會從零開始記錄筆記，可能會分成幾篇紀錄，這篇會是前 25% 的部分。</p>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><blockquote>
<p>如果需要觀看小節作業，可以跳過前四章</p>
<p>另外本篇文章還不會實際操作到真實 DB，可以先透過線上網站去練習：<a href="https://pg-sql.com/">線上練習網站 PG SQL</a></p>
</blockquote>
<ol>
<li>資料庫簡介</li>
<li>建立 SQL 資料表</li>
<li>資料的 CRUD</li>
<li>資料庫註解</li>
<li>小節作業：家具店的菜雞銷售奇遇記</li>
</ol>
<hr>
<h2 id="資料庫簡介"><a href="#資料庫簡介" class="headerlink" title="資料庫簡介"></a>資料庫簡介</h2><p>資料庫組成可大致分為</p>
<ul>
<li>Table（資料表） -&gt; 整體資料，通常會是一個類型，如 users</li>
<li>Columns（欄位） -&gt; 定義資料的屬性跟類型 Data Type</li>
<li>Rows（資料列） -&gt; 是橫向單筆資料的集合，代表一整筆完整資料，例如 users 表，定義了 編號、用戶姓氏、名字、性別 等等四個欄位的 Data Type，那一整筆資料舉例就是 1, 王, 小明, 男</li>
</ul>
<p>操作資料庫可使用 SQL(Structured Query Language) 語法，全名是『結構化查詢語言』，目前較多人使用為</p>
<ul>
<li>PostgreSQL</li>
<li>MySQL</li>
<li>MS SQL Server</li>
<li>Oracle</li>
</ul>
<hr>
<h2 id="建立-SQL-資料表"><a href="#建立-SQL-資料表" class="headerlink" title="建立 SQL 資料表"></a>建立 SQL 資料表</h2><p>資料庫三劍客，透過下列方式，去定義出三劍客，就可以創建出資料表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> users (</span><br><span class="line">	name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">	email <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">	age <span class="type">INTEGER</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>Note：可透過 <a href="https://pg-sql.com/">線上練習網站 PG SQL</a> 嘗試建立</p>
<p><img src="/images/others/loading.gif" data-original="/images/20241120/excel-example.png" alt="Excel Example"></p>
<p>三劍客使用 <strong>Excel</strong> 舉例的話就是 <strong>Sheet</strong> 代表 <strong>Table</strong>，<strong>Column</strong> 跟 <strong>Row</strong> 的意思都一樣</p>
<hr>
<h2 id="資料的-CRUD"><a href="#資料的-CRUD" class="headerlink" title="資料的 CRUD"></a>資料的 CRUD</h2><p>資料庫執行順序為下</p>
<blockquote>
<ol>
<li>FROM 資料表名稱 -&gt; 2. WHERE 篩選條件 -&gt; 3. SELECT 欄位名稱</li>
</ol>
</blockquote>
<p>而資料庫類型 <strong>（Data Type）</strong> 常用有幾種</p>
<table>
<thead>
<tr>
<th>資料型態</th>
<th>描述</th>
<th>使用情境</th>
<th>範例</th>
<th>範例欄位</th>
</tr>
</thead>
<tbody><tr>
<td>INTEGER</td>
<td>整數</td>
<td>ID、年齡、數量</td>
<td>1, 20, 100</td>
<td>age INTEGER</td>
</tr>
<tr>
<td>VARCHAR(n)</td>
<td>可辨長度字串</td>
<td>名稱、描述、普通文字欄位</td>
<td>“Rex Hung”</td>
<td>name VARCHAR(50)</td>
</tr>
<tr>
<td>TIMESTAMP</td>
<td>日期時間</td>
<td>時間格式都適用</td>
<td>‘2024-11-20 09:00:00</td>
<td>created_at TIMESTAMP</td>
</tr>
<tr>
<td>DECIMAL(p,s)</td>
<td>精確小數</td>
<td>金額、需要存放精確小數點的情況</td>
<td>3.141596, 2014.11</td>
<td>price DECIMAL(10,2)</td>
</tr>
<tr>
<td>BOOLEAN</td>
<td>真&#x2F;假值、布林</td>
<td>狀態、開關</td>
<td>true, false</td>
<td>is_active BOOLEAN</td>
</tr>
<tr>
<td>JSON</td>
<td>JSON 資料</td>
<td>彈性資料結構</td>
<td>‘{“name”: “Rex”}’</td>
<td>settings JSON</td>
</tr>
</tbody></table>
<p>Note：更多可參考 <a href="https://www.w3schools.com/sql/sql_datatypes.asp">w3school</a></p>
<h3 id="INSERT-插入資料"><a href="#INSERT-插入資料" class="headerlink" title="INSERT 插入資料"></a>INSERT 插入資料</h3><p>字串需要單引號括起來</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> users(name, email, age)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;王大明&#x27;</span>,<span class="string">&#x27;abc1@gmail.com&#x27;</span>,<span class="number">18</span>);</span><br></pre></td></tr></table></figure>

<p>插入多筆資料</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> users(name, email, age)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">&#x27;王大明&#x27;</span>,<span class="string">&#x27;abc1@gmail.com&#x27;</span>,<span class="number">18</span>),</span><br><span class="line">  (<span class="string">&#x27;張小明&#x27;</span>,<span class="string">&#x27;abc2@gmail.com&#x27;</span>,<span class="number">28</span>),</span><br><span class="line">  (<span class="string">&#x27;菜小明&#x27;</span>,<span class="string">&#x27;abc3@gmail.com&#x27;</span>,<span class="number">38</span>);</span><br></pre></td></tr></table></figure>

<h3 id="SELECT-查詢資料"><a href="#SELECT-查詢資料" class="headerlink" title="SELECT 查詢資料"></a>SELECT 查詢資料</h3><ol>
<li>普通查詢</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">— 查詢所有欄位</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users;</span><br><span class="line">— 查詢特定欄位</span><br><span class="line"><span class="keyword">SELECT</span> name, age <span class="keyword">FROM</span> users;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>別名查詢（AS）</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">— Columns 轉換為自定義別名查詢</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	name <span class="keyword">AS</span> 姓名,</span><br><span class="line">	age <span class="keyword">AS</span> 年齡</span><br><span class="line"><span class="keyword">FROM</span> users;</span><br><span class="line"></span><br><span class="line">— 透過 <span class="keyword">AS</span> 使用計算，最終新欄位會回傳計算結果</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	name <span class="keyword">AS</span> 姓名,</span><br><span class="line">	age <span class="keyword">AS</span> 年齡,</span><br><span class="line">	<span class="number">100</span> <span class="operator">-</span> age <span class="keyword">AS</span> 距離成為人瑞年紀</span><br><span class="line"><span class="keyword">FROM</span> users;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>篩出想要的資料</li>
</ol>
<p>篩選資料（WHERE）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name,price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> category <span class="operator">=</span> <span class="string">&#x27;3C&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>比較運算值</p>
<table>
<thead>
<tr>
<th>運算子</th>
<th>意義</th>
<th>範例</th>
</tr>
</thead>
<tbody><tr>
<td>&#x3D;</td>
<td>等於</td>
<td>WHERE price &#x3D; 100</td>
</tr>
<tr>
<td>&gt;</td>
<td>大於</td>
<td>WHERE price &gt; 100</td>
</tr>
<tr>
<td>&lt;</td>
<td>小於</td>
<td>WHERE price &lt; 100</td>
</tr>
<tr>
<td>&gt;&#x3D;</td>
<td>大於等於</td>
<td>WHERE price &gt;&#x3D; 100</td>
</tr>
<tr>
<td>&lt;&#x3D;</td>
<td>小於等於</td>
<td>WHERE price &lt;&#x3D; 100</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> price <span class="operator">&lt;=</span> <span class="number">500</span>;</span><br></pre></td></tr></table></figure>

<p>Note: 更多比較運算子可參考 <a href="https://learn.microsoft.com/zh-tw/sql/t-sql/language-elements/comparison-operators-transact-sql?view=sql-server-ver16">Microsoft Ignite</a></p>
<p>邏輯運算子</p>
<p>運算子 | 意義 | 範例<br>AND | 且，兩個條件都要成立 | WHERE category &#x3D; ‘3C’ AND price &gt; 1000<br>OR | 或，其中一個條件成立 | WHERE category &#x3D; ‘3C’ OR category &#x3D; ‘配件’</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, price, stock </span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">WHERE</span> status <span class="operator">=</span> <span class="string">&#x27;active&#x27;</span> </span><br><span class="line"><span class="keyword">AND</span> category <span class="operator">=</span> <span class="string">&#x27;3C&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>Note: 更多邏輯運算子可參考 <a href="https://learn.microsoft.com/zh-tw/sql/t-sql/language-elements/logical-operators-transact-sql?view=sql-server-ver16">Microsoft Ignite</a></p>
<p>邏輯運算子的延伸集合與範圍運算子</p>
<table>
<thead>
<tr>
<th>運算子</th>
<th>意義</th>
<th>範例</th>
</tr>
</thead>
<tbody><tr>
<td>BETWEEN</td>
<td>在指定範圍內</td>
<td>WHERE price BETWEEN 100 AND 500</td>
</tr>
<tr>
<td>IN</td>
<td>包含在列出的值中</td>
<td>WHERE category &#x3D; ‘3C’ OR category &#x3D; ‘配件’</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> discount_price <span class="keyword">BETWEEN</span> <span class="number">500</span> <span class="keyword">AND</span> <span class="number">1000</span>;</span><br></pre></td></tr></table></figure>

<h3 id="UPDATE-更新欄位"><a href="#UPDATE-更新欄位" class="headerlink" title="UPDATE 更新欄位"></a>UPDATE 更新欄位</h3><p>UPDATE 資料表名稱 3<br>SET 欄位名稱 1<br>WHERE 篩選條件 2</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> products</span><br><span class="line"><span class="keyword">SET</span></span><br><span class="line">	price <span class="operator">=</span> <span class="number">999999</span>,</span><br><span class="line">	name <span class="operator">=</span> ‘iPhone <span class="number">16</span> PLUS’</span><br><span class="line"><span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;iPhone 16&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="DELETE-刪除欄位"><a href="#DELETE-刪除欄位" class="headerlink" title="DELETE 刪除欄位"></a>DELETE 刪除欄位</h3><p>DELETE 資料表名稱 3<br>FROM 欄位名稱 1<br>WHERE 篩選條件 2</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;iPad&#x27;</span>;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="資料庫註解"><a href="#資料庫註解" class="headerlink" title="資料庫註解"></a>資料庫註解</h2><p>資料庫可以透過使用兩個 - 去進行註解，就如同我們在 HTML 上也會使用註解一樣</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">— 這是一行註解，用來解釋以下這段 <span class="keyword">SQL</span> 在做什麼</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">/</span><span class="operator">/</span>...下略</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  這是一段多行註解，下面會說明一些事項</span></span><br><span class="line"><span class="comment">  1. 查詢xxx</span></span><br><span class="line"><span class="comment">  2. 計算 xxx</span></span><br><span class="line"><span class="comment">  3. 設定 xxx，需要注意 xxx</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">/</span><span class="operator">/</span>...下略</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="小節作業：家具店的菜雞銷售奇遇記"><a href="#小節作業：家具店的菜雞銷售奇遇記" class="headerlink" title="小節作業：家具店的菜雞銷售奇遇記"></a>小節作業：家具店的菜雞銷售奇遇記</h2><p><img src="/images/others/loading.gif" data-original="/images/20241120/discord-chat.png" alt="Discord Chat"></p>
<p>因為小節內有作業，作業會回覆到六角學院的 <strong>Discord</strong>，也能對下一個同學發問，這邊先貼上小節作業的回答</p>
<h3 id="小節作業回答"><a href="#小節作業回答" class="headerlink" title="小節作業回答"></a>小節作業回答</h3><p>情境 1：單品查詢<br>客人：「這張北歐風雙人沙發多少錢？」<br>小美想查：想找到這張沙發的價格和庫存</p>
<p>A: 39900</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  name,</span><br><span class="line">  price</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  products</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  name <span class="operator">=</span> <span class="string">&#x27;北歐風雙人沙發&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>情境 2：價格比較<br>客人：「請列出 5000 元以下的櫃子有哪些？」<br>小美想查：找出櫃子類且價格在 5000 以下的商品</p>
<p>A: 簡約書櫃, 玄關鞋櫃</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  name,</span><br><span class="line">  price</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  products</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  category <span class="keyword">IN</span>(<span class="string">&#x27;櫃子&#x27;</span>)</span><br><span class="line">  <span class="keyword">AND</span> price <span class="operator">&lt;</span> <span class="number">5000</span>;</span><br></pre></td></tr></table></figure>

<p>情境 3：庫存確認<br>客人：「日式雙人床架還有貨嗎？」<br>小美想查：確認日式雙人床架的庫存狀況</p>
<p>A: 剩下 6 個</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  name,</span><br><span class="line">  stock</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  products</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  name <span class="operator">=</span> <span class="string">&#x27;日式雙人床架&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>邏輯運算 AND：<br>情境 4：預算內的商品<br>客人：「想找 4 萬以下，而且有現貨的沙發」<br>小美想查：要同時符合：是沙發、4萬以下、有庫存</p>
<p>A: 北歐風雙人沙發、工業風電視櫃、簡約書櫃、玄關鞋櫃、日式雙人床架、掀床五尺雙人床、電腦辦公椅、餐椅四入組、北歐風餐桌、實木咖啡桌</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  name,</span><br><span class="line">  price,</span><br><span class="line">  stock</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  products</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  price <span class="operator">&lt;</span> <span class="number">40000</span></span><br><span class="line">  <span class="keyword">AND</span> stock <span class="operator">&gt;</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p>情境 5：特價且有貨<br>客人：「沙發有哪些特價且現貨的品項？」<br>小美想查：要找到沙發類且有特價（原價大於優惠價）且還有庫存的商品</p>
<p>A: 北歐風雙人沙發、貓抓皮L型沙發、工業風電視櫃、日式雙人床架、掀床五尺雙人床、電腦辦公椅、餐椅四入組、北歐風餐桌、實木咖啡桌</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  name,</span><br><span class="line">  price,</span><br><span class="line">  discount_price,</span><br><span class="line">  stock</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  products</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  discount_price <span class="operator">&lt;</span> price</span><br><span class="line">  <span class="keyword">AND</span> stock <span class="operator">&gt;</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p>邏輯運算 OR：<br>情境 6：多分類查詢<br>客人：「我要找櫃子或桌子」<br>小美想查：要找出櫃子類或桌子類的商品</p>
<p>A: 工業風電視櫃、簡約書櫃、玄關鞋櫃、北歐風餐桌、實木咖啡桌、電競書桌</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  name,</span><br><span class="line">  category</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  products</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  category <span class="keyword">IN</span>(<span class="string">&#x27;櫃子&#x27;</span>, <span class="string">&#x27;桌子&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>情境 7：指定商品<br>客人：「北歐風雙人沙發和貓抓皮L型沙發哪個還有貨？」<br>小美想查：要找出這兩張特定沙發的庫存狀況</p>
<p>A:前者剩 3 個，後者勝 1 個，都有貨</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  name,</span><br><span class="line">  stock</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  products</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  name <span class="keyword">IN</span>(<span class="string">&#x27;北歐風雙人沙發&#x27;</span>, <span class="string">&#x27;貓抓皮L型沙發&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>IN 運算：<br>情境 8：多分類查詢<br>客人：「客廳的家具有哪些？我要看沙發、櫃子跟桌子」<br>小美想查：要找出沙發、櫃子和桌子這三種分類的商品</p>
<p>A: 北歐風雙人沙發、貓抓皮L型沙發、典雅三人座沙發、工業風電視櫃、簡約書櫃、玄關鞋櫃、北歐風餐桌、實木咖啡桌、電競書桌</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  name,</span><br><span class="line">  category</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  products</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  category <span class="keyword">IN</span>(<span class="string">&#x27;沙發&#x27;</span>, <span class="string">&#x27;櫃子&#x27;</span>, <span class="string">&#x27;桌子&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>情境 9：特定商品<br>客人：「電腦辦公椅和餐椅四入組的價格是多少？」<br>小美想查：要找出這兩款椅子的價格</p>
<p>A: 3900, 5200 折扣後價格</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  name,</span><br><span class="line">  price,</span><br><span class="line">  discount_price</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  products</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  name <span class="keyword">IN</span>(<span class="string">&#x27;電腦辦公椅&#x27;</span>, <span class="string">&#x27;餐椅四入組&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>BETWEEN：<br>情境 10：價格區間<br>客人：「想找 10000 到 20000 之間的商品有哪些？」<br>小美想查：列出這個價格區間的所有商品</p>
<p>A: 日式雙人床架、掀床五尺雙人床、北歐風餐桌</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  name,</span><br><span class="line">  price</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  products</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  price <span class="keyword">BETWEEN</span> <span class="number">10000</span> <span class="keyword">AND</span> <span class="number">20000</span>;</span><br></pre></td></tr></table></figure>

<p>情境 11：庫存區間<br>主管：「請列出庫存在 5 到 15 之間的商品」<br>小美想查：列出庫存數量在這個範圍的商品</p>
<p>A: 典雅三人座沙發、工業風電視櫃、簡約書櫃、玄關鞋櫃、日式雙人床架、餐椅四入組、實木咖啡桌</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  name,</span><br><span class="line">  price</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  products</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  stock <span class="keyword">BETWEEN</span> <span class="number">5</span> <span class="keyword">AND</span> <span class="number">15</span>;</span><br></pre></td></tr></table></figure>

<p>NOT IN：<br>情境 12：排除商品<br>主管：「列出除了沙發和床架以外的商品」<br>小美想查：要找出不是沙發和床架的商品</p>
<p>A: 工業風電視櫃、簡約書櫃、玄關鞋櫃、電腦辦公椅、餐椅四入組、北歐風餐桌、實木咖啡桌、電競書桌</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  name,</span><br><span class="line">  price</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  products</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  category <span class="keyword">NOT</span> <span class="keyword">IN</span>(<span class="string">&#x27;沙發&#x27;</span>, <span class="string">&#x27;床架&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>更新和刪除：<br>情境 13：調整價格<br>主管：「北歐風雙人沙發要調降 2000 元」<br>小美想查：要如何更新這張沙發的價格</p>
<p>A: 37900</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> products</span><br><span class="line"><span class="keyword">SET</span> price <span class="operator">=</span> price <span class="operator">-</span> <span class="number">2000</span></span><br><span class="line"><span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;北歐風雙人沙發&#x27;</span>; </span><br></pre></td></tr></table></figure>

<p>情境 14：更新庫存<br>主管：「電腦辦公椅進了 5 張」<br>小美想查：要如何增加這款椅子的庫存數量</p>
<p>A: 25</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> products</span><br><span class="line"><span class="keyword">SET</span> stock <span class="operator">=</span> stock <span class="operator">+</span> <span class="number">5</span></span><br><span class="line"><span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;電腦辦公椅&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>情境 15：清除資料<br>主管：「要清掉兒童床架和電競書桌的資料」<br>小美想查：要如何刪除這兩項商品</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">A: </span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> name <span class="keyword">IN</span>(<span class="string">&#x27;兒童床架&#x27;</span>, <span class="string">&#x27;電競書桌&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="上一位同學的問題"><a href="#上一位同學的問題" class="headerlink" title="上一位同學的問題"></a>上一位同學的問題</h3><p><img src="/images/others/loading.gif" data-original="/images/20241120/question.png" alt="Question"></p>
<p>上一位同學題目：庫存為0的商品，補貨數量10件。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">A:</span><br><span class="line"><span class="keyword">UPDATE</span> products</span><br><span class="line"><span class="keyword">SET</span> stock <span class="operator">=</span> stock <span class="operator">+</span> <span class="number">5</span></span><br><span class="line"><span class="keyword">WHERE</span> stock <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<h3 id="出給下位同學的問題"><a href="#出給下位同學的問題" class="headerlink" title="出給下位同學的問題"></a>出給下位同學的問題</h3><p>如果路過的朋友也可以嘗試回答看看哦</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Q: 請找出所有存貨低於五件的商品，將折扣價提升至原價的 10%，並且這些商品種類不包含床架，再將存貨多於十件的商品狀態改為 inactive，請列出所有被更新過價格及更改過狀態的 商品名稱、庫存、狀態，最後將狀態為 inactive 的商品刪除。</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>雖然之前有胡亂摸過 <strong>Sequelize</strong>，但大致上都是透過 <strong>ORM</strong> 直接性的操作 <strong>SQL</strong>，並不是真的完全懂資料庫，希望能藉由這次的體驗營一虧資料庫的世界。</p>
<p>這次的節奏還是很符合一貫的六角風格，進度緩慢但是能充分吸收，只是還是希望散落在各地的資訊可以統一整合，這過程除了要跑到直播平台網站去解任務，還要到 <strong>Discord</strong> 去鎖定訊息，另外分組也是臨時知道，過程中其實滿讓人會有焦慮感。</p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><a href="https://www.hexschool.com/2024/10/02/2024-10-02-backend-database-camping/">【後端工程師 - 資料庫體驗營】 進入後端前的必備知識</a></li>
<li><a href="https://pg-sql.com/">線上 DB 操作練習網站</a></li>
<li><a href="https://www.w3schools.com/sql/sql_datatypes.asp">w3School</a></li>
<li><a href="https://learn.microsoft.com/zh-tw/sql/t-sql/language-elements/comparison-operators-transact-sql?view=sql-server-ver16">運算子文件</a></li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Back-end</category>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>Back-end</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>[Flutter Note] - 串接 LINE, Facebook Login</title>
    <url>/2024/05/18/20240518/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p><img src="/images/others/loading.gif" data-original="/images/20240518/banner.png" alt="Banner"></p>
<p>這是一篇紀錄及分享如何透過 <strong>Flutter</strong> 串接 <strong>Line</strong> 還有 <strong>Facebook Login</strong> 的文章。</p>
<span id="more"></span>

<p><em><strong>註：這是筆者地第一次透過 Flutter 串接第三方服務，如果有錯誤的地方還請各路大神盡量幫忙指出。</strong></em></p>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p>本篇文章預設學習前的基本條件需求：</p>
<ul>
<li>已經安裝完 Flutter 環境</li>
<li>知道如何使用 Flutter 安裝套件</li>
<li>知道如何基本操作 Flutter 及基本的排版</li>
</ul>
<blockquote>
<p>如果你還不知道 Flutter 怎麼安裝，可以參考筆者分享的另一篇文章 <a href="https://rexhung0302.github.io/2024/01/28/20240128/#more">[Flutter Note] - 前端拓展技能樹之 Flutter 安裝篇[macOS]</a></p>
</blockquote>
<p>本篇文章將有以下幾個步驟，最終我們將可以在 <strong>Flutter</strong> 上串接第三方登入：</p>
<ol>
<li>創建 Line Developer 的相關資訊</li>
<li>串接 Line Flutter SDK</li>
<li>創建 Facebook Develop 的相關資訊</li>
<li>串接 Facebook SDK</li>
</ol>
<hr>
<h3 id="創建-Line-Developer-的相關資訊"><a href="#創建-Line-Developer-的相關資訊" class="headerlink" title="創建 Line Developer 的相關資訊"></a>創建 Line Developer 的相關資訊</h3><p><img src="/images/others/loading.gif" data-original="/images/20240518/line-developer.png" alt="Line Developer"></p>
<p>首先我們需要先創建 <strong>Line Developer</strong> 的一些相關資訊，主要有以下幾個需要創建</p>
<h4 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h4><p><img src="/images/others/loading.gif" data-original="/images/20240518/provider-create.png" alt="Provider Create"></p>
<p>首先我們點擊 <strong>Provider Create</strong>，後續你創建的每一個 <strong>Channel（Login channel, messaging channel, blockchain channel…）</strong>，都可以放置在不同的 <strong>Provider</strong> 內，所以 <strong>Provider</strong> 可以依照你的選擇去分類創建。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240518/provider-name.png" alt="Provider Name"></p>
<p>例如我想要有一個專門拿來 <strong>Demo</strong> 的 <strong>Provider</strong>，後續不管我有什麼樣子的 <strong>Login channel</strong>，例如 <strong>A</strong> 專案用的、<strong>B</strong> 專案用的，我都可以丟到這個 <strong>Provider</strong>，亦或者我可以使用不同專案的想法來規劃我的 <strong>Provider</strong>，可以把 <strong>Provider</strong> 依照專案名稱來分類，例如我的 <strong>Provider</strong> 就叫做 <strong>A Project</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240518/provider-channels.png" alt="Provider Channels"></p>
<p>創建成功後會看到內容都是空的，這時候我們需要先創建一個 <strong>Line Login Channel</strong>，後續我們的專案就會透過這個 <strong>Login Channel</strong> 去登入。</p>
<p>當然我們可以很多個專案共用一個 <strong>Login Channel</strong>，這時候就需要看你的需求了，如果使用者在你多個專案都共用同一個 <strong>Login Channel</strong> 去登入，那麼後續你透過 <strong>Line API</strong> 拿到的使用者 <strong>UUID</strong> 都會是同一份。</p>
<p>接下來請點擊 <strong>Create a LINE Login channel</strong></p>
<h4 id="Line-Login-Channel"><a href="#Line-Login-Channel" class="headerlink" title="Line Login Channel"></a>Line Login Channel</h4><p><img src="/images/others/loading.gif" data-original="/images/20240518/line-login-channel.png" alt="Line Login Channel"></p>
<p>點擊完後會跳頁，然後在裡面輸入必填資訊。</p>
<p><strong>Region to provide the service</strong> 改為 <strong>Taiwan</strong>，<strong>Company or owner’s country or region</strong> 也選擇為 <strong>Taiwan</strong>。</p>
<p><strong>Channel name</strong> 跟 <strong>Channel description</strong> 依照自己的喜好進行輸入。</p>
<p><strong>App types</strong> 則選擇 <strong>Mobile App</strong>，如果你有需求是這個 <strong>Login</strong> 會硬用到 <strong>Web</strong>，也可以一併勾起來。</p>
<p>最後勾選同意 <strong>I have read and agree to the LINE Developers Agreement</strong>，之後就可以送出了。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240518/line-login-channel-info.png" alt="Line Login Channel Info"></p>
<p>成功之後就能看到你的 <strong>Line Login Channel</strong>，後續需要透過 <strong>Line SKD</strong> 操作任何關於 <strong>Login</strong> 的部分，都需要回來這邊裡面去拿一些資訊，例如 <strong>Channel ID</strong>、<strong>Channel secret</strong>…</p>
<h4 id="Line-Messaging-Channel"><a href="#Line-Messaging-Channel" class="headerlink" title="Line Messaging Channel"></a>Line Messaging Channel</h4><p>如果有需要進行消息推播或者讓使用者加入你的頻道，後續透過頻道可以進行一些操作，也可以順手創建一下 <strong>Line Messaging Channel</strong>，這邊就先不詳細介紹，後續有時間可以再進行補上。</p>
<hr>
<h3 id="串接-Line-Flutter-SDK"><a href="#串接-Line-Flutter-SDK" class="headerlink" title="串接 Line Flutter SDK"></a>串接 Line Flutter SDK</h3><p>待補</p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>待補</p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><a href="https://developers.line.biz/console/">Line Developers</a></li>
<li><a href="https://developers.line.biz/en/docs/line-login-sdks/flutter-sdk/">Line Flutter SDK</a></li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>Dart</tag>
        <tag>Flutter</tag>
        <tag>APP</tag>
        <tag>Android</tag>
        <tag>IOS</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hexschool Backend experience camp] — 資料庫體驗營 #2</title>
    <url>/2024/11/26/20241126/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p><img src="/images/others/loading.gif" data-original="/images/20241120/banner.png" alt="Banner"></p>
<blockquote>
<p><em>小節作業於摘要第六點，如果只想參照作業的部分可以快轉跳至 <a href="#%E5%B0%8F%E7%AF%80%E4%BD%9C%E6%A5%AD%EF%BC%9ATable%E8%B3%87%E6%96%99%E8%A1%A8%E7%AE%A1%E7%90%86">小節作業：Table 資料表管理</a></em></p>
</blockquote>
<p>緊接著上週的練習，這週將剩下的影片看完了，把接著一些關於資料表怎麼建立多張，以及怎麼進行 SQL 函數使用</p>
<p>另外還有怎麼進行 Join 查詢、子查詢…等等，一起做筆記心得上來</p>
<span id="more"></span>

<p><em><strong>整篇文章是筆者自己的心得，如果文內有錯誤的地方，還請盡情指出。</strong></em></p>
<p>本篇會從零開始記錄筆記，目前課程影片的心得在此處以及 <a href="https://rexhung0302.github.io/2024/11/20/20241120/#more">[Hexschool Backend experience camp] — 資料庫體驗營</a>，原本以為會有四篇錄影課程的心得紀錄，上一篇是 25%，這篇會多一點是後 75% 的部分。</p>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><blockquote>
<p>如果需要觀看小節作業，可以跳過前五章</p>
<p>另外本篇文章還不會實際操作到真實 DB，可以先透過線上網站去練習：<a href="https://pg-sql.com/">線上練習網站 PG SQL</a></p>
</blockquote>
<ol>
<li>Tables 資料表管理</li>
<li>跨資料表的撈取</li>
<li>Join 合併資料表查詢</li>
<li>Postgres 函式</li>
<li>子查詢</li>
<li>小節作業：Table資料表管理</li>
</ol>
<hr>
<h2 id="Tables-資料表管理"><a href="#Tables-資料表管理" class="headerlink" title="Tables 資料表管理"></a>Tables 資料表管理</h2><blockquote>
<p>張表的複雜度越來越高時，就可以進行拆分 Table，例如一張員工表，裡面含有員工屬於哪個部門</p>
</blockquote>
<p>| 員工編號 | 姓名 | 性別 | 出生年月日 | 薪資 | 部門 |<br>| — | — | — | — | — | — |<br>| 1 | 王小明 | 男 | 1995&#x2F;1&#x2F;1 | 45000 | 資訊部 |<br>| 2 | 張大帥 | 男 | 1975&#x2F;12&#x2F;31 | 22000 | 資訊部 |<br>| 3 | 陳小美 | 女 | 2000&#x2F;12&#x2F;15 | 55000 | 人資部 |</p>
<p>這時候如果想要更改 資訊部 為 開發部，需要每一筆都進行更新，這種時候就可以把部門資訊另外拆出來用一張表去管理，一張表盡量放比較相關資訊的東西就好，如果太複雜會讓表格太難管理。</p>
<p>此外也有可能在新增資料時，誤把 資訊部 打錯，打成 資訊「步」。</p>
<p>這時候我們單獨再用一張表去管理</p>
<p>| 部門編號 | 部門名稱 |<br>| — | — |<br>| 1 | 開發部 |<br>| 2 | 人事部 |</p>
<p>原本的表格就可以把原本 FK(部門欄位) 對應到另一張表格的 PK (部門編號)</p>
<p>| 員工編號[PK] | 姓名 | 性別 | 出生年月日 | 薪資 | 部門[FK] |<br>| — | — | — | — | — | — |<br>| 1 | 王小明 | 男 | 1995&#x2F;1&#x2F;1 | 45000 | 1 |<br>| 2 | 張大帥 | 男 | 1975&#x2F;12&#x2F;31 | 22000 | 1 |<br>| 3 | 陳小美 | 女 | 2000&#x2F;12&#x2F;15 | 55000 | 2 |</p>
<p>之後如果需要修改部門名稱就簡單多了，從需要修改多筆資料，變成只需要更改一筆資料。</p>
<h3 id="拆解規劃（一對多的資料表）"><a href="#拆解規劃（一對多的資料表）" class="headerlink" title="拆解規劃（一對多的資料表）"></a>拆解規劃（一對多的資料表）</h3><p>課程提到口訣是「多的要設定成外來鍵」，也可以理解為一對「多」的部分，可以額外拆出去做一張表管理。</p>
<p>例如上面提到的部門表格，可以先思考兩個角度</p>
<ol>
<li>以「員工」角度：一個員工會有「多」個部門</li>
<li>以「部門」角度：一個部門會有「多」個員工<br>如果不考慮複雜的情況，基本上會是第二點更為合理且常見，所以我們就可以找到「多」的部分去拆解 Table。</li>
</ol>
<p>以上的方式如果從部門的表格來看稱為「一對多的資料表」，如果從員工的表格來看稱為「多對一的資料表」。</p>
<p>另外還有「多對多」或「一對一」…等等，詳細可參考 <a href="https://notes.andywu.tw/2018/%E8%B3%87%E6%96%99%E5%BA%AB-%E9%97%9C%E8%81%AF%E4%BB%8B%E7%B4%B9-%E4%B8%80%E5%B0%8D%E4%B8%80%E3%80%81%E4%B8%80%E5%B0%8D%E5%A4%9A%E3%80%81%E5%A4%9A%E5%B0%8D%E5%A4%9A/">AndyWu’s 的部落格介紹資料庫關聯種類</a></p>
<h3 id="關鍵欄位（主鍵、外來鍵）"><a href="#關鍵欄位（主鍵、外來鍵）" class="headerlink" title="關鍵欄位（主鍵、外來鍵）"></a>關鍵欄位（主鍵、外來鍵）</h3><ul>
<li>主鍵 Primary Key（PK）<ul>
<li>每張資料表都要有一個主鍵</li>
<li>主鍵必須是唯一的，不能重複</li>
<li>主鍵不能是 Null 值，但外來鍵可以是 Null 值</li>
<li>設定後就不該再進行改動</li>
</ul>
</li>
<li>外來鍵 Foreign Key（FK）<ul>
<li>當資料需要關連到其他表格才會用到</li>
<li>命名通常會用 <code>&#123;被參考的資料表名稱&#125;_id</code> 來命名</li>
<li>外來鍵必須對應到被參考的資料表的主鍵</li>
</ul>
</li>
</ul>
<blockquote>
<p>如果建立重複的 PK 或者 FK，則會出現 constraint 的錯誤提醒，例如 <code>duplicate key value violates unique constraint “資料表名稱”</code> 或 <code>insert or update on table “資料表名稱” violates foreign key constraint “資料表名稱”</code></p>
</blockquote>
<h3 id="主鍵設定方式、ID-自動遞增方法"><a href="#主鍵設定方式、ID-自動遞增方法" class="headerlink" title="主鍵設定方式、ID 自動遞增方法"></a>主鍵設定方式、ID 自動遞增方法</h3><blockquote>
<p>PostgreSQL 的方式</p>
</blockquote>
<p>首先創建一張表格，id 設為主鍵，且是 SERIAL 會自動遞增的屬性</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> users(</span><br><span class="line">	id SERIAL <span class="keyword">PRIMARY KEY</span>, <span class="comment">-- 員工編號，主鍵</span></span><br><span class="line">	name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="comment">-- 員工姓名</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>創建成功後再插入資料</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span></span><br><span class="line">  users(name)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;王小明&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;陳小美&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="SERIAL-及-UUID-差異"><a href="#SERIAL-及-UUID-差異" class="headerlink" title="SERIAL 及 UUID 差異"></a>SERIAL 及 UUID 差異</h3><p>資料的建立如果使用 ID SERIAL 遞增的方式，很容易會被猜到值，並且進入頁面查看資訊，這時候我們就可以使用 UUID 方式替代</p>
<p>有一些資料庫需要手動開啟 UUID 功能，如 PostgreSQL，使用 <code>CREATE EXTENSION IF NOT EXISTS &quot;uuid-ossp&quot;;</code> 可以開啟</p>
<p>| 特性 | SERIAL | UUID |<br>| — | — | — |<br>| 格式 | 整數 (1, 2, 3…) | 32位元十六進制 (如：550e8400-e29b-41d4-a716-446655440000) |<br>| 生成方式 | 自動遞增 | 隨機生成 |<br>| 空間使用 | 小 | 大 |<br>| 優點 | 簡單、易讀、節省空間 | 全球唯一、安全性高 |<br>| 建立語法 | id SERIAL PRIMARY KEY | id UUID PRIMARY KEY DEFAULT gen_random_uuid() |<br>| 可預測性 | 容易預測下一個值 | 完全隨機，無法預測 |</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建立員工資料表</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> users (</span><br><span class="line">   id UUID <span class="keyword">PRIMARY KEY</span> <span class="keyword">DEFAULT</span> gen_random_uuid(),</span><br><span class="line">   name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">   email <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">   team_name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NULL</span>, </span><br><span class="line">   salary <span class="type">INTEGER</span> <span class="keyword">NULL</span>        </span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="資料庫建立流程"><a href="#資料庫建立流程" class="headerlink" title="資料庫建立流程"></a>資料庫建立流程</h3><p>由於實際情況我們在一開始就會先去思考資料表怎麼建立，不會在建立會員表格後才在想怎麼拆一個新的表格去放部門。</p>
<p>這邊就應該要從部門表個先建立，流程會像底下這樣</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> teams(</span><br><span class="line">	id SERIAL <span class="keyword">PRIMARY KEY</span>, <span class="comment">-- 部門編號</span></span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="comment">-- 部門名稱</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> users(</span><br><span class="line">	id SERIAL <span class="keyword">PRIMARY KEY</span>, <span class="comment">-- 員工編號</span></span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">50</span>), <span class="comment">-- 員工名稱</span></span><br><span class="line">  salary <span class="type">INTEGER</span>, <span class="comment">-- 員工薪水</span></span><br><span class="line">  team_id <span class="type">INTEGER</span>, <span class="comment">-- 外來鍵</span></span><br><span class="line">  <span class="keyword">FOREIGN KEY</span>(team_id) <span class="keyword">REFERENCES</span> teams(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="跨資料表的撈取"><a href="#跨資料表的撈取" class="headerlink" title="跨資料表的撈取"></a>跨資料表的撈取</h2><p>撈取資料時，我們會需要把一些資料表進行組合，我們先進行資料表的建立</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> teams(</span><br><span class="line">	id SERIAL <span class="keyword">PRIMARY KEY</span>, <span class="comment">-- 部門編號</span></span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="comment">-- 部門名稱</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> users(</span><br><span class="line">	id SERIAL <span class="keyword">PRIMARY KEY</span>, <span class="comment">-- 員工編號</span></span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">50</span>), <span class="comment">-- 員工名稱</span></span><br><span class="line">  salary <span class="type">INTEGER</span>, <span class="comment">-- 員工薪水</span></span><br><span class="line">  team_id <span class="type">INTEGER</span>, <span class="comment">-- 外來鍵</span></span><br><span class="line">  <span class="keyword">FOREIGN KEY</span>(team_id) <span class="keyword">REFERENCES</span> teams(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span></span><br><span class="line">  users(name, salary, team_id)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;王小明&#x27;</span>,<span class="number">45000</span>,<span class="number">1</span>),(<span class="string">&#x27;陳小美&#x27;</span>,<span class="number">75000</span>,<span class="number">2</span>),(<span class="string">&#x27;富二代&#x27;</span>,<span class="number">99999</span>,<span class="number">1</span>),(<span class="string">&#x27;陳小玉&#x27;</span>,<span class="number">22000</span>,<span class="number">1</span>),(<span class="string">&#x27;王曉豪&#x27;</span>,<span class="number">5000</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p>這時候我們會想要撈出會員以及他所屬部門的資料，如果我們使用以下方式去撈取，會發現資料重複好幾筆。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	users.id,</span><br><span class="line">  users.name,</span><br><span class="line">  users.salary,</span><br><span class="line">  teams.name <span class="keyword">AS</span> 部門名稱</span><br><span class="line"><span class="keyword">FROM</span> users,teams;</span><br></pre></td></tr></table></figure>

<p>以下我們就會使用幾種方式去做組合查詢</p>
<h3 id="基本的-Where-組合查詢"><a href="#基本的-Where-組合查詢" class="headerlink" title="基本的 Where 組合查詢"></a>基本的 Where 組合查詢</h3><p>最基本的使用 Where 可以進行表格整合的查詢，主要關鍵在於 <code>WHERE &#123;條件&#125;</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	users.id,</span><br><span class="line">  users.name,</span><br><span class="line">  users.salary,</span><br><span class="line">  teams.name <span class="keyword">AS</span> 部門名稱</span><br><span class="line"><span class="keyword">FROM</span> users,teams</span><br><span class="line"><span class="keyword">WHERE</span> users.team_id <span class="operator">=</span> teams.id;</span><br></pre></td></tr></table></figure>

<h2 id="Join-合併資料表查詢"><a href="#Join-合併資料表查詢" class="headerlink" title="Join 合併資料表查詢"></a>Join 合併資料表查詢</h2><h3 id="Inner-Join"><a href="#Inner-Join" class="headerlink" title="Inner Join"></a>Inner Join</h3><blockquote>
<p>取得符合條件的交集資料</p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20241126/inner-join.png" alt="Inner Join"></p>
<p>如果想使用更簡易的方式去組合查詢，可以使用 Inner Join 的方式，主要關鍵在於 <code>INNER JOIN &#123;表格&#125; ON &#123;條件&#125;</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	users.id,</span><br><span class="line">  users.name,</span><br><span class="line">  users.salary,</span><br><span class="line">  teams.name <span class="keyword">AS</span> 部門名稱</span><br><span class="line"><span class="keyword">FROM</span> users</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> teams <span class="keyword">ON</span> users.team_id <span class="operator">=</span> teams.id;</span><br></pre></td></tr></table></figure>

<h3 id="Outer-Join"><a href="#Outer-Join" class="headerlink" title="Outer Join"></a>Outer Join</h3><p>除了 Inner Join 還有另外 Outer Join 的方法可以使用，其中包含</p>
<p><img src="/images/others/loading.gif" data-original="/images/20241126/left-join.png" alt="Left Join"></p>
<ul>
<li>Left Join</li>
</ul>
<blockquote>
<p>取得符合條件的交集資料，以及原本左側表格沒有符合的資料也保留</p>
</blockquote>
<p>基本上沒有符合條件的資料欄位都會使用 NULL 補上，左側的表有幾個欄位就會補上幾個欄位</p>
<p><img src="/images/others/loading.gif" data-original="/images/20241126/right-join.png" alt="Right Join"></p>
<ul>
<li>Right Join</li>
</ul>
<blockquote>
<p>取得符合條件的交集資料，以及原本右側表格沒有符合的資料也保留</p>
</blockquote>
<p>和 Left Join 相同的，兩張表會組合，相反的，不會保留原本沒有匹配到右邊表的資料，但是右邊表如果沒有匹配到左側表的則會留下來。</p>
<p>透過這個 Left 或 Right 的方法去篩選完之後，我們也可以再加上 Where 去濾出我們想要的資料</p>
<p><img src="/images/others/loading.gif" data-original="/images/20241126/full-join.png" alt="Full Join"></p>
<ul>
<li>Full Join</li>
</ul>
<blockquote>
<p>取的符合條件的交集資料，甚至原本兩邊沒有符合的資料也一起保留</p>
</blockquote>
<p>基本就是 Left Join + Right Join</p>
<hr>
<h2 id="Postgres-函式"><a href="#Postgres-函式" class="headerlink" title="Postgres 函式"></a>Postgres 函式</h2><h3 id="NULL-欄位解析"><a href="#NULL-欄位解析" class="headerlink" title="NULL 欄位解析"></a>NULL 欄位解析</h3><p>對於設定 NOT NULL 的欄位如果想要直接塞入一筆資料，會報出錯誤，如下面示範</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> users(</span><br><span class="line">  id SERIAL <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  email <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  salary INTEFER <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> users(name) <span class="keyword">VALUES</span>(‘王小明’);</span><br></pre></td></tr></table></figure>

<p>之後會得到 <code>null value in column “email” of relation “users” violates not-null constraint</code> 這種錯誤</p>
<h3 id="COALESCE-函數"><a href="#COALESCE-函數" class="headerlink" title="COALESCE 函數"></a>COALESCE 函數</h3><blockquote>
<p>用來檢查並處理 NULL 結果</p>
</blockquote>
<p>有些程式語言如果直接從資料庫回傳 null 可能會報錯，這時候可以使用 COALESCE 去把 null 替代成其他的值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	id,</span><br><span class="line">	name,</span><br><span class="line">	email,</span><br><span class="line">	<span class="built_in">COALESCE</span>(team_name, ‘待分配’) <span class="keyword">as</span> team_name,</span><br><span class="line">	<span class="built_in">COALESCE</span>(salary, <span class="number">0</span>) <span class="keyword">as</span> salary</span><br><span class="line"><span class="keyword">FROM</span> users;</span><br></pre></td></tr></table></figure>

<h3 id="透過-COALESCE-函數修整-Join-過的資料表"><a href="#透過-COALESCE-函數修整-Join-過的資料表" class="headerlink" title="透過 COALESCE 函數修整 Join 過的資料表"></a>透過 COALESCE 函數修整 Join 過的資料表</h3><p>透過 Join 的方式，或多或少都會出現 null 的資料，這時候就可以透過 COALESCE 去把 null 改為我們想要顯示的資料</p>
<p>COALESCE 的使用方式為 COALESCE(欄位名稱, 要替換掉 null 的名稱)，基本上包裹起來的欄位如果有值，就會顯示 <code>欄位名稱</code> 的值，沒有就會改成顯示 <code>要替換掉 null 的名稱</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="built_in">COALESCE</span>(teams.name, ‘未分配’) <span class="keyword">AS</span> team_name,</span><br><span class="line">	<span class="built_in">COALESCE</span>(users.name, ‘無員工’) <span class="keyword">AS</span> user_name</span><br><span class="line"><span class="keyword">FROM</span> users</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">JOIN</span> teams <span class="keyword">ON</span> users.team_id <span class="operator">=</span> teams.id;</span><br></pre></td></tr></table></figure>

<h3 id="DISTINCT-不重複函數"><a href="#DISTINCT-不重複函數" class="headerlink" title="DISTINCT 不重複函數"></a>DISTINCT 不重複函數</h3><blockquote>
<p>SQL 中用於去除重複資料的關鍵字</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> team_name <span class="keyword">FROM</span> users;</span><br></pre></td></tr></table></figure>

<h3 id="COUNT-函數"><a href="#COUNT-函數" class="headerlink" title="COUNT 函數"></a>COUNT 函數</h3><blockquote>
<p>計算出總數量</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> 學生總數 <span class="keyword">FROM</span> students;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 帶入 WHERE 條件</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> 三年一班的學生總數</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  students</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  class_id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h3 id="計算函數"><a href="#計算函數" class="headerlink" title="計算函數"></a>計算函數</h3><ul>
<li>AVG(平均)</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) <span class="keyword">AS</span> 員工平均薪資 <span class="keyword">FROM</span> users;</span><br></pre></td></tr></table></figure>

<ul>
<li>SUM(總和)</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(salary) <span class="keyword">AS</span> 員工總薪資 <span class="keyword">FROM</span> users;</span><br></pre></td></tr></table></figure>

<ul>
<li>MAX(最高)、MIN(最低)</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary) <span class="keyword">AS</span> 員工總薪資 <span class="keyword">FROM</span> users;</span><br></pre></td></tr></table></figure>

<h3 id="Order-By-排序"><a href="#Order-By-排序" class="headerlink" title="Order By 排序"></a>Order By 排序</h3><p>排序有三種方式</p>
<ul>
<li>ASC 從小到大</li>
<li>DESC 從大到小</li>
<li>Limit 筆數設定</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 從小到大排序</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  users</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  salary <span class="keyword">ASC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 從大到小排序</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  users</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  salary <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 只想顯示兩筆資料</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  users</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  salary <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>實務上我們會有多個資料需要進行排序，例如我們想要先排序部門的 id，接著再找出部門內薪資最高到最低，就可以透過下面方法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 多筆資料排序</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  users</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  team_id <span class="keyword">ASC</span>, salary <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<h3 id="Group-By-群組"><a href="#Group-By-群組" class="headerlink" title="Group By 群組"></a>Group By 群組</h3><p>透過 <strong>Group By</strong> 可以進行資料分組，再進行計算</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  team_id <span class="keyword">AS</span> 部門ID,</span><br><span class="line">  <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> 人數</span><br><span class="line"><span class="keyword">FROM</span> users</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> team_id;</span><br></pre></td></tr></table></figure>

<p>組合時也可以帶入 <strong>Join</strong> 或者 <strong>SUM</strong> 這種語法一起組合使用。</p>
<h2 id="子查詢"><a href="#子查詢" class="headerlink" title="子查詢"></a>子查詢</h2><p>實務上可能會碰到我們需要先處理 <strong>A</strong> 查詢，查詢結束後再進行 <strong>B</strong> 查詢，例如我們想先查詢平均薪資，之後再查詢大於平均薪資的員工。</p>
<blockquote>
<p>SELECT … WHERE xxx &gt; (子查詢)</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 條件 A, 找出平均薪資(放入子查詢中先跑)</span></span><br><span class="line"><span class="comment">-- 條件 B, 找出大於平均薪資的人</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  users.id,</span><br><span class="line">  users.name,</span><br><span class="line">  users.salary,</span><br><span class="line">  teams.name <span class="keyword">AS</span> 部門</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  users</span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> teams <span class="keyword">ON</span> users.team_id <span class="operator">=</span> teams.id</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  salary <span class="operator">&gt;</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">      <span class="built_in">AVG</span>(salary)</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">      users</span><br><span class="line">  );</span><br></pre></td></tr></table></figure>

<h3 id="子查詢-INSERT"><a href="#子查詢-INSERT" class="headerlink" title="子查詢 INSERT"></a>子查詢 INSERT</h3><p>當然我們也可以透過子查詢來塞入資料，假設有個情境是我們需要新增一個員工，但因為資料表內的 FK 都是數字，我們只知道員工要放到開發部，就可以用下面的方式去進行塞資料</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> users (name, email, salary, team_id) <span class="keyword">VALUES</span> </span><br><span class="line">(</span><br><span class="line">  <span class="string">&#x27;新同事&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;new@gmail.com&#x27;</span>,</span><br><span class="line">  <span class="number">50000</span>,</span><br><span class="line">  (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> teams <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;開發部&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="小節作業：Table資料表管理"><a href="#小節作業：Table資料表管理" class="headerlink" title="小節作業：Table資料表管理"></a>小節作業：Table資料表管理</h2><p><img src="/images/others/loading.gif" data-original="/images/20241126/home-work.png" alt="小節作業"></p>
<p>因為小節內有作業，作業會回覆到六角學院的 <strong>Discord</strong>，也能對下一個同學發問，這邊先貼上小節作業的回答</p>
<h3 id="小節作業回答"><a href="#小節作業回答" class="headerlink" title="小節作業回答"></a>小節作業回答</h3><p>Q1: 拯救明華國小的資料庫，哪個欄位適合變成外來鍵<br>A1: 班級及性別，依照以下兩個角度來思考，以班級角度來看更為適合</p>
<ol>
<li>以「學生」角度：一個學生會有「多」個班級</li>
<li>以「班級」角度：一個班級會有「多」個學生</li>
</ol>
<p>Q2: 第一題的延伸，多了一個班級老師<br>A2: 班級跟老師都可以，因為兩者都會有多個學生</p>
<p>以上兩題都適合使用以下方式建立表格，甚至性別都適合單獨拔出來當一個表格使用，可參考 <a href="https://magic-panda-engineer.github.io/database/Design-datebase-do-not-use-boolean">在有與沒有之間–為什麼設計資料庫欄位時不建議用布林值</a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> classes(</span><br><span class="line">  id SERIAL <span class="keyword">PRIMARY KEY</span>,<span class="comment">-- 班級編號</span></span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="comment">-- 班級名稱</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> genders(</span><br><span class="line">  id SERIAL <span class="keyword">PRIMARY KEY</span>,<span class="comment">-- 性別編號</span></span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="comment">-- 性別名稱</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> teachers(</span><br><span class="line">  id SERIAL <span class="keyword">PRIMARY KEY</span>,<span class="comment">-- 老師編號</span></span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="comment">-- 老師名稱</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> students(</span><br><span class="line">  id SERIAL <span class="keyword">PRIMARY KEY</span>,<span class="comment">-- 學生編號</span></span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">50</span>), <span class="comment">-- 學生名稱</span></span><br><span class="line">  age <span class="type">INTEGER</span>, <span class="comment">-- 學生年齡</span></span><br><span class="line">  class_id <span class="type">INTEGER</span>, <span class="comment">-- 班級編號, 外來鍵</span></span><br><span class="line">  gender_id <span class="type">INTEGER</span>, <span class="comment">-- 性別編號, 外來鍵</span></span><br><span class="line">  teacher_id <span class="type">INTEGER</span>, <span class="comment">-- 老師編號, 外來鍵</span></span><br><span class="line">  <span class="keyword">FOREIGN KEY</span> (class_id) <span class="keyword">REFERENCES</span> classes(id),</span><br><span class="line">  <span class="keyword">FOREIGN KEY</span> (gender_id) <span class="keyword">REFERENCES</span> genders(id),</span><br><span class="line">  <span class="keyword">FOREIGN KEY</span> (teacher_id) <span class="keyword">REFERENCES</span> teachers(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>隨後再進行資料的塞入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">  INTO</span> genders(name)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;男&#x27;</span>),(<span class="string">&#x27;女&#x27;</span>),(<span class="string">&#x27;第三性別&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">	INTO</span> teachers(name)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;音樂王子洪老師&#x27;</span>),(<span class="string">&#x27;數學黃厚娜老師&#x27;</span>),(<span class="string">&#x27;體育林子強老師&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">	INTO</span> classes(name)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;三年一班&#x27;</span>),(<span class="string">&#x27;三年二班&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">	INTO</span> students(name,age,class_id,gender_id,teacher_id)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;王小明’,10,1,1,1),(‘陳小美’,10,1,2,1),(‘張大帥’,12,2,1,3),(‘陳老伯(來重修的)’,60,2,1,2);</span></span><br></pre></td></tr></table></figure>

<p>這時候如果需要撈取資料可以使用 Where 以及 Inner Join</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 使用 Where</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	students.id,</span><br><span class="line">  students.name,</span><br><span class="line">  classes.name <span class="keyword">AS</span> 班級名稱</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  students,</span><br><span class="line">  classes</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  students.class_id <span class="operator">=</span> classes.id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用 INNER JOIN</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  students.id,</span><br><span class="line">  students.name,</span><br><span class="line">  classes.name <span class="keyword">AS</span> 班級名稱</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  students</span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> classes <span class="keyword">ON</span> students.class_id <span class="operator">=</span> classes.id;</span><br></pre></td></tr></table></figure>

<p>Q3: 小孩的家庭歸類資料庫，父母資料一直重複實在討厭（<del>父母一直生</del>）<br>A3: 其實這邊做法跟 Q2 一樣，就不再重複寫入，但可以另外到 <a href="https://pg-sql.com/">PG SQL</a> 進行練習</p>
<h3 id="上一位同學的問題"><a href="#上一位同學的問題" class="headerlink" title="上一位同學的問題"></a>上一位同學的問題</h3><p><img src="/images/others/loading.gif" data-original="/images/20241126/question.png" alt="Question"></p>
<p>上一位同學題目：圖書館頒布新規定：”每人同時只能借一本書”，請通知重複借書的人進快還書</p>
<blockquote>
<p>因為上一個學生的 Notion 一直打不開，就直接拿上上一個學生的 <a href="https://hackmd.io/@UTozxrWfQOuifpaAI_xvoQ/BkTTpefmke">hackmd</a> 來進行回答</p>
</blockquote>
<p>這邊預期問題應該是還沒有還書的人，因為實務上已經還書的人一定是可以借下一本書的</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  books.id <span class="keyword">AS</span> id,</span><br><span class="line">  books.name <span class="keyword">AS</span> 書本名稱,</span><br><span class="line">  borrowers.name <span class="keyword">AS</span> 借閱者,</span><br><span class="line">  books.checkout_date <span class="keyword">AS</span> 還書日期</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  books</span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> borrowers <span class="keyword">ON</span> borrower_id <span class="operator">=</span> borrowers.id</span><br><span class="line"><span class="keyword">WHERE</span> books.checkout_date ISNULL</span><br><span class="line"><span class="keyword">AND</span> borrowers.id <span class="keyword">IN</span> (</span><br><span class="line">  <span class="keyword">SELECT</span> borrower_id</span><br><span class="line">  <span class="keyword">FROM</span> books</span><br><span class="line">  <span class="keyword">WHERE</span> checkout_date <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line">  <span class="keyword">GROUP</span> <span class="keyword">BY</span> borrower_id</span><br><span class="line">  <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span> <span class="number">2</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>想了很久想不到怎麼可以濾出且保留重複的人的資料，之前課程內都是直接濾掉，只好去爬文一下爬到 HAVING 可以使用</p>
<h3 id="出給下位同學的問題"><a href="#出給下位同學的問題" class="headerlink" title="出給下位同學的問題"></a>出給下位同學的問題</h3><p>如果路過的朋友也可以嘗試回答看看哦</p>
<p><img src="/images/others/loading.gif" data-original="/images/20241126/example-work-two.png" alt="Question"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Q: 請依照作業二，將年齡進行資料表拆分，最後請計算出平均年齡，年齡總和。</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>這次一口氣多教了很多 <strong>SQL</strong> 的函數，吸取了好多新的知識，但透過同學的任務突然要融會貫通還是需要一點時間，我想同學的問題應該有更好的解答，這邊會再嘗試進行修改。</p>
<p>這次的影音課程內容都已經看完了，接下來還會有一個小作業，需要到 <strong>Github</strong> 進行 <strong>Fork</strong>，後續如果有整理出什麼心得在紀錄上來。</p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><a href="https://www.hexschool.com/2024/10/02/2024-10-02-backend-database-camping/">【後端工程師 - 資料庫體驗營】 進入後端前的必備知識</a></li>
<li><a href="https://pg-sql.com/">線上 DB 操作練習網站</a></li>
<li><a href="https://www.w3schools.com/sql/sql_datatypes.asp">w3School</a></li>
<li><a href="https://learn.microsoft.com/zh-tw/sql/t-sql/language-elements/comparison-operators-transact-sql?view=sql-server-ver16">運算子文件</a></li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Back-end</category>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>Back-end</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>[Flutter Note] - 前端拓展技能樹之 Flutter 安裝篇[macOS]</title>
    <url>/2024/01/28/20240128/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p><img src="/images/others/loading.gif" data-original="/images/20240128/banner.png" alt="Flutter Banner"></p>
<p>如果你想要開發一款 <strong>APP</strong> ，又不想要被侷限該選擇學 <strong>IOS 的語言(Objective-C &#x2F; Swift)</strong> 還是 <strong>Android 的語言(JAVA &#x2F; Kotlin)</strong>，你可以跟著筆者一起學習 <strong>APP</strong> 的前端之路 <strong>Flutter</strong>。</p>
<p><strong>Flutter</strong> 是由 <strong>Google</strong> 開發和支援的開放原始碼架構，強大的地方在於可以透過一種語言開發，支援多至六個平台的應用，你可以將開發好的產品推出到 <code>iOS、Android、Web、Windows、MacOS 和 Linux</code>，如果你也和筆者一樣完全零經驗，但是非常有興趣，就跟著一起往下讀吧，這篇文章將會告訴你怎麼在 <strong>macOS</strong> 上開發 <strong>Flutter</strong>。</p>
<blockquote>
<p>這是一篇在 <strong>macOS</strong> 上安裝 <strong>Flutter</strong> 的教學文章，同時也是筆者的紀錄文章，如果有誤，還請盡情的在下方留言指出，感謝。</p>
</blockquote>
<span id="more"></span>

<p>由於筆者參考了一些安裝教學，發現 <strong>Flutter</strong> 其實更新過幾次後，畫面和教學都有點落差，但總體來說需要操作的流程都是差不多的，如果你正在參考此篇安裝教學，可以先觀看一下官網 <a href="https://flutter.dev/">flutter.dev</a> 裡的安裝教學畫面是否相同，本次安裝會選擇安裝教學內的 <a href="https://docs.flutter.dev/get-started/install/macos/mobile-ios?tab=vscode">macOS &gt; ios</a> 作為教學。</p>
<blockquote>
<p><em><strong>注意：不論如何，最終都請依照官方網站的為主，官方網站的文件一定是最新且最正確的方式</strong></em></p>
</blockquote>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><blockquote>
<p>這篇文章不會過多的介紹 <strong>Flutter</strong> ，主要還是會專注於怎麼安裝，接下來的其他文章才會開始慢慢進入到 <strong>Flutter</strong> 應用之中。</p>
</blockquote>
<p>本篇文章預設學習前的基本條件需求：</p>
<ul>
<li>需要會基本英文</li>
<li>需要會使用終端機基本操作</li>
</ul>
<p><strong>Flutter</strong> 最低配置需求(截至 2024&#x2F;01&#x2F;28 的 macOS 安裝官方文件，最新可參考官方安裝指南的<a href="https://docs.flutter.dev/get-started/install/macos/mobile-ios?tab=vscode#hardware-requirements">硬體需求</a>)：</p>
<table>
<thead>
<tr>
<th>要求</th>
<th>最低要求</th>
<th>推薦配置</th>
</tr>
</thead>
<tbody><tr>
<td>CPU Cores</td>
<td>4</td>
<td>8</td>
</tr>
<tr>
<td>Memory in GB</td>
<td>8</td>
<td>16</td>
</tr>
<tr>
<td>Display resolution in pixels</td>
<td>WXGA (1366 x 768)</td>
<td>FHD (1920 x 1080)</td>
</tr>
<tr>
<td>Free disk space in GB</td>
<td>36.0</td>
<td>56.0</td>
</tr>
</tbody></table>
<p>本篇文章將有以下幾個安裝步驟，最終我們將可以在 <strong>macOS</strong> 上開發 <strong>Flutter</strong>：</p>
<ol>
<li>安裝 Rosetta2 (非 Apple 晶片電腦可跳過)</li>
<li>安裝 Xcode</li>
<li>安裝 CocoaPods</li>
<li>安裝 Flutter SDK</li>
<li>安裝 Android Studio</li>
<li>配置 Android Studio 設置</li>
<li>配置 Xcode 設置</li>
<li>配置 IDE(編輯器) 的開發設置</li>
</ol>
<p><em><strong>備註：看起來雖然過程有點多，但其實最主要的還是需要讓你的環境可以透過 IDE 去操作 Flutter SDK，並且能即時(hot-reload)在開發環境看到模擬器裡呈現的樣子，別擔心</strong></em></p>
<hr>
<h3 id="開啟安裝文件"><a href="#開啟安裝文件" class="headerlink" title="開啟安裝文件"></a>開啟安裝文件</h3><p><img src="/images/others/loading.gif" data-original="/images/20240128/step-1.png" alt="Step 1"></p>
<p>首先我們需要進入到官方網站的 <a href="https://docs.flutter.dev/get-started/install">Get started &gt; Install Flutter</a>，點擊 <strong>macOS</strong></p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-2.png" alt="Step 2"></p>
<p>接著在點擊 <strong>IOS</strong> ，這邊選擇哪一個其實都差不多，很多教學文章在官網之前舊的版本是沒有這頁的，我們先依照官網建議的(<strong>If you don’t have a preference, choose mobile.</strong>)，選擇 <strong>IOS</strong>。</p>
<p>接下來就能看見安裝建議的表格，官網可能後續還會更新文件，故還是以官方網站的為主。</p>
<hr>
<h3 id="1-安裝-Rosetta2-Apple-晶片電腦-Intel-晶片可跳過"><a href="#1-安裝-Rosetta2-Apple-晶片電腦-Intel-晶片可跳過" class="headerlink" title="1. 安裝 Rosetta2 (Apple 晶片電腦) - Intel 晶片可跳過"></a>1. 安裝 Rosetta2 (Apple 晶片電腦) - Intel 晶片可跳過</h3><p>如何查看自己的 <strong>Apple</strong> 晶片還是 <strong>Intel</strong> 晶片呢？</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-3.png" alt="Step 3"></p>
<p>點選 <strong>左上角的  &gt; 關於這台 Mac</strong></p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-4.png" alt="Step 4"></p>
<p>如果晶片有關鍵字 <strong>Apple</strong> 的話，那就代表你的電腦是使用 <strong>Apple</strong> 晶片，請繼續安裝步驟</p>
<p>如果不知道要從哪邊點出詳細介面，也可以進入到 <strong>Apple</strong> 的官方網站幫助頁面查看資訊 - <a href="https://support.apple.com/zh-tw/116943">配備 Apple 晶片的 Mac 電腦</a></p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-5.png" alt="Step 5"></p>
<p>如果是 <strong>Apple</strong> 晶片請打開終端機輸入指令(<strong>注意，以下開始在終端機輸入都不需要輸入包含錢字符號的部分</strong>)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo softwareupdate --install-rosetta --agree-to-license</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-安裝-Xcode"><a href="#2-安裝-Xcode" class="headerlink" title="2. 安裝 Xcode"></a>2. 安裝 Xcode</h3><p>由於我們系統已經是 <strong>macOS</strong> ，對於 <strong>IOS APP</strong> 開發前不需要配置太多，但是有個主要角色一定要安裝，也就是 <strong>Xcode</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-6.png" alt="Step 6"></p>
<p>找到電腦的 <strong>App Store</strong> 並打開它 &gt; 搜尋欄輸入 <strong>Xcode</strong> &gt; 安裝 <strong>Xcode</strong></p>
<p>這邊我們順便配置一下 <strong>Xcode</strong>，依序輸入以下指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo sh -c &#x27;xcode-select -s /Applications/Xcode.app/Contents/Developer &amp;&amp; xcodebuild -runFirstLaunch&#x27;</span><br><span class="line">$ xcodebuild -downloadPlatform iOS</span><br><span class="line">$ sudo xcodebuild -license</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-6-2.png" alt="Step 6-2"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-6-3.png" alt="Step 6-3"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-6-4.png" alt="Step 6-4"></p>
<p>在執行 <code>xcodebuild -downloadPlatform iOS</code> 的時候會需要簽署一些 <strong>License</strong> 同意書，基本上全數同意即可，不會有什麼問題</p>
<blockquote>
<p>這樣就配置完成了，詳細還是可以參考官方網站的 <a href="https://docs.flutter.dev/get-started/install/macos/mobile-ios?tab=download#configure-ios-development">Configure iOS development</a> 流程，或許更新後會改變配置方式。</p>
</blockquote>
<hr>
<h3 id="3-安裝-CocoaPods"><a href="#3-安裝-CocoaPods" class="headerlink" title="3. 安裝 CocoaPods"></a>3. 安裝 CocoaPods</h3><p>這是透過 <strong>Ruby</strong> 語言所開發出來的管理工具，用來管理 <strong>IOS</strong> 開發時(<strong>Objective-C &#x2F; Swift</strong>)所使用的套件。</p>
<p>由於會依到 <strong>Ruby</strong>，所以必須要先看一下主機是否有 <strong>Ruby</strong> 的配置，相關可以參考 <a href="https://hackmd.io/@gary3123/rJR8Tldj5">CocoaPods 學習筆記</a>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-7.png" alt="Step 7"></p>
<p>安裝套件一律都以該套件的官方網站介紹為主，故這邊可以先到 <a href="https://guides.cocoapods.org/using/getting-started.html#installation">CocoaPods 的官方安裝教學指南</a> 查看流程</p>
<p>這邊我們在終端機輸入以下指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo gem install cocoapods</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-8.png" alt="Step 8"></p>
<p>安裝過程會需要花一小段時間，可以耐心等待一下。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-9.png" alt="Step 9"></p>
<p>安裝成功後再輸入 <code>gem -v</code>，如果有看到版號，就是安裝成功了。</p>
<p>如果無法使用 <strong>gem</strong> 指令，請記得確認一下 <strong>shell</strong> 是否有把 <strong>gem</strong> 捷徑加入了。</p>
<blockquote>
<p>如何查看自己使用的 shell 可以輸入 <code>echo $0</code> </p>
</blockquote>
<ul>
<li><p>使用 <strong>zsh</strong> 請輸入 <code>vim ~/.zshrc</code></p>
</li>
<li><p>使用 <strong>bash</strong> 請輸入 <code>vim ~/.bash_profile</code></p>
</li>
<li><p>最終在檔案內加入 <code>export PATH=$HOME/.gem/bin:$PATH</code></p>
</li>
</ul>
<p>如果無法儲存檔案，請記得在 <strong>vim</strong> 前面加上 <strong>sudo</strong></p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-13-2.png" alt="Step 9-2"></p>
<blockquote>
<p>詳細也可以參考官方網站的安裝教學 <a href="https://docs.flutter.dev/get-started/install/macos/mobile-ios?tab=download#install-cocoapods">Install CocoaPods</a></p>
</blockquote>
<hr>
<h3 id="4-安裝-Flutter-SDK"><a href="#4-安裝-Flutter-SDK" class="headerlink" title="4. 安裝 Flutter SDK"></a>4. 安裝 Flutter SDK</h3><p><strong>Flutter SDK</strong> 可以讓我們透過 <strong>flutter</strong> 指令去創建專案或者執行一些 <strong>flutter</strong> 功能。</p>
<p>安裝方式有兩種，一個是透過 <strong>VSCode install</strong> ，另一個則是 <strong>Download and install</strong> ，這邊我們選擇後者。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-10.png" alt="Step 10"></p>
<p>在安裝文件的 <a href="https://docs.flutter.dev/get-started/install/macos/mobile-ios?tab=download#install-the-flutter-sdk">Install the Flutter SDK</a> 內選擇 <strong>Download and install</strong></p>
<p>點擊你電腦晶片的安裝檔案，如果忘記晶片怎麼查看，可以看上面 <strong>安裝 Rosetta2 (Apple 晶片電腦) - Intel 晶片可跳過</strong> 步驟，裡面有介紹到。</p>
<p>筆者電腦室 <strong>Apple</strong> 晶片，故選擇右邊那個，點擊下載之後，打開終端機輸入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd ~/</span><br><span class="line">$ mkdir development</span><br></pre></td></tr></table></figure>

<p>或者點擊 <strong>Finder &gt; 右鍵創建資料夾 &gt; 名稱輸入 development</strong></p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-11.png" alt="Step 11"></p>
<p>將剛剛下載的檔案解壓縮，把解壓縮出來的資料夾整份搬移到剛創建的資料夾 <strong>development</strong></p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-12.png" alt="Step 12"></p>
<p>再次輸入以下指令，之後我們就可以在終端機上面直接使用 <strong>flutter</strong> 的指令了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd ~/development/flutter</span><br><span class="line">$ export PATH=$HOME/development/flutter/bin:$PATH</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果沒有找到指令，請查看您使用的 <strong>Shell</strong> 文件內是否有配置 <code>export PATH=$HOME/development/flutter/bin:$PATH</code> ，如果沒有請加上。</p>
</blockquote>
<p>接著在終端機上輸入 <code>flutter doctor</code> ，這個指令可以幫助你查看有哪些東西是否還沒有配置好。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-13.png" alt="Step 13"></p>
<p>之後安裝流程都可以透過這個指令去查看是否還有什麼沒有安裝成功的，如果有遺漏的 <strong>Flutter</strong> 也都會提示需要執行什麼指令。</p>
<hr>
<h3 id="5-安裝-Android-Studio"><a href="#5-安裝-Android-Studio" class="headerlink" title="5. 安裝 Android Studio"></a>5. 安裝 Android Studio</h3><p><img src="/images/others/loading.gif" data-original="/images/20240128/step-14.png" alt="Step 14"></p>
<p>首先進入 <strong>Android Studio</strong> 的 <a href="https://developer.android.com/studio?hl=zh-tw">Developers 頁面</a>，點擊 <strong>下載 Android Studio Hedgehog</strong></p>
<p>接著打開下載的安裝檔，執行安裝</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-15.png" alt="Step 15"></p>
<p>安裝成功後，打開 <strong>Android Studio</strong></p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-16.png" alt="Step 16"></p>
<p>第一次打開會問你要不要使用自己的客製化配置，直接使用預設的選擇 <strong>Do not import settings</strong> 就可以了</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-17.png" alt="Step 17"></p>
<p>接著會跳出提示詢問你是否要提供資訊給軟體進行優化與改進，依照自己的喜好選擇即可</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-18.png" alt="Step 18"></p>
<p>然後這邊繼續點擊下一步</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-19.png" alt="Step 19"></p>
<p>這邊筆者選擇 <strong>Standard</strong> ，如果想要自行配置也可以選擇 <strong>Custom</strong></p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-20.png" alt="Step 20"></p>
<p>接著會跳出請你同意 <strong>License Agreement</strong> 安裝的選擇，我們需要把所有項目都勾選接受(<strong>Accept</strong>)</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-21.png" alt="Step 21"></p>
<p>在點擊 <strong>Next</strong> ，安裝過程需要等待一下</p>
<hr>
<h3 id="6-配置-Android-Studio-設置"><a href="#6-配置-Android-Studio-設置" class="headerlink" title="6. 配置 Android Studio 設置"></a>6. 配置 Android Studio 設置</h3><p>安裝 <strong>Android Studio</strong> 主要是讓我們可以去使用 <strong>Android</strong> 模擬器，在開發環境中可以打開 <strong>Android</strong> 系統的手機去看我們開發的情況</p>
<p>另外我們開發也可以透過 <strong>Android Studio</strong> 去執行，如果你已經有習慣使用的 IDE，例如 <strong>VSCode</strong> ，下面我們也會講到怎麼去配置</p>
<h4 id="Android-SDK"><a href="#Android-SDK" class="headerlink" title="Android SDK"></a>Android SDK</h4><p><img src="/images/others/loading.gif" data-original="/images/20240128/step-22.png" alt="Step 22"></p>
<p>先打開剛剛安裝好的 <strong>Android Studio</strong> </p>
<p><code>點選左上角的 Android Studio &gt; Settings</code></p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-23.png" alt="Step 23"></p>
<p>點選左邊的 <strong>Android SDK</strong> &gt; 選擇右邊的 <strong>SDK Tools</strong> 頁籤 &gt; 勾選 <strong>Android SDK Command-line Tools (latest)</strong> ，如果已經有安裝了，就無需再勾選，如果沒有勾選請勾選起來後，點擊右下角的 <strong>Apply</strong> 及 <strong>Ok</strong></p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-24.png" alt="Step 24"></p>
<p>安裝前會再詢問一次，一樣點擊 <strong>OK</strong> 即可</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-25.png" alt="Step 25"></p>
<p>安裝過程需要在稍等一陣子</p>
<h4 id="Flutter-Plugins"><a href="#Flutter-Plugins" class="headerlink" title="Flutter Plugins"></a>Flutter Plugins</h4><p>如果需要在 <strong>Android</strong> 上開發需要安裝 <strong>Flutter Plugins</strong> ，但筆者還是建議不管有沒有要使用 <strong>Android Studio</strong> 都裝一下</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-23.png" alt="Step 23"></p>
<p>一樣像剛剛的步驟打開設定視窗，<strong>點選左上角的 Android Studio &gt; Settings</strong></p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-26.png" alt="Step 26"></p>
<p><strong>點擊 Plugins &gt; 搜尋輸入 Flutter</strong> ，點擊 <strong>Install</strong> 安裝它</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-27.png" alt="Step 27"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-28.png" alt="Step 28"></p>
<p>一樣點選 <strong>Accept</strong> ，同時安裝 <strong>Flutter</strong> 的套件時，會自動連同 <strong>Dark</strong> 一起安裝</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-29.png" alt="Step 29"></p>
<p>之後重新開啟專案就能看到有一顆按鈕 <strong>New Flutter Project</strong> ，點擊他創建新專案</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-30.png" alt="Step 30"></p>
<p>點擊後會跳出一個視窗，預設左邊會選擇 <strong>Flutter</strong> ，右邊則會去自動匹配之前我們下載過的 <strong>Flutter SDK</strong></p>
<p>如果 <strong>SDK</strong> 沒有匹配到，可以自己點擊旁邊的點點點，自己去找到下載下來的 <strong>flutter</strong> 資料夾</p>
<p>確認有找到 <strong>SDK</strong> 之後點擊下一步</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-31.png" alt="Step 31"></p>
<p>這邊可以更改預設的名稱，基本上除了 <strong>Project Name</strong> 其餘剛開始都不需要更改，後續就看你的專案配置在改就行，現在的目的只是要先叫出畫面讓我們可以去安裝模擬器。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-32.png" alt="Step 32"></p>
<p><strong>Flutter</strong> 的 <strong>Project Name</strong> 是有限制的，只能接受 <strong>底線加小寫</strong> 的規則，如果不符合規則就會跳出上面那個彈窗</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-33.png" alt="Step 33"></p>
<p>如果本機已經有相圖名撐的專案會詢問你是否要覆蓋，需要特別注意</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> <ul>
<li>firstFlutterProject</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> <ul>
<li>FIRSTFLUTTERPROJECT</li>
</ul>
</li>
<li>[O] - first_flutter_project</li>
</ul>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-34.png" alt="Step 34"></p>
<p>至此你就擁有第一個自己的 <strong>Flutter</strong> 專案了</p>
<h4 id="模擬器"><a href="#模擬器" class="headerlink" title="模擬器"></a>模擬器</h4><p>打開專案畫面後，上面 Bar 調會多了幾個可以選擇的選項</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-35.png" alt="Step 35"></p>
<p>這邊我們需要配置一台 <strong>Android</strong> 的模擬器，點擊 <strong>Tools &gt; Device Manager</strong></p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-36.png" alt="Step 36"></p>
<p>如果之前沒有安裝過模擬器，這邊應該會是空的，別擔心，讓我們點選那個 <code>+</code> 符號</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-37.png" alt="Step 37"></p>
<p>選擇你喜好的裝置，點選 <strong>Next</strong></p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-38.png" alt="Step 38"></p>
<p>到這個畫面應該會是全空的，點選第一個 <strong>UpsideDownCakePrivacySandbox</strong> 安裝沙盒環境，安裝好之後點選 <strong>Next</strong></p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-39.png" alt="Step 39"></p>
<p>這邊點擊 <strong>Finish</strong> 即可完成</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-36.png" alt="Step 36"></p>
<p>之後就能看到你剛剛選擇要安裝的模擬器了</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-40.png" alt="Step 40"></p>
<p>點擊你想要使用的模擬器播放鍵</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-41.png" alt="Step 41"></p>
<p>第一次執行過程會比較久一點，需要花一點時間等待一下</p>
<hr>
<h3 id="執行-flutter-Doctor"><a href="#執行-flutter-Doctor" class="headerlink" title="執行 flutter Doctor"></a>執行 flutter Doctor</h3><p>在進入下一步之前我們先緩口氣，其實在安裝的過程中，你都可以在任何一個時間點去輸入 <code>flutter docker</code></p>
<p>透過這個指令 <strong>Flutter</strong> 會去檢測還有什麼配置是還沒完成安裝的</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-42.png" alt="Step 42"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-42-2.png" alt="Step 42-2"></p>
<p>像上面這樣就是環境還沒有配置完全，每個人會有些許不同，這邊我們就可以依照缺少的再去配置，像是上面提到的 <code>flutter config --android-sdk</code> 我們就可以直接執行</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-43.png" alt="Step 43"></p>
<blockquote>
<p><em>如果你一直出現 <code>command not found: flutter </code>，則需要去確認一下 <strong>shell</strong> 有沒有配置成功。</em></p>
</blockquote>
<hr>
<h3 id="7-配置-Xcode-設置"><a href="#7-配置-Xcode-設置" class="headerlink" title="7. 配置 Xcode 設置"></a>7. 配置 Xcode 設置</h3><p><img src="/images/others/loading.gif" data-original="/images/20240128/step-44.png" alt="Step 44"></p>
<p>我們還缺少 <strong>Xcode</strong> 的配置，依照官方網站指南 <a href="https://docs.flutter.dev/get-started/install/macos/mobile-ios?tab=download#install-cocoapods">Configure your iOS simulator</a> 的流程執行</p>
<p>在終端機輸入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ open -a Simulator</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-45.png" alt="Step 45"></p>
<p>第一次打開會需要你創建一個新的模擬器，這邊一樣選擇自己喜歡的即可，名稱隨意輸入</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-46.png" alt="Step 46"></p>
<p>模擬器後續都還是可以在安裝沒關係，就像 <strong>Android</strong> 模擬器一樣</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-47.png" alt="Step 47"></p>
<p>出現模擬器就算成功了</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-48.png" alt="Step 48"></p>
<p>點選 <strong>File &gt; Open Simulator</strong> 都還可以切換其他模擬器</p>
<hr>
<h3 id="再次確認"><a href="#再次確認" class="headerlink" title="再次確認"></a>再次確認</h3><p>這時候可以在執行一次 <strong>flutter doctor</strong> 確認有什麼沒有裝到</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-49.png" alt="Step 49"></p>
<p>筆者這邊依稀記得還有執行過 <code>flutter doctor --android-licenses</code>，但是忘了在哪個環節去執行，其實除了 <strong>Flutter SDK</strong> 建議先安裝外，其它安裝順序不是非常重要，如果你有漏掉執行 <strong>flutter doctor</strong> 就會提醒了</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-50.png" alt="Step 50"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-51.png" alt="Step 51"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-52.png" alt="Step 52"></p>
<p>另外筆者的 <strong>gem</strong> 其實也是一直安裝失敗，後來也是一直重複刪除安裝刪除安裝就成功了，如果有碰到請一直按著 <strong>flutter doctor</strong> 的指示去做就可以了</p>
<blockquote>
<p><del><em><strong>小抱怨：其實我覺得安裝流程對新手及其不友善，但或許是我慧根太低的原因</strong></em></del></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-53.png" alt="Step 53"></p>
<p>中途也有執行到 <code>sudo gem install drb -v 2.0.6</code>，總之跟著 <strong>flutter doctor</strong> 的步驟走應該是不會相差太遠的，少的東西再另外去爬文安裝即可</p>
<hr>
<h3 id="8-配置-IDE-編輯器-的開發設置"><a href="#8-配置-IDE-編輯器-的開發設置" class="headerlink" title="8. 配置 IDE(編輯器) 的開發設置"></a>8. 配置 IDE(編輯器) 的開發設置</h3><h4 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h4><p>因為筆者習慣使用 <strong>VSCode</strong> ，故在 <strong>VSCode</strong> 也會需要安裝 <strong>Flutter SDK</strong></p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-54.png" alt="Step 54"></p>
<p>在 <strong>VSCode</strong> 安裝套件的地方輸入 <strong>Flutter</strong> 點擊安裝</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-55.png" alt="Step 55"></p>
<p>因為我們需要執行模擬器，故這邊也需要再安裝 <strong>Emulator</strong> ，在搜尋欄輸入 <strong>Android IOS Emulator</strong> 點擊安裝</p>
<p>都裝好後建議重新啟動一次 <strong>VSCode</strong></p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-56.png" alt="Step 56"></p>
<p>在 <strong>VSCode</strong> 按 <code>command + p</code>，彈出的輸入框中輸入 <code>&gt;flutter</code>，就會有新建專案的指令</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-57.png" alt="Step 57"></p>
<p>選擇你想要使用的配置去建立新的專案</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-57-2.png" alt="Step 57-2"></p>
<p>建立完成後，先確認 <strong>flutter doctor</strong> 執行都是配置正常的，正常的話再進入下一步</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-58.png" alt="Step 58"></p>
<p>一樣在 <strong>VSCode</strong> 按 <code>command + p</code>，打開輸入框，輸入 <code>&gt;Emulator</code>，然後按 <strong>Enter</strong></p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-59.png" alt="Step 59"></p>
<p>這時候就能選擇要啟動 <strong>IOS</strong> 或者 <strong>Android</strong> 的模擬器</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-60.png" alt="Step 60"></p>
<p>之後可以在選擇想要啟動的型號</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-61.png" alt="Step 61"></p>
<blockquote>
<p><em>再次提醒：如果還是有出現沒有找到 <strong>flutter</strong> 指令的話，就要再查看一下配置是否沒有吃到</em></p>
</blockquote>
<h4 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h4><p><strong>Android Studio</strong> 的配置已經配得差不多了，打開剛剛創建的專案</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-35.png" alt="Step 35"></p>
<p>一樣叫出模擬器列表，點擊 <strong>Tools &gt; Device Manager</strong> ，點選想要使用的模擬器播放按鍵</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-62.png" alt="Step 62"></p>
<p>點選上面的綠色播放按鈕</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-63.png" alt="Step 63"></p>
<p>出現 <code>Debug service Listening on ws://127.0.0.1:57309/zjRoB7eM050=/ws</code> 就代表成功執行了</p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-63-2.png" alt="Step 63-2"></p>
<p>到這邊恭喜你啟動了你的第一個 <strong>Flutter</strong> 專案！</p>
<h4 id="Android-Studio-切換模擬器"><a href="#Android-Studio-切換模擬器" class="headerlink" title="Android Studio 切換模擬器"></a>Android Studio 切換模擬器</h4><p><img src="/images/others/loading.gif" data-original="/images/20240128/step-64.png" alt="Step 64"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20240128/step-65.png" alt="Step 65"></p>
<p><strong>Android Studio</strong> 方便的地方在於切換模擬器比較一目瞭然，而且模擬器打開就在同一個視窗內。</p>
<blockquote>
<p><em>不確定 <strong>VSCode</strong> 是否有可以有相同的配置，如果可以還歡迎在下面留言，感謝。</em></p>
</blockquote>
<hr>
<h3 id="享受成果"><a href="#享受成果" class="headerlink" title="享受成果"></a>享受成果</h3><p><img src="/images/others/loading.gif" data-original="/images/20240128/step-66.gif" alt="Step 66"></p>
<p>現在你可以更改 <strong>lib &gt; main.dart</strong> 裡的 <code>home: const MyHomePage(title: &#39;Flutter Demo Home Page&#39;),</code>，將 <strong>title</strong> 改為 <strong>Hello World</strong> </p>
<p>將會看到 <strong>Hot-reload</strong> 熱更新的效果，更改後立即見效。</p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>距離上次文章已經有一段時間了，有段時間試著逼迫自己一個月需要產出一篇文章，但後來發現效率會很低，而且會為了寫文章而寫</p>
<p>這次因為碰到要與朋友一起做 <strong>Side Project</strong> ，聊到 <strong>APP</strong> 的框架，一直對於寫 <strong>APP</strong> 有很大的興趣</p>
<p>之前常常聽到 <strong>React Native</strong> ，雖然 <strong>RN</strong> 社群非常成熟，但筆者其實一直想要尋找前端還有什麼路可以去探索</p>
<p><strong>Flutter</strong> 是一個很好的拓展點，加上筆者一直深信雞蛋不能放同一個籃子內，雖然 <strong>JavaScript、React.js</strong> 都是目前無法撼動的地位</p>
<p>但如果能學一點其他的語言還是比較保險的</p>
<p>一直聽說 <strong>Flutter</strong> 很威能，可以寫出各種平台產品，所以這次也是我們 <strong>Side Project</strong> 優先考量的選擇。</p>
<p>接下來會開始研究學習 <strong>Flutter</strong> ，並且有什麼有趣或者學習筆記，筆者也會記錄到部落格上，歡迎有興趣的夥伴一起來交流成長！！</p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><a href="https://flutter.dev/">Flutter.dev 官方網站</a></li>
<li><a href="https://hackmd.io/@gary3123/rJR8Tldj5">CocoaPods 學習筆記</a></li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>Dart</tag>
        <tag>Flutter</tag>
        <tag>APP</tag>
        <tag>Android</tag>
        <tag>IOS</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hexschool Backend experience camp] — 資料庫體驗營 每日任務串</title>
    <url>/2024/11/27/20241127/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p><img src="/images/others/loading.gif" data-original="/images/20241127/banner.png" alt="Banner"></p>
<p>這邊會存放每日任務的回答，一個章節會是一天的任務內容筆記</p>
<span id="more"></span>

<p><em><strong>整篇文章是筆者自己的心得，如果文內有錯誤的地方，還請盡情指出。</strong></em></p>
<p>本篇會從零開始記錄筆記，目前課程影片的心得在此處以及 <a href="https://rexhung0302.github.io/2024/11/20/20241120/#more">[Hexschool Backend experience camp] — 資料庫體驗營</a></p>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><blockquote>
<p>小節作業如果你也想一起練習，可以使用 <a href="https://pg-sql.com/">線上 DB 操作練習網站</a> 進行操作</p>
</blockquote>
<ol>
<li><a href="#2024-11-25%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%99">2024&#x2F;11&#x2F;25每日任務</a></li>
<li><a href="#2024-11-27%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%99">2024&#x2F;11&#x2F;26每日任務</a></li>
<li><a href="#2024-11-28%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%99">2024&#x2F;11&#x2F;27每日任務</a></li>
<li><a href="#2024-11-29%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%99">2024&#x2F;11&#x2F;28每日任務</a></li>
<li><a href="#%E6%9C%80%E7%B5%82%E4%BD%9C%E6%A5%AD">最終作業</a></li>
</ol>
<hr>
<h2 id="2024-11-25每日任務"><a href="#2024-11-25每日任務" class="headerlink" title="2024&#x2F;11&#x2F;25每日任務"></a>2024&#x2F;11&#x2F;25每日任務</h2><p><img src="/images/others/loading.gif" data-original="/images/20241127/2024_11_25_mission.png" alt="2024&#x2F;11&#x2F;25 Mission"></p>
<blockquote>
<p><a href="https://hackmd.io/XKkdxcKqSyapPEmhP88qgQ?view">任務連結</a></p>
</blockquote>
<p>先使用以下 SQL 建立資料表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> &quot;USER&quot; (</span><br><span class="line">  &quot;id&quot; uuid <span class="keyword">PRIMARY KEY</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> (gen_random_uuid()),</span><br><span class="line">  &quot;name&quot; <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  &quot;email&quot; <span class="type">varchar</span>(<span class="number">320</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line">  &quot;role&quot; <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT NULL</span>, <span class="comment">-- 角色，分別有 &quot;USER&quot;、&quot;COACH&quot;</span></span><br><span class="line">  &quot;created_at&quot; <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> (<span class="built_in">CURRENT_TIMESTAMP</span>),</span><br><span class="line">  &quot;updated_at&quot; <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> (<span class="built_in">CURRENT_TIMESTAMP</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>Q1：新增：新增六筆用戶資料，資料如下：</p>
<ul>
<li>用戶名稱為 李燕容，Email 為 <a href="mailto:&#x6c;&#x65;&#101;&#50;&#x30;&#x30;&#48;&#x40;&#104;&#x65;&#x78;&#x73;&#x63;&#x68;&#x6f;&#x6f;&#x6c;&#x74;&#101;&#115;&#116;&#46;&#x69;&#x6f;">lee2000@hexschooltest.io</a>，Role 為 USER</li>
<li>用戶名稱為 王小明，Email 為 <a href="mailto:&#119;&#88;&#108;&#84;&#x71;&#64;&#104;&#101;&#x78;&#x73;&#x63;&#x68;&#111;&#111;&#x6c;&#x74;&#101;&#115;&#x74;&#x2e;&#x69;&#x6f;">wXlTq@hexschooltest.io</a>，Role 為 USER</li>
<li>用戶名稱為 肌肉棒子，Email 為 <a href="mailto:&#x6d;&#117;&#115;&#x63;&#108;&#101;&#64;&#x68;&#101;&#x78;&#115;&#x63;&#104;&#111;&#x6f;&#108;&#x74;&#x65;&#x73;&#x74;&#x2e;&#x69;&#x6f;">muscle@hexschooltest.io</a>，Role 為 USER</li>
<li>用戶名稱為 好野人，Email 為 <a href="mailto:&#x72;&#105;&#99;&#x68;&#109;&#x61;&#110;&#64;&#104;&#x65;&#x78;&#x73;&#x63;&#104;&#111;&#111;&#x6c;&#x74;&#x65;&#x73;&#116;&#46;&#x69;&#x6f;">richman@hexschooltest.io</a>，Role 為 USER</li>
<li>用戶名稱為 Q太郎，Email 為 <a href="mailto:&#x73;&#116;&#x61;&#114;&#112;&#108;&#97;&#x74;&#x69;&#x6e;&#x75;&#109;&#64;&#x68;&#x65;&#x78;&#115;&#x63;&#x68;&#111;&#x6f;&#x6c;&#116;&#101;&#x73;&#116;&#x2e;&#105;&#111;">starplatinum@hexschooltest.io</a>，Role 為 USER</li>
<li>用戶名稱為 透明人，Email 為 <a href="mailto:&#111;&#112;&#x61;&#x63;&#105;&#116;&#x79;&#48;&#64;&#x68;&#101;&#120;&#x73;&#99;&#x68;&#x6f;&#x6f;&#x6c;&#x74;&#x65;&#115;&#x74;&#x2e;&#105;&#111;">opacity0@hexschooltest.io</a>，Role 為 USER</li>
</ul>
<p>A1：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span></span><br><span class="line"> 	&quot;USER&quot;(name, email, role)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;李燕容&#x27;</span>, <span class="string">&#x27;lee2000@hexschooltest.io&#x27;</span>, <span class="string">&#x27;USER&#x27;</span>),</span><br><span class="line">  (</span><br><span class="line">    <span class="string">&#x27;王小明&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;wXlTq@hexschooltest.io&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;USER&#x27;</span></span><br><span class="line">  ),</span><br><span class="line">  (</span><br><span class="line">    <span class="string">&#x27;肌肉棒子&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;muscle@hexschooltest.io&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;USER&#x27;</span></span><br><span class="line">  ),</span><br><span class="line">  (</span><br><span class="line">    <span class="string">&#x27;好野人&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;richman@hexschooltest.io&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;USER&#x27;</span></span><br><span class="line">  ),</span><br><span class="line">  (</span><br><span class="line">    <span class="string">&#x27;Q太郎&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;starplatinum@hexschooltest.io&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;USER&#x27;</span></span><br><span class="line">  ),</span><br><span class="line">  (</span><br><span class="line">    <span class="string">&#x27;透明人&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;opacity0@hexschooltest.io&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;USER&#x27;</span></span><br><span class="line">  );</span><br></pre></td></tr></table></figure>

<p>再進行搜尋 USER 表 <code>SELECT * FROM &quot;USER”;</code>，查看是否成功塞入資料</p>
<p>Q2：修改：用 Email 找到 李燕容、肌肉棒子、Q太郎，如果他的 Role 為 USER 將他的 Role 改為 COACH</p>
<p>A2：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span></span><br><span class="line">  &quot;USER&quot;</span><br><span class="line"><span class="keyword">SET</span></span><br><span class="line">  ROLE <span class="operator">=</span> <span class="string">&#x27;COACH&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  name <span class="keyword">IN</span>(<span class="string">&#x27;李燕容&#x27;</span>, <span class="string">&#x27;肌肉棒子&#x27;</span>, <span class="string">&#x27;Q太郎&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>Q3：刪除：刪除 USER 資料表中，用 Email 找到 透明人，並刪除該筆資料</p>
<p>A3：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span></span><br><span class="line">  &quot;USER&quot;</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  email <span class="operator">=</span> <span class="string">&#x27;opacity0@hexschooltest.io&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>Q4：查詢：取得 USER 資料表目前所有用戶數量（提示：使用count函式）</p>
<p>A4：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> 目前所有用戶數量</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  &quot;USER&quot;;</span><br></pre></td></tr></table></figure>

<p>Q5：查詢：取得 USER 資料表所有用戶資料，並列出前 3 筆（提示：使用limit語法）</p>
<p>A5：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  &quot;USER&quot;</span><br><span class="line">LIMIT</span><br><span class="line">  <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="2024-11-26每日任務"><a href="#2024-11-26每日任務" class="headerlink" title="2024&#x2F;11&#x2F;26每日任務"></a>2024&#x2F;11&#x2F;26每日任務</h2><p><img src="/images/others/loading.gif" data-original="/images/20241127/2024_11_26_mission.png" alt="2024&#x2F;11&#x2F;26 Mission"></p>
<blockquote>
<p><a href="https://hackmd.io/gDseaambSbW1pP-H6Yek8g?view">任務連結</a></p>
</blockquote>
<p>先使用以下 <strong>SQL</strong> 建立資料表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> EXTENSION IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> &quot;uuid-ossp&quot;;</span><br><span class="line"><span class="keyword">CREATE TABLE</span> &quot;USER&quot; (</span><br><span class="line">  &quot;id&quot; uuid <span class="keyword">PRIMARY KEY</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> (gen_random_uuid()),</span><br><span class="line">  &quot;name&quot; <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  &quot;email&quot; <span class="type">varchar</span>(<span class="number">320</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line">  &quot;role&quot; <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  &quot;created_at&quot; <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> (<span class="built_in">CURRENT_TIMESTAMP</span>),</span><br><span class="line">  &quot;updated_at&quot; <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> (<span class="built_in">CURRENT_TIMESTAMP</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> &quot;CREDIT_PACKAGE&quot; (</span><br><span class="line">  &quot;id&quot; serial <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">  &quot;name&quot; <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  &quot;credit_amount&quot; <span class="type">integer</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line">  &quot;price&quot; <span class="type">numeric</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  &quot;created_at&quot; <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> (<span class="built_in">CURRENT_TIMESTAMP</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> &quot;CREDIT_PURCHASE&quot; (</span><br><span class="line">  &quot;id&quot; uuid <span class="keyword">PRIMARY KEY</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> (gen_random_uuid()),</span><br><span class="line">  &quot;user_id&quot; uuid <span class="keyword">NOT NULL</span> <span class="keyword">REFERENCES</span> &quot;USER&quot;(id),</span><br><span class="line">  &quot;credit_package_id&quot; <span class="type">integer</span> <span class="keyword">NOT NULL</span> <span class="keyword">REFERENCES</span> &quot;CREDIT_PACKAGE&quot;(id),</span><br><span class="line">  &quot;purchased_credits&quot; <span class="type">integer</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line">  &quot;price_paid&quot; <span class="type">numeric</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  &quot;created_at&quot; <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> (<span class="built_in">CURRENT_TIMESTAMP</span>),</span><br><span class="line">  &quot;purchase_at&quot; <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> (<span class="built_in">CURRENT_TIMESTAMP</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>Q1：新增：在 <strong>CREDIT_PACKAGE</strong> 資料表新增三筆資料，資料需求如下：</p>
<ul>
<li>名稱為 7 堂組合包方案，價格為1,400 元，堂數為7</li>
<li>名稱為 14 堂組合包方案，價格為2,520 元，堂數為14</li>
<li>名稱為 21 堂組合包方案，價格為4,800 元，堂數為21</li>
</ul>
<p>A1：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span></span><br><span class="line">  &quot;CREDIT_PACKAGE&quot;(name, price, credit_amount)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;7 堂組合包方案&#x27;</span>, <span class="number">1400</span>, <span class="number">7</span>),(<span class="string">&#x27;14 堂組合包方案&#x27;</span>, <span class="number">2520</span>, <span class="number">14</span>),(<span class="string">&#x27;21 堂組合包方案&#x27;</span>, <span class="number">4800</span>, <span class="number">21</span>);</span><br></pre></td></tr></table></figure>

<p>Q2：新增：在 <strong>CREDIT_PURCHASE</strong> 資料表，新增三筆資料：（請使用 <strong>name</strong> 欄位做子查詢）</p>
<ul>
<li>王小明 購買 14 堂組合包方案</li>
<li>王小明 購買 21 堂組合包方案</li>
<li>好野人 購買 14 堂組合包方案</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span></span><br><span class="line">  &quot;CREDIT_PURCHASE&quot;(</span><br><span class="line">    user_id,</span><br><span class="line">    credit_package_id,</span><br><span class="line">    purchased_credits,</span><br><span class="line">    price_paid</span><br><span class="line">  )</span><br><span class="line"><span class="keyword">VALUES</span>(</span><br><span class="line">    (</span><br><span class="line">      <span class="keyword">SELECT</span></span><br><span class="line">        id</span><br><span class="line">      <span class="keyword">FROM</span></span><br><span class="line">        &quot;USER&quot;</span><br><span class="line">      <span class="keyword">WHERE</span></span><br><span class="line">        name <span class="operator">=</span> <span class="string">&#x27;王小明&#x27;</span></span><br><span class="line">    ),</span><br><span class="line">    (</span><br><span class="line">      <span class="keyword">SELECT</span></span><br><span class="line">        id</span><br><span class="line">      <span class="keyword">FROM</span></span><br><span class="line">        &quot;CREDIT_PACKAGE&quot;</span><br><span class="line">      <span class="keyword">WHERE</span></span><br><span class="line">        name <span class="operator">=</span> <span class="string">&#x27;14 堂組合包方案&#x27;</span></span><br><span class="line">    ),</span><br><span class="line">    (</span><br><span class="line">      <span class="keyword">SELECT</span></span><br><span class="line">        credit_amount</span><br><span class="line">      <span class="keyword">FROM</span></span><br><span class="line">        &quot;CREDIT_PACKAGE&quot;</span><br><span class="line">      <span class="keyword">WHERE</span></span><br><span class="line">        name <span class="operator">=</span> <span class="string">&#x27;14 堂組合包方案&#x27;</span></span><br><span class="line">    ),</span><br><span class="line">    (</span><br><span class="line">      <span class="keyword">SELECT</span></span><br><span class="line">        price</span><br><span class="line">      <span class="keyword">FROM</span></span><br><span class="line">        &quot;CREDIT_PACKAGE&quot;</span><br><span class="line">      <span class="keyword">WHERE</span></span><br><span class="line">        name <span class="operator">=</span> <span class="string">&#x27;14 堂組合包方案&#x27;</span></span><br><span class="line">    )</span><br><span class="line">  ),</span><br><span class="line">  (</span><br><span class="line">    (</span><br><span class="line">      <span class="keyword">SELECT</span></span><br><span class="line">        id</span><br><span class="line">      <span class="keyword">FROM</span></span><br><span class="line">        &quot;USER&quot;</span><br><span class="line">      <span class="keyword">WHERE</span></span><br><span class="line">        name <span class="operator">=</span> <span class="string">&#x27;王小明&#x27;</span></span><br><span class="line">    ),</span><br><span class="line">    (</span><br><span class="line">      <span class="keyword">SELECT</span></span><br><span class="line">        id</span><br><span class="line">      <span class="keyword">FROM</span></span><br><span class="line">        &quot;CREDIT_PACKAGE&quot;</span><br><span class="line">      <span class="keyword">WHERE</span></span><br><span class="line">        name <span class="operator">=</span> <span class="string">&#x27;21 堂組合包方案&#x27;</span></span><br><span class="line">    ),</span><br><span class="line">    (</span><br><span class="line">      <span class="keyword">SELECT</span></span><br><span class="line">        credit_amount</span><br><span class="line">      <span class="keyword">FROM</span></span><br><span class="line">        &quot;CREDIT_PACKAGE&quot;</span><br><span class="line">      <span class="keyword">WHERE</span></span><br><span class="line">        name <span class="operator">=</span> <span class="string">&#x27;21 堂組合包方案&#x27;</span></span><br><span class="line">    ),</span><br><span class="line">    (</span><br><span class="line">      <span class="keyword">SELECT</span></span><br><span class="line">        price</span><br><span class="line">      <span class="keyword">FROM</span></span><br><span class="line">        &quot;CREDIT_PACKAGE&quot;</span><br><span class="line">      <span class="keyword">WHERE</span></span><br><span class="line">        name <span class="operator">=</span> <span class="string">&#x27;21 堂組合包方案&#x27;</span></span><br><span class="line">    )</span><br><span class="line">  ),</span><br><span class="line">  (</span><br><span class="line">    (</span><br><span class="line">      <span class="keyword">SELECT</span></span><br><span class="line">        id</span><br><span class="line">      <span class="keyword">FROM</span></span><br><span class="line">        &quot;USER&quot;</span><br><span class="line">      <span class="keyword">WHERE</span></span><br><span class="line">        name <span class="operator">=</span> <span class="string">&#x27;好野人&#x27;</span></span><br><span class="line">    ),</span><br><span class="line">    (</span><br><span class="line">      <span class="keyword">SELECT</span></span><br><span class="line">        id</span><br><span class="line">      <span class="keyword">FROM</span></span><br><span class="line">        &quot;CREDIT_PACKAGE&quot;</span><br><span class="line">      <span class="keyword">WHERE</span></span><br><span class="line">        name <span class="operator">=</span> <span class="string">&#x27;14 堂組合包方案&#x27;</span></span><br><span class="line">    ),</span><br><span class="line">    (</span><br><span class="line">      <span class="keyword">SELECT</span></span><br><span class="line">        credit_amount</span><br><span class="line">      <span class="keyword">FROM</span></span><br><span class="line">        &quot;CREDIT_PACKAGE&quot;</span><br><span class="line">      <span class="keyword">WHERE</span></span><br><span class="line">        name <span class="operator">=</span> <span class="string">&#x27;14 堂組合包方案&#x27;</span></span><br><span class="line">    ),</span><br><span class="line">    (</span><br><span class="line">      <span class="keyword">SELECT</span></span><br><span class="line">        price</span><br><span class="line">      <span class="keyword">FROM</span></span><br><span class="line">        &quot;CREDIT_PACKAGE&quot;</span><br><span class="line">      <span class="keyword">WHERE</span></span><br><span class="line">        name <span class="operator">=</span> <span class="string">&#x27;14 堂組合包方案&#x27;</span></span><br><span class="line">    )</span><br><span class="line">  );</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="2024-11-27每日任務"><a href="#2024-11-27每日任務" class="headerlink" title="2024&#x2F;11&#x2F;27每日任務"></a>2024&#x2F;11&#x2F;27每日任務</h2><p><img src="/images/others/loading.gif" data-original="/images/20241127/2024_11_27_mission.png" alt="2024&#x2F;11&#x2F;27 Mission"></p>
<blockquote>
<p><a href="https://hackmd.io/bbtQmWqWR2OBXXoW0sSG8g?view">任務連結</a></p>
</blockquote>
<p>Q1：新增：在 <strong>COACH</strong> 資料表新增三筆資料，資料需求如下：</p>
<ul>
<li>將用戶 李燕容 新增為教練，並且年資設定為 2 年（提示：使用 李燕容 的 email ，取得 李燕容 的 id ）</li>
<li>將用戶 肌肉棒子 新增為教練，並且年資設定為 2 年（提示：使用 肌肉棒子 的 email ，取得 肌肉棒子 的 id ）</li>
<li>將用戶 Q太郎 新增為教練，並且年資設定為 2 年（提示：使用 Q太郎 的 email ，取得 Q太郎 的 id ）</li>
</ul>
<p>A1：</p>
<p><img src="/images/others/loading.gif" data-original="/images/20241127/2024_11_27_A1.png" alt="2024&#x2F;11&#x2F;27 A1"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span></span><br><span class="line">  &quot;COACH&quot;(user_id, experience_years)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">  (</span><br><span class="line">    (</span><br><span class="line">      <span class="keyword">SELECT</span></span><br><span class="line">        id</span><br><span class="line">      <span class="keyword">FROM</span></span><br><span class="line">        &quot;USER&quot;</span><br><span class="line">      <span class="keyword">WHERE</span></span><br><span class="line">        email <span class="operator">=</span> <span class="string">&#x27;lee2000@hexschooltest.io&#x27;</span></span><br><span class="line">    ),</span><br><span class="line">    <span class="number">2</span></span><br><span class="line">  ),</span><br><span class="line">  (</span><br><span class="line">    (</span><br><span class="line">      <span class="keyword">SELECT</span></span><br><span class="line">        id</span><br><span class="line">      <span class="keyword">FROM</span></span><br><span class="line">        &quot;USER&quot;</span><br><span class="line">      <span class="keyword">WHERE</span></span><br><span class="line">        email <span class="operator">=</span> <span class="string">&#x27;muscle@hexschooltest.io&#x27;</span></span><br><span class="line">    ),</span><br><span class="line">    <span class="number">2</span></span><br><span class="line">  ),</span><br><span class="line">  (</span><br><span class="line">    (</span><br><span class="line">      <span class="keyword">SELECT</span></span><br><span class="line">        id</span><br><span class="line">      <span class="keyword">FROM</span></span><br><span class="line">        &quot;USER&quot;</span><br><span class="line">      <span class="keyword">WHERE</span></span><br><span class="line">        email <span class="operator">=</span> <span class="string">&#x27;starplatinum@hexschooltest.io&#x27;</span></span><br><span class="line">    ),</span><br><span class="line">    <span class="number">2</span></span><br><span class="line">  );</span><br></pre></td></tr></table></figure>

<p>Q2：何謂一對多、一對一</p>
<p>A2:</p>
<ul>
<li>一對多可以用 班級 對應 學生，一個班級可以有多個學生，就是一對多。</li>
<li>一對一可以用 民眾 及 身分證字號，一個民眾對應一個身分證字號。</li>
</ul>
<p>Q3：使用者與部落格文章的資料表關係</p>
<p>以「」角度：一個「」有 ? 個 「」<br>以「」角度：一個「」有 ? 個 「」</p>
<p>A3：</p>
<p>以「使用者」角度：一個「使用者」有 多 個 「文章」<br>以「文章」角度：一個「文章」有 1 個 「使用者」</p>
<p>Q4：依照上述描述，他是一對一關係、還是一對多？<br>A4：一對多的關係</p>
<p>Q5：下方 SQL 的資料，請用小畫家繪製線條(一對一或一對多)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> EXTENSION IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> &quot;uuid-ossp&quot;;</span><br><span class="line"><span class="keyword">CREATE TABLE</span> &quot;USER&quot; (</span><br><span class="line">  &quot;id&quot; uuid <span class="keyword">PRIMARY KEY</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> (gen_random_uuid()),</span><br><span class="line">  &quot;name&quot; <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  &quot;email&quot; <span class="type">varchar</span>(<span class="number">320</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line">  &quot;role&quot; <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  &quot;created_at&quot; <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> (<span class="built_in">CURRENT_TIMESTAMP</span>),</span><br><span class="line">  &quot;updated_at&quot; <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> (<span class="built_in">CURRENT_TIMESTAMP</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> &quot;BLOG_POST&quot; (</span><br><span class="line">  &quot;id&quot; uuid <span class="keyword">PRIMARY KEY</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> (gen_random_uuid()),</span><br><span class="line">  &quot;user_id&quot; uuid <span class="keyword">NOT NULL</span> <span class="keyword">REFERENCES</span> &quot;USER&quot;(id),</span><br><span class="line">  &quot;title&quot; <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  &quot;content&quot; text <span class="keyword">NOT NULL</span>,</span><br><span class="line">  &quot;featured_image_url&quot; <span class="type">varchar</span>(<span class="number">2048</span>),</span><br><span class="line">  &quot;category&quot; <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  &quot;spend_minutes&quot; <span class="type">smallint</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line">  &quot;created_at&quot; <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> (<span class="built_in">CURRENT_TIMESTAMP</span>),</span><br><span class="line">  &quot;updated_at&quot; <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> (<span class="built_in">CURRENT_TIMESTAMP</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>A5：</p>
<blockquote>
<p>1對多(1&gt;N) 的關係</p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20241127/2024_11_27_A5.png" alt="2024&#x2F;11&#x2F;27 A5"></p>
<hr>
<p><img src="/images/others/loading.gif" data-original="/images/20241127/2024_11_28_mission.png" alt="2024&#x2F;11&#x2F;28 Mission"></p>
<blockquote>
<p><a href="https://hackmd.io/T26dfv2FQOCW2w4JKvdXSw">任務連結</a></p>
</blockquote>
<ul>
<li>subject ：科目名稱</li>
<li>exam_score：科目成績</li>
<li>student：學生資料</li>
</ul>
<p>先使用以下 <strong>SQL</strong> 建立資料表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建立資料表</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> student (</span><br><span class="line"> id serial <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line"> name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line"> class <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line"> created_at <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> subject (</span><br><span class="line"> id serial <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line"> name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line"> created_at <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> exam_score (</span><br><span class="line"> id serial <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line"> student_id <span class="type">integer</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line"> subject_id <span class="type">integer</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line"> score <span class="type">integer</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line"> exam_date <span class="type">date</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line"> created_at <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line"> <span class="keyword">FOREIGN KEY</span> (student_id) <span class="keyword">REFERENCES</span> student(id),</span><br><span class="line"> <span class="keyword">FOREIGN KEY</span> (subject_id) <span class="keyword">REFERENCES</span> subject(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入測試資料</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> student (name, class) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;三年一班&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;小華&#x27;</span>, <span class="string">&#x27;三年一班&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;小美&#x27;</span>, <span class="string">&#x27;三年一班&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;小龍&#x27;</span>, <span class="string">&#x27;三年一班&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;小智&#x27;</span>, <span class="string">&#x27;三年一班&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> subject (name) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;國文&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;英文&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;數學&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> exam_score (student_id, subject_id, score, exam_date) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">1</span>, <span class="number">85</span>, <span class="string">&#x27;2024-03-01&#x27;</span>),</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">92</span>, <span class="string">&#x27;2024-03-01&#x27;</span>),</span><br><span class="line">(<span class="number">1</span>, <span class="number">3</span>, <span class="number">78</span>, <span class="string">&#x27;2024-03-01&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="number">1</span>, <span class="number">76</span>, <span class="string">&#x27;2024-03-01&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="number">2</span>, <span class="number">88</span>, <span class="string">&#x27;2024-03-01&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="number">3</span>, <span class="number">95</span>, <span class="string">&#x27;2024-03-01&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="number">1</span>, <span class="number">92</span>, <span class="string">&#x27;2024-03-01&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="number">2</span>, <span class="number">85</span>, <span class="string">&#x27;2024-03-01&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="number">3</span>, <span class="number">87</span>, <span class="string">&#x27;2024-03-01&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="number">1</span>, <span class="number">78</span>, <span class="string">&#x27;2024-03-01&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="number">2</span>, <span class="number">82</span>, <span class="string">&#x27;2024-03-01&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="number">3</span>, <span class="number">90</span>, <span class="string">&#x27;2024-03-01&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="number">1</span>, <span class="number">88</span>, <span class="string">&#x27;2024-03-01&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="number">2</span>, <span class="number">79</span>, <span class="string">&#x27;2024-03-01&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="number">3</span>, <span class="number">93</span>, <span class="string">&#x27;2024-03-01&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>Q1：查看所有科目</p>
<p><img src="/images/others/loading.gif" data-original="/images/20241127/2024_11_28_Q1.png" alt="2024&#x2F;11&#x2F;28 Q1"></p>
<p>A1：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> subject;</span><br></pre></td></tr></table></figure>

<p>Q2：計算所有成績平均<br>A2：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="built_in">AVG</span>(score) <span class="keyword">AS</span> avg_score</span><br><span class="line"><span class="keyword">FROM</span> exam_score;</span><br></pre></td></tr></table></figure>

<p>Q3：找出 90 分以上的成績<br>A3：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  exam_score</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  score <span class="operator">&gt;=</span> <span class="number">90</span>;</span><br></pre></td></tr></table></figure>

<p>Q4：顯示小明的國文成績，篩選條件請用國文的 <strong>subject_id &#x3D; 1</strong> 進行篩選<br>A4：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  student.name,</span><br><span class="line">  exam_score.score</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  exam_score</span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> student <span class="keyword">ON</span> exam_score.student_id <span class="operator">=</span> student.id</span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> subject <span class="keyword">ON</span> exam_score.subject_id <span class="operator">=</span> subject.id</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  student.name <span class="operator">=</span> <span class="string">&#x27;小明&#x27;</span></span><br><span class="line">  <span class="keyword">AND</span> subject.name <span class="operator">=</span> <span class="string">&#x27;國文&#x27;</span>;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="2024-11-29每日任務"><a href="#2024-11-29每日任務" class="headerlink" title="2024&#x2F;11&#x2F;29每日任務"></a>2024&#x2F;11&#x2F;29每日任務</h2><p><img src="/images/others/loading.gif" data-original="/images/20241127/2024_11_29_mission.png" alt="2024&#x2F;11&#x2F;29 Mission"></p>
<blockquote>
<p><a href="https://hackmd.io/UM9RRA0jQ1myscdTq2iObg?view">任務連結</a></p>
</blockquote>
<ul>
<li>subject ：科目名稱</li>
<li>exam_score：科目成績</li>
<li>student：學生資料</li>
</ul>
<p>先使用以下 <strong>SQL</strong> 建立資料表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建立資料表</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> student (</span><br><span class="line"> id serial <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line"> name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line"> class <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line"> created_at <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> subject (</span><br><span class="line"> id serial <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line"> name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line"> created_at <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> exam_score (</span><br><span class="line"> id serial <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line"> student_id <span class="type">integer</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line"> subject_id <span class="type">integer</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line"> score <span class="type">integer</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line"> exam_date <span class="type">date</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line"> created_at <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line"> <span class="keyword">FOREIGN KEY</span> (student_id) <span class="keyword">REFERENCES</span> student(id),</span><br><span class="line"> <span class="keyword">FOREIGN KEY</span> (subject_id) <span class="keyword">REFERENCES</span> subject(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入測試資料</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> student (name, class) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;三年一班&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;小華&#x27;</span>, <span class="string">&#x27;三年一班&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;小美&#x27;</span>, <span class="string">&#x27;三年一班&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;小龍&#x27;</span>, <span class="string">&#x27;三年一班&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;小智&#x27;</span>, <span class="string">&#x27;三年一班&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> subject (name) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;國文&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;英文&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;數學&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> exam_score (student_id, subject_id, score, exam_date) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">1</span>, <span class="number">85</span>, <span class="string">&#x27;2024-03-01&#x27;</span>),</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">92</span>, <span class="string">&#x27;2024-03-01&#x27;</span>),</span><br><span class="line">(<span class="number">1</span>, <span class="number">3</span>, <span class="number">78</span>, <span class="string">&#x27;2024-03-01&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="number">1</span>, <span class="number">76</span>, <span class="string">&#x27;2024-03-01&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="number">2</span>, <span class="number">88</span>, <span class="string">&#x27;2024-03-01&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="number">3</span>, <span class="number">95</span>, <span class="string">&#x27;2024-03-01&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="number">1</span>, <span class="number">92</span>, <span class="string">&#x27;2024-03-01&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="number">2</span>, <span class="number">85</span>, <span class="string">&#x27;2024-03-01&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="number">3</span>, <span class="number">87</span>, <span class="string">&#x27;2024-03-01&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="number">1</span>, <span class="number">78</span>, <span class="string">&#x27;2024-03-01&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="number">2</span>, <span class="number">82</span>, <span class="string">&#x27;2024-03-01&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="number">3</span>, <span class="number">90</span>, <span class="string">&#x27;2024-03-01&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="number">1</span>, <span class="number">88</span>, <span class="string">&#x27;2024-03-01&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="number">2</span>, <span class="number">79</span>, <span class="string">&#x27;2024-03-01&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="number">3</span>, <span class="number">93</span>, <span class="string">&#x27;2024-03-01&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>Q1：計算每個學生的總分<br>A1：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  name,</span><br><span class="line">  <span class="built_in">SUM</span>(score) <span class="keyword">AS</span> total</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  student</span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> exam_score <span class="keyword">ON</span> student.id <span class="operator">=</span> exam_score.student_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  student.name;</span><br></pre></td></tr></table></figure>

<p>Q2：計算每科的平均分數並依分數排序<br>A2：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  subject.name,</span><br><span class="line">  <span class="built_in">AVG</span>(exam_score.score) <span class="keyword">AS</span> average</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  exam_score</span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> subject <span class="keyword">ON</span> exam_score.subject_id <span class="operator">=</span> subject.id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  subject.name</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> total <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<p>Q3：顯示英文成績排名<br>A3：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  student.name,</span><br><span class="line">  exam_score.score</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  student</span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> exam_score <span class="keyword">ON</span> student.id <span class="operator">=</span> exam_score.student_id</span><br><span class="line">  <span class="comment">-- INNER JOIN subject ON exam_score.subject_id = subject.id</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  <span class="comment">-- subject.name = &#x27;英文&#x27;</span></span><br><span class="line">  <span class="comment">-- 可以把下面這段子查詢註解掉，並打開上面兩個註解掉的 INNER JOIN 及 subject.name = &#x27;英文&#x27;，兩種方式皆可</span></span><br><span class="line">  exam_score.subject_id <span class="operator">=</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">      id</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">      subject</span><br><span class="line">    <span class="keyword">WHERE</span></span><br><span class="line">      name <span class="operator">=</span> <span class="string">&#x27;英文&#x27;</span></span><br><span class="line">  )</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  exam_score.score <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<p>Q4：找出考最好的科目<br>A4：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  subject.name,</span><br><span class="line">  <span class="built_in">MAX</span>(exam_score.score) <span class="keyword">AS</span> highest</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  exam_score</span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> subject <span class="keyword">ON</span> subject.id <span class="operator">=</span> exam_score.subject_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  subject.name</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  highest <span class="keyword">DESC</span></span><br><span class="line">LIMIT</span><br><span class="line">  <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>Q5：計算每位學生的總分和全班平均的差距，依總分排序<br>A5：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  student.name,</span><br><span class="line">  <span class="built_in">SUM</span>(exam_score.score) <span class="keyword">AS</span> student_total,</span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">      <span class="built_in">AVG</span>(total_table.total)</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">      (</span><br><span class="line">        <span class="keyword">SELECT</span></span><br><span class="line">          <span class="built_in">SUM</span>(exam_score.score) <span class="keyword">AS</span> total</span><br><span class="line">        <span class="keyword">FROM</span></span><br><span class="line">          exam_score</span><br><span class="line">        <span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">          exam_score.student_id</span><br><span class="line">      ) <span class="keyword">AS</span> total_table</span><br><span class="line">  ) <span class="keyword">AS</span> class_avg,</span><br><span class="line">  <span class="built_in">SUM</span>(exam_score.score) <span class="operator">-</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">      <span class="built_in">AVG</span>(total_table.total)</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">      (</span><br><span class="line">        <span class="keyword">SELECT</span></span><br><span class="line">          <span class="built_in">SUM</span>(exam_score.score) <span class="keyword">AS</span> total</span><br><span class="line">        <span class="keyword">FROM</span></span><br><span class="line">          exam_score</span><br><span class="line">        <span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">          exam_score.student_id</span><br><span class="line">      ) <span class="keyword">AS</span> total_table</span><br><span class="line">  ) <span class="keyword">AS</span> difference</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  exam_score</span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> student <span class="keyword">ON</span> exam_score.student_id <span class="operator">=</span> student.id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  student.name</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  student_total <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<p>上面這邊也可以在 <code>AS total_table</code> 的部分使用 <strong>t</strong> 替代，如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  student.name,</span><br><span class="line">  <span class="built_in">SUM</span>(exam_score.score) <span class="keyword">AS</span> student_total,</span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">      <span class="built_in">AVG</span>(total_table.total)</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">      (</span><br><span class="line">        <span class="keyword">SELECT</span></span><br><span class="line">          <span class="built_in">SUM</span>(exam_score.score) <span class="keyword">AS</span> total</span><br><span class="line">        <span class="keyword">FROM</span></span><br><span class="line">          exam_score</span><br><span class="line">        <span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">          exam_score.student_id</span><br><span class="line">      ) t</span><br><span class="line">  ) <span class="keyword">AS</span> class_avg,</span><br><span class="line"><span class="comment">-- ...下略</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="最終作業"><a href="#最終作業" class="headerlink" title="最終作業"></a>最終作業</h2><p><img src="/images/others/loading.gif" data-original="/images/20241127/final-mission.png" alt="最終作業"></p>
<p>最終作業有兩種解題方式，一種是透過之前的 <a href="https://pg-sql.com/">線上 DB 操作練習網站</a> 先去匯入資料，然後進行問題的操作</p>
<p>另一種方式則是透過六角學院已經有在 <strong>Github</strong> 上包裹好 <strong>Docker</strong>，方便我們在本地搭建 <strong>PostgreSQL</strong>，然後再透過 <strong>DBeaver</strong> 去進行操作</p>
<h3 id="作業講解"><a href="#作業講解" class="headerlink" title="作業講解"></a>作業講解</h3><p>這次的作業學院有先釋出一張資料庫的結構圖</p>
<p><img src="/images/others/loading.gif" data-original="/images/20241127/final-mission-table.png" alt="資料表概覽"></p>
<p>而任務的內容則是以下</p>
<p><img src="/images/others/loading.gif" data-original="/images/20241127/final-mission-A1.png" alt="任務第一部分"><br><img src="/images/others/loading.gif" data-original="/images/20241127/final-mission-A2.png" alt="任務第二部分"><br><img src="/images/others/loading.gif" data-original="/images/20241127/final-mission-A3.png" alt="任務第三部分"></p>
<p>任務繳交的方式有分三個等級</p>
<ul>
<li>LV 1｜完成題目 1.用戶資料 到 4.課程管理</li>
<li>LV 2｜完成全部題目（不含挑戰題）</li>
<li>LV 3｜完成全部題目（含挑戰題）</li>
</ul>
<p>身為六角學院的學生，再難都要挑戰看看 <strong>LV 3</strong> 啊！！！</p>
<h3 id="解題方式一"><a href="#解題方式一" class="headerlink" title="解題方式一"></a>解題方式一</h3><p>這邊如果是使用前者可以先進行匯入資料，可以參考 <a href="https://hackmd.io/@hexschool/SkpaT_jfye">任務二-資料庫建立指令</a>，或是貼上以下的 <strong>SQL</strong> 語法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> EXTENSION IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> &quot;uuid-ossp&quot;;</span><br><span class="line"><span class="keyword">CREATE TABLE</span> &quot;USER&quot; (</span><br><span class="line">  &quot;id&quot; uuid <span class="keyword">PRIMARY KEY</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> (gen_random_uuid()),</span><br><span class="line">  &quot;name&quot; <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  &quot;email&quot; <span class="type">varchar</span>(<span class="number">320</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line">  &quot;role&quot; <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  &quot;created_at&quot; <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> (<span class="built_in">CURRENT_TIMESTAMP</span>),</span><br><span class="line">  &quot;updated_at&quot; <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> (<span class="built_in">CURRENT_TIMESTAMP</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE TABLE</span> &quot;SKILL&quot; (</span><br><span class="line">  &quot;id&quot; uuid <span class="keyword">PRIMARY KEY</span> <span class="keyword">DEFAULT</span> uuid_generate_v4(),</span><br><span class="line">  &quot;name&quot; <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line">  &quot;created_at&quot; <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> (<span class="built_in">CURRENT_TIMESTAMP</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> &quot;SKILL&quot; (name) <span class="keyword">VALUES</span> (<span class="string">&#x27;重訓&#x27;</span>), (<span class="string">&#x27;瑜伽&#x27;</span>), (<span class="string">&#x27;有氧運動&#x27;</span>), (<span class="string">&#x27;復健訓練&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> &quot;COACH&quot; (</span><br><span class="line">  &quot;id&quot; uuid <span class="keyword">PRIMARY KEY</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> uuid_generate_v4(),</span><br><span class="line">  &quot;user_id&quot; uuid <span class="keyword">NOT NULL</span> <span class="keyword">REFERENCES</span> &quot;USER&quot;(id),</span><br><span class="line">  &quot;experience_years&quot; <span class="type">integer</span>,</span><br><span class="line">  &quot;description&quot; text,</span><br><span class="line">  &quot;profile_image_url&quot; <span class="type">varchar</span>(<span class="number">2048</span>),</span><br><span class="line">  &quot;created_at&quot; <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> (<span class="built_in">CURRENT_TIMESTAMP</span>),</span><br><span class="line">  &quot;updated_at&quot; <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> (<span class="built_in">CURRENT_TIMESTAMP</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span>(&quot;user_id&quot;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> &quot;COACH_LINK_SKILL&quot; (</span><br><span class="line">  &quot;coach_id&quot; uuid <span class="keyword">NOT NULL</span> <span class="keyword">REFERENCES</span> &quot;COACH&quot;(id),</span><br><span class="line">  &quot;skill_id&quot; uuid <span class="keyword">NOT NULL</span> <span class="keyword">REFERENCES</span> &quot;SKILL&quot;(id),</span><br><span class="line">  &quot;created_at&quot; <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> (<span class="built_in">CURRENT_TIMESTAMP</span>),</span><br><span class="line">  <span class="keyword">PRIMARY KEY</span> (&quot;coach_id&quot;, &quot;skill_id&quot;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> &quot;CREDIT_PACKAGE&quot; (</span><br><span class="line">  &quot;id&quot; serial <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">  &quot;name&quot; <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  &quot;credit_amount&quot; <span class="type">integer</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line">  &quot;price&quot; <span class="type">numeric</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  &quot;created_at&quot; <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> (<span class="built_in">CURRENT_TIMESTAMP</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> &quot;CREDIT_PURCHASE&quot; (</span><br><span class="line">  &quot;id&quot; uuid <span class="keyword">PRIMARY KEY</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> (gen_random_uuid()),</span><br><span class="line">  &quot;user_id&quot; uuid <span class="keyword">NOT NULL</span> <span class="keyword">REFERENCES</span> &quot;USER&quot;(id),</span><br><span class="line">  &quot;credit_package_id&quot; <span class="type">integer</span> <span class="keyword">NOT NULL</span> <span class="keyword">REFERENCES</span> &quot;CREDIT_PACKAGE&quot;(id),</span><br><span class="line">  &quot;purchased_credits&quot; <span class="type">integer</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line">  &quot;price_paid&quot; <span class="type">numeric</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  &quot;created_at&quot; <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> (<span class="built_in">CURRENT_TIMESTAMP</span>),</span><br><span class="line">  &quot;purchase_at&quot; <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> (<span class="built_in">CURRENT_TIMESTAMP</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> &quot;COURSE&quot; (</span><br><span class="line">  &quot;id&quot; serial <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">  &quot;user_id&quot; uuid <span class="keyword">NOT NULL</span> <span class="keyword">REFERENCES</span> &quot;USER&quot;(id),</span><br><span class="line">  &quot;skill_id&quot; uuid <span class="keyword">NOT NULL</span> <span class="keyword">REFERENCES</span> &quot;SKILL&quot;(id),</span><br><span class="line">  &quot;name&quot; <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  &quot;description&quot; text,</span><br><span class="line">  &quot;start_at&quot; <span class="type">timestamp</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line">  &quot;end_at&quot; <span class="type">timestamp</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line">  &quot;max_participants&quot; <span class="type">integer</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line">  &quot;meeting_url&quot; <span class="type">varchar</span>(<span class="number">2048</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  &quot;created_at&quot; <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> (<span class="built_in">CURRENT_TIMESTAMP</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> &quot;COURSE_BOOKING&quot; (</span><br><span class="line">  &quot;id&quot; uuid <span class="keyword">PRIMARY KEY</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> (gen_random_uuid()),</span><br><span class="line">  &quot;user_id&quot; uuid <span class="keyword">NOT NULL</span> <span class="keyword">REFERENCES</span> &quot;USER&quot;(id),</span><br><span class="line">  &quot;course_id&quot; <span class="type">integer</span> <span class="keyword">NOT NULL</span> <span class="keyword">REFERENCES</span> &quot;COURSE&quot;(id),</span><br><span class="line">  &quot;booking_at&quot; <span class="type">timestamp</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line">  &quot;status&quot; <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  &quot;join_at&quot; <span class="type">timestamp</span>,</span><br><span class="line">  &quot;leave_at&quot; <span class="type">timestamp</span>,</span><br><span class="line">  &quot;cancelled_at&quot; <span class="type">timestamp</span>,</span><br><span class="line">  &quot;cancellation_reason&quot; <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">  &quot;created_at&quot; <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> (<span class="built_in">CURRENT_TIMESTAMP</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> &quot;BLOG_POST&quot; (</span><br><span class="line">  &quot;id&quot; uuid <span class="keyword">PRIMARY KEY</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> (gen_random_uuid()),</span><br><span class="line">  &quot;user_id&quot; uuid <span class="keyword">NOT NULL</span> <span class="keyword">REFERENCES</span> &quot;USER&quot;(id),</span><br><span class="line">  &quot;title&quot; <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  &quot;content&quot; text <span class="keyword">NOT NULL</span>,</span><br><span class="line">  &quot;featured_image_url&quot; <span class="type">varchar</span>(<span class="number">2048</span>),</span><br><span class="line">  &quot;category&quot; <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  &quot;spend_minutes&quot; <span class="type">smallint</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line">  &quot;created_at&quot; <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> (<span class="built_in">CURRENT_TIMESTAMP</span>),</span><br><span class="line">  &quot;updated_at&quot; <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> (<span class="built_in">CURRENT_TIMESTAMP</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> &quot;COMMENT&quot; (</span><br><span class="line">  &quot;id&quot; uuid <span class="keyword">PRIMARY KEY</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> (gen_random_uuid()),</span><br><span class="line">  &quot;blog_post_id&quot; uuid <span class="keyword">NOT NULL</span> <span class="keyword">REFERENCES</span> &quot;BLOG_POST&quot;(id),</span><br><span class="line">  &quot;user_id&quot; uuid <span class="keyword">NOT NULL</span> <span class="keyword">REFERENCES</span> &quot;USER&quot;(id),</span><br><span class="line">  &quot;content&quot; text <span class="keyword">NOT NULL</span>,</span><br><span class="line">  &quot;created_at&quot; <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> (<span class="built_in">CURRENT_TIMESTAMP</span>),</span><br><span class="line">  &quot;updated_at&quot; <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> (<span class="built_in">CURRENT_TIMESTAMP</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="解題方式二"><a href="#解題方式二" class="headerlink" title="解題方式二"></a>解題方式二</h3><p>這邊筆者使用後者進行本地的建置，如果有興趣也可以跟著一起做（其實學院的影片檔都有了，還是筆記一下過程）</p>
<p>如果要照這這個方法走有幾點事前建置請先具備，沒有安裝的都直接到相對應的官方網站進行下載安裝即可</p>
<ul>
<li>擁有 <strong>Git</strong> 帳號以及操作經驗</li>
<li>已經安裝 <a href="https://www.docker.com/products/docker-desktop/">Docker Desktop</a></li>
<li>已經安裝 <a href="https://dbeaver.io/">DBeaver</a></li>
</ul>
<h4 id="先至-Github-Repo-進行-clone"><a href="#先至-Github-Repo-進行-clone" class="headerlink" title="先至 Github Repo 進行 clone"></a>先至 Github Repo 進行 clone</h4><p>首先到六角學院的 <strong>Github Repo - <a href="https://github.com/hexschool/backend-database-camping-task-startkit">backend-database-camping-task-startkit</a></strong> 把專案 <strong>Fork</strong> 到自己的 <strong>Repo</strong> 內</p>
<blockquote>
<p><strong>Fork</strong> 的部分就不多介紹，有興趣網路上都有許多教學，例如：<a href="https://github.com/doggy8088/Learn-Git-in-30-days/blob/master/zh-tw/28.md">第 28 天：了解 GitHub 的 fork 與 pull request 版控流程</a></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20241127/git-repo-clone.png" alt="Clone 專案"></p>
<p>接著到已經 <strong>Fork</strong> 的專案，把專案 <strong>clone</strong> 下來</p>
<h4 id="安裝專案"><a href="#安裝專案" class="headerlink" title="安裝專案"></a>安裝專案</h4><p>切換到 <strong>clone</strong> 的專案底下，執行 <code>npm i</code>，直到看見 <strong>node_module</strong> 就算完成</p>
<h4 id="執行遷移指令-選擇性操作"><a href="#執行遷移指令-選擇性操作" class="headerlink" title="執行遷移指令(選擇性操作)"></a>執行遷移指令(選擇性操作)</h4><p>因為 <strong>Github</strong> 指令上有寫到 <a href="https://github.com/RexHung0302/backend-database-camping-task-startkit?tab=readme-ov-file#%E6%96%B0%E5%A2%9E%E4%B8%80%E7%B5%84%E9%81%B7%E7%A7%BB">新增一組遷移</a>，雖然後面好像沒用到，但這邊還是照著執行了。</p>
<p>跟著指令一起輸入 <code>npm run create &#123;your_file_name&#125;</code>，後面的 <code>&#123;your_file_name&#125;</code> 可以整個替換成你想要的名稱</p>
<p><img src="/images/others/loading.gif" data-original="/images/20241127/npm-run-create.png" alt="新增遷移"></p>
<p>完成會看到多出檔案</p>
<h4 id="執行-Docker，建置環境"><a href="#執行-Docker，建置環境" class="headerlink" title="執行 Docker，建置環境"></a>執行 Docker，建置環境</h4><p>因為指令學院都幫我們包好了，所以直接執行 <code>npm run start</code> 即可，如果有興趣想要自行體驗 <strong>Docker</strong> 的同學可以考慮參考看看之前筆者寫的 <a href="https://rexhung0302.github.io/2021/12/10/20211210/">[CI&#x2F;CD Note] — 透過 Docker 快速建立及部署環境</a>，自行修改 <strong>Docker File</strong> 或者 <strong>env</strong>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20241127/npm-run-start.png" alt="啟動建置環境"></p>
<p>建置完成後，打開 <strong>Docker Desktop</strong> 就能看到執行中的 <strong>Container</strong>，裡面有一個不會亮是正常的，那個是拿來跑第一次的 <strong>migrate</strong>，可以理解為幫你跑了上面剛剛那串很長的 <strong>SQL</strong> 指令，一些 <strong>Table</strong> 以及資料都先被塞入了，學院方便我們後續操作。</p>
<h4 id="操作-DBeaver"><a href="#操作-DBeaver" class="headerlink" title="操作 DBeaver"></a>操作 DBeaver</h4><p><img src="/images/others/loading.gif" data-original="/images/20241127/DBeaver.png" alt="DBeaver"></p>
<p>打開已經安裝的 <strong>DBeaver</strong>，打開後如果有更新什麼的可以點擊進行更新</p>
<p><img src="/images/others/loading.gif" data-original="/images/20241127/create-postgreSQL.png" alt="Create PostgreSQL"></p>
<p>點擊左上角，然後選擇 <strong>PostgreSQL</strong> 在點擊 <strong>Next</strong></p>
<p><img src="/images/others/loading.gif" data-original="/images/20241127/settting-DB.png" alt="設定資料庫"></p>
<p>接著找到專案底下的 <code>.env.example</code>，然後把裡面的設定值相對應的填到 <strong>Database、Username</strong> 及 <strong>Password</strong></p>
<p><img src="/images/others/loading.gif" data-original="/images/20241127/create-success.png" alt="創建成功"></p>
<p>創建成功後，左側會有出現一頭大象的 <strong>Icon</strong> 以及名為 <strong>test</strong> 的 <strong>Database</strong>，點擊左鍵兩下連線，至此成功建立連結，這時候你的 DB 其實就是存放在剛剛啟動的 <strong>Docker</strong> 內，如果 <strong>Docker</strong> 關閉，這邊就會連線不到，需要注意！</p>
<h4 id="進行-SQL-操作"><a href="#進行-SQL-操作" class="headerlink" title="進行 SQL 操作"></a>進行 SQL 操作</h4><p><img src="/images/others/loading.gif" data-original="/images/20241127/create-sql.png" alt="建立 SQL 編輯器"></p>
<p>接著我們點擊 <strong>test</strong> 右鍵，然後選擇 <code>SQL 編輯器 &gt; 開啟SQL腳本</code></p>
<p><img src="/images/others/loading.gif" data-original="/images/20241127/test-sql.png" alt="嘗試搜尋"></p>
<p>然後再打開的視窗中，輸入 <code>SELECT * FROM &quot;USER&quot;</code></p>
<p>這時候下面如果有出現表格，就代表是正長的，沒有資料也是正確的，因為我們還沒有開始塞入資料。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20241127/copy-home-work.png" alt="複製作業"></p>
<p>然後我們將專案底下 <code>migrations/task/sqls/20241021064214-task-up.sql</code> 的內容複製貼到視窗內，就可以開始解題啦！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20241127/test-final-home-work-Q1.png" alt="執行 SQL"></p>
<p>在我們貼上 <strong>SQL</strong> 後，左側會有好幾顆按鈕可以點擊，建議一次貼一段要執行的就好，然後點最上面的播放按鈕，成功下面也會出現相對應提示。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20241127/check-final-home-work-A1.png" alt="確認成功塞入資料"></p>
<p>確認有沒有成功塞入資料的方式一樣就是再次進行 <code>SELECT * FROM &quot;USER&quot;</code></p>
<h4 id="作業參考"><a href="#作業參考" class="headerlink" title="作業參考"></a>作業參考</h4><p><img src="/images/others/loading.gif" data-original="/images/20241127/github-action.png" alt="Github Action"></p>
<p>因為學院有幫寫一個測試 <strong>Migrate</strong> 的部分，請記得推 <strong>Github</strong> 上去前先去 <strong>Github</strong> 打開，第一次需要自己進去點擊按鈕，之後 <strong>git push</strong> 才會偵測到</p>
<p>這邊筆者已經有先提交一版上去給助教檢查，如果有興趣想參考解答的話，可以參考筆者的 <a href="https://github.com/RexHung0302/backend-database-camping-task-startkit/blob/main/migrations/task/sqls/20241021064214-task-up.sql">backend-database-camping-task-startkit - Repo Sql</a></p>
<h3 id="小記"><a href="#小記" class="headerlink" title="小記"></a>小記</h3><h4 id="Action-崩潰紀"><a href="#Action-崩潰紀" class="headerlink" title="Action 崩潰紀"></a>Action 崩潰紀</h4><p><img src="/images/others/loading.gif" data-original="/images/20241127/github-action-list.png" alt="Github Action List"></p>
<p>在跑 <strong>Action Test</strong> 的時候有發現一直爆出錯誤，找了很久，結果發現是因為沒有加分號 <code>;</code>，以及有個地方塞入值錯誤使用雙引號 <code>&quot;</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span></span><br><span class="line"><span class="keyword">	into</span></span><br><span class="line">	&quot;SKILL&quot;(name)</span><br><span class="line"><span class="keyword">values</span>(&quot;空中瑜伽&quot;);</span><br></pre></td></tr></table></figure>

<p>上面的問題導致資料根本就沒有成功塞入，還好有 <strong>Test</strong> 檢查，不然完全不會發現～</p>
<p>原本中間一度以為要一個一個任務慢慢提交，差點崩潰。</p>
<h4 id="關於-SQL-語法"><a href="#關於-SQL-語法" class="headerlink" title="關於 SQL 語法"></a>關於 SQL 語法</h4><p>其中練習後有一些東西是可以少寫的，例如好幾次的 <strong>SQL</strong> 查詢或塞入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 3-3 修改：更新教練的經驗年數，資料需求如下：</span></span><br><span class="line">    <span class="comment">-- 1. 教練`肌肉棒子` 的經驗年數為3年</span></span><br><span class="line">    <span class="comment">-- 2. 教練`Q太郎` 的經驗年數為5年</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span></span><br><span class="line">    &quot;COACH&quot;</span><br><span class="line"><span class="keyword">set</span></span><br><span class="line">    experience_years <span class="operator">=</span> <span class="number">3</span></span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    &quot;COACH&quot;.id <span class="operator">=</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">            &quot;sub_COACH&quot;.id</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">            &quot;USER&quot; <span class="keyword">as</span> &quot;sub_USER&quot;</span><br><span class="line">    <span class="keyword">inner</span> <span class="keyword">join</span> &quot;COACH&quot; <span class="keyword">as</span> &quot;sub_COACH&quot; <span class="keyword">on</span></span><br><span class="line">        &quot;sub_USER&quot;.id <span class="operator">=</span> &quot;sub_COACH&quot;.user_id</span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        &quot;sub_USER&quot;.name <span class="operator">=</span> <span class="string">&#x27;肌肉棒子&#x27;</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span></span><br><span class="line">    &quot;COACH&quot;</span><br><span class="line"><span class="keyword">set</span></span><br><span class="line">    experience_years <span class="operator">=</span> <span class="number">5</span></span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    &quot;COACH&quot;.id <span class="operator">=</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">            &quot;sub_COACH&quot;.id</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">            &quot;USER&quot; <span class="keyword">as</span> &quot;sub_USER&quot;</span><br><span class="line">    <span class="keyword">inner</span> <span class="keyword">join</span> &quot;COACH&quot; <span class="keyword">as</span> &quot;sub_COACH&quot; <span class="keyword">on</span></span><br><span class="line">        &quot;sub_USER&quot;.id <span class="operator">=</span> &quot;sub_COACH&quot;.user_id</span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        &quot;sub_USER&quot;.name <span class="operator">=</span> <span class="string">&#x27;Q太郎&#x27;</span></span><br><span class="line">    );</span><br></pre></td></tr></table></figure>

<p>其實可以透過 <strong>CASE</strong> 語句來進行一次的操作</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span></span><br><span class="line">    &quot;COACH&quot;</span><br><span class="line"><span class="keyword">set</span></span><br><span class="line">    experience_years <span class="operator">=</span> <span class="keyword">case</span></span><br><span class="line">        <span class="keyword">when</span> &quot;sub_USER&quot;.name <span class="operator">=</span> <span class="string">&#x27;肌肉棒子&#x27;</span> <span class="keyword">then</span> <span class="number">3</span></span><br><span class="line">        <span class="keyword">when</span> &quot;sub_USER&quot;.name <span class="operator">=</span> <span class="string">&#x27;Q太郎&#x27;</span> <span class="keyword">then</span> <span class="number">5</span></span><br><span class="line">        <span class="keyword">else</span> experience_years</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    &quot;USER&quot; <span class="keyword">as</span> &quot;sub_USER&quot;</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> &quot;COACH&quot; <span class="keyword">as</span> &quot;sub_COACH&quot; <span class="keyword">on</span></span><br><span class="line">    &quot;sub_USER&quot;.id <span class="operator">=</span> &quot;sub_COACH&quot;.user_id</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    &quot;sub_USER&quot;.name <span class="keyword">in</span> (<span class="string">&#x27;肌肉棒子&#x27;</span>, <span class="string">&#x27;Q太郎&#x27;</span>)</span><br><span class="line"><span class="keyword">and</span></span><br><span class="line">    &quot;COACH&quot;.id <span class="operator">=</span> &quot;sub_COACH&quot;.id;</span><br></pre></td></tr></table></figure>

<p>還有 <strong>Task 5</strong> 的插入資料，原本是多次操作</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 5. 客戶預約與授課 COURSE_BOOKING</span></span><br><span class="line"><span class="comment">-- 5-1. 新增：請在 `COURSE_BOOKING` 新增兩筆資料：</span></span><br><span class="line">    <span class="comment">-- 1. 第一筆：`王小明`預約 `李燕容` 的課程</span></span><br><span class="line">        <span class="comment">-- 1. 預約人設為`王小明`</span></span><br><span class="line">        <span class="comment">-- 2. 預約時間`booking_at` 設為2024-11-24 16:00:00</span></span><br><span class="line">        <span class="comment">-- 3. 狀態`status` 設定為即將授課</span></span><br><span class="line">    <span class="comment">-- 2. 新增： `好野人` 預約 `李燕容` 的課程</span></span><br><span class="line">        <span class="comment">-- 1. 預約人設為 `好野人`</span></span><br><span class="line">        <span class="comment">-- 2. 預約時間`booking_at` 設為2024-11-24 16:00:00</span></span><br><span class="line">        <span class="comment">-- 3. 狀態`status` 設定為即將授課</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span></span><br><span class="line"><span class="keyword">    into</span></span><br><span class="line">    &quot;COURSE_BOOKING&quot;(user_id,</span><br><span class="line">    course_id,</span><br><span class="line">    booking_at,</span><br><span class="line">    status)</span><br><span class="line"><span class="keyword">values</span></span><br><span class="line">    (</span><br><span class="line">        (</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    id</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    &quot;USER&quot;</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    name <span class="operator">=</span> <span class="string">&#x27;王小明&#x27;</span></span><br><span class="line">        ),</span><br><span class="line">        (</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    &quot;COURSE&quot;.id</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    &quot;COURSE&quot;</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> &quot;USER&quot; <span class="keyword">on</span></span><br><span class="line">    &quot;COURSE&quot;.user_id <span class="operator">=</span> &quot;USER&quot;.id</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    &quot;USER&quot;.name <span class="operator">=</span> <span class="string">&#x27;李燕容&#x27;</span></span><br><span class="line">        ),</span><br><span class="line">        <span class="string">&#x27;2024-11-24 16:00:00&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;即將授課&#x27;</span></span><br><span class="line">    ),</span><br><span class="line">    (</span><br><span class="line">        (</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    id</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    &quot;USER&quot;</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    name <span class="operator">=</span> <span class="string">&#x27;好野人&#x27;</span></span><br><span class="line">        ),</span><br><span class="line">        (</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    &quot;COURSE&quot;.id</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    &quot;COURSE&quot;</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> &quot;USER&quot; <span class="keyword">on</span></span><br><span class="line">    &quot;COURSE&quot;.user_id <span class="operator">=</span> &quot;USER&quot;.id</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    &quot;USER&quot;.name <span class="operator">=</span> <span class="string">&#x27;李燕容&#x27;</span></span><br><span class="line">        ),</span><br><span class="line">        <span class="string">&#x27;2024-11-24 16:00:00&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;即將授課&#x27;</span></span><br><span class="line">    );</span><br></pre></td></tr></table></figure>

<p>也可以透過以下方式簡寫</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert into</span> &quot;COURSE_BOOKING&quot; (user_id, course_id, booking_at, status)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    &quot;USER&quot;.id,</span><br><span class="line">    &quot;COURSE&quot;.id,</span><br><span class="line">    <span class="string">&#x27;2024-11-24 16:00:00&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;即將授課&#x27;</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    &quot;USER&quot;</span><br><span class="line"><span class="keyword">cross</span> <span class="keyword">join</span> &quot;COURSE&quot;</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> &quot;USER&quot; <span class="keyword">as</span> &quot;COACH_USER&quot; <span class="keyword">on</span> &quot;COURSE&quot;.user_id <span class="operator">=</span> &quot;COACH_USER&quot;.id</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    &quot;USER&quot;.name <span class="keyword">in</span> (<span class="string">&#x27;王小明&#x27;</span>, <span class="string">&#x27;好野人&#x27;</span>)</span><br><span class="line">    <span class="keyword">and</span> &quot;COACH_USER&quot;.name <span class="operator">=</span> <span class="string">&#x27;李燕容&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>優化 <strong>SQL</strong> 又是另一個課題了，希望打開了後端之門後，能慢慢地上手。</p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><a href="https://www.hexschool.com/2024/10/02/2024-10-02-backend-database-camping/">【後端工程師 - 資料庫體驗營】 進入後端前的必備知識</a></li>
<li><a href="https://pg-sql.com/">線上 DB 操作練習網站</a></li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Back-end</category>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>Back-end</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>[Third party service Note] - 全端手動部署 VPS(VM) 踩坑全記錄 By Vue + Node.js + Nginx + MySQL8 + CentOS Stream 9</title>
    <url>/2025/02/18/20250218/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p><img src="/images/others/loading.gif" data-original="/images/20250218/banner.png" alt="Banner"></p>
<p>這是一篇將 <code>前端(Vue) + 後端(Node.js) + 資料庫(MySQL)</code> 部署至 <strong>Linode</strong> 的踩坑全記錄，這篇需要一點事前準備，如果你手邊剛好有前端專案 <strong>(純 HTML 也可以)</strong> ，又剛好有後端專案，恰巧你也有資料庫，然後你也想要把作品呈現給其他人看，這篇文章就非常適合你。</p>
<p>如果不是，也可以先參考筆者以下文章</p>
<ul>
<li><a href="https://rexhung0302.github.io/2020/09/14/20200914/">[NodeJS Become A Full Stack Developer] — Express、Router 及 EJS 入門淺談</a> -&gt; 學習後端語言 Node.js</li>
<li><a href="https://rexhung0302.github.io/2020/11/09/20201109/">[NodeJS Become A Full Stack Developer] — NodeJS ORM Sequelize Cli 串接資料庫</a> -&gt; 學習後端語言 Node.js 及 操作資料庫</li>
</ul>
<span id="more"></span>

<p><em><strong>整篇文章是筆者自己的心得，如果文內有錯誤的地方，還請盡情指出。</strong></em></p>
<p>此篇筆記起因是因為筆者在之前有透過 <strong>VPS Linode</strong> 部署全端專案，而當時使用的是 <strong>CentOS 6</strong> ，該版本已經不再維護了，可參考 <a href="https://support.cpanel.net/hc/en-us/articles/360058490254--CentOS-6-End-of-Life-Notice">CentOS 6 - End of Life Notice</a> ，近期因為機器上專案出了一些問題，筆者乾脆重新開一台新的機器重新跑一次部署流程。</p>
<p>第一次部署的文章在此 <strong><a href="https://rexhung0302.github.io/page/3/">[Third party service Note] - Vue + Node.js + Nginx + MySQL5.7, 第一次使用 VPS(Linode, DigitalOcean) 就可能會碰到的問題之如何簡單上手</a></strong> ，因為內容有些過時了，這次順便更新一次會碰到的東西，基本流程都差不多，但有些東西更新了，下面會提到更新的內容。</p>
<p>很多時候一件事情第一次做就是矇矇懂懂，第二次會發現原來第一次好多東西是這麼愚蠢竟然弄錯，但是總會在第二次對事情印象深刻甚至學習到更多東西。</p>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p>本篇文章預設學習前的基本條件需求：</p>
<ul>
<li>知道如何操作終端機 及 知道一些基本指令</li>
<li>至少擁有 HTML 檔案拿來部署</li>
<li>擁有後端專案(本篇以 Node.js 為例)</li>
<li>知道怎麼用後端串聯資料庫(本篇不會提到怎麼創建或者串接)</li>
<li>至少先看過 <a href="https://rexhung0302.github.io/page/3/">[Third party service Note] - Vue + Node.js + Nginx + MySQL5.7, 第一次使用 VPS(Linode, DigitalOcean) 就可能會碰到的問題之如何簡單上手</a>，但可以先看一下接下來有更新的部分，這些部分可以透過新的文章去實作</li>
</ul>
<p>本篇文章更新的部分：</p>
<ul>
<li>虛擬機作業系統從 CentOS 6 更新為 CentOS Stream 9</li>
<li>MySQL5.7 更新為 8</li>
<li>Nginx 依舊使用預設安裝最新版本(不影響舊文章的操作流程)</li>
</ul>
<p>本篇文章將有以下幾個步驟:</p>
<ol>
<li><a href="#%E7%B6%B2%E5%9F%9F%E9%83%A8%E5%88%86">網域部分</a></li>
<li><a href="#%E4%B8%BB%E6%A9%9F%E5%8F%8A%E9%83%A8%E7%BD%B2">主機及部署</a></li>
<li><a href="#%E6%96%B0%E5%A2%9ESSH">新增SSH</a></li>
<li><a href="#%E5%BB%BA%E7%BD%AE%E7%92%B0%E5%A2%83">建置環境</a></li>
<li><a href="#%E9%97%9C%E6%96%BCNginx">關於Nginx</a></li>
<li><a href="#%E6%8A%93%E5%8F%96%E5%B0%88%E6%A1%88">抓取專案</a></li>
<li><a href="#%E9%85%8D%E7%BD%AE%E8%B3%87%E6%96%99%E5%BA%AB">配置資料庫</a></li>
<li><a href="#%E9%98%B2%E7%81%AB%E7%89%86%E8%A8%AD%E5%AE%9A">防火牆設定</a></li>
<li><a href="#%E9%85%8D%E7%BD%AESSL">配置SSL</a></li>
<li><a href="#%E9%97%9C%E6%96%BC%E6%AC%8A%E9%99%90%E5%95%8F%E9%A1%8C">關於權限問題</a></li>
<li><a href="#%E9%A1%8D%E5%A4%96%E5%95%8F%E9%A1%8C">額外問題</a></li>
</ol>
<hr>
<h3 id="網域部分"><a href="#網域部分" class="headerlink" title="網域部分"></a>網域部分</h3><p>首先是網域的部分，基本上挑自己喜歡的網域商即可，目前比較多人使用的是 <strong><a href="https://tw.godaddy.com/?isc=rowzh&cdtl=ctv_ytv&cdtl=c_17401504217.g_.a_.d_c.ctv_x&gad_source=1&gclid=CjwKCAiA2cu9BhBhEiwAft6IxCxAGA3RhpmQocmzcjg55gOdQZfxm8IM9osi2RqvQu-aTzWrcOxwXhoC0vwQAvD_BwE">GoDaddy</a></strong> ，其餘的如果你覺得評價不錯，價格公道，都可以考慮。</p>
<p><em><strong>關於網域商可以考慮此篇文章：<a href="https://notjustdesigner.com/choose-domain-registrar/">【建站教學#3】如何選擇網域商？2021前六大網域商比較</a></strong></em></p>
<p><img src="/images/others/loading.gif" data-original="/images/20250218/very-cool.png" alt="very cool"></p>
<p>這邊以 <strong>GoDaddy</strong> 為例，到網站後輸入想要購買的網域名稱就可以查詢價格，例如你想要購買的網域是 <strong>veryCool</strong> ，就輸入查詢。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20250218/very-cool-url-price-list.png" alt="very cool price list"></p>
<p>之後就能查看價格是多少，有的網站可以一次購買一年份，有的一次一個月為單位也可以，但請記得網域只會越來越貴，每年價格都會有所調漲，基本結尾是 <code>.com .tw</code> 這種也會比較貴。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20250218/dns.png" alt="dns"></p>
<p>網域申請一個後就可以透過子網域去對應綁定多個想要呈現給使用者看的網頁，可以查看上面這張圖，怎麼配置的話可以參考舊的文章內有寫到，這邊就不多做提及了。</p>
<hr>
<h3 id="主機及部署"><a href="#主機及部署" class="headerlink" title="主機及部署"></a>主機及部署</h3><p>購買好網域後，就可以選擇 <strong>VPS</strong> 主機商，這些主機商會提供虛擬主機給你存放專案，可以想像就是一台電腦主機，然後你把你做好的網頁或者專案丟到該電腦上去運行，這些電腦因為不是真的是一台 <strong>Mac</strong> 或者 <strong>Windows</strong> 主機，是透過一台大的主機去切分出來的多台小主機空間，稱為虛擬主機。</p>
<p>基本上 VPS 最有名的大家基本有聽過的肯定是 <strong>AWS</strong> 或者 <strong>GCP</strong> 等等，這些都可以選擇，筆者這邊依舊使用舊文章就使用的 <strong>Linode</strong> ，如果想選擇其他服務商可以參考 <strong><a href="https://www.fuwu7.com/overseas-vps/6014.html">2025年国外VPS排行榜：前十名最好的国外VPS排名</a></strong> 。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20250218/linode-price.png" alt="Linode Price"></p>
<p>這邊提一下 <strong>Linode</strong> 的優勢，<strong>便宜、老牌、穩定</strong> ，基本上一個月最便宜共享主機方案為 <strong>5</strong> 美金，如上圖，約莫 <strong>163.70</strong> 台幣，少叫一餐 <strong>UberEat</strong> 就有空間可以丟作品去找工作了，划！！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20250218/USD-TWD.png" alt="USD TWD"></p>
<p>當然大牌如 <strong>AWS</strong> 或者 <strong>GCP</strong> 等等一定比較貴，但是他們服務也比較多元，如果不想要像文章一樣手動部署安裝這麼麻煩多的東西，可以選擇大牌的服務商，他們在官方網頁內會有類似 <strong>網域、資料庫、網域代理…</strong> 等等的服務可以選，不需要自己再上去機器安裝配置，付錢就搞定！</p>
<p><img src="/images/others/loading.gif" data-original="/images/20250218/pay-meme.png" alt="Take My Money"></p>
<hr>
<h3 id="新增SSH"><a href="#新增SSH" class="headerlink" title="新增SSH"></a>新增SSH</h3><p>關於 <strong>SSH</strong> 如果不明白可以參考此篇文章 <strong><a href="https://ithelp.ithome.com.tw/articles/10277498">Day21：【技術篇】SSH 的基本運作原理</a></strong> ，基本可以理解為你有一組帳號及密碼，帳號是大家都能看到的，而帳號可以丟到你想連線或者操作的網站去，例如 <strong>GitLab</strong> 或 <strong>GitHub</strong> 等等，而你想要對該網站進行操作例如抓取專案，就可以拿密碼去讓網站知道是你本人，不是駭客，這樣就可以進行操作了。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20250218/ssh-workflow.png" alt="SSH Workflow"></p>
<p>擁有 <strong>SSH</strong> 就無需使用帳號密碼去驗證，在任何提供 <strong>SSH</strong> 的網站都可以使用這個功能去進行操作。</p>
<p><strong>But</strong>！請記得謹慎添加 <strong>SSH</strong> ，基本上在本機我們都會創建一組 <strong>SSH</strong> 用到底，哪個網站需要我們就用本機創建好的 <strong>id_rsa.pub(SSH 創建後如果沒有自行命名，預設名稱是 id_rsa.pub)</strong> 放到網站上，這基本是沒問題的，因為自己電腦比較不容易讓 <strong>id_rsa</strong> 外洩，但今天我們是要在虛擬主機上進行 <strong>SSH</strong> 拉取專案，如果主機上使用跟本機一樣的 <strong>SSH</strong> ，如果虛擬主機上的 <strong>SSH</strong> 外洩了，會比較麻煩，會需要多個使用到的網站都一起更新。</p>
<p>想避免上面情況，這樣我們不如直接在主機上創建一組新的 <strong>SSH</strong> ，並且該 <strong>SSH</strong> 專門只給該虛擬主機使用。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20250218/launch-lISH-console.png" alt="Launch LISH Console"></p>
<p>我們主機開好後透過服務商網站提供的方式進入虛擬主機，然後到主機內執行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen</span><br></pre></td></tr></table></figure>

<p>這時候會提示創建了一組 <strong>SSH</strong> 在主機內，基本上會放在 <code>~/.ssh/</code> 這個資料夾，可以執行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20250218/id-rsa-pub.png" alt="Launch LISH Console"></p>
<p>然後把文字貼到你的遠程倉庫去，例如 <strong>GitLab</strong> 或 <strong>GitHub</strong></p>
<p><em><strong>備註：請記得你的服務商網站頁面內應該也有 SSH 可以新增，這邊請新增你本機電腦的，因為你之後是要從本機透過終端機 ssh 快速連進虛擬主機，但進到虛擬主機後再虛擬主機進行 git pull 是要用另一組去 GitLab 或者 GitHub 拉取的，如果真的覺得太麻煩，也可以都共用同一組沒問題。</strong></em></p>
<h4 id="關於本機連不上"><a href="#關於本機連不上" class="headerlink" title="關於本機連不上"></a>關於本機連不上</h4><p>如果本機透過 <strong>ssh</strong> 連不上虛擬機，可以先透過服務商的網頁進入虛擬主機，然後使用以下指令去嘗試</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sshd -t</span><br></pre></td></tr></table></figure>

<p>如果沒有開啟 <strong>ssh</strong> 服務可以使用以下指令去新增，新增前請先透過 <code>firewall-cmd --list-all</code> 去查看是不是 <strong>ssh</strong> 有被加入在 <strong>services</strong> ，如果沒有請使用以下指令加入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ firewall-cmd --permanent --zone=public --add-service=mysql</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20250218/ssh-too-open.png" alt="SSH Too Open"></p>
<p>如果出現上圖代表你的 <strong>ssh</strong> 權限太高，只需要輸入 <code>chmod 400 ~/.ssh/id_rsa</code> 或 <code>chmod 600 ~/.ssh/id_rsa</code> 即可解決</p>
<hr>
<h3 id="建置環境"><a href="#建置環境" class="headerlink" title="建置環境"></a>建置環境</h3><p>接著是比較重要的部分，主機需要安裝一些你專案必須的</p>
<p>除了 <strong>Git</strong> 及 <strong>Nginx</strong> 必裝之外，其他就是看你的專案，如果你是都包裝在 <strong>Docker</strong> 內，也可以都不需要裝，但是 <strong>Git</strong> 需要拿來拉取遠端倉庫專案，所以必須要裝。</p>
<p>安裝的部分有興趣都可以參考舊文章，如果有不確定怎麼安裝的部分也可以透過關鍵字查詢 <code>centOS Stream 9 install xxx</code>，這邊就不詳細解釋怎麼安裝，不過筆者可以提供幾個文章供參考</p>
<ul>
<li>Git<ul>
<li><a href="https://blog.csdn.net/qq_35995691/article/details/143378707">CentOS 9 Stream 上安装 Git</a></li>
<li><a href="https://reintech.io/blog/installing-configuring-git-centos-9">Installing and Configuring Git on CentOS 9</a></li>
</ul>
</li>
<li>Nginx<ul>
<li><a href="https://blog.csdn.net/weixin_42599091/article/details/138250977">CentOS 9 (stream) 安装 nginx</a></li>
</ul>
</li>
<li>Nvm<ul>
<li><a href="https://tecadmin.net/how-to-install-nvm-on-centos-stream-9/">How to Install NVM on CentOS Stream 9 &amp; RHEL 9</a></li>
<li><a href="https://wiki.crowncloud.net/?How_to_Install_Node_JS_on_CentOS_Stream_9">How to Install Node.js on CentOS Stream 9</a></li>
</ul>
</li>
<li>Sequelize<ul>
<li>先裝好 <strong>NVM</strong> 後，在透過 <code>npm install -g sequelize sequelize-cli</code> 安裝</li>
</ul>
</li>
<li>MySQL2<ul>
<li><a href="https://www.hostinger.com/tutorials/how-to-install-mysql-on-centos">How to Install MySQL on CentOS 9 Stream</a></li>
<li><a href="https://reintech.io/blog/secure-mysql-installation-centos-9">Secure MySQL Installation on CentOS 9</a></li>
</ul>
</li>
</ul>
<p><em><strong>備註：關於 nvm 的介紹可以參考 <a href="https://titangene.github.io/article/nvm.html">nvm：安裝、切換不同 Node.js 版本的管理器</a> 文章，簡易解釋 nvm 就是 node 的版本管理工具</strong></em></p>
<p><img src="/images/others/loading.gif" data-original="/images/20250218/ssh-connect-refused.png" alt="Install Git"></p>
<p>基本上在 <strong>CentOS Stream 9</strong> 內安裝都是靠 <strong>dnf</strong> ，大多數文章開頭都會請你先執行 <code>dnf update -y</code>，加上 <strong>-y</strong> 是預設安裝回答都是 <strong>yes</strong> ，如上圖就是在執行安裝 <strong>Git</strong></p>
<hr>
<h3 id="關於Nginx"><a href="#關於Nginx" class="headerlink" title="關於Nginx"></a>關於Nginx</h3><p>關於 Nginx 的配置可以參考之前的舊文章 <strong><a href="https://rexhung0302.github.io/page/3/">[Third party service Note] - Vue + Node.js + Nginx + MySQL5.7, 第一次使用 VPS(Linode, DigitalOcean) 就可能會碰到的問題之如何簡單上手</a></strong> ，基本上只要最後輸入 nginx -t 沒問題，應該都不會有什麼額外狀況。</p>
<p>基本上如果訪問機器一直看不到網頁，請先找到 <strong>nginx</strong> 的 <strong>error.log</strong> 存放位置，使用 <code>cat /etc/nginx/nginx.conf</code>，然後找到下面這行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># For more information on configuration, see:</span><br><span class="line">#   * Official English Documentation: http://nginx.org/en/docs/</span><br><span class="line">#   * Official Russian Documentation: http://nginx.org/ru/docs/</span><br><span class="line"></span><br><span class="line">user nginx;</span><br><span class="line">worker_processes auto;</span><br><span class="line">error_log /var/log/nginx/error.log; // &lt;- 找到這行</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line"></span><br><span class="line"># Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.</span><br><span class="line">include /usr/share/nginx/modules/*.conf</span><br><span class="line"></span><br><span class="line">//...下略</span><br></pre></td></tr></table></figure>

<p>找到後使用 <code>vi /var/log/nginx/error.log</code> 查看錯誤是什麼去仔細排除即可。</p>
<hr>
<h3 id="抓取專案"><a href="#抓取專案" class="headerlink" title="抓取專案"></a>抓取專案</h3><p><img src="/images/others/loading.gif" data-original="/images/20250218/first-git-clonse.png" alt="First Git Clone"></p>
<p><strong>Git</strong> 安裝完畢就可以透過 <code>git clone</code> 去抓取專案了，而第一次會出現 <code>The authenticity of host &#39;gitlab.com(xxx.xxx.xxx)&#39; can&#39;t be established.</code> 是正常的，輸入 <strong>yes</strong> 之後，後續就不會再出現了。</p>
<hr>
<h3 id="配置資料庫"><a href="#配置資料庫" class="headerlink" title="配置資料庫"></a>配置資料庫</h3><p>前面我們安裝完了資料庫，因為是安裝 <strong>MySQL8</strong> 有些東西需要先配置，<strong>MySQL</strong> 安裝完畢後，在終端機輸入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mysql -u root -h localhost -p</span><br></pre></td></tr></table></figure>

<p>接著終端機會出現</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Enter password: 這邊接著輸入密碼</span><br></pre></td></tr></table></figure>

<p>接下來需要允許可以遠端登入，與 MySQL5.7 比較不同的地方是原本舊版是直接輸入以下指令就可以</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mysql&gt; grant all privileges on *.* to &#x27;使用者名稱&#x27;@&#x27;IP位置&#x27; identified by&#x27;要登入的密碼&#x27;;</span><br></pre></td></tr></table></figure>

<p>但你會發現一直都連不上，對於 <strong>MySQL8</strong> 新增方式需要改為先創建用戶，可參考 <strong><a href="https://stackoverflow.com/questions/50177216/how-to-grant-all-privileges-to-root-user-in-mysql-8-0">How to grant all privileges to root user in MySQL 8.0</a></strong> 。</p>
<p>如果遠端登入也是使用 root 就不需要再創建新的使用者，可以直接忽略掉下面 <code>CREATE USER &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;PASSWORD&#39;;</code> 這段。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;PASSWORD&#x27;;</span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; WITH GRANT OPTION;</span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>

<p>這時候再去連線應該就能連得上了，可以執行 <strong>migrate</strong> 之類的初始化資料庫操作囉。</p>
<h4 id="資料庫連不上"><a href="#資料庫連不上" class="headerlink" title="資料庫連不上"></a>資料庫連不上</h4><p>遠端透過 <strong>GUI</strong> 或者指令資料庫連不上的話，下面會講到防火牆及權限問題，但也有可能是 <strong>SELinux</strong> 問題，關於這問題 ChatGPT 有給出回答，因為筆者非這塊專業，所以提供資訊，相關可能需要請另外爬文。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20250218/SELinux.png" alt="SELinux"></p>
<p>另外也可能是出現 <code>Permission denied</code> 的問題，可以參考 <strong><a href="https://blog.csdn.net/hunhun1122/article/details/103182718">nginx配置报错：connect() to 127.0.0.1:8080 failed (13: Permission denied) while connecting to upstream,</a></strong> ，輸入 <code>setsebool -P httpd_can_network_connect 1</code> 可能可以解決。</p>
<hr>
<h3 id="防火牆設定"><a href="#防火牆設定" class="headerlink" title="防火牆設定"></a>防火牆設定</h3><p>當我們都佈置好前後端專案以及資料庫後，有一些 Port 號是從外面就會去訪問的，如果防火牆沒有開，可能會出現以下</p>
<p><img src="/images/others/loading.gif" data-original="/images/20250218/semanage-port-list.png" alt="Semanage Port List"></p>
<h4 id="解決方案一"><a href="#解決方案一" class="headerlink" title="解決方案一"></a>解決方案一</h4><p>這時候可以輸入 <code>semanage port --list</code> 然後再用 <code>ALT + F</code> 或 <code>command + F</code> 找尋 <strong>http_port_t</strong> 這個關鍵字，看看後面的 port 是多少，基本上筆者會把 <code>3000 3306</code> 開起來。</p>
<p>如果沒有新增到的 port 號可以使用以下指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ semanage port --add --type http_port_t --proto tcp &quot;你要新增的 Port 號&quot;</span><br></pre></td></tr></table></figure>

<h4 id="解決方案二"><a href="#解決方案二" class="headerlink" title="解決方案二"></a>解決方案二</h4><p><img src="/images/others/loading.gif" data-original="/images/20250218/firewall-cmd-list-all.png" alt="Firewall Cmd List All"></p>
<p>也可以透過使用 <code>firewall-cmd --list-all</code> 去查詢，看看 <strong>ports</strong> 有沒有開到，如果沒有就使用以下指令， <strong>3306</strong> 可以自行更換</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<h4 id="關於服務設定"><a href="#關於服務設定" class="headerlink" title="關於服務設定"></a>關於服務設定</h4><p>另外因為防火牆也會阻擋一些服務，在使用 <code>firewall-cmd --reload</code> 的時候可以順便看一下 services 有沒有包含 <code>https mysql ssh</code>，如果沒有請使用以下指令， <strong>mysql</strong> 可以自行替換</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ firewall-cmd --permanent --zone=public --add-service=mysql</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20250218/ssh-connect-refused.png" alt="SSH Connect Refused"></p>
<p>像是上圖的狀況也是因為 <strong>SSH Service</strong> 沒有開啟 <strong>SSH</strong> 的服務允許。</p>
<hr>
<h3 id="配置-SSL"><a href="#配置-SSL" class="headerlink" title="配置 SSL"></a>配置 SSL</h3><p>基本上現在網站都會需要 <strong>SSL</strong> ，這邊要借用就文章的描述。</p>
<p>到這邊大致完成了，揭著我們必須讓我們的網址可以吃 <strong>443</strong> ，也就是 <strong>https</strong> ，有興趣可以參考 <strong><a href="https://tw.alphacamp.co/blog/http-https-difference">一文搞懂 HTTP 和 HTTPS 是什麼？兩者有什麼差別</a></strong> ，簡單說最明顯的就是如果網站不是 <strong>443(https)</strong> 頁面左上角就會出現不安全。</p>
<p>而通常 <strong>SSL</strong> 是需要用買的，但這邊我們要當個免費仔(放心不是破解)，而免費缺點是三個月需要更新一次，但別擔心各路大神都幫我們想好了怎麼自動更新憑證。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ dnf install certbot</span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20250218/install-certbot.png" alt="Install Certbot"></p>
<p>這時候可能會出現上圖錯誤，如果有就請參考 <strong><a href="https://www.nihaodanqing.com/linux/CentOS-Stream-release-9-ru-he-an-zhuang-certbot.html">CentOS Stream release 9如何安装certbot</a></strong> ，或者使用以下指令，主要是因為 <strong>CentOS Stream 9</strong> 默認 <strong>Certbot</strong> 不可用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ dnf install epel-release -y</span><br><span class="line">$ dnf install certbot -y</span><br><span class="line">$ dnf install python3-certbot-nginx // 如果使用 Nginx 服務器需要安裝</span><br><span class="line">$ certbot --nginx</span><br></pre></td></tr></table></figure>

<p>之後如果你的 <strong>Nginx</strong> 有更改設定檔，請一定要在執行 <code>nginx -t</code>，然後通過後要使用 <code>certbot --nginx</code>，這樣才會有該網域的憑證。</p>
<p>產生成功會出現 <code>Congratulations! You have successfully enabled &quot;憑證網址&quot;</code>。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20250218/vi-etc-crontab.png" alt="vi etc crontab"></p>
<p>因為憑證會有時效期限，我們不太可能會常常手動去更新，所以這邊我們要輸入 <code>vi /etc/crontab</code>，然後進去在最下面新增下面的內容，如上圖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># let&#x27;s encrypt</span><br><span class="line">0 */8 * * * root python -c &#x27;import random; import time; time.sleep(random.random() * 3600)&#x27; &amp;&amp; certbot renew &gt; /tmp/cert-bot_renew.log</span><br></pre></td></tr></table></figure>

<p>接著儲存檔案，然後輸入 <code>service crond restart</code>，至此就會 <strong>每天檢查三次(00:00 08:00 16:00)</strong> 。</p>
<p><img src="/images/others/loading.gif" data-original="/images/20250218/500-error.png" alt="500 Error"></p>
<p><strong>極重要：因為在輸入 certbot –nginx 的時候，程式會去依照你設定的 nginx config 訪問你的網站，如果你之前的防火牆沒有開啟 http，會有可能訪問不到，請記得輸入 <code>firewall-cmd --permanent --zone=public --add-service=http</code>，後續新增成功看要不要再關掉都可以，筆者在這邊卡很久很久很久很久很久很久…，記得出現問題找不到就一直回去看 nginx error log 就對了！</strong></p>
<hr>
<h3 id="關於權限問題"><a href="#關於權限問題" class="headerlink" title="關於權限問題"></a>關於權限問題</h3><p>如果有碰到畫面顯示不了，資料庫連不上，皆有可能是資料庫問題，權限問題在前面提過，不外乎就是查看</p>
<ul>
<li>firewall-cmd –list-all</li>
<li>semanage port –list</li>
</ul>
<p>看看防火牆啦，或是 <strong>Port</strong> 有沒有開，如果真沒有頭緒，一切還是要從 <strong>nginx</strong> 的 <strong>error.log</strong> 來看，可以看上面文章有提到怎麼找到 <strong>error.log</strong></p>
<hr>
<h3 id="額外問題"><a href="#額外問題" class="headerlink" title="額外問題"></a>額外問題</h3><p><img src="/images/others/loading.gif" data-original="/images/20250218/gsmtp-error.png" alt="gsmtp"></p>
<p>假如你的專案有使用 <strong>GSMTP</strong> ，也要記得開啟服務，開啟 <strong>Port</strong> ，然後密碼記得至 <strong>Google</strong> 申請一組密碼</p>
<p><img src="/images/others/loading.gif" data-original="/images/20250218/account.png" alt="Google Account"></p>
<p>找到你要寄信的那組 <strong>Gmail Account</strong> ，點擊 <strong>管理你的 Google 帳戶</strong></p>
<p><img src="/images/others/loading.gif" data-original="/images/20250218/security.png" alt="Security"></p>
<p>在點擊 <strong>安全性 &gt; 兩步驟驗證</strong></p>
<p><img src="/images/others/loading.gif" data-original="/images/20250218/two-step.png" alt="Two Step"></p>
<p>然後往下滑點擊應用程式密碼</p>
<p><img src="/images/others/loading.gif" data-original="/images/20250218/password.png" alt="Password"></p>
<p>最後點擊產生密碼，記得一定要將這十六個英文字存下來，之後再打開這個頁面就不能再看到了。</p>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>這次因為重新啟動一台伺服器，所以重新再跑一次安裝流程，過程很多東西又重新釐清，也碰到新的問題，不過大致上都脫離不了權限、防火牆，如果有問題基本上丟到 <strong>Google</strong> 都能解決，希望這篇筆記能幫助到一些也在部署的朋友。</p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><a href="https://support.cpanel.net/hc/en-us/articles/360058490254--CentOS-6-End-of-Life-Notice">CentOS 6 - End of Life Notice</a></li>
<li><a href="https://notjustdesigner.com/choose-domain-registrar/">【建站教學#3】如何選擇網域商？2021前六大網域商比較</a></li>
<li><a href="https://www.fuwu7.com/overseas-vps/6014.html">2025年国外VPS排行榜：前十名最好的国外VPS排名</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10277498">Day21：【技術篇】SSH 的基本運作原理</a></li>
<li><a href="https://blog.csdn.net/qq_35995691/article/details/143378707">CentOS 9 Stream 上安装 Git</a></li>
<li><a href="https://reintech.io/blog/installing-configuring-git-centos-9">Installing and Configuring Git on CentOS 9</a></li>
<li><a href="https://tecadmin.net/how-to-install-nvm-on-centos-stream-9/">How to Install NVM on CentOS Stream 9 &amp; RHEL 9</a></li>
<li><a href="https://wiki.crowncloud.net/?How_to_Install_Node_JS_on_CentOS_Stream_9">How to Install Node.js on CentOS Stream 9</a></li>
<li><a href="https://www.hostinger.com/tutorials/how-to-install-mysql-on-centos">How to Install MySQL on CentOS 9 Stream</a></li>
<li><a href="https://reintech.io/blog/secure-mysql-installation-centos-9">Secure MySQL Installation on CentOS 9</a></li>
<li><a href="https://titangene.github.io/article/nvm.html">nvm：安裝、切換不同 Node.js 版本的管理器</a></li>
<li><a href="https://stackoverflow.com/questions/50177216/how-to-grant-all-privileges-to-root-user-in-mysql-8-0">How to grant all privileges to root user in MySQL 8.0</a></li>
<li><a href="https://tw.alphacamp.co/blog/http-https-difference">一文搞懂 HTTP 和 HTTPS 是什麼？兩者有什麼差別</a></li>
<li><a href="https://www.nihaodanqing.com/linux/CentOS-Stream-release-9-ru-he-an-zhuang-certbot.html">CentOS Stream release 9如何安装certbot</a></li>
<li><a href="https://blog.csdn.net/hunhun1122/article/details/103182718">nginx配置报错：connect() to 127.0.0.1:8080 failed (13: Permission denied) while connecting to upstream,</a></li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>Third Party Service</category>
        <category>Linode</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Third party service</tag>
        <tag>Linode</tag>
        <tag>DigitalOcean</tag>
      </tags>
  </entry>
  <entry>
    <title>[Tool Note] — 透過 Webpack 發布 React.js(TypeScript) 元件至 npm</title>
    <url>/2025/03/09/20250309/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p><img src="/images/others/loading.gif" data-original="/images/20250309/npm-banner.png" alt="Banner"></p>
<blockquote>
<p>背景來至 <a href="https://unsplash.com/photos/a-computer-screen-with-a-bunch-of-code-on-it-ieic5Tq8YMk">unsplash.com 的 Chris Ried</a></p>
</blockquote>
<p>當使用了 <strong>JavaScript</strong> 和 <strong>Node.js</strong> 這麼久，你肯定使用過 <code>npm install</code>，但這些 <strong>npm</strong> 上的套件到底是怎麼產生出來的，你可曾想過嗎？</p>
<p>當你開發了自己覺得超屌超猛或是別人肯定也會想試試看的程式碼之後，你知道怎麼讓大家也透過 <code>npm install</code> 享受到嗎？</p>
<p>如果你有這些問題，看這篇文章就對了，這篇文章將以 <strong>React.js</strong> 的元件當作出發點，帶你一窺怎麼透過 <strong>Webpack</strong> 把套件發布到 <strong>npm</strong> 上，讓大家也能夠安裝你的套件。</p>
<blockquote>
<p>如果不會 <strong>React.js</strong> 也還是可以參考本篇文章，之後將 <strong>React.js</strong> 的部分換成你熟悉的框架或是純 <strong>JavaScript</strong> 也可以！</p>
</blockquote>
<blockquote>
<p>後續筆者也會研究其他的打包工具，例如 <strong>rollup</strong> 或者 <strong>browserify</strong></p>
</blockquote>
<span id="more"></span>

<p><em><strong>整篇文章是筆者自己的心得，如果文內有錯誤的地方，還請盡情指出。</strong></em></p>
<p>該篇文章參考了其他的教學，加上自己碰到的坑，整理出心得並作為筆記釋出，其中也補足了其他教學文中少的部分，而看文章的你一定會有自己的需求，請先別急，看完文章後請截取自己需要的部分，如果你覺得這篇文章對你有幫助，還請將文章分享給更多人知道，或者結合自己的心得，在發布其他更多的文章幫助更多的開發者。</p>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><blockquote>
<p><em><strong>在開始前首先要非常非常感謝 稀土掘金 的 黑土豆 一篇 <a href="https://juejin.cn/post/7116710256482189348">（建议收藏）使用React+Typescript开发组件并发布到npm仓库</a> 文章，沒有這篇文章大概筆者還在跟 ChatGPT 有來沒回的</strong></em></p>
</blockquote>
<p>本篇文章預設學習前的基本條件需求：</p>
<ul>
<li>知道 React.js(不會使用也沒關係，可以換成自己熟悉的框架或者純 JavaScript 都行)</li>
<li>電腦已經有 Node.js 環境且有 npm</li>
<li>知道終端機及 npm 的基本操作(含安裝、初始化 package.json)</li>
<li>大概知道 Webpack(如果不懂可以參考筆者之前的文章 <a href="https://rexhung0302.github.io/2019/06/18/20190618/">[Tool Note] — 關於Webpack #1 - 第一次就上手</a> 或是線上其他文章)</li>
<li>一顆熱忱的心 -&gt; 超級重要，碰到坑千萬不要氣餒</li>
</ul>
<p>本篇文章將有以下幾個步驟:</p>
<ol>
<li><a href="#%E5%89%8D%E5%89%8D%E5%89%8D%E8%A8%80">前前前言</a></li>
<li><a href="#%E5%B0%88%E6%A1%88%E5%88%9D%E5%A7%8B%E5%8C%96">專案初始化</a></li>
<li><a href="#%E5%AE%89%E8%A3%9D%E7%9B%B8%E9%97%9C%E4%BE%9D%E8%B3%B4">安裝相關依賴</a></li>
<li><a href="#%E6%92%B0%E5%AF%AB%E5%85%83%E4%BB%B6">撰寫元件</a></li>
<li><a href="#Babel%E5%8F%8AWebpack%E8%A8%AD%E5%AE%9A">Babel及Webpack設定</a></li>
<li><a href="#%E5%AE%8C%E5%96%84package_json">完善package_json</a></li>
<li><a href="#TypeScript%E7%B7%A8%E8%AD%AF">TypeScript編譯</a></li>
<li><a href="#%E5%BB%BA%E7%AB%8BDemo">建立Demo</a></li>
<li><a href="#%E7%B7%A8%E8%AD%AF%E4%BB%A5%E5%8F%8ALink%E7%9A%84%E4%BD%BF%E7%94%A8">編譯以及Link的使用</a></li>
<li><a href="#%E7%99%BC%E5%B8%83%E5%89%8D%E7%9A%84%E6%B8%AC%E8%A9%A6">發布前的測試</a></li>
<li><a href="#%E7%B7%A8%E5%AF%ABREADME.md">編寫README.md</a></li>
<li><a href="#%E7%99%BC%E5%B8%83%E5%A5%97%E4%BB%B6">發布套件</a></li>
<li><a href="#%E9%A1%8D%E5%A4%96%E5%95%8F%E9%A1%8C">額外問題</a></li>
</ol>
<blockquote>
<p>本篇設定將以產出 <strong>ESM</strong> 為例，如果你想產出 <strong>CJS</strong> 可以參考筆者開頭提及的文章 <a href="https://juejin.cn/post/7116710256482189348">（建议收藏）使用React+Typescript开发组件并发布到npm仓库</a>，本篇文章也是因為參考的文章沒有 <strong>TypeScript</strong> 開啟紀錄一路</p>
</blockquote>
<hr>
<h3 id="前前前言"><a href="#前前前言" class="headerlink" title="前前前言"></a>前前前言</h3><p>在開始之前必須先說一下為什麼會開始做這項研究，一切開始於筆者在公司的專案，因為專案業務需求，在某一次的活動中需要刮刮樂的功能</p>
<p>對於前端工程師來說，如果時程不是太趕的情況下，透過需求有機會可以實作到一些平常碰不到的技術，但因為當時時間緊迫的情況下，筆者找了兩款刮刮樂的套件來使用，對我來說有輪子了，時程又趕的情況下，自行造輪子不太合理</p>
<p>因為筆者的專案框架為 <strong>React.js</strong> ，故找到的兩款套件為 <strong><a href="https://github.com/dopey2/react-scratchcard-v2">react-scratchcard-v2</a></strong> 和 <strong><a href="https://github.com/1587315093/scratch-card">scratch-card</a></strong> ，在剛開始安裝時，發現前者無法在手機上使用，後者則是沒有一鍵刮開所有蒙層的功能，在幾經思索之下自行使用 <strong>Canvas</strong> 和 <strong>React.js</strong> 製作了這個刮刮卡套件</p>
<p>而筆者完成功能後，開始想，會不會有其他人也剛好有這個需求，並且找不到合適的套件，所以筆者就決定將自己製作的 <strong>React.js</strong> 元件發布到 <strong>npm</strong> 上</p>
<blockquote>
<p>或許有剛好符合功能的套件，但筆者在幾度搜尋之下只找到這兩個比較符合專案需求的套件，如果你也有找到不錯且符合筆者需求的套件歡迎下面留言分享一下</p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20250309/demo.gif" alt="Demo"></p>
<p>在接下來的教學之前，筆者先將專案的 Github 附上，源碼的部分其實不多，也一併分享了，想要取用也歡迎</p>
<ul>
<li><p><a href="https://github.com/RexHung0302/react-scratch-ticket/tree/main">Package Github</a></p>
</li>
<li><p><a href="https://www.npmjs.com/package/react-scratch-ticket">Package NPM</a></p>
</li>
</ul>
<hr>
<h3 id="專案初始化"><a href="#專案初始化" class="headerlink" title="專案初始化"></a>專案初始化</h3><p>在進行發布 <strong>NPM</strong> 套件之前，我們需要先初始化一個專案，該專案最終只會輸出一個 <strong>index</strong> 給安裝的人引入使用，所以請從新的資料夾開啟你的專案設定</p>
<p>這邊接下來都會用筆者建立的 <a href="https://www.npmjs.com/package/react-scratch-ticket">react-scratch-ticket</a> 刮刮樂套件作為舉例</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> react-scratch-ticket</span><br><span class="line"><span class="built_in">cd</span> react-scratch-ticket</span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果你知道 package.json 的詳細設定，也可以使用 <code>npm init</code>，不要輸入 <code>-y</code>，關於設定可以參考 <a href="https://ithelp.ithome.com.tw/m/articles/10191682">史上最強套件管理 - NPM ， npm init 與 npm install (Day11)</a></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20250309/package-init.png" alt="npm init"></p>
<p>不使用 <strong>-y</strong> 會有上圖這種詢問回答的步驟</p>
<p>之後會產生一個 <strong>package.json</strong> 的檔案，接下來有安裝套件就會再產生 <strong>package-lock.json</strong> ，這邊就不再多做介紹。</p>
<hr>
<h3 id="安裝相關依賴"><a href="#安裝相關依賴" class="headerlink" title="安裝相關依賴"></a>安裝相關依賴</h3><h4 id="安裝-React-js-依賴"><a href="#安裝-React-js-依賴" class="headerlink" title="安裝 React.js 依賴"></a>安裝 React.js 依賴</h4><p>因為我們專案是要發布 <strong>React.js</strong> 的套件，這邊需要安裝關於 <strong>React.js</strong> 需要的資源，當然如果你使用其他框架例如 <strong>Vue.js</strong> 或者純 <strong>JavaScript</strong> 也行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm i react react-dom -D</span><br></pre></td></tr></table></figure>

<blockquote>
<p>接下來一切安裝的東西基本上都會加上 <code>-D</code>，因為我們的套件沒有需要在執行時會依賴到的資源，如果你有的話記得要拿掉</p>
</blockquote>
<h4 id="安裝-Webpack-依賴"><a href="#安裝-Webpack-依賴" class="headerlink" title="安裝 Webpack 依賴"></a>安裝 Webpack 依賴</h4><p>由於我們會用到 <strong>Webpack</strong> 進行打包，這邊也請一起安裝，如果你使用其他打包工具的話請自行安裝</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm i webpack webpack-cli webpack-dev-server webpack-merge -D</span><br></pre></td></tr></table></figure>

<h4 id="安裝-TypeScript-依賴"><a href="#安裝-TypeScript-依賴" class="headerlink" title="安裝 TypeScript 依賴"></a>安裝 TypeScript 依賴</h4><p>因為筆者開發使用 <strong>TypeScript(以下開始簡稱 TS)</strong> ，這邊也需要安裝要打包 <strong>TS</strong> 的相關依賴</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm i typescript</span><br></pre></td></tr></table></figure>

<h4 id="安裝-CSS-依賴"><a href="#安裝-CSS-依賴" class="headerlink" title="安裝 CSS 依賴"></a>安裝 CSS 依賴</h4><p>也許你開發會使用到 <strong>CSS</strong> 的部分，這邊也可以一併安裝上，不安裝的話後續再 <strong>Webpack</strong> 設定請記得拿掉 <strong>CSS</strong> 編譯相關的設定</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm i postcss postcss-loader postcss-preset-env style-loader css-loader sass-loader node-sass mini-css-extract-plugin -D</span><br></pre></td></tr></table></figure>

<h4 id="安裝-babel-依賴"><a href="#安裝-babel-依賴" class="headerlink" title="安裝 babel 依賴"></a>安裝 babel 依賴</h4><p>關於 <strong>babel</strong> 的介紹可以參考 <a href="https://ithelp.ithome.com.tw/articles/10303142">Day 18 - 為什麼要用 Babel</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm i @babel/cli @babel/core @babel/preset-env @babel/preset-react -D</span><br></pre></td></tr></table></figure>

<h4 id="安裝-React-js-的-TypeScript依賴"><a href="#安裝-React-js-的-TypeScript依賴" class="headerlink" title="安裝 React.js 的 TypeScript依賴"></a>安裝 React.js 的 TypeScript依賴</h4><p>因為需要用到 <strong>TS</strong> 所以也要安裝關於 <strong>React.js</strong> 的 <strong>TS</strong> 依賴</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm i @types/react @types/react-dom ts-loader @babel/preset-typescript -D</span><br></pre></td></tr></table></figure>

<p>一切安裝完畢後現在 <strong>package.json</strong> 內的 <strong>devDependencies</strong> 應該長得像下面一樣，如果有少什麼再自行評斷要新增或刪除什麼</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;@babel/cli&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.26.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;@babel/core&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.26.9&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;@babel/preset-env&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.26.9&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;@babel/preset-react&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.26.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;@babel/preset-typescript&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.26.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;@types/react&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^19.0.10&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;@types/react-dom&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^19.0.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;babel-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^10.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;css-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.1.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mini-css-extract-plugin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.9.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;node-sass&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^9.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;postcss&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^8.5.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;postcss-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^8.1.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;postcss-preset-env&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^10.1.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;react&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^19.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;react-dom&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^19.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sass-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^16.0.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;style-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ts-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^9.5.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typescript&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.8.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;webpack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.98.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;webpack-cli&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^6.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;webpack-dev-server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;webpack-merge&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^6.0.1&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="撰寫元件"><a href="#撰寫元件" class="headerlink" title="撰寫元件"></a>撰寫元件</h3><p>一切就緒之後，我們先開始撰寫元件，一些設定檔我們可以等等再開始加入，這邊先以刮刮樂為例子</p>
<blockquote>
<p>關於刮刮樂的源碼，可以參考 <strong>react-scratch-ticket</strong> 內的 <strong><a href="https://github.com/RexHung0302/react-scratch-ticket/tree/main/src">src</a></strong></p>
</blockquote>
<p>首先我們需要在專案內建立 <strong>src</strong> 資料夾，並且在專案內創建 <strong>index.tsx</strong> ，目前的架構大概會如下</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">├── node_modules <span class="meta"># 安裝套件後生成</span></span><br><span class="line">├── src <span class="meta"># 你要發布的套件代碼精華請放這</span></span><br><span class="line">    └── index.tsx  <span class="meta"># 確保至少有一個套件進入點</span></span><br><span class="line">├── README.md</span><br><span class="line">├── package-<span class="keyword">lock</span>.json</span><br><span class="line">└── package.json</span><br></pre></td></tr></table></figure>

<p>你的專案如果不是 <strong>React.js</strong> 也可以創建 <strong>index.ts</strong> 或者沒有用 <strong>TS</strong> 也可以創建 <strong>index.js</strong> ，最終我們要打包套件會需要一個入口點的</p>
<p><img src="/images/others/loading.gif" data-original="/images/20250309/src.png" alt="src"></p>
<p>因為筆者預期之後會擴增刮刮樂可以引入的組件類型，例如可以一張刮刮樂多個可刮區域，所以筆者在 <strong>index.tsx</strong> 內的做法是透過他輸出 <strong>TS</strong> 以及不同元件，方便後續引用</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.tsx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Component</span></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> <span class="title class_">ReactScratchTicket</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./component/ReactScratchTicket&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> &#123; <span class="title class_">ScratchTicketImperative</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./component/ReactScratchTicket&#x27;</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>元件的部分這邊後續筆者會再補充自己的寫作想法，目前以介紹發布流程為主</p>
</blockquote>
<hr>
<h3 id="Babel及Webpack設定"><a href="#Babel及Webpack設定" class="headerlink" title="Babel及Webpack設定"></a>Babel及Webpack設定</h3><p>在放入我們要發布的元件後，我們先把一些設定檔建立好</p>
<h4 id="建置-Babel-設定"><a href="#建置-Babel-設定" class="headerlink" title="建置 Babel 設定"></a>建置 Babel 設定</h4><p>先從最簡單的 <strong>babel</strong> 開始吧，這項東西是 <strong>JavaScript</strong> 的轉譯器，簡單解釋是他可以將 <strong>ECMAScript2015(ES6)</strong> 及以上的程式碼轉為向下相容的版本，讓較舊的瀏覽器也能解讀</p>
<p>先在根目錄創建 <strong>.babelrc</strong> ，並在裡面寫上下面內容</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;presets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;@babel/preset-env&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;@babel/preset-react&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;@babel/preset-typescript&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="建置-Webpack-設定"><a href="#建置-Webpack-設定" class="headerlink" title="建置 Webpack 設定"></a>建置 Webpack 設定</h4><p>比較重頭戲的部分都在 <strong>Webpack</strong> ，後續如果編譯失敗，或者實際安裝套件並且使用有問題，八九成都是這邊出問題</p>
<p>這部分筆者參考 <strong><a href="https://juejin.cn/post/7116710256482189348">（建议收藏）使用React+Typescript开发组件并发布到npm仓库</a></strong> 的文章，先建立 <strong>config</strong> 的資料夾，然後分別建立幾個檔案</p>
<p>建立 <strong>webpack.base.js</strong> 並寫入以下內容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.jsx&#x27;</span>, <span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.tsx&#x27;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/(\.js(x?))|(\.ts(x?))$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          &#123; </span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>建立 <strong>webpack.dev.config.js</strong> 並寫入以下內容，對於 <strong>demo</strong> 的部分等等會建立</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; fileURLToPath &#125; <span class="keyword">from</span> <span class="string">&#x27;url&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; merge &#125; <span class="keyword">from</span> <span class="string">&#x27;webpack-merge&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> baseConfig <span class="keyword">from</span> <span class="string">&#x27;./webpack.base.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> __filename = <span class="title function_">fileURLToPath</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>);</span><br><span class="line"><span class="keyword">const</span> __dirname = path.<span class="title function_">dirname</span>(__filename);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> devConfig = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">  <span class="attr">entry</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;../demo/src/index.tsx&quot;</span>),</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;../demo/src/&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;dev.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/.s[ac]ss$/</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/.min.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">&#x27;style-loader&#x27;</span> &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">modules</span>: &#123;</span><br><span class="line">                <span class="attr">mode</span>: <span class="string">&quot;global&quot;</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;postcss-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">                <span class="attr">plugins</span>: [</span><br><span class="line">                  [</span><br><span class="line">                    <span class="string">&#x27;postcss-preset-env&#x27;</span>,</span><br><span class="line">                  ],</span><br><span class="line">                ],</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">&#x27;sass-loader&#x27;</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/.min.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">&#x27;style-loader&#x27;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">&#x27;css-loader&#x27;</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">static</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;../demo/src/&#x27;</span>),</span><br><span class="line">    <span class="attr">compress</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">8001</span>, <span class="comment">// 啟動本地服務時候的端口，可以任意修改</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span> <span class="comment">// 打開瀏覽器</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> exportConfig = <span class="title function_">merge</span>(devConfig, baseConfig);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> exportConfig;</span><br></pre></td></tr></table></figure>

<p>建立 <strong>webpack.prod.config.js</strong> 並寫入以下內容，這份才是輸入後用的，有可能你在本地使用自己寫的套件內容沒問題，但是編譯後放到其他專案去使用就出問題，大部分都需要在這邊解決</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; fileURLToPath &#125; <span class="keyword">from</span> <span class="string">&#x27;url&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; merge &#125; <span class="keyword">from</span> <span class="string">&#x27;webpack-merge&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> baseConfig <span class="keyword">from</span> <span class="string">&#x27;./webpack.base.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MiniCssExtractPlugin</span> <span class="keyword">from</span> <span class="string">&quot;mini-css-extract-plugin&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> __filename = <span class="title function_">fileURLToPath</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>);</span><br><span class="line"><span class="keyword">const</span> __dirname = path.<span class="title function_">dirname</span>(__filename);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> esmConfig = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">  <span class="attr">entry</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;../src/index.tsx&quot;</span>),</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;../dist/&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;index.esm.js&quot;</span>,</span><br><span class="line">    <span class="attr">libraryTarget</span>: <span class="string">&#x27;module&#x27;</span>,</span><br><span class="line">    <span class="attr">module</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">experiments</span>: &#123;</span><br><span class="line">    <span class="attr">outputModule</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/.s[ac]ss$/</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/.min.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span> &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">modules</span>: &#123;</span><br><span class="line">                <span class="attr">mode</span>: <span class="string">&quot;global&quot;</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;postcss-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">                <span class="attr">plugins</span>: [</span><br><span class="line">                  [</span><br><span class="line">                    <span class="string">&#x27;postcss-preset-env&#x27;</span>,</span><br><span class="line">                  ],</span><br><span class="line">                ],</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">&#x27;sass-loader&#x27;</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&quot;index.min.css&quot;</span></span><br><span class="line">      &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">externals</span>: &#123;</span><br><span class="line">      <span class="attr">react</span>: <span class="string">&#x27;react&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;react-dom&#x27;</span>: <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">externalsType</span>: <span class="string">&#x27;module&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">merge</span>(esmConfig, baseConfig);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>再次提醒，如果你沒有用到 <strong>scss</strong> 或者相關的套件，請記得要移除，反之如果有用到的部分，請自行寫入設定</p>
</blockquote>
<hr>
<h3 id="完善package-json"><a href="#完善package-json" class="headerlink" title="完善package_json"></a>完善package_json</h3><p>現在我們必須完整我們的 <strong>package.json</strong> ，否則發布會失敗</p>
<p>基於範例套件的 <strong>package.json</strong> 如下，請補上你缺少的部分，這邊如果你不是使用 <strong>ESM</strong> 輸出，請再次參考 <strong><a href="https://juejin.cn/post/7116710256482189348">（建议收藏）使用React+Typescript开发组件并发布到npm仓库</a></strong> 的文章</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-scratch-ticket&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/index.esm.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/types/index.d.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/index.esm.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span><span class="punctuation">,</span> <span class="comment">// 不是 ESM 請不要加上這行</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack-dev-server --config config/webpack.dev.config.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack --config config/webpack.prod.config.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build:clean&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rimraf dist &amp;&amp; webpack --config config/webpack.prod.config.js &amp;&amp; npx tsc&quot;</span><span class="punctuation">,</span> <span class="comment">// 如果你的輸出資料夾不是 dist 請記得換名稱</span></span><br><span class="line">    <span class="attr">&quot;publish&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm publish --registry https://registry.npmjs.org&quot;</span> <span class="comment">// 發布的部分建議加上 --registry https://registry.npmjs.org，不然容易發生找不到問題</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;/dist&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;README*.md&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;LICENSE&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;react&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;scratch&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;ticket&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;scratch-ticket&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;react-scratch-ticket&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;card&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;scratch-card&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;react-scratch-card&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;canvas&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;scratch-canvas&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;react-scratch-canvas&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;RexHung0302&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MIT&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;This is a scratch ticket component, basic on React&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;homepage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/RexHung0302/react-scratch-ticket#readme&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;repository&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git+https://github.com/RexHung0302/react-scratch-ticket.git&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;bugs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/RexHung0302/react-scratch-ticket/issues&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;engines&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;npm&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&gt;=10.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&gt;=20.0.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">//... 略過</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>version: 每次發布新的內容到 npm 去，在 npm run build 之後，請記得改版</li>
<li>main: 作為你發布套件後，使用者引入你套件的入口是哪個檔案，這個檔案在這個筆記中是透過 webpack 產出的</li>
<li>types: 因為筆者輸出的套件是使用 ESM，這邊需要加上這個設定，告知專案這個套件的 TS 定義去哪裡找</li>
<li>files: 發布套件後只有這邊設定到的檔案會發布上去，其餘的檔案都不會被發布到 npm 倉庫中，可參考下圖一</li>
<li>keywords: 套件的關鍵字，會出現在 npm 搜尋列表小註解，以及使用者搜尋時會 mapping 的關鍵字，可參考下圖二</li>
<li>description: 套件的說明，會出現在 npm 搜尋列表小註解，可參考下圖二</li>
</ul>
<p><img src="/images/others/loading.gif" data-original="/images/20250309/publish-folder.png" alt="發布後的資料夾結構"></p>
<p><img src="/images/others/loading.gif" data-original="/images/20250309/npm-search.png" alt="發布後的資料夾結構"></p>
<hr>
<h3 id="TypeScript編譯"><a href="#TypeScript編譯" class="headerlink" title="TypeScript編譯"></a>TypeScript編譯</h3><p>開始這步驟前，筆者參考此篇文章解決許多 <strong>TS</strong> 問題 - <strong><a href="https://hackmd.io/@knowhow-dev3/Hyfe2_1fP">產生TypeScript的declare檔案</a></strong></p>
<p>為什麼我們需要 <strong>TS</strong> 編譯呢？如果你安裝套件的環境是使用 <strong>TS</strong> ，就一定要做這件事情，確保我們要發布的套件內輸出後的資料夾含有 <strong>index.d.ts</strong></p>
<p><img src="/images/others/loading.gif" data-original="/images/20250309/index-d-ts-not-found.png" alt="TS not found"></p>
<blockquote>
<p>如果沒有就會發生像上圖的事情，找不到套件的定義</p>
</blockquote>
<p>請先輸入以下指令，我們需要建立 <strong>TS</strong> 的設定檔案</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></figure>

<p>如果發生 <strong>tsc</strong> 找不到的問題，可以將 <strong>TS</strong> 安裝到全域環境</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm i typescript -g</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果有產生出來或者沒有產生出來，都請在根目錄確保有 <strong>tsconfig.json</strong> 這個檔案，內容請換上下面的部分，或者可以依照個人喜好修改</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ESNext&quot;</span><span class="punctuation">,</span> <span class="comment">// 如果你不是要產出 ESM 而是 CJS 請修改</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ESNext&quot;</span><span class="punctuation">,</span> <span class="comment">// 如果你不是要產出 ESM 而是 CJS 請修改</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noEmitOnError&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;es2017&quot;</span><span class="punctuation">,</span> <span class="string">&quot;DOM&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./src&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noImplicitAny&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;allowSyntheticDefaultImports&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;forceConsistentCasingInFileNames&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;declaration&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;declarationMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;declarationDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/types&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;emitDeclarationOnly&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;node_modules&quot;</span><span class="punctuation">,</span> <span class="string">&quot;dist&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>其中尤其是 <strong>declaration、declarationMap 及 declarationDir</strong> 這三項極其重要，如果沒有這三個，你不會在執行編譯後產出 <strong>index.d.ts File</strong></p>
<p>這邊的 <strong>declarationDir</strong> 輸出路徑，請記得修改的話，也要一起修改 <strong>package.json</strong> 的 <strong>type</strong> 設定，兩邊一定要對得上</p>
<p>都設定好之後目前專案大概長這樣</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">├── config  <span class="meta"># Webpack 的配置</span></span><br><span class="line">    ├── webpack.<span class="keyword">base</span>.js</span><br><span class="line">    ├── webpack.dev.config.js</span><br><span class="line">    └── webpack.prod.config.js</span><br><span class="line">├── node_modules <span class="meta"># 安裝套件後生成</span></span><br><span class="line">├── src <span class="meta"># 你要發布的套件代碼精華請放這</span></span><br><span class="line">    └── index.tsx  <span class="meta"># 確保至少有一個套件進入點</span></span><br><span class="line">├── README.md</span><br><span class="line">├── .babelrc <span class="meta"># babel 的配置</span></span><br><span class="line">├── tsconfig.json <span class="meta"># TS 的配置</span></span><br><span class="line">├── package-<span class="keyword">lock</span>.json</span><br><span class="line">└── package.json</span><br></pre></td></tr></table></figure>

<p>這邊先不要急著執行編譯指令，我們接下來將會建置 <strong>Demo</strong> 的部分，透過本地展示你這個專案的內容</p>
<hr>
<h3 id="建立Demo"><a href="#建立Demo" class="headerlink" title="建立Demo"></a>建立Demo</h3><p>在專案根目錄請創建 <strong>demo</strong> 資料夾，以及 <strong>src</strong> ，裡面請放上 <strong>index.tsx</strong> ， 裡面可以引入你要發布的套件代碼精華 <code>src/index.tsx</code></p>
<p>以筆者的 <strong>demo</strong> 為例</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// demo/src/index.tsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ReactScratchTicket</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../../src/index&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom/client&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> useIndexController <span class="keyword">from</span> <span class="string">&quot;./hook/useIndexController&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.scss&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; prizeInfo, scratchTicketRef, completeHandler, initDoneHandler, resetDoneHandler, clickResetBtnHandler, clickClearCardBtnHandler &#125; = <span class="title function_">useIndexController</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span> <span class="attr">className</span>=<span class="string">&quot;font-bold&quot;</span>&gt;</span>React Scratch Ticket Demo<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;container__title&quot;</span>&gt;</span>100X<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ReactScratchTicket</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">ref</span>=<span class="string">&#123;scratchTicketRef&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">containerClassName</span>=<span class="string">&quot;scratch-ticket-container&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">brushSize</span>=<span class="string">&#123;10&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">width</span>=<span class="string">&#123;309&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">height</span>=<span class="string">&#123;52&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">childrenCenter</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">maskingLayerImg</span>=<span class="string">&#x27;https://picsum.photos/309/52&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">maskingLayerColor</span>=<span class="string">&quot;yellow&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">finishPercent</span>=<span class="string">&#123;70&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onComplete</span>=<span class="string">&#123;completeHandler&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onInitDone</span>=<span class="string">&#123;initDoneHandler&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onResetDone</span>=<span class="string">&#123;resetDoneHandler&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;prizeInfo.name&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ReactScratchTicket</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;buttons&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;clickResetBtnHandler&#125;</span> <span class="attr">className</span>=<span class="string">&quot;button&quot;</span>&gt;</span>Reset<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;clickClearCardBtnHandler&#125;</span> <span class="attr">className</span>=<span class="string">&quot;button&quot;</span>&gt;</span>Clear Card<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)!).<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<p>另外還需要創建 <strong>index.html</strong> 來預覽畫面，內容為下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 名稱可以隨意修改 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>react-scratch-ticket-demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;dev.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>根據 <strong><a href="https://juejin.cn/post/7116710256482189348">（建议收藏）使用React+Typescript开发组件并发布到npm仓库</a></strong> 的文章解釋， <strong>dev.js</strong> 不會實際在 <strong>demo&#x2F;src</strong> 底下產生 <strong>dev.js</strong> ，打包好的文件是在內容存，所以實際推上去 <strong>Github</strong> 並不能直接透過 <strong>index.html</strong> 預覽，這點筆者還在研究當中</p>
</blockquote>
<p>都設定好之後目前專案大概長這樣</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">├── config  <span class="meta"># Webpack 的配置</span></span><br><span class="line">    ├── webpack.<span class="keyword">base</span>.js</span><br><span class="line">    ├── webpack.dev.config.js</span><br><span class="line">    └── webpack.prod.config.js</span><br><span class="line">├── demo <span class="meta"># 本地開發預覽</span></span><br><span class="line">    └── src</span><br><span class="line">        ├── index.tsx</span><br><span class="line">        ├── index.html <span class="comment">// 一定要有這個</span></span><br><span class="line">        └── index.scss</span><br><span class="line">├── node_modules <span class="meta"># 安裝套件後生成</span></span><br><span class="line">├── src <span class="meta"># 你要發布的套件代碼精華請放這</span></span><br><span class="line">    └── index.tsx  <span class="meta"># 確保至少有一個套件進入點</span></span><br><span class="line">├── README.md</span><br><span class="line">├── .babelrc <span class="meta"># babel 的配置</span></span><br><span class="line">├── tsconfig.json <span class="meta"># TS 的配置</span></span><br><span class="line">├── package-<span class="keyword">lock</span>.json</span><br><span class="line">└── package.json</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果有修改 <strong>demo</strong> 的相關配置，請記得一定要一併修改 <strong>&#x2F;config&#x2F;webpack.dev.config.js</strong></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20250309/npm-run-dev.gif" alt="Run Dev"></p>
<p>這時候可以輸入 <code>npm run dev</code> 來查看你的成果了</p>
<hr>
<h3 id="編譯以及Link的使用"><a href="#編譯以及Link的使用" class="headerlink" title="編譯以及Link的使用"></a>編譯以及Link的使用</h3><h4 id="編譯"><a href="#編譯" class="headerlink" title="編譯"></a>編譯</h4><p><img src="/images/others/loading.gif" data-original="/images/20250309/npm-run-build-clean.gif" alt="Run Build"></p>
<p>當一切就緒，我們可以執行 <code>npm run build:clean</code>，這行指令寫在 <strong>package.json</strong> 當中，主要是要刪除舊的編譯過的檔案，然後編譯新的 <strong>JS</strong> 還有 <strong>TS</strong> 宣告內容</p>
<p><img src="/images/others/loading.gif" data-original="/images/20250309/dist-folder.png" alt="Dist folder"></p>
<p>執行後就能看到資料夾多出了 <code>/dist</code> 資料夾，而我們 <strong>package.json</strong> 也把 <strong>main、types</strong> 以及 <strong>module</strong> 都指向 <code>/dist</code></p>
<p>這時候可以使用 <strong>npm link</strong> 指令，這個指令是把打包後的組件引入到本機全局的 <strong>node_modules</strong> 資料夾之中</p>
<p>輸入之後我們就可以到 <code>demo/src</code> 資料夾中，輸入以下指令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> demo/src</span><br><span class="line">npm <span class="built_in">link</span> react-scratch-ticket</span><br></pre></td></tr></table></figure>

<p>請記得上面的 <strong>react-scratch-ticket</strong> 要換成你 <strong>package.json</strong> 的 <strong>name</strong></p>
<p>接著修改 <code>demo/src/index.tsx</code> 的內容</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// demo/src/index.tsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="comment">// import &#123; ReactScratchTicket &#125; from &quot;../../src/index&quot;;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ReactScratchTicket</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-scratch-ticket&quot;</span>; <span class="comment">// 引入剛剛的 link</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom/client&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> useIndexController <span class="keyword">from</span> <span class="string">&quot;./hook/useIndexController&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.scss&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; prizeInfo, scratchTicketRef, completeHandler, initDoneHandler, resetDoneHandler, clickResetBtnHandler, clickClearCardBtnHandler &#125; = <span class="title function_">useIndexController</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span> <span class="attr">className</span>=<span class="string">&quot;font-bold&quot;</span>&gt;</span>React Scratch Ticket Demo<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;container__title&quot;</span>&gt;</span>100X<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ReactScratchTicket</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">ref</span>=<span class="string">&#123;scratchTicketRef&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">containerClassName</span>=<span class="string">&quot;scratch-ticket-container&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">brushSize</span>=<span class="string">&#123;10&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">width</span>=<span class="string">&#123;309&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">height</span>=<span class="string">&#123;52&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">childrenCenter</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">maskingLayerImg</span>=<span class="string">&#x27;https://picsum.photos/309/52&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">maskingLayerColor</span>=<span class="string">&quot;yellow&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">finishPercent</span>=<span class="string">&#123;70&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onComplete</span>=<span class="string">&#123;completeHandler&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onInitDone</span>=<span class="string">&#123;initDoneHandler&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onResetDone</span>=<span class="string">&#123;resetDoneHandler&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;prizeInfo.name&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ReactScratchTicket</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;buttons&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;clickResetBtnHandler&#125;</span> <span class="attr">className</span>=<span class="string">&quot;button&quot;</span>&gt;</span>Reset<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;clickClearCardBtnHandler&#125;</span> <span class="attr">className</span>=<span class="string">&quot;button&quot;</span>&gt;</span>Clear Card<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)!).<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<h4 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h4><p>這部分可以選擇性操作，不做的話也可以</p>
<p><img src="/images/others/loading.gif" data-original="/images/20250309/npm-link.png" alt="npm link"></p>
<p>如果有出現錯誤或是找不到，可以使用 <code>npm unlink react-scratch-ticket</code> 再重新 <strong>link</strong> 一次就行</p>
<p>而依據查詢到的資料，只要後續再跑過 <code>npm run build</code> 之後，請重新執行 <code>npm link</code>，而 <strong>link</strong> 的時候請務必注意你的目錄位置</p>
<p>關於 <strong>npm link</strong> 的相關文章可參考 <strong><a href="https://etrexkuo.medium.com/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-npm-link-%E9%80%B2%E8%A1%8C-node-module-%E6%B8%AC%E8%A9%A6-9d3b98db768c">如何使用 npm link 進行 node module 測試</a></strong></p>
<p><img src="/images/others/loading.gif" data-original="/images/20250309/npm-link-issue.png" alt="npm link issue"></p>
<p>後續如果你有需要在本地安裝你推的套件，根據上述文章的內容，會有需要注意的部分</p>
<hr>
<h3 id="發布前的測試"><a href="#發布前的測試" class="headerlink" title="發布前的測試"></a>發布前的測試</h3><p>在發布前我們會想要測試一下編譯出來的檔案，這時候我們可以透過使用 <code>npm pack</code> 的方式打包出你套件</p>
<p><img src="/images/others/loading.gif" data-original="/images/20250309/npm-pack.gif" alt="npm pack"></p>
<p>你會發現根目錄出現一個帶有跟你 <strong>package.json</strong> 定義同樣 <strong>version</strong> 的檔案出現</p>
<p>這時候你可以把你打包出來的 <code>&#123;套件名稱&#125;-&#123;版本號&#125;.tgz</code> 複製起來，然後貼到你要使用的專案去</p>
<p>到你要使用的專案輸入 <code>npm i ./&#123;套件名稱&#125;-&#123;版本號&#125;.tgz</code>，之後就可以跟一般使用套件一樣 <code>import &#123; ReactScratchTicket &#125; from &#39;react-scratch-ticket&#39;;</code></p>
<p>如果至此沒問題，那就可以準備發布了！</p>
<hr>
<h3 id="編寫README-md"><a href="#編寫README-md" class="headerlink" title="編寫README.md"></a>編寫README.md</h3><p>這部分可以參考 <strong><a href="https://juejin.cn/post/7116710256482189348">（建议收藏）使用React+Typescript开发组件并发布到npm仓库</a></strong> 一文的 <strong>四、编写Readme文档</strong> ，透過 <strong><a href="https://www.npmjs.com/package/readme-md-generator">readme-md-generator</a></strong> 可以更快的依據你 <strong>package.json</strong> 設定去產生出 <strong>README.md</strong></p>
<p>在使用之前，可以先建立 <strong>LICENSE</strong> 檔案，內容可以參考其他的文章，或是筆者的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MIT License</span><br><span class="line"></span><br><span class="line">Copyright (c) &#123;更換成你的名稱&#125;</span><br><span class="line"></span><br><span class="line">Permission is hereby granted, free of charge, to any person obtaining a copy</span><br><span class="line">of this software and associated documentation files (the &quot;Software&quot;), to deal</span><br><span class="line">in the Software without restriction, including without limitation the rights</span><br><span class="line">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span><br><span class="line">copies of the Software, and to permit persons to whom the Software is</span><br><span class="line">furnished to do so, subject to the following conditions:</span><br><span class="line"></span><br><span class="line">The above copyright notice and this permission notice shall be included in all</span><br><span class="line">copies or substantial portions of the Software.</span><br><span class="line"></span><br><span class="line">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span><br><span class="line">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span><br><span class="line">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span><br><span class="line">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span><br><span class="line">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span><br><span class="line">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span><br><span class="line">SOFTWARE.</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="初始化git"><a href="#初始化git" class="headerlink" title="初始化git"></a>初始化git</h3><p>請初始化你的 <strong>git</strong> ，後續這個套件會推到你的倉庫去，而 <strong>npm</strong> 的介紹網頁上也會透過你 <strong>package.json</strong> 的設定連結到你的 <strong>github</strong> ，如果不知道怎麼初始化，可以參考 <strong><a href="https://ithelp.ithome.com.tw/m/articles/10240965">[Git] 初始設定</a></strong></p>
<p>然後請建立 <code>.gitignore</code> 檔案，內容如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/node_modules</span><br><span class="line">.vscode</span><br><span class="line">/dist</span><br><span class="line"></span><br><span class="line">.DS_Store</span><br><span class="line">.env.local</span><br><span class="line">.env.development.local</span><br><span class="line">.env.test.local</span><br><span class="line">.env.production.local</span><br><span class="line"></span><br><span class="line">npm-debug.log*</span><br><span class="line">yarn-debug.log*</span><br><span class="line">yarn-error.log*</span><br><span class="line"></span><br><span class="line">*.tgz</span><br><span class="line"></span><br><span class="line">.idea</span><br></pre></td></tr></table></figure>

<p>都設定好之後目前專案大概長這樣</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">├── config  <span class="meta"># Webpack 的配置</span></span><br><span class="line">    ├── webpack.<span class="keyword">base</span>.js</span><br><span class="line">    ├── webpack.dev.config.js</span><br><span class="line">    └── webpack.prod.config.js</span><br><span class="line">├── demo <span class="meta"># 本地開發預覽</span></span><br><span class="line">    └── src</span><br><span class="line">        ├── index.tsx</span><br><span class="line">        ├── index.html <span class="comment">// 一定要有這個</span></span><br><span class="line">        └── index.scss</span><br><span class="line">├── node_modules <span class="meta"># 安裝套件後生成</span></span><br><span class="line">├── src <span class="meta"># 你要發布的套件代碼精華請放這</span></span><br><span class="line">    └── index.tsx  <span class="meta"># 確保至少有一個套件進入點</span></span><br><span class="line">├── README.md</span><br><span class="line">├── .gitignore</span><br><span class="line">├── LICENSE <span class="comment">// 如果沒有設定，請把 package 的 license 設定改為空字串</span></span><br><span class="line">├── react-scratch-ticket<span class="number">-1.1</span><span class="number">.4</span>.tgz <span class="comment">// 如果有執行 npm pack 才會有該檔案</span></span><br><span class="line">├── README.md</span><br><span class="line">├── .babelrc <span class="meta"># babel 的配置</span></span><br><span class="line">├── tsconfig.json <span class="meta"># TS 的配置</span></span><br><span class="line">├── package-<span class="keyword">lock</span>.json</span><br><span class="line">└── package.json</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="發布套件"><a href="#發布套件" class="headerlink" title="發布套件"></a>發布套件</h3><p>終於到最後我們要發布套件了，如果你還沒有 <strong><a href="https://www.npmjs.com/">npmjs.com</a></strong> 的帳號，輸入以下指令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm adduser</span><br></pre></td></tr></table></figure>

<p>但如果你已經有帳號密碼了，可以使用</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm login</span><br></pre></td></tr></table></figure>

<p>(&#x2F;images&#x2F;20250309&#x2F;npm-adduser.png)</p>
<p>不管創建還是登入，只要你還沒有透過從專案終端機輸入指令後，通過 <strong><a href="https://www.npmjs.com/">npmjs.com</a></strong> 網頁登入過，接著都會打開官網的畫面</p>
<p><img src="/images/others/loading.gif" data-original="/images/20250309/npm-login.png" alt="npm login"></p>
<p>這邊預設使用者還沒註冊過，點擊圖上的 <strong>Create Account</strong></p>
<p><img src="/images/others/loading.gif" data-original="/images/20250309/npm-signup.png" alt="npm signup"></p>
<p>輸入完資料點擊 <strong>Create Account</strong></p>
<p><img src="/images/others/loading.gif" data-original="/images/20250309/detected-on-a-public.png" alt="密碼外洩"></p>
<p>這邊的密碼會去檢查你輸入的是不是有在網路上洩漏了，如果是請換一組密碼</p>
<p><img src="/images/others/loading.gif" data-original="/images/20250309/npm-otp.png" alt="信箱收驗證碼"></p>
<p>接著這邊需要再去信箱收驗證碼，往後的每次登入也都需要收驗證碼，以此保證你的帳號安全</p>
<p><img src="/images/others/loading.gif" data-original="/images/20250309/authentication-successful.png" alt="創建成功"></p>
<p>創建成功後就可以關掉網頁回到你的專案了</p>
<p><img src="/images/others/loading.gif" data-original="/images/20250309/press-enter.png" alt="按下 Enter"></p>
<p>最後在專案終端機應該會出現這些文字</p>
<p>接著我們就可以輸入 <code>npm run publish</code></p>
<p><img src="/images/others/loading.gif" data-original="/images/20250309/npm-publish.png" alt="發布專案"></p>
<p>上面的內容跑完就會把專案推上去了，之後請到 <strong><a href="https://www.npmjs.com/">npmjs.com</a></strong> 輸入你的專案名稱進行搜尋</p>
<p><img src="/images/others/loading.gif" data-original="/images/20250309/publish-search.png" alt="搜尋專案"></p>
<p>這邊如果有 <strong>match</strong> 到關鍵字，基本上就會出現了，但如果沒有可以把 <strong>filter</strong> 過濾改為 <strong>Recently published</strong> ，可能會在第一順位看到</p>
<blockquote>
<p>如果都沒有搜尋到，之後可以考慮更改 <strong>package.json</strong> 的名稱，也可以重新再推送一次看看</p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20250309/npm-unpublish.png" alt="刪除套件"></p>
<p>這邊要特別注意，如果後續你不管從 <strong><a href="https://www.npmjs.com/">npmjs.com</a></strong> 刪除套件了，還是透過指令 <strong>npm unpublish</strong> 刪除，都需要再等上 24 小時，才能再推送一次，所以名稱跟配置一定要弄好，一切沒問題再推送</p>
<hr>
<h3 id="額外問題"><a href="#額外問題" class="headerlink" title="額外問題"></a>額外問題</h3><ul>
<li><p>目前無法一次編譯 <strong>ESM</strong> 以及 <strong>CSJ</strong> ，這部分後續會再找方法解決</p>
</li>
<li><p>目前無法透過 <strong>prod</strong> 編譯時，建立一份 <strong>js</strong> 提供給 <code>/demo/src</code> 使用，導致 <strong>github</strong> 沒辦法放上 <strong>demo</strong> 連結</p>
</li>
<li><p>目前無法在套件內安裝 <strong><a href="https://tailwindcss.com/">TailwindCSS</a></strong> ，這會使編譯後使用的專案出現錯誤，無法辨別 <code>@import &quot;tailwindcss&quot;;</code> 或 <code>@use &quot;tailwindcss&quot;;</code> 是什麼</p>
</li>
<li><p>更多額外問題會之後再補上</p>
</li>
</ul>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>這次終於研究了想了好久的 <strong>npm</strong> 套件發布，即使知道中間可能會碰到很多坑，但真的碰到 <strong>Webpack</strong> 的時候，又想起之前被支配的恐懼…</p>
<p>透過朋友及同事知道除了 <strong>Webpack</strong> 還有 <strong>rollup</strong> 及 <strong>browserify</strong> ，後續會再另外研究一下，希望能找出更簡易打包的方式，<strong>Webpack</strong> 真的太多繁瑣的設定，如果有想用的套件就必須要另外設定 <strong>config</strong> 檔，一個沒弄好，就會使引用的專案出現錯誤。</p>
<p>最後希望這篇筆記能夠幫助到你，如果你有任何問題，非常歡迎在留言討論，但請理性溝通，友善交流。</p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><a href="https://juejin.cn/post/7116710256482189348">（建议收藏）使用React+Typescript开发组件并发布到npm仓库</a></li>
<li><a href="https://hackmd.io/@knowhow-dev3/Hyfe2_1fP#%E7%94%A2%E7%94%9FTypeScript%E7%9A%84declare%E6%AA%94%E6%A1%88">產生TypeScript的declare檔案</a></li>
<li><a href="https://etrexkuo.medium.com/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-npm-link-%E9%80%B2%E8%A1%8C-node-module-%E6%B8%AC%E8%A9%A6-9d3b98db768c">如何使用 npm link 進行 node module 測試</a></li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>NPM</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
        <tag>Webpack</tag>
        <tag>Package</tag>
        <tag>React.js</tag>
        <tag>TypeScript</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>[React Note] — React.js Test 深入淺出 ft. TypeScript</title>
    <url>/2025/04/14/20250414/</url>
    <content><![CDATA[<h2 id="Introduction-前言"><a href="#Introduction-前言" class="headerlink" title="Introduction &amp; 前言"></a>Introduction &amp; 前言</h2><p><img src="/images/others/loading.gif" data-original="/images/20250414/banner.png" alt="Test"></p>
<blockquote>
<p>背景來至 <a href="https://unsplash.com/photos/a-macbook-with-lines-of-code-on-its-screen-on-a-busy-desk-m_HRfLhgABo">unsplash.com 的 Christopher Gower</a></p>
</blockquote>
<p>開始寫程式之後，是不是常常被問你該怎麼確保程式碼沒問題？</p>
<p>開始寫程式之後，是不是總想著怎麼不用再透過手動的方式確保程式碼沒問題？</p>
<p>開始寫程式之後，是不是常常被問，你會不會寫測試？</p>
<blockquote>
<p>來！看這篇，這是一篇關於 <strong>React.js</strong> + <strong>TypeScript</strong> 為主的測試</p>
</blockquote>
<span id="more"></span>

<p><em><strong>整篇文章是筆者自己的心得，如果文內有錯誤的地方，還請盡情指出。</strong></em></p>
<p>該篇文章參考了其他的教學，加上自己碰到的坑，整理出心得並作為筆記釋出，其中也補足了其他教學文中少的部分，而看文章的你一定會有自己的需求，請先別急，看完文章後請截取自己需要的部分，如果你覺得這篇文章對你有幫助，還請將文章分享給更多人知道，或者結合自己的心得，在發布其他更多的文章幫助更多的開發者。</p>
<p>由於筆者使用的專案建構工具為 <strong>Vite</strong> ，但因為先前曾經試過一次 <strong><a href="https://cn.vitest.dev/">Vitest</a></strong> 碰到些許問題，這邊就使用較為單純的 <strong>jest</strong> 進行測試，如果各位有興趣，筆者之後也會再繼續研究並且發布相關筆記介紹關於 <strong>Vitest</strong> ，但是本篇文章不會跟 <strong>Vite</strong> 有什麼關係</p>
<blockquote>
<p>如果你的專案不是使用 <strong>TypeScript</strong> ，中間會有些設定需要改掉，例如檔案結尾為 <code>.ts</code>，請自行改為 <code>.js</code>，如果有使用到相關套件例如 <strong>@babel&#x2F;preset-typescript</strong> 可以不用安裝，但整體建議專案是 <strong>TypeScript</strong> 的朋友在完全按照文章步驟走</p>
</blockquote>
<hr>
<h2 id="Summary-摘要"><a href="#Summary-摘要" class="headerlink" title="Summary &amp; 摘要"></a>Summary &amp; 摘要</h2><p>本篇文章預設學習前的基本條件需求：</p>
<ul>
<li>會 Node.js(NPM)、終端機、及 React.js 的使用</li>
<li>會 TypeScript(以下將會開始簡稱 TS)</li>
<li>一顆熱忱的心 -&gt; 超級重要，碰到坑千萬不要氣餒</li>
</ul>
<p>本篇文章將有以下幾個步驟:</p>
<ol>
<li><a href="#%E5%89%8D%E5%89%8D%E5%89%8D%E8%A8%80">前前前言</a></li>
<li><a href="#%E6%B8%AC%E8%A9%A6%E4%BB%8B%E7%B4%B9">測試介紹</a></li>
<li><a href="#%E5%AE%89%E8%A3%9D%E7%92%B0%E5%A2%83">安裝環境</a></li>
<li><a href="#%E7%92%B0%E5%A2%83%E8%A8%AD%E7%BD%AE">環境設置</a></li>
<li><a href="#%E6%92%B0%E5%AF%AB%E5%9F%BA%E7%A4%8E%E6%B8%AC%E8%A9%A6">撰寫基礎測試</a></li>
<li><a href="#%E6%92%B0%E5%AF%AB-React.js-%E6%B8%AC%E8%A9%A6">撰寫 React.js 測試</a></li>
<li><a href="#%E9%A1%8D%E5%A4%96%E5%95%8F%E9%A1%8C">額外問題</a></li>
<li><a href="#%E6%B8%AC%E8%A9%A6%E8%A6%86%E8%93%8B%E7%8E%87">測試覆蓋率</a></li>
<li><a href="#React.js-%E6%9E%B6%E6%A7%8B%E6%8E%A2%E8%A8%8E">React.js 架構探討</a></li>
</ol>
<hr>
<h3 id="前前前言"><a href="#前前前言" class="headerlink" title="前前前言"></a>前前前言</h3><p>在開始寫前端後的幾年，常常被問到是不是有在寫測試，加上筆者目前所待的公司過去曾經盛行測試文化，在後端的開發幾乎是以 <strong>TDD(註1)</strong> 為核心</p>
<p>在現職的公司前陣子與主管討論後，決定在前端導入測試，一直沒有導入的原因其實一部分是因為團隊專案在初期，很多東西還沒有制式規格，滿長會碰到需要更改核心或商業邏輯的情況</p>
<p>在團隊人員開始增長情況下，變得比較有餘力去做這件事情，同時因為近期面臨到需要帶領前端團隊人員一起成長的情況，決定透過測試下手</p>
<p>因為我們是先開發專案到一半，才決定導入測試，所以這邊我們就不講 <strong>TDD</strong> ，但是在文章末可以提及一下目前團隊專案 <strong>React.js</strong> 的<a href="(#React.js-%E6%9E%B6%E6%A7%8B%E6%8E%A2%E8%A8%8E)">架構概念</a></p>
<blockquote>
<p>註1：TDD 全名為 Test-Driven Development，中文翻譯為『測試驅動開發』，簡單說核心概念為『先寫測試，在寫開發』，相關文章可參考 <a href="https://kucw.io/blog/test-driven-development/">TDD 是什麼？認識 Test-Driven Development（測試驅動開發）</a></p>
</blockquote>
<hr>
<h3 id="測試介紹"><a href="#測試介紹" class="headerlink" title="測試介紹"></a>測試介紹</h3><p>這邊要先說一下對於測試通常我們有幾個測試的點，其中我們最想確保的是程式碼沒有問題，所以我們應該要測試的邏輯部分是在比較核心的商業邏輯層，不應該是 <strong>View</strong> 層，除非今天你很確定畫面不會再改變了，不然測試寫好了，突然老闆覺得這樣比較好，改版後，客戶又覺得那樣比較好，你會開始覺得測試是不是只是絆腳石</p>
<p>如果有興趣想知道測試通常有哪些分類，可以上網查詢一下，資源非常的多，這邊就提幾個比較長被拿來討論的</p>
<ul>
<li><p>單元測試(Unit testing)</p>
<ul>
<li>最小的測試單位，盡量撰寫最基本的測試，不應該過於複雜。單元測試主要針對單一功能或模組進行測試，確保其獨立運作正常。</li>
</ul>
</li>
<li><p>整合測試(Integration testing)</p>
<ul>
<li>測試多個模組或系統組件之間的互動，確保它們能夠正確地協同工作。整合測試通常在單元測試之後進行。</li>
</ul>
</li>
<li><p>端對端測試(End-to-end testing、E2E testing)</p>
<ul>
<li>模擬真實用戶操作，從頭到尾測試整個應用程式的工作流程。端對端測試通常涵蓋前端和後端，確保整個系統的功能正常。</li>
</ul>
</li>
<li><p>冒煙測試(Smoke Test)</p>
<ul>
<li>簡單且快速的測試，檢查應用程式的基本功能是否正常運作。冒煙測試通常在每次新版本發布前進行，以確保沒有重大問題。</li>
</ul>
</li>
<li><p>回歸測試(Regression Test)</p>
<ul>
<li>在應用程式進行修改或更新後，重新執行先前的測試案例，確保新變更沒有引入新的錯誤或破壞現有功能。回歸測試有助於維持系統的穩定性。</li>
</ul>
</li>
</ul>
<p>在本篇文章內我們是從單元測試為目標去進行操作的，如果你的目的不同，那測試的內容也會不一樣</p>
<hr>
<h3 id="安裝環境"><a href="#安裝環境" class="headerlink" title="安裝環境"></a>安裝環境</h3><p>先說一下筆者的環境，以及建議使用的環境</p>
<ul>
<li>npm &gt;&#x3D;10.7.0</li>
<li>node &gt;&#x3D;20.14.0</li>
<li>typescript &gt;&#x3D;5.6.2</li>
</ul>
<p>這邊就不講解怎麼建立一個新的環境，預設情況下你已經有一個 <strong>React.js</strong> 專案，我們就直接開始安裝相關的測試套件吧</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm i -D jest ts-jest babel-jest @types/jest @babel/preset-env @babel/preset-react  @babel/preset-typescript ts-node @testing-library/react @testing-library/user-event identity-obj-proxy @testing-library/jest-dom jest-environment-jsdom</span><br></pre></td></tr></table></figure>

<p>因為一次安裝全部的相關套件，所以可能會覺的非常多，但接下來會解釋一下這些套件作用</p>
<ul>
<li>jest -&gt; 測試的主要核心，如果不安裝，無法使用 <code>npm run jest</code></li>
<li>ts-jest -&gt; 在需要測試的專案我們會有一份 <strong>jest.config.js(ts)</strong> 的檔案，如果你不是使用 <strong>ts</strong> 可以不用使用這個，請安裝 <strong>jest</strong></li>
<li>@types&#x2F;jest -&gt; 在測試中我們會寫 <strong>describe、it、test、jest…</strong> 等等，如果不安裝 <strong>babel-jest</strong> 會導致這些 <strong>TS</strong> 定義都找不到，<strong>IDE</strong> 上會出現紅色蚯蚓，編譯也不會成功，如果不想要安裝這個套件可以改用 <strong>@jest&#x2F;globals</strong> 取代</li>
<li>@babel&#x2F;preset-env -&gt; 放在 <strong>babel.config.js(ts)</strong> 中的，透過 <strong>babel(註2)</strong> 主要用來轉譯比較新的 <strong>JS(ES)</strong> ，讓舊版瀏覽器能夠讀懂</li>
<li>@babel&#x2F;preset-react -&gt; 同 <strong>@babel&#x2F;preset-env</strong></li>
<li>@babel&#x2F;preset-typescript -&gt; 同 <strong>@babel&#x2F;preset-env</strong></li>
<li>ts-node -&gt; 用於在 <strong>Node.js</strong> 環境中直接執行 <strong>TS</strong> 代碼</li>
<li>@testing-library&#x2F;react -&gt; 測試中我們會用到類似於 <strong>render、screen</strong> 這種方法，它是 React 測試庫，提供操作 <strong>Jest</strong> 以及網頁 <strong>DOM(註3)</strong> 的方法</li>
<li>@testing-library&#x2F;user-event -&gt; 模擬使用者操作的事件，例如 <a href="https://juejin.cn/post/7029304095944998926">React-5 测试模拟用户事件</a></li>
<li>identity-obj-proxy -&gt; 轉譯 <strong>CSS</strong> 相關資源，用來講 <strong>CSS</strong> 模組映射為簡單對象，詳細套件解釋可參考 <a href="https://github.com/keyz/identity-obj-proxy">identity-obj-proxy github</a></li>
<li>@testing-library&#x2F;jest-dom -&gt; 用來解決 <code>Property ‘toBeInTheDocument’ does not exist on type ‘Matchers’</code></li>
<li>jest-environment-jsdom -&gt; <strong>Jest</strong> 的測試環境，模擬瀏覽器 <strong>DOM</strong> 環境，如果不安裝，會出現 <code>Test environment jest-environment-jsdom cannot be found. Make sure the testEnvironment configuration option points to an existing node module.</code> 錯誤</li>
</ul>
<p>這些套件都可以在指令加上 <code>-D</code>或 <code>--save-dev</code> 安裝到 <strong>devDependencies</strong> 去，我們只有在開發中會使用到</p>
<blockquote>
<p>註2：<a href="https://www.babeljs.cn/docs">babel 是什麼？</a></p>
</blockquote>
<blockquote>
<p>註3：<a href="https://developer.mozilla.org/zh-TW/docs/Web/API/Document_Object_Model">文件物件模型 (DOM)</a></p>
</blockquote>
<hr>
<h3 id="環境設置"><a href="#環境設置" class="headerlink" title="環境設置"></a>環境設置</h3><p>環境安裝結束後，我們要開始設置一些設定配置，首先打開 <strong>package.json</strong> 然後加上指令到 <strong>scripts</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">//...略</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">//...其他指令</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jest&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test:watch&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jest --watch&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">//...略</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>基本上我們通常只會用到 <code>npm run test</code>，不太會用 <strong>jest –watch</strong> ，後者是會一直啟動測試監聽，只要改一行測試程式碼，就會重跑一次測試，會耗費比較多資源</p>
<p>之後我們在本地建立 <strong>jest.config.ts</strong> 或者在終端機輸入 <code>jest --init</code>(註4)，前者的方式請貼下以下內容，如果是後者的話可以按照問答一步一步回答，之後就會新增一個 <strong>jest.config.ts</strong> 的檔案，內容也可以補上跟下面差不多的內容</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * For a detailed explanation regarding each configuration property, visit:</span></span><br><span class="line"><span class="comment"> * https://jestjs.io/docs/configuration</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// import type &#123;Config&#125; from &#x27;jest&#x27;;</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">JestConfigWithTsJest</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;ts-jest&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> babelConfig <span class="keyword">from</span> <span class="string">&#x27;./babel.config&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">config</span>: <span class="title class_">JestConfigWithTsJest</span> = &#123;</span><br><span class="line">  <span class="comment">// All imported modules in your tests should be mocked automatically</span></span><br><span class="line">  <span class="comment">// automock: false,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Stop running tests after `n` failures</span></span><br><span class="line">  <span class="comment">// bail: 0,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// The directory where Jest should store its cached dependency information</span></span><br><span class="line">  <span class="comment">// cacheDirectory: &quot;/private/var/folders/y9/v8qqkg955_z3wg6qqtsqs0p00000gn/T/jest_dx&quot;,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Automatically clear mock calls, instances, contexts and results before every test</span></span><br><span class="line">  <span class="attr">clearMocks</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Indicates whether the coverage information should be collected while executing the test</span></span><br><span class="line">  <span class="attr">collectCoverage</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// An array of glob patterns indicating a set of files for which coverage information should be collected</span></span><br><span class="line">  <span class="comment">// collectCoverageFrom: undefined,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// The directory where Jest should output its coverage files</span></span><br><span class="line">  <span class="attr">coverageDirectory</span>: <span class="string">&#x27;coverage&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// An array of regexp pattern strings used to skip coverage collection</span></span><br><span class="line">  <span class="comment">// coveragePathIgnorePatterns: [</span></span><br><span class="line">  <span class="comment">//   &quot;/node_modules/&quot;</span></span><br><span class="line">  <span class="comment">// ],</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Indicates which provider should be used to instrument code for coverage</span></span><br><span class="line">  <span class="comment">// coverageProvider: &quot;babel&quot;,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// A list of reporter names that Jest uses when writing coverage reports</span></span><br><span class="line">  <span class="comment">// coverageReporters: [</span></span><br><span class="line">  <span class="comment">//   &quot;json&quot;,</span></span><br><span class="line">  <span class="comment">//   &quot;text&quot;,</span></span><br><span class="line">  <span class="comment">//   &quot;lcov&quot;,</span></span><br><span class="line">  <span class="comment">//   &quot;clover&quot;</span></span><br><span class="line">  <span class="comment">// ],</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// An object that configures minimum threshold enforcement for coverage results</span></span><br><span class="line">  <span class="comment">// coverageThreshold: undefined,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// A path to a custom dependency extractor</span></span><br><span class="line">  <span class="comment">// dependencyExtractor: undefined,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Make calling deprecated APIs throw helpful error messages</span></span><br><span class="line">  <span class="comment">// errorOnDeprecated: false,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// The default configuration for fake timers</span></span><br><span class="line">  <span class="comment">// fakeTimers: &#123;</span></span><br><span class="line">  <span class="comment">//   &quot;enableGlobally&quot;: false</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Force coverage collection from ignored files using an array of glob patterns</span></span><br><span class="line">  <span class="comment">// forceCoverageMatch: [],</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// A path to a module which exports an async function that is triggered once before all test suites</span></span><br><span class="line">  <span class="comment">// globalSetup: undefined,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// A path to a module which exports an async function that is triggered once after all test suites</span></span><br><span class="line">  <span class="comment">// globalTeardown: undefined,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// A set of global variables that need to be available in all test environments</span></span><br><span class="line">  <span class="comment">// globals: &#123;&#125;,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// The maximum amount of workers used to run your tests. Can be specified as % or a number. E.g. maxWorkers: 10% will use 10% of your CPU amount + 1 as the maximum worker number. maxWorkers: 2 will use a maximum of 2 workers.</span></span><br><span class="line">  <span class="comment">// maxWorkers: &quot;50%&quot;,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// An array of directory names to be searched recursively up from the requiring module&#x27;s location</span></span><br><span class="line">  <span class="comment">// moduleDirectories: [</span></span><br><span class="line">  <span class="comment">//   &quot;node_modules&quot;</span></span><br><span class="line">  <span class="comment">// ],</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// An array of file extensions your modules use</span></span><br><span class="line">  <span class="comment">// moduleFileExtensions: [</span></span><br><span class="line">  <span class="comment">//   &quot;js&quot;,</span></span><br><span class="line">  <span class="comment">//   &quot;mjs&quot;,</span></span><br><span class="line">  <span class="comment">//   &quot;cjs&quot;,</span></span><br><span class="line">  <span class="comment">//   &quot;jsx&quot;,</span></span><br><span class="line">  <span class="comment">//   &quot;ts&quot;,</span></span><br><span class="line">  <span class="comment">//   &quot;tsx&quot;,</span></span><br><span class="line">  <span class="comment">//   &quot;json&quot;,</span></span><br><span class="line">  <span class="comment">//   &quot;node&quot;</span></span><br><span class="line">  <span class="comment">// ],</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// A map from regular expressions to module names or to arrays of module names that allow to stub out resources with a single module</span></span><br><span class="line">  <span class="comment">// moduleNameMapper: &#123;&#125;,</span></span><br><span class="line">  <span class="attr">moduleNameMapper</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;^@/(.*)$&#x27;</span>: <span class="string">&#x27;&lt;rootDir&gt;/src/$1&#x27;</span>, <span class="comment">// 解決 alias 問題</span></span><br><span class="line">    <span class="string">&#x27;\\.(css|less|sass|scss)$&#x27;</span>: <span class="string">&#x27;identity-obj-proxy&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;\\.(gif|ttf|eot|svg|png)$&#x27;</span>: <span class="string">&#x27;&lt;rootDir&gt;/test/__mocks__/fileMock.ts&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// An array of regexp pattern strings, matched against all module paths before considered &#x27;visible&#x27; to the module loader</span></span><br><span class="line">  <span class="comment">// modulePathIgnorePatterns: [],</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Activates notifications for test results</span></span><br><span class="line">  <span class="comment">// notify: false,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// An enum that specifies notification mode. Requires &#123; notify: true &#125;</span></span><br><span class="line">  <span class="comment">// notifyMode: &quot;failure-change&quot;,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// A preset that is used as a base for Jest&#x27;s configuration</span></span><br><span class="line">  <span class="comment">// preset: undefined,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Run tests from one or more projects</span></span><br><span class="line">  <span class="comment">// projects: undefined,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Use this configuration option to add custom reporters to Jest</span></span><br><span class="line">  <span class="comment">// reporters: undefined,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Automatically reset mock state before every test</span></span><br><span class="line">  <span class="comment">// resetMocks: false,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Reset the module registry before running each individual test</span></span><br><span class="line">  <span class="comment">// resetModules: false,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// A path to a custom resolver</span></span><br><span class="line">  <span class="comment">// resolver: undefined,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Automatically restore mock state and implementation before every test</span></span><br><span class="line">  <span class="comment">// restoreMocks: false,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// The root directory that Jest should scan for tests and modules within</span></span><br><span class="line">  <span class="comment">// rootDir: undefined,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// A list of paths to directories that Jest should use to search for files in</span></span><br><span class="line">  <span class="comment">// roots: [</span></span><br><span class="line">  <span class="comment">//   &quot;&lt;rootDir&gt;&quot;</span></span><br><span class="line">  <span class="comment">// ],</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Allows you to use a custom runner instead of Jest&#x27;s default test runner</span></span><br><span class="line">  <span class="comment">// runner: &quot;jest-runner&quot;,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// The paths to modules that run some code to configure or set up the testing environment before each test</span></span><br><span class="line">  <span class="comment">// setupFiles: [],</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// A list of paths to modules that run some code to configure or set up the testing framework before each test</span></span><br><span class="line">  <span class="comment">// setupFilesAfterEnv: [],</span></span><br><span class="line">  <span class="attr">setupFilesAfterEnv</span>: [<span class="string">&#x27;&lt;rootDir&gt;/test/jest.setup.ts&#x27;</span>],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The number of seconds after which a test is considered as slow and reported as such in the results.</span></span><br><span class="line">  <span class="comment">// slowTestThreshold: 5,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// A list of paths to snapshot serializer modules Jest should use for snapshot testing</span></span><br><span class="line">  <span class="comment">// snapshotSerializers: [],</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// The test environment that will be used for testing</span></span><br><span class="line">  <span class="attr">testEnvironment</span>: <span class="string">&#x27;jsdom&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Options that will be passed to the testEnvironment</span></span><br><span class="line">  <span class="comment">// testEnvironmentOptions: &#123;&#125;,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Adds a location field to test results</span></span><br><span class="line">  <span class="comment">// testLocationInResults: false,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// The glob patterns Jest uses to detect test files</span></span><br><span class="line">  <span class="comment">// testMatch: [</span></span><br><span class="line">  <span class="comment">//   &quot;**/__tests__/**/*.[jt]s?(x)&quot;,</span></span><br><span class="line">  <span class="comment">//   &quot;**/?(*.)+(spec|test).[tj]s?(x)&quot;</span></span><br><span class="line">  <span class="comment">// ],</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// An array of regexp pattern strings that are matched against all test paths, matched tests are skipped</span></span><br><span class="line">  <span class="comment">// testPathIgnorePatterns: [</span></span><br><span class="line">  <span class="comment">//   &quot;/node_modules/&quot;</span></span><br><span class="line">  <span class="comment">// ],</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// The regexp pattern or array of patterns that Jest uses to detect test files</span></span><br><span class="line">  <span class="comment">// testRegex: [],</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// This option allows the use of a custom results processor</span></span><br><span class="line">  <span class="comment">// testResultsProcessor: undefined,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// This option allows use of a custom test runner</span></span><br><span class="line">  <span class="comment">// testRunner: &quot;jest-circus/runner&quot;,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// A map from regular expressions to paths to transformers</span></span><br><span class="line">  <span class="comment">// transform: undefined,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// An array of regexp pattern strings that are matched against all source file paths, matched files will skip transformation</span></span><br><span class="line">  <span class="comment">// transformIgnorePatterns: [</span></span><br><span class="line">  <span class="comment">//   &quot;/node_modules/&quot;,</span></span><br><span class="line">  <span class="comment">//   &quot;\\.pnp\\.[^\\/]+$&quot;</span></span><br><span class="line">  <span class="comment">// ],</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">transform</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;^.+\\.tsx?$&#x27;</span>: [</span><br><span class="line">      <span class="string">&#x27;ts-jest&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        babelConfig,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// An array of regexp pattern strings that are matched against all modules before the module loader will automatically return a mock for them</span></span><br><span class="line">  <span class="comment">// unmockedModulePathPatterns: undefined,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Indicates whether each individual test should be reported during the run</span></span><br><span class="line">  <span class="comment">// verbose: undefined,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// An array of regexp patterns that are matched against all source file paths before re-running tests in watch mode</span></span><br><span class="line">  <span class="comment">// watchPathIgnorePatterns: [],</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Whether to use watchman for file crawling</span></span><br><span class="line">  <span class="comment">// watchman: true,</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> config;</span><br></pre></td></tr></table></figure>

<p>上面內容主要修改部分為</p>
<ul>
<li>如果你使用 <strong>TS</strong> 請把 <strong>Config</strong> 引入定義改為 <strong>JestConfigWithTsJest</strong> ，如果不是可以繼續使用 <strong>jest</strong> 引入的 <strong>Config</strong></li>
<li><strong>moduleNameMapper</strong> 的部分之後有用到第三方套件也都可以往內補資訊，功用是在跑每一個測試的時候，都會先去跑過一次這邊的檢查，有 <strong>Mapping</strong> 到的 <strong>key</strong> ，就會去使用 <strong>value</strong> 處引入的檔案，等等我們會繼續新增這塊，這邊可以先照上面寫</li>
<li><strong>transform</strong> 的部分是我們要帶入 <strong>babel</strong> 轉譯，因為我們測試檔案內會有許多較新的 <strong>ES</strong> 寫法</li>
</ul>
<p>再來我們需要建立幾個檔案，首先一樣在專案根目錄建立 <code>babel.config.ts</code></p>
<blockquote>
<p>再次提醒，如果不是使用 <strong>TS</strong> ，檔案跟設定請自行修改為 <strong>.js</strong> 以及非 <strong>ts</strong> 的設定，後續將不會再繼續提醒</p>
</blockquote>
<p>如果專案是使用 <strong>.ts</strong> 請輸入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  presets: [[&#x27;@babel/preset-env&#x27;, &#123; targets: &#123; node: &#x27;current&#x27; &#125;, modules: false &#125;], [&#x27;@babel/preset-react&#x27;, &#123; runtime: &#x27;automatic&#x27; &#125;], &#x27;@babel/preset-typescript&#x27;],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如果專案是使用 <strong>.js</strong> 請輸入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  presets: [[&#x27;@babel/preset-env&#x27;, &#123; targets: &#123; node: &#x27;current&#x27; &#125;, modules: false &#125;], [&#x27;@babel/preset-react&#x27;, &#123; runtime: &#x27;automatic&#x27; &#125;], &#x27;@babel/preset-typescript&#x27;],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提醒：如果專案有使用 <strong>TS</strong> ，記得要把該檔案加入到 <strong>tsconfig.json</strong> 的 <strong>include</strong></p>
</blockquote>
<p>再來建立資料夾 <code>test/__mocks__</code> 然後在這兩層的底下再新增一個檔案 <strong>fileMock.ts</strong> ，內容為下</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TS 請使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">&#x27;test-file-stub&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JS 請使用</span></span><br><span class="line"><span class="comment">// module.exports = &#x27;test-file-stub&#x27;;</span></span><br></pre></td></tr></table></figure>

<p>新增這個檔案用意主要是碰到 <code>\\.(gif|ttf|eot|svg|png)$</code> 這些靜態資源的時候，通常這些不是我們測試的重點，可以直接使用模擬的方式將靜態資源載入。</p>
<p>接下來一樣在 <code>test</code> 資料夾底下新增 <strong>jest.setup.ts</strong> ，內容為下</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解決 Property ‘toBeInTheDocument’ does not exist on type ‘Matchers’</span></span><br><span class="line"><span class="comment">// 測試檔案內如果有用到 toBeInTheDocument 需要再另外單獨引入，不然雖然測試會成功，但是編輯器會出現紅色蚯蚓</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@testing-library/jest-dom&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>這個部分主要是想避免使用 <code>toBeInTheDocument()</code> 的時候會出現錯誤</p>
<blockquote>
<p>註4：關於 <code>jest --init</code> 的配置介紹，可以參考 <a href="https://titangene.github.io/article/jest-build-test-env.html#Jest-Config">Jest：建置測試環境 (包含 Babel) 的章節 Jest Config</a></p>
</blockquote>
<hr>
<h3 id="撰寫基礎測試"><a href="#撰寫基礎測試" class="headerlink" title="撰寫基礎測試"></a>撰寫基礎測試</h3><p>這時候我們可以先來小試身手，先來一個簡單的測試</p>
<p>在專案根目錄底下建立 <code>__test__/utils</code> 資料夾，並且在底下建立 <strong>sum.test.ts</strong> ，內容輸入</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">sum</span> = (<span class="params"><span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span></span>) =&gt; a + b;</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;sum module&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;adds 1 + 2 to equal 3&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>)).<span class="title function_">toBe</span>(<span class="number">3</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>如果有出現 <strong>describe、it</strong> 找不到的情況，需要再檢查一下 <strong>@types&#x2F;jest</strong> 是否正常安裝成功，如果有問題可以刪掉 <strong>node_modules</strong> 重新安裝試試看</p>
<p>如果真的不行，下下策可以考慮安裝 <strong>@jest&#x2F;globals</strong> ，但需要在測試檔案開頭處都引入該套件</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; describe, expect, it &#125; <span class="keyword">from</span> <span class="string">&#x27;@jest/globals&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sum</span> = (<span class="params"><span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span></span>) =&gt; a + b;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...略</span></span><br></pre></td></tr></table></figure>

<p>接著可以執行 <code>npm run test</code> 跑跑看測試</p>
<p><img src="/images/others/loading.gif" data-original="/images/20250414/sum-test.png" alt="SUM Test"></p>
<p>如果 <strong>IDE</strong> 有提供測試功能，也可以直接在 <strong>IDE</strong> 上面點擊，如 <strong>VSCode</strong> 為例，可以點擊綠色勾勾的地方，在還沒跑測試之前應該是播放案件，這邊不要去點 <strong>Run(Vitest)</strong> ，因為我們不是使用 <strong>Vitest</strong></p>
<p><img src="/images/others/loading.gif" data-original="/images/20250414/run-test.gif" alt="RUN Test"></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Test Suites: 1 passed, 1 total</span><br><span class="line">Tests:       1 passed, 1 total</span><br><span class="line">Snapshots:   0 total</span><br><span class="line">Time:        6.251 s</span><br></pre></td></tr></table></figure>

<p>如果看到 <code>1 passed, 1 total</code> 就代表通過了，如果有寫錯，在終端機也會爆出錯誤</p>
<hr>
<h3 id="撰寫-React-js-測試"><a href="#撰寫-React-js-測試" class="headerlink" title="撰寫 React.js 測試"></a>撰寫 React.js 測試</h3><p>基本上普通的測試應該大家都能寫也會寫，真正難的通常都是自己開始動工後，就像以前考試老師說的我都懂…</p>
<p>首先我們先建立一支普通的 <strong>React.js Component</strong> ，這邊筆者使用專案已經存在的 <strong>Link</strong> 元件作為範例，同時也會告訴你碰到的坑</p>
<p>先在專案內建立該元件，並填入以下內容</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> clsx <span class="keyword">from</span> <span class="string">&#x27;clsx&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FaExternalLinkAlt</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-icons/fa&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Props</span> &#123;</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">  <span class="attr">link</span>?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">className</span>?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">showIcon</span>?: <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="attr">iconClassName</span>?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">target</span>?: <span class="string">&#x27;_blank&#x27;</span> | <span class="string">&#x27;_self&#x27;</span> | <span class="string">&#x27;_parent&#x27;</span> | <span class="string">&#x27;_top&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Link</span> = (<span class="params">&#123; children, link = <span class="string">&#x27;&#x27;</span>, className = <span class="string">&#x27;&#x27;</span>, showIcon = <span class="literal">false</span>, iconClassName = <span class="string">&#x27;&#x27;</span>, target = <span class="string">&#x27;_self&#x27;</span> &#125;: <span class="title class_">Props</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;link</span> ? <span class="attr">link</span> <span class="attr">:</span> <span class="attr">undefined</span>&#125; <span class="attr">className</span>=<span class="string">&#123;clsx(className,</span> &#x27;<span class="attr">text-gray-400</span> <span class="attr">hover:text-white</span>&#x27;)&#125; <span class="attr">target</span>=<span class="string">&#123;target&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&#x27;inline-flex items-center&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;children&#125; &#123;showIcon &amp;&amp; <span class="tag">&lt;<span class="name">FaExternalLinkAlt</span> <span class="attr">className</span>=<span class="string">&#123;clsx(</span>&#x27;<span class="attr">text-xs</span> <span class="attr">ml-1</span>&#x27;, <span class="attr">iconClassName</span>)&#125; /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Link</span>;</span><br></pre></td></tr></table></figure>

<p>同時在 <code>__test__</code> 資料夾底下新增 <code>components</code> 資料夾，並且新增<br><strong>Link.test.tsx</strong> 檔案，內容為下</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 雖然有在設定檔 jest.setup.ts 全域引入，但這邊需要再度引入才不會出現紅色蚯蚓</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@testing-library/jest-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; render, screen &#125; <span class="keyword">from</span> <span class="string">&#x27;@testing-library/react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Link</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Link/index&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Link Component Test&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should render correctly&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">link</span>=<span class="string">&#x27;/&#x27;</span>&gt;</span>Home Page<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span>);</span><br><span class="line">    <span class="title function_">expect</span>(screen.<span class="title function_">getByText</span>(<span class="string">&#x27;Home Page&#x27;</span>)).<span class="title function_">toBeInTheDocument</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在 <strong>jest.setup.ts</strong> 我們有配置 <strong>@testing-library&#x2F;jest-dom</strong> 的引入，跑編譯的情況下會通過，但是 <strong>IDE</strong> 還是會出錯誤，找不到 <code>toBeInTheDocument()</code>，所以這邊我們還是必須要加上這個引用</p>
<p>雖然前面提到我們是想跑單元測試，但這邊我們要先確保元件可以正常執行，且我們可能會測試使用者模擬點擊的情況，所以在測試中我們會去渲染 <strong>React Component</strong></p>
<p>接著執行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm run <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20250414/clsx-error.png" alt="Third part plugin error"></p>
<p>上面的測試實際執行後會發現測試出錯了，出現了好一大串錯誤，仔細看一下中間的部分，會發現錯誤的部分似乎是落在 <strong>clsx(註6)</strong> 這個套件</p>
<p>開始寫測試後，你會發現常常會碰到一些第三方套件的引入，對我們來說，第三方套件應該在作者實作推出後，就要確跑程式沒問題，所以基本上我們是持著『程式本善』的心情去看待它，所以在測試時我們大部分時候都會把第三方套件 <strong>Mock</strong> 掉，並且直接改成我們的預期結果</p>
<p>這邊我們需要直接到 <code>test/__mocks__</code> 資料夾底下，新增 <strong>clsx.ts</strong> 的檔案，內容貼上</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mockClsx = jest.<span class="title function_">fn</span>().<span class="title function_">mockImplementation</span>(<span class="function">(<span class="params">...args</span>) =&gt;</span> args.<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>));</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> mockClsx;</span><br></pre></td></tr></table></figure>

<p>接著到 <strong>jest.config.ts</strong> 去，在中間 <strong>moduleNameMapper</strong> 設定處補上 <strong>clsx</strong> 的配置，並把剛剛的檔案引入進來</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//...略</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">config</span>: <span class="title class_">JestConfigWithTsJest</span> = &#123;</span><br><span class="line">  <span class="comment">//...略</span></span><br><span class="line">  <span class="attr">moduleNameMapper</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;^@/(.*)$&#x27;</span>: <span class="string">&#x27;&lt;rootDir&gt;/src/$1&#x27;</span>, <span class="comment">// 解決 alias 問題</span></span><br><span class="line">    <span class="string">&#x27;\\.(css|less|sass|scss)$&#x27;</span>: <span class="string">&#x27;identity-obj-proxy&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;\\.(gif|ttf|eot|svg|png)$&#x27;</span>: <span class="string">&#x27;&lt;rootDir&gt;/test/__mocks__/fileMock.ts&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;^clsx$&#x27;</span>: <span class="string">&#x27;&lt;rootDir&gt;/test/__mocks__/clsx.ts&#x27;</span>, <span class="comment">// 新增這行</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//...略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然後再跑一次</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm run <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20250414/npm-run-test-after-clsx.gif" alt="Run Test after clsx setting"></p>
<p>恭喜你，這次就應該能透通過了！</p>
<p>之後如果還有碰到測試需要引入第三方的套件，都可以像這樣去使用，下面再<a href="#%E9%A1%8D%E5%A4%96%E5%95%8F%E9%A1%8C">額外問題</a>的部份會提到 <a href="#i18n-%E7%9A%84-Mock">i18n 的 Mock</a></p>
<blockquote>
<p>註6：關於 <a href="https://github.com/lukeed/clsx">clsx</a> 這個套件是用來組合 <strong>class</strong> 名稱的，也能讓你在 <strong>React.js className</strong> 裡面寫判斷，甚至是 <code>true &amp;&amp; &#39;text-red-500&#39;</code> 這種寫法</p>
</blockquote>
<hr>
<h3 id="測試覆蓋率"><a href="#測試覆蓋率" class="headerlink" title="測試覆蓋率"></a>測試覆蓋率</h3><p><img src="/images/others/loading.gif" data-original="/images/20250414/coverage-folder.png" alt="Coverage"></p>
<p>測試跑完之後，你應該會在專案資料夾跟目錄看見 <strong>coverage</strong> ，這個資料夾打開後可以找到 <strong>lcov-report</strong> 資料夾，並打開底下的 <strong>index.html</strong> ，路徑為 <code>coverage/lcov-report/index.html</code>，打開它</p>
<p><img src="/images/others/loading.gif" data-original="/images/20250414/coverage-report.png" alt="Coverage Report"></p>
<p>打開後會發現裡面有一個表格，表格下的資料代表的是你的測試有覆蓋到的檔案</p>
<p>在表格的 Title 有幾個種類，意思分別是</p>
<ul>
<li><p>File(檔案&#x2F;文件)</p>
<ul>
<li>只要有覆蓋到測試的檔案都會被列出來</li>
</ul>
</li>
<li><p>Statements(陳述式)</p>
<ul>
<li>代表該檔案中的陳述式有多少被執行過</li>
<li>例如 <code>if(A === true &amp;&amp; B === true) &#123;&#125;</code> 加上 <code>if (A === true &amp;&amp; B === false)</code>，那麼要執行到所有陳述式，至少要符合 <strong>1. A &#x3D; true &amp;&amp; B &#x3D; true 2. A &#x3D; true &amp;&amp; B &#x3D; false</strong></li>
</ul>
</li>
<li><p>Branches(分支)</p>
<ul>
<li>代表所有條件分支</li>
<li>覆蓋率 &#x3D; 已測試的分支 &#x2F; 總分支數量。</li>
<li>若 if 語句的 true 和 false 都有被測試到，則該 if 語句的分支覆蓋率為 100%</li>
</ul>
</li>
<li><p>Functions(函式)</p>
<ul>
<li>代表該檔案內的函式（function 或 arrow function）被測試的比例</li>
<li>覆蓋率 &#x3D; 被執行的函式數 &#x2F; 總函式數量</li>
</ul>
</li>
<li><p>Lines(行數)</p>
<ul>
<li>代表有執行過的程式碼行數與總行數的比例</li>
<li>這與 Statements 相似，但更細緻，通常用來衡量某行內是否真的執行</li>
</ul>
</li>
<li><p>沒有 Title 的欄位</p>
<ul>
<li>被執行的函式數 &#x2F; 總函式數量</li>
</ul>
</li>
</ul>
<p>基本上我們比較關注 <strong>Statements</strong> 再來是 <strong>Branches</strong> ，樂觀的情況是我們必須要確保要測試的程式碼都要涵蓋在內，這樣才能確保我們的程式碼都受到保護</p>
<p>但實務上我們還是要看我們的目的，並非只是一昧的提高覆蓋率就是棒</p>
<blockquote>
<p><em><strong>最後記得在 .gitignore 內加上 coverage，不要把這份內容上傳了</strong></em></p>
</blockquote>
<hr>
<h3 id="額外問題"><a href="#額外問題" class="headerlink" title="額外問題"></a>額外問題</h3><h4 id="i18n-的-Mock"><a href="#i18n-的-Mock" class="headerlink" title="i18n 的 Mock"></a>i18n 的 Mock</h4><p><img src="/images/others/loading.gif" data-original="/images/20250414/i18n-error.png" alt="I18n Error"></p>
<p>如果你用 <strong>React.js</strong> 跑測試，且元件內有使用到 <strong>i18n</strong> 的話，可能會出現上面的錯誤</p>
<p>依照前面的說明理解，第三方套件要測試我們基本上都是 <strong>Mock Mock Mock</strong> ，而 <strong>Mock</strong> 的流程不外乎就是在 <code>test/__mocks__</code> 底下新增要模擬的內容(註7)</p>
<p>新增一支叫做 <strong>reactI18next.ts</strong> 的檔案，然後內容貼上</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">useTranslation</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">t</span>: <span class="function">(<span class="params"><span class="attr">key</span>: <span class="built_in">string</span></span>) =&gt;</span> key,</span><br><span class="line">    <span class="attr">i18n</span>: &#123;</span><br><span class="line">      <span class="attr">changeLanguage</span>: jest.<span class="title function_">fn</span>(),</span><br><span class="line">      <span class="attr">language</span>: <span class="string">&#x27;en&#x27;</span>, <span class="comment">// 取決於你的 I18n key 叫什麼，這行也可以不用</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  useTranslation,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>jest.fn()</code> 其實就是模擬一個函式，並且我們可以模擬函式回傳，有興趣可以參考 <a href="https://medium.com/unalai/jest-%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-mock-functions-4dfe8804f2c0">JEST 單元測試學習筆記 | Mock Functions</a></p>
<blockquote>
<p>對於 <strong>i18n</strong> 的 <strong>test mock</strong> 其實還有很多方式，可以參考 <strong><a href="https://react.i18next.com/misc/testing">react-i18n documentation - Testing</a></strong></p>
</blockquote>
<p>接著我們再去 <strong>jest.config.ts</strong> 補上設定，補上 <strong>react-i18next</strong> 的設定如下</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//...略</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">config</span>: <span class="title class_">JestConfigWithTsJest</span> = &#123;</span><br><span class="line">  <span class="comment">//...略</span></span><br><span class="line">  <span class="attr">moduleNameMapper</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;^@/(.*)$&#x27;</span>: <span class="string">&#x27;&lt;rootDir&gt;/src/$1&#x27;</span>, <span class="comment">// 解決 alias 問題</span></span><br><span class="line">    <span class="string">&#x27;\\.(css|less|sass|scss)$&#x27;</span>: <span class="string">&#x27;identity-obj-proxy&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;\\.(gif|ttf|eot|svg|png)$&#x27;</span>: <span class="string">&#x27;&lt;rootDir&gt;/test/__mocks__/fileMock.ts&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;^clsx$&#x27;</span>: <span class="string">&#x27;&lt;rootDir&gt;/test/__mocks__/clsx.ts&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;react-i18next&#x27;</span>: <span class="string">&#x27;&lt;rootDir&gt;/test/__mocks__/reactI18next.ts&#x27;</span>, <span class="comment">// 新增這行</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//...略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之後再跑一次測試</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm run <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/others/loading.gif" data-original="/images/20250414/npm-run-test-after-i18n.gif" alt="Npm run test after i18n setting"></p>
<p>這時候可以看到測試就能通過了，上面範例有紅色的部分是因為目前測試還沒有涵蓋到這部分，可以略過紅色部分，而有一些黃色的部分也是測試希望你能把涵蓋率補高一點</p>
<blockquote>
<p>註7：請注意，如果是測試會常常跑到的第三方套件，建議在新增在這邊，然後透過 <strong>jest.config.ts</strong> 的 <strong>moduleNameMapper</strong> 去引入，但如果只是某幾個或是某一個測試會用到，就直接在測試檔案裡面使用 <strong>mock</strong> 吧</p>
</blockquote>
<hr>
<h3 id="React-js-架構探討"><a href="#React-js-架構探討" class="headerlink" title="React.js 架構探討"></a>React.js 架構探討</h3><blockquote>
<p><em><strong>這部分沒興趣可以跳過，這邊比較多部分會講解概念，不會實作太多程式碼</strong></em></p>
</blockquote>
<p><img src="/images/others/loading.gif" data-original="/images/20250414/react-flow.png" alt="React Flow"></p>
<p>前面有提到，之前有跟主管在探討 <strong>React.js</strong> 的部分能不能做一些系統性規劃，對於後端來說，他們可以比較輕易的整理出 <strong>MVC(註8)</strong> 架構，但前端的程式碼大部分的工程師都像是義大利麵一樣，寫成一團</p>
<p>在近幾年開始有 <strong>Component</strong> 拆分後，有慢慢比較好一點，但很多東西還是混在一起，這就會造成測試困難，耦合太嚴重</p>
<p>在與主管討論之後，其實目前我們的專案最基本最基本就是把 <strong>View</strong> 跟 <strong>邏輯</strong> 拆開，這是絕對守則，唯有如此，才能跑測試，後續修改也比較不麻煩</p>
<p>基本上你看到大部分得程式碼，都會把邏輯寫在 <strong>Component</strong> 內，就算該工程師已經把該檔案拆的十分乾淨了，如下</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      You pressed me &#123;count&#125; times</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>來自官網的範例 <a href="https://react.dev/blog/2023/03/16/introducing-react-dev#examples-basic">Basic useState examples</a></p>
</blockquote>
<p>這種情況如果今天你想要單純測試 <strong>handleClick</strong> ，勢必要 <strong>Counter</strong> 整個一起放進來測試，但如果今天需求變了，想要把這個畫面做點調整，很大機率會跟你的測試發生碰撞</p>
<p>比較好得做法是都把邏輯丟進去另一支檔案，而進行邏輯操作的部分我們統稱為 <strong>Controller</strong> ，另外因為 <strong>React.js</strong> 的 <strong>custom hook(註9)</strong> 概念，在這邊筆者都將他們命名為 <strong>useXXXController</strong></p>
<p>我們可以建立一支 <strong>useCounterController.ts</strong> 的檔案，內容不涉及任何 <strong>View</strong> 的部分，把上面檔案改為如下</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; count, handleClick &#125; = <span class="title function_">useCounter</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      You pressed me &#123;count&#125; times</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在新增的 <strong>useCounterController.ts</strong> 檔案寫上</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useCounterController</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    count,</span><br><span class="line">    handleClick</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如此一來就能去單獨測試我們的 <strong>useCounterController.ts</strong> 了，後續要更改 <strong>View</strong> 的部分也不用擔心會影響到邏輯部分</p>
<p>另外，大部分工程師都習慣在 <strong>Controller</strong> 直接去 <strong>fetch</strong> 或者透過 <strong>axios</strong> 請求資料</p>
<p>依照 <strong>SOLID(註10)</strong> 的依賴反轉概念，高層次的模組不應該依賴於低層次的模組，所以我們應該將打 <strong>API</strong> 的部分抽離出來封裝成一個 <strong>Server</strong> 層，這部分是低層次的模組，當低層次的模組要進行更換時，例如 <strong>Fetch</strong> 更換為 <strong>Axios</strong> 或 <strong>XHR</strong> ，我們都不應該擔心是不是 <strong>Controller</strong> 的高層次模組會壞掉，只要專心修改 <strong>Server</strong> 層就好，透過 <strong>Redux</strong> 的 <strong>Thunk</strong> 可以做到這點</p>
<p>基本上目前的 <strong>Controller</strong> 及 <strong>View</strong> 拆分，應該能滿足基本的單元測試需求</p>
<blockquote>
<p>註8：<a href="https://www.runoob.com/design-pattern/mvc-pattern.html">MVC 模試？</a></p>
</blockquote>
<blockquote>
<p>註9：<a href="https://react.dev/learn/reusing-logic-with-custom-hooks">Reusing Logic with Custom Hooks</a></p>
</blockquote>
<blockquote>
<p>註10：<a href="https://medium.com/%E7%A8%8B%E5%BC%8F%E6%84%9B%E5%A5%BD%E8%80%85/%E4%BD%BF%E4%BA%BA%E7%98%8B%E7%8B%82%E7%9A%84-solid-%E5%8E%9F%E5%89%87-%E7%9B%AE%E9%8C%84-b33fdfc983ca">使人瘋狂的 SOLID 原則：目錄</a></p>
</blockquote>
<hr>
<h2 id="Conclusion-結論"><a href="#Conclusion-結論" class="headerlink" title="Conclusion &amp; 結論"></a>Conclusion &amp; 結論</h2><p>之前一直想了好久要引入測試，途中也嘗試了 <strong>Vitest</strong> ，但是光配置就被搞死了，後來因為團隊夥伴也剛好安排到測試的這一項目標，所以就一起研究了，沒想到這次單純使用 <strong>jest</strong> 去跑 <strong>test</strong> 還滿順利的，環境相對單純多了</p>
<p>在測試的部分其實還缺少對於 <strong>Redux</strong> 或者 <strong>API</strong> 的測試，後續如果有做到這一塊，筆者也會慢慢補上來，希望目前的部分能幫助到需要幫助的人</p>
<p>測試的路上你我不孤單，但還是祝福每間公司需求都明確，不要三五一小改，敏捷開發當真敏捷開發</p>
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><ul>
<li><a href="https://medium.com/@weiyun0912/jest-react-typescript-%E7%92%B0%E5%A2%83%E8%A8%AD%E5%AE%9A-a459ad4484d6">Jest React (TypeScript) 環境設定 (react testing)</a></li>
<li><a href="https://www.babeljs.cn/docs">babel 是什麼？</a></li>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/API/Document_Object_Model">文件物件模型 (DOM)</a></li>
<li><a href="https://juejin.cn/post/7029304095944998926">React-5 测试模拟用户事件</a><br><a href="https://titangene.github.io/article/jest-build-test-env.html#Jest-Config">Jest：建置測試環境 (包含 Babel)</a></li>
<li><a href="https://react.i18next.com/misc/testing">react-i18n documentation - Testing</a></li>
<li><a href="https://react.dev/blog/2023/03/16/introducing-react-dev#examples-basic">Basic useState examples</a></li>
<li><a href="https://www.runoob.com/design-pattern/mvc-pattern.html">MVC 模試？</a></li>
<li><a href="https://react.dev/learn/reusing-logic-with-custom-hooks">Reusing Logic with Custom Hooks</a></li>
<li><a href="https://medium.com/%E7%A8%8B%E5%BC%8F%E6%84%9B%E5%A5%BD%E8%80%85/%E4%BD%BF%E4%BA%BA%E7%98%8B%E7%8B%82%E7%9A%84-solid-%E5%8E%9F%E5%89%87-%E7%9B%AE%E9%8C%84-b33fdfc983ca">使人瘋狂的 SOLID 原則：目錄</a></li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
        <category>Note</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
        <tag>FrameWork</tag>
        <tag>React</tag>
        <tag>Jest</tag>
      </tags>
  </entry>
</search>
